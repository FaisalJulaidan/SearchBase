import json
import logging

import requests
from requests_oauthlib import OAuth2Session

from enums import DataType as DT
from models import Callback, ChatbotSession

# Bullhorn Notes:
# access_token (used to generate rest_token) lasts 10 minutes, needs to be requested by using the auth from the client
# refresh_token (can be used to generate access_token) - generated with access_token on auth, ...
#       ... expires after 1 use (new one comes in), no time limit
# BhRestToken (rest_token) (used to verify users when making queries), expires in 10 minutes
# submitting a new candidate has no required* fields


def login(auth):
    try:
        authCopy = dict(auth)  # we took copy to delete domain later only from the copy
        print("authCopy :", authCopy)
        # request token by using callback URL, auth url, access token url, client id, client secret
        oauth = OAuth2Session(client_id=authCopy.get("client_id", ""), redirect_uri=authCopy.get("redirect_uri", ""))
        print("oauth :", oauth)
        authorization_url, state = oauth.authorization_url("https://auth9.bullhornstaffing.com/oauth/authorize")
        print("authorization_url :", authorization_url)
        print("state :", state)

        print('Please go to %s and authorize access.' % authorization_url)
        authorization_response = 'https://thesearchbase.com/bullhorn_callback'
        print("authorization_response :", authorization_response)
        # atoken = oauth.fetch_token(authorization_url)
        r = requests.post(authorization_url)
        print("r :", r.text)

        token = oauth.fetch_token(
            'https://auth9.bullhornstaffing.com/oauth/token',
            code=authorization_response,
            client_secret=authCopy.get("client_secret", ""))
        print("token :", token)

        r = oauth.get('https://rest.bullhornstaffing.com/rest-services/login?version=*')
        print("r :", r)

        if not r.ok:
            return Callback(False, r.json().get('ERROR_MSG', r.text))

        # Logged in successfully
        return Callback(True, 'Logged in successfully')

    except Exception as exc:
        logging.error("CRM.Bullhorn.login() ERROR: " + str(exc))
        return Callback(False, str(exc))


def retrieveRestToken():  # acquired by using access_token, which can be generated by auth or by refresh_token
    try:
        # check if refresh_token exists
        # if it does use it to generate access_token and then rest_token

        # else if not go through login again with the saved auth

        # else raise exception and end the query with fail "CRM not set up correctly"

        return Callback(True, 'Logged in successfully', {
            "rest_token": "dd1fb359-f129-48ac-8b9c-1be2751b9b3c",  # expires so it needs to be generated after expiry
            "rest_url": "https://rest91.bullhornstaffing.com/rest-services/5i3n9d/"  # taken from User on connect CRM
        })

    except Exception as exc:
        logging.error("CRM.Bullhorn.retrieveRestToken() ERROR: " + str(exc))
        return Callback(False, str(exc))


def insertCandidate(auth, session: ChatbotSession) -> Callback:
    try:
        callback: Callback = retrieveRestToken()  # takes auth?
        if not callback.Success:
            return callback

        url = callback.Data.get("rest_url", "") + "entity/Candidate" + "?BhRestToken=" + callback.Data.get("rest_token",
                                                                                                           "")
        headers = {'Content-Type': 'application/json'}

        # New candidate details
        body = {
            "name": " ".join(
                session.Data.get('keywordsByDataType').get(DT.ClientName.value['name'], ["Unavailable - TSB"])),
            "mobile":
                session.Data.get('keywordsByDataType').get(DT.ClientTelephone.value['name'], "Unavailable - TSB")[0],
            "address": {
                "city": " ".join(
                    session.Data.get('keywordsByDataType').get(DT.ClientLocation.value['name'], ["Unavailable - TSB"])),
            },
            "email": " ".join(
                session.Data.get('keywordsByDataType').get(DT.ClientEmail.value['name'], ["Unavailable - TSB"])),
        }

        # Send request
        r = requests.put(url, headers=headers, data=json.dumps(body))

        # When not ok
        if not r.ok: raise Exception(r.json().get('ERROR_MSG', r.text))

        return Callback(True, r.text)

    except Exception as exc:
        logging.error("CRM.Bullhorn.insertCandidate() ERROR: " + str(exc))
        return Callback(False, str(exc))


def insertClient(auth, session: ChatbotSession) -> Callback:
    try:
        callback: Callback = retrieveRestToken()
        if not callback.Success:
            return callback

        url = "https://developerconnection.adaptondemand.com/WebApp/api/v1/companies"
        headers = {'Content-Type': 'application/json', 'x-adapt-sid': callback.Data}

        # New candidate details
        body = {
            "CLIENT_GEN": {
                "CLIENT_TYPE": 8252178,
                "NAME": " ".join(session.Data.get('keywordsByDataType')
                                 .get(DT.ClientName.value['name'], "Unavailable - TSB"))
            },
            "TELEPHONE": [
                {
                    "OCC_ID": "Work",
                    "TEL_NUMBER": session.Data.get('keywordsByDataType')
                        .get(DT.ClientTelephone.value['name'], ["Unavailable - TSB"])[0]
                }
            ],
            "ADDRESS": [{
                "OCC_ID": "Primary",
                "STREET1": " ".join(session.Data.get('keywordsByDataType')
                                    .get(DT.ClientLocation.value['name'], "Unavailable - TSB")),
            }],
            "NOTES": " ".join(session.Data.get('keywordsByDataType')
                              .get(DT.ClientEmail.value['name'], "Unavailable - TSB")),
        }

        # Send request
        r = requests.post(url, headers=headers, data=json.dumps(body))

        # When not ok
        if not r.ok: raise Exception(r.json().get('ERROR_MSG', r.text))

        return Callback(True, r.text)

    except Exception as exc:
        logging.error("CRM.Adapt.insertClient() ERROR: " + str(exc)
                      + " Username: " + auth.get('username', 'Unknown')
                      + " Domain: " + auth.get('domain', 'Unknown'))
        return Callback(False, str(exc))
