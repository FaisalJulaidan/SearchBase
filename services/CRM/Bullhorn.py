import json
import logging

import requests
from requests_oauthlib import OAuth2Session

from enums import DataType as DT
from models import Callback, ChatbotSession


# Bullhorn Notes:
# access_token (used to generate rest_token) lasts 10 minutes, needs to be requested by using the auth from the client
# refresh_token (can be used to generate access_token) - generated with access_token on auth, ...
#       ... expires after 1 use (new one comes in), no time limit
# BhRestToken (rest_token) (used to verify users when making queries), expires in 10 minutes
# submitting a new candidate has no required* fields
# auth needs to contain auth data + rest_token, rest_url, access_token, refresh_token (retrieved upon connecting)


# failing at fetch_token() currently, wants access_token, requests.post(authorization_url) returns html login page
from services.CRM.crm_services import updateByCompanyAndType


def login(auth):
    try:
        authCopy = dict(auth)  # we took copy to delete domain later only from the copy
        print("authCopy :", authCopy)
        # request token by using callback URL, auth url, access token url, client id, client secret
        oauth = OAuth2Session(client_id=authCopy.get("client_id", ""), redirect_uri=authCopy.get("redirect_uri", ""))
        print("oauth :", oauth)
        authorization_url, state = oauth.authorization_url("https://auth9.bullhornstaffing.com/oauth/authorize")
        print("authorization_url :", authorization_url)
        print("state :", state)

        print('Please go to %s and authorize access.' % authorization_url)
        authorization_response = 'https://thesearchbase.com/bullhorn_callback'
        print("authorization_response :", authorization_response)
        # atoken = oauth.fetch_token(authorization_url)
        r = requests.post(authorization_url)
        print("r :", r.text)

        token = oauth.fetch_token(
            'https://auth9.bullhornstaffing.com/oauth/token',
            code=authorization_response,
            client_secret=authCopy.get("client_secret", ""))
        print("token :", token)

        r = oauth.get('https://rest.bullhornstaffing.com/rest-services/login?version=*')
        print("r :", r)

        if not r.ok:
            raise Exception(r.text)

        result_body = json.loads(r.text)

        authCopy["access_token"] = result_body.get("access_token")
        authCopy["refresh_token"] = result_body.get("refresh_token")
        authCopy["rest_token"] = ""

        # Logged in successfully
        return Callback(True, 'Logged in successfully', authCopy)

    except Exception as exc:
        logging.error("CRM.Bullhorn.login() ERROR: " + str(exc))
        return Callback(False, str(exc))


def retrieveRestToken(auth, companyID):  # acquired by using access_token, which can be generated by auth or by refresh_token
    try:
        authCopy = dict(auth)
        headers = {'Content-Type': 'application/json'}
        # check if refresh_token exists
        # if it does use it to generate access_token and refresh_token
        if authCopy.get("refresh_token"):
            url = "https://auth.bullhornstaffing.com/oauth/token?grant_type=refresh_token&refresh_token=" + \
                  authCopy.get("refresh_token") + \
                  "&client_id=" + authCopy.get("client_id") + \
                  "&client_secret=" + authCopy.get("client_secret")

            get_access_token = requests.put(url, headers=headers)
            if get_access_token.ok:
                print(get_access_token.text)
                print(type(get_access_token.text))
                result_body = json.loads(get_access_token.text)
                authCopy["access_token"] = result_body.get("access_token")
                authCopy["refresh_token"] = result_body.get("refresh_token")
                authCopy["rest_token"] = ""
            else:
                raise Exception("CRM not set up properly")
        # else if not go through login again with the saved auth
        else:
            login_callback: Callback = login(authCopy)
            if not login_callback.Success:
                raise Exception(login_callback.Message)
            authCopy = dict(login_callback.Data)

        url = "https://rest.bullhornstaffing.com/rest-services/login?version=*&" + \
              "access_token=" + authCopy.get("access_token")

        get_rest_token = requests.put(url, headers=headers)
        if not get_rest_token.ok:
            raise Exception("Failure in generating rest_token")
        result_body = json.loads(get_rest_token.text)

        authCopy["rest_token"] = result_body.get("BhRestToken")
        authCopy["rest_url"] = result_body.get("restUrl")

        updateAuth_callback = updateByCompanyAndType("Bullhorn", companyID, authCopy)
        if not updateAuth_callback.Success:
            raise Exception("Could not store new auth for crm")

        return Callback(True, 'Logged in successfully', {
            "rest_token": authCopy.get("rest_token"),
            "rest_url": authCopy.get("rest_url")
        })

    except Exception as exc:
        logging.error("CRM.Bullhorn.retrieveRestToken() ERROR: " + str(exc))
        return Callback(False, str(exc))


# create query url and also tests the BhRestToken to see if it still valid, if not it generates a new one and new url
def sendQuery(auth, body, companyID):
    try:
        authCopy = dict(auth)

        # set up initial url
        url = authCopy.get("rest_url", "") + "entity/Candidate" + "?BhRestToken=" + authCopy.get("rest_token", "")
        headers = {'Content-Type': 'application/json'}

        # test the BhRestToken (rest_token)
        test = requests.put(url, headers=headers, data=json.dumps(body))
        if test.status_code == 401:  # wrong rest token
            callback: Callback = retrieveRestToken(auth, companyID)
            if callback.Success:
                url = authCopy.get("rest_url", "") + "entity/Candidate" + "?BhRestToken=" + \
                      callback.Data.get("rest_token", "")
                r = requests.put(url, headers=headers, data=json.dumps(body))
                if not r.ok:
                    raise Exception(r.text + ". Query could not be sent")
            else:
                raise Exception(callback.Message)
        elif test.status_code != 400:  # token correct but no submitted data
            raise Exception("Rest url for query is incorrect")

        return Callback(True, "URL has been created", url)

    except Exception as exc:
        logging.error("CRM.Bullhorn.sendQuery() ERROR: " + str(exc))
        return Callback(False, str(exc))


def insertCandidate(auth, session: ChatbotSession) -> Callback:
    try:

        # New candidate details
        body = {
            "name": " ".join(
                session.Data.get('keywordsByDataType').get(DT.CandidateName.value['name'])),
            "mobile":
                session.Data.get('keywordsByDataType').get(DT.CandidateTelephone.value['name'])[0],
            "address": {
                "city": " ".join(
                    session.Data.get('keywordsByDataType').get(DT.CandidateLocation.value['name'])),
            },
            "email": " ".join(
                session.Data.get('keywordsByDataType').get(DT.CandidateEmail.value['name'])),
        }

        # send query
        sendQuery_callback: Callback = sendQuery(auth, body, session.Assistant.CompanyID)
        if not sendQuery_callback.Success:
            raise Exception(sendQuery_callback.Message)

        return Callback(True, sendQuery_callback.Message)

    except Exception as exc:
        logging.error("CRM.Bullhorn.insertCandidate() ERROR: " + str(exc))
        return Callback(False, str(exc))


def insertClient(auth, session: ChatbotSession) -> Callback:
    try:
        # get query url
        insertCompany_callback: Callback = insertCompany(auth, session)
        if not insertCompany_callback.Success:
            raise Exception(insertCompany_callback.Message)

        insertClient_callback: Callback = insertClientContact(auth, session,
                                                              insertCompany_callback.Data.get("changedEntityId"))
        if not insertClient_callback.Success:
            raise Exception(insertClient_callback.Message)

        return Callback(True, "Client has been added")

    except Exception as exc:
        logging.error("CRM.Bullhorn.insertClient() ERROR: " + str(exc))
        return Callback(False, str(exc))


def insertClientContact(auth, session: ChatbotSession, bhCompanyID) -> Callback:
    try:

        # New candidate details
        body = {
            "name": " ".join(
                session.Data.get('keywordsByDataType').get(DT.ClientName.value['name'])),
            "mobile":
                session.Data.get('keywordsByDataType').get(DT.ClientTelephone.value['name'])[0],
            "address": {
                "city": " ".join(
                    session.Data.get('keywordsByDataType').get(DT.ClientLocation.value['name'])),
            },
            "email": " ".join(
                session.Data.get('keywordsByDataType').get(DT.ClientEmail.value['name'])),
            "clientCorporation": {"id": bhCompanyID}
        }

        # send query
        sendQuery_callback: Callback = sendQuery(auth, body, session.Assistant.CompanyID)
        if not sendQuery_callback.Success:
            raise Exception(sendQuery_callback.Message)

        return Callback(True, sendQuery_callback.Message)

    except Exception as exc:
        logging.error("CRM.Bullhorn.insertClientContact() ERROR: " + str(exc))
        return Callback(False, str(exc))


def insertCompany(auth, session: ChatbotSession) -> Callback:
    try:

        # New candidate details
        body = {
            "name": " ".join(
                session.Data.get('keywordsByDataType').get(DT.CompanyName.value['name'], ["Undefined Company - TSB"])),
        }

        # send query
        sendQuery_callback: Callback = sendQuery(auth, body, session.Assistant.CompanyID)
        if not sendQuery_callback.Success:
            raise Exception(sendQuery_callback.Message)

        return Callback(True, sendQuery_callback.Message)

    except Exception as exc:
        logging.error("CRM.Bullhorn.insertCompany() ERROR: " + str(exc))
        return Callback(False, str(exc))
