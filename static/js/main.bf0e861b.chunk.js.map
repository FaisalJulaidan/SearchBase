{"version":3,"sources":["application/Dashboard/Profile/Profile.module.less","components/Header/Header.module.less","application/Dashboard/Assistants/Assistant/UserInput/Header/Header.module.less","application/Dashboard/Assistants/Assistant/Flow/Flow.module.less","application/Dashboard/Assistants/Assistant/Flow/Blocks/Blocks.module.less","application/Dashboard/Assistants/Assistant/Solutions/Solutions.module.less","application/Dashboard/Assistants/Assistant/Solutions/Header/Header.module.less","application/Login/Login.module.less","helpers/history.js","helpers/auth.js","helpers/alert.js","store/actions/actionTypes.js","store/utility.js","store/reducers/auth.reducer.js","store/reducers/assistant.reducer.js","store/reducers/flow.reducer.js","store/reducers/assistantSettings.reducer.js","store/reducers/profile.reducer.js","store/reducers/userInput.reducer.js","store/reducers/solutions.reducer.js","store/reducers/index.js","store/actions/auth.actions.js","store/actions/assistant.actions.js","store/actions/flow.actions.js","store/actions/assistantSettings.actions.js","store/actions/profile.actions.js","store/actions/userInput.actions.js","store/actions/solutions.actions.js","store/sagas/auth.saga.js","store/sagas/assistant.saga.js","store/sagas/flow.saga.js","store/sagas/assistantSettings.saga.js","store/sagas/profile.saga.js","store/sagas/userInput.saga.js","store/sagas/solutions.saga.js","store/store.js","helpers/http.js","helpers/hashids.js","hoc/PrivateRoute.js","application/Dashboard/Assistants/Assistant/AssistantSettings/AssistantSettingsModal/AssistantSettingsModal.js","application/Dashboard/Assistants/Assistant/AssistantSettings/AssistantSettings.js","application/Dashboard/Assistants/Assistant/Assistant.js","application/Dashboard/Assistants/NewAssistantModal/NewAssistantModal.js","application/Dashboard/Assistants/Assistants.js","application/Dashboard/Assistants/Assistant/Flow/Groups/NewGroup/NewGroup.js","application/Dashboard/Assistants/Assistant/Flow/Groups/EditGroup/EditGroup.js","application/Dashboard/Assistants/Assistant/Flow/Groups/Groups.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/Block/Block.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/NewBlockModal/Cards/UserInput.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/NewBlockModal/Cards/Question.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/NewBlockModal/Cards/FileUpload.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/NewBlockModal/Cards/Solutions.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/NewBlockModal/NewBlockModal.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/EditBlockModal/Cards/UserInput.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/EditBlockModal/Cards/Question.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/EditBlockModal/Cards/FileUpload.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/EditBlockModal/Cards/Solutions.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/EditBlockModal/EditBlockModal1.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/Blocks.js","components/Header/Header.js","application/Dashboard/Assistants/Assistant/Flow/Flow.js","application/Dashboard/Profile/profileComponents/ProfileInput/ProfileInput.js","application/Dashboard/Profile/Profile.js","application/Dashboard/Assistants/Assistant/Integration/Integration.js","application/Dashboard/Assistants/Assistant/UserInput/Header/Header.js","application/Dashboard/Assistants/Assistant/UserInput/ViewModal/ViewModal.js","application/Dashboard/Assistants/Assistant/UserInput/UserInput.js","application/Dashboard/Assistants/Assistant/Solutions/Header/Header.js","application/Dashboard/Assistants/Assistant/Solutions/SolutionsDisplay/NewSolution/NewSolution.js","application/Dashboard/Assistants/Assistant/Solutions/SolutionsDisplay/SolutionsDisplay.js","application/Dashboard/Assistants/Assistant/Solutions/Solutions.js","application/Dashboard/Dashboard.js","application/Login/Login.js","App.js","serviceWorker.js","index.js","application/Dashboard/Assistants/Assistant/Integration/Integration.module.less","application/Dashboard/Assistants/Assistants.module.less","application/Dashboard/Dashboard.module.less","application/Dashboard/Assistants/Assistant/Flow/Groups/Groups.module.less","application/Dashboard/Assistants/Assistant/UserInput/UserInput.module.less"],"names":["module","exports","Logo","trigger","Sider","Header","Panel","Panel_With_Header","Panel_Header","Panel_Body","Panel_Body_Only","Panel_Header_Button","ClearAllBtn","Body","PanelButton","history","createBrowserHistory","authHeader","token","localStorage","getItem","refresh","Authorization","checkAuthenticity","user","JSON","parse","getUser","alertSuccess","title","message","notification","success","description","duration","placement","alertError","error","loadingMessage","loading","destroyMessage","destroy","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","AUTH_CHECK_TIMEOUT","REFRESH_TOKEN","FETCH_ASSISTANTS_REQUEST","ADD_ASSISTANT_REQUEST","UPDATE_ASSISTANT_SETTINGS_REQUEST","FETCH_FLOW_REQUEST","ADD_GROUP_REQUEST","EDIT_GROUP_REQUEST","DELETE_GROUP_REQUEST","ADD_BLOCK_REQUEST","EDIT_BLOCK_REQUEST","DELETE_BLOCK_REQUEST","UPDATE_BLOCKS_ORDER_REQUEST","GET_PROFILE_REQUEST","SAVE_PROFILE_DETAILS_REQUEST","SAVE_DATA_SETTINGS_REQUEST","FETCH_USERINPUT_REQUEST","CLEAR_ALL_USERINPUT_REQUEST","GET_SOLUTIONS_REQUEST","ADD_SOLUTION_REQUEST","updateObject","oldObject","updatedValues","Object","objectSpread","initialState","isAuthenticated","assistantList","isLoading","errorMsg","blockGroups","profile","userInputs","solutionsData","rootReducer","combineReducers","auth","state","arguments","length","undefined","action","type","actionTypes","isLoggingIn","msg","assistant","isAdding","successMsg","isChanging","flow","isAddingGroup","addSuccessMsg","isEditingGroup","editSuccessMsg","isDeletingGroup","deleteSuccessMsg","isAddingBlock","settings","profileData","userInput","console","log","isClearingAll","solutions","authActions","login","email","password","loginSuccess","loginFailure","logout","refreshToken","checkAuthTimeout","expirationTime","assistantActions","fetchAssistants","fetchAssistantsSuccess","fetchAssistantsFailure","addAssistant","newAssistant","addAssistantSuccess","addAssistantFailure","changeAssistantStatus","assistantID","changeAssistantStatusSuccess","status","changeAssistantStatusFailure","flowActions","fetchFlowRequest","fetchFlowSuccess","args","fetchFlowFailure","addGroupRequest","values","ID","newGroup","addGroupSuccess","addGroupFailure","editGroupRequest","editedGroup","editGroupSuccess","editGroupFailure","deleteGroupRequest","deletedGroup","deleteGroupSuccess","deleteGroupFailure","addBlockRequest","_ref","newBlock","groupID","addBlockSuccess","addBlockFailure","editBlockRequest","_ref2","edittedBlock","editBlockSuccess","editBlockFailure","deleteBlockRequest","_ref3","deletedBlock","deleteBlockSuccess","deleteBlockFailure","updateBlocksOrderRequest","_ref4","newBlocksOrder","updateBlocksOrderSuccess","updateBlocksOrderFailure","assistantSettingsActions","updateAssistantSettingsRequest","updateAssistantSettingsSuccess","updateAssistantSettingsFailure","profileActions","getProfile","getProfileSuccess","data","getProfileFailure","saveProfileDetails","saveProfileDetailsSuccess","successMessage","saveProfileDetailsFailure","saveDataSettings","dataSettings","saveDataSettingsSuccess","saveDataSettingsFailure","userInputActions","fetchUserInputs","fetchUserInputsSuccess","fetchUserInputsFailure","clearAllUserInputs","clearAllUserInputsSuccess","clearAllUserInputsFailure","solutionsActions","getSolutions","getSolutionsSuccess","getSolutionsFailure","addSolution","solution","addSolutionSuccess","addSolutionFailure","watchCheckAuthTimeout","watchLogin","watchLogout","watchRefreshToken","authSaga","regenerator_default","a","wrap","_context","prev","next","delay","put","stop","_marked","this","_context2","takeEvery","_marked2","res","expiresIn","secondsToExpire","_context3","axios","post","headers","Content-Type","sent","setItem","stringify","Date","getTime","push","t0","response","_marked3","_context4","takeLatest","_marked4","_context5","clear","_marked5","_context6","_marked6","_res$data$data","_context7","Error","_marked7","_context8","_marked8","_context9","all","_marked9","watchFetchAssistants","watchAddAssistant","assistantSaga","http","get","abrupt","assistant_saga_marked","assistant_saga_marked2","assistant_saga_marked3","assistant_saga_marked4","assistant_saga_marked5","fetchFlow","watchFetchFlow","addGroup","editGroup","deleteGroup","watchAddGroup","watchEditGroup","watchDeleteGroup","addBlock","editBlock","deleteBlock","updateBlcoksOrder","watchAddBlock","watchEditBlock","watchDeleteBlock","watchUpdateBlcoksOrder","flowSaga","concat","flow_saga_marked","flow_saga_marked2","flow_saga_marked3","flow_saga_marked4","delete","id","flow_saga_marked5","flow_saga_marked6","flow_saga_marked7","flow_saga_marked8","flow_saga_marked9","currentUpdatedGroup","_context10","map","group","blocks","block","_marked10","_ref5","_context11","_marked11","_ref6","_context12","_marked12","_context13","_marked13","_context14","_marked14","_context15","_marked15","_context16","_marked16","_context17","_marked17","updateAssistantSettings","watchUpdateAssistantSettings","settingsSage","updatedSettings","assistantSettings_saga_marked","assistantSettings_saga_marked2","assistantSettings_saga_marked3","getProfilePageData","watchProfileRequests","watchProfileUpdates","watchDataSettingsUpdates","profileSaga","profile_saga_marked","profile_saga_marked2","profile_saga_marked3","profile_saga_marked4","profile_saga_marked5","profile_saga_marked6","profile_saga_marked7","watchFetchUserInputs","watchClearAllUserInputs","userInputSaga","userInput_saga_marked","userInput_saga_marked2","userInput_saga_marked3","userInput_saga_marked4","userInput_saga_marked5","getSolutionsData","watchSolutionsRequests","watchAddSolutionRequests","solutionsSaga","solutions_saga_marked","solutions_saga_marked2","solutions_saga_marked3","solutions_saga_marked4","solutions_saga_marked5","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","create","baseURL","interceptors","request","use","config","header","Promise","reject","dispatch","hashids","Hashids","hasher","param","encode","PrivateRoute","Component","component","rest","objectWithoutProperties","react_default","createElement","Route","assign","render","props","Redirect","to","pathname","from","location","FormItem","Form","Item","AssistantSettingsModal","isPopupDisabled","_this","SecondsUntilPopup","togglePopupSwitch","setState","handleSave","form","validateFields","err","secondsUntilPopup","inputValue","formItemLayout","labelCol","span","wrapperCol","getFieldDecorator","modal","visible","width","destroyOnClose","onCancel","handleCancel","footer","es_button","key","onClick","es_form","layout","label","extra","initialValue","Name","rules","required","input","placeholder","Message","TopBarText","es_switch","checked","onChange","style","marginRight","input_number","disabled","min","className","AssistantSettings","hideModal","AssistantSettings_AssistantSettingsModal_AssistantSettingsModal","connect","Meta","Card","covers","Assistant","showModal","onActiveChanged","Fragment","card","margin","float","height","cover","alt","src","Math","floor","random","defaultChecked","Active","actions","icon","Link","dropdown","overlay","es_menu","Divider","menu","Assistant_AssistantSettings_AssistantSettings","Option","Select","NewAssistantModal","handleAdd","prevProps","onOk","handleOk","NewAssistantModal_FormItem","es_select","value","Assistants","Boolean","successSettings","errorSettings","_this2","styles","AssistantsList","i","Assistants_Assistant_Assistant","index","skeleton","active","Assistants_NewAssistantModal_NewAssistantModal","NewGroup","NewGroup_FormItem","EditGroup","handleUpdate","name","handleDelete","EditGroup_FormItem","Groups","newGroupModal","editGroupModal","selectedGroupToEdit","handleAddGroup","handleAddGroupCancel","showNewGroupModal","handleEditGroup","handleEditGroupCancel","showEditGroupModal","item","handleDeleteGroup","Groups_NewGroup_NewGroup","spin","es_list","itemLayout","dataSource","groupsList","renderItem","avatar","backgroundColor","selectGroup","Groups_EditGroup_EditGroup","Collapse","Block","collapse","bordered","divider","content","text","size","row","col","blockToGoID","validation","afterMessage","showTop","storeInDB","es_checkbox","isSkippable","answers","answer","Block_Meta","keywords","keyword","es_tag","UserInput","showGoToBlock","showGoToGroup","onSubmit","handleNewBlock","options","currentGroup","labels","blockToGoIDGroup","onSelectAction","_this$props$options","blockTypes","allGroups","blockOptions","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","blockType","return","UserInput_FormItem","validations","UserInput_Option","onSelect","valuePropName","alwaysStoreInDB","Question","modalVisible","tags","inputVisible","addAnswer","hideAddAnswer","showAddAnswer","removeAnswer","removeTag","removedTag","filter","tag","showInput","focus","handleInputChange","e","target","saveInputRef","handleInputConfirm","indexOf","toConsumableArray","_this$state","Question_FormItem","shape","isLongTag","tagElem","closable","afterClose","slice","tooltip","ref","onBlur","onPressEnter","background","borderStyle","Question_Option","CheckboxGroup","Checkbox","Group","FileUpload","fileTypes","checkedValues","typesAllowed","FileUpload_FormItem","FileUpload_Option","Solutions","Number","Solutions_FormItem","Solutions_Option","TabPane","Tabs","NewBlockModal","handleAddBlock","closeModal","onChangeTab","currentTab","then","nextProps","tabs","tab","Cards_UserInput","Cards_Question","Cards_FileUpload","Cards_Solutions","groupName","handleEditBlock","order","_this3","_this$props$options2","allBlocks","Cards_UserInput_FormItem","Cards_UserInput_Option","Cards_Question_FormItem","Cards_Question_Option","Cards_FileUpload_FormItem","FileUpload_CheckboxGroup","Cards_FileUpload_Option","Cards_Solutions_FormItem","Cards_Solutions_Option","EditBlockModal","EditBlockModal_Cards_UserInput","EditBlockModal_Cards_Question","EditBlockModal_Cards_FileUpload","EditBlockModal_Cards_Solutions","confirm","Modal","Blocks","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","addBlockVisible","editBlockVisible","deleteBlockVisible","showAddBlockModal","closeAddBlockModal","closeEditBlockModal","handleDeleteBlock","onDragEnd","bind","assertThisInitialized","result","destination","list","startIndex","endIndex","Array","_result$splice","splice","removed","slicedToArray","reorder","source","reorderBlocks","overflowY","react_beautiful_dnd_esm","droppableId","provided","innerRef","draggableId","draggableProps","dragHandleProps","draggableStyle","Blocks_Block_Block","Blocks_NewBlockModal_NewBlockModal","EditBlockModal1","marginBottom","display","context","router","goBack","assistantName","contextTypes","PropTypes","object","Flow","components_Header_Header","Flow_Groups_Groups","Flow_Blocks_Blocks","ProfileInput","ProfileInput_FormItem","handleChange","readOnly","React","defaultProps","Profile","companyName","newsletters","profileSettings","statNotifications","trackData","techSupport","accountSpecialist","old","new","repeat","formSubmitted","dataCalled","dataRendered","tabIndex","handleSubmit","preventDefault","includes","names","split","tempState","defineProperty","setFieldsValue","changeTab","parseInt","_this$props$form$setF2","isEmpty","Firstname","Surname","Email","company","userSettings","UserInputNotifications","TrackingData","TechnicalSupport","AccountSpecialist","obj","hasOwnProperty","updateStateFromProps","updateAllInputsFromState","defaultActiveKey","Profile_TabPane","profileComponents_ProfileInput_ProfileInput","textAlign","htmlType","Integration","dataName","dataID","dataCircle","async","defer","removeChatbot","oldBot","document","getElementById","remove","oldBotScript","copyScriptPaste","select","execCommand","testIntegration","script","setAttribute","body","appendChild","getWidgetSrc","colon","port","_window$location","protocol","hostname","getChatbotScript","data-name","data-id","data-circle","match","params","position","paddingLeft","fontSize","fontWeight","paddingTop","padding","marginLeft","ReactDOMServer","renderToString","ViewModal","columns","record","questionText","closeViewModal","table","Data","collectedInformation","pagination","viewModal","selectedRecord","dataIndex","moment","DateTime","format","asMinutes","toFixed","showConfirmForClearing","okType","UserInput_ViewModal_ViewModal","OptGroup","NewSolution","connectionType","changeTypeHandler","NewSolution_FormItem","databaseFileTypes","fileType","NewSolution_Option","databaseCRMTypes","CRMType","activeKey","tabBarStyle","NewSolution_TabPane","htmlFor","hidden","SolutionsDisplay","newSolutionModal","editSolutionModal","selectedSolutionToEdit","handleAddSolution","newSolution","handleAddSolutionCancel","showNewSolutionModal","handleEditSolution","editedSolution","editSolution","handleEditSolutionCancel","showEditSolutionModal","handleDeleteSolution","deletedSolution","deleteSolution","SolutionsDisplay_NewSolution_NewSolution","selectSolution","Solution","currentSolution","Assistant_Solutions_Header_Header","Solutions_SolutionsDisplay_SolutionsDisplay","SubMenu","Menu","Layout","Content","Footer","Dashboard","collapsed","toggle","handleMenuClick","collapsible","theme","twoToneColor","lineHeight","defaultSelectedKeys","mode","Dashboard_Header","marginTop","Switch","path","exact","Login","handleLogout","Login_FormItem","prefix","color","loginForm","App","listen","PrivateRoute_PrivateRoute","withRouter","alert","app","es","Router","src_App_0","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bf0e861b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Profile_Logo__38p9S\",\"trigger\":\"Profile_trigger__2NmZS\",\"Sider\":\"Profile_Sider__3E2SK\",\"Header\":\"Profile_Header__nz7Sz\",\"Panel\":\"Profile_Panel__1jn2F\",\"Panel_With_Header\":\"Profile_Panel_With_Header__2nzlV\",\"Panel_Header\":\"Profile_Panel_Header__2wJcF\",\"Panel_Body\":\"Profile_Panel_Body__1xwLF\",\"Panel_Body_Only\":\"Profile_Panel_Body_Only__15Zq5\",\"Panel_Header_Button\":\"Profile_Panel_Header_Button__2WhxI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Header_Logo__pPWqk\",\"trigger\":\"Header_trigger__1oWt2\",\"Sider\":\"Header_Sider__2FnLR\",\"Header\":\"Header_Header__SmyVP\",\"Panel\":\"Header_Panel__C4UsN\",\"Panel_With_Header\":\"Header_Panel_With_Header__5mkk7\",\"Panel_Header\":\"Header_Panel_Header__1uYtq\",\"Panel_Body\":\"Header_Panel_Body__1O0FM\",\"Panel_Body_Only\":\"Header_Panel_Body_Only__1obK3\",\"Panel_Header_Button\":\"Header_Panel_Header_Button__2Ri6l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Header_Logo__3MK4z\",\"trigger\":\"Header_trigger__2vFPJ\",\"Sider\":\"Header_Sider__Syq5s\",\"Header\":\"Header_Header__2whI1\",\"Panel\":\"Header_Panel__2CHOT\",\"Panel_With_Header\":\"Header_Panel_With_Header__23eMp\",\"Panel_Header\":\"Header_Panel_Header__3jmV5\",\"Panel_Body\":\"Header_Panel_Body__2bbjq\",\"Panel_Body_Only\":\"Header_Panel_Body_Only__1WFwg\",\"Panel_Header_Button\":\"Header_Panel_Header_Button__2ooL0\",\"ClearAllBtn\":\"Header_ClearAllBtn__3WUzf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Flow_Logo__hDNk3\",\"trigger\":\"Flow_trigger__RASrO\",\"Sider\":\"Flow_Sider__34Dhn\",\"Header\":\"Flow_Header__2WIFi\",\"Panel\":\"Flow_Panel__3bDX2\",\"Panel_With_Header\":\"Flow_Panel_With_Header__2UfLu\",\"Panel_Header\":\"Flow_Panel_Header__1JCa8\",\"Panel_Body\":\"Flow_Panel_Body__UqCCW\",\"Panel_Body_Only\":\"Flow_Panel_Body_Only__3Ge20\",\"Panel_Header_Button\":\"Flow_Panel_Header_Button__1p-dn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Blocks_Logo__3EenA\",\"trigger\":\"Blocks_trigger__YUx2b\",\"Sider\":\"Blocks_Sider__1vIWa\",\"Header\":\"Blocks_Header__26n00\",\"Panel\":\"Blocks_Panel__Bbjus\",\"Panel_With_Header\":\"Blocks_Panel_With_Header__2Oz2T\",\"Panel_Header\":\"Blocks_Panel_Header__17iCM\",\"Panel_Body\":\"Blocks_Panel_Body__2yUxP\",\"Panel_Body_Only\":\"Blocks_Panel_Body_Only__1Gj-A\",\"Panel_Header_Button\":\"Blocks_Panel_Header_Button__10_dQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Panel\":\"Solutions_Panel__3Em0T\",\"Header\":\"Solutions_Header__cCswa\",\"Body\":\"Solutions_Body__30yym\",\"PanelButton\":\"Solutions_PanelButton__g7r4i\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Panel\":\"Header_Panel__t7h9y\",\"Header\":\"Header_Header__NCGlq\",\"Body\":\"Header_Body__1-W3c\",\"PanelButton\":\"Header_PanelButton__2r9bo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Panel\":\"Login_Panel__2vWmC\"};","import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();","\nexport const authHeader = () => {\n    // return authorization header with jwt token\n    let token = localStorage.getItem('token');\n    let refresh = localStorage.getItem('refresh');\n    if (!token || !refresh) {return null}\n    return {'Authorization': 'Bearer ' + token};\n};\n\n\nexport const getUser = () => {\n    // return user from local storage\n    let user = JSON.parse(localStorage.getItem('user'));\n    if(!user){return null;}\n    return user;\n};\n\nexport const checkAuthenticity = () => {\n    return !(!getUser() || !authHeader());\n\n};\n\n","import {message, notification} from 'antd';\n\nconst duration = 2.5;\nconst placement = \"topRight\";\n\nexport const alertSuccess = (title, message) => {\n    notification.success({\n        message: title,\n        description: message,\n        duration: duration,\n        placement: placement,\n    });\n};\n\n\nexport const alertError = (title, message) => {\n    notification.error({\n        message: title,\n        description: message\n    });\n};\n\nexport const loadingMessage = title => message.loading(title);\n\nexport const destroyMessage = () => {\n    message.destroy();\n    notification.destroy();\n};\n\nexport const alertInfo = (title, message) => {\n    notification.info({\n        message: title,\n        description: message,\n        duration: duration,\n        placement: placement,\n    });\n};\n\n\nexport const alertWarn = (title, message) => {\n    notification.warn({\n        message: title,\n        description: message,\n        duration: duration,\n        placement: placement,\n    });\n};","export const LOGIN_REQUEST = 'LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\nexport const LOGOUT = 'LOGOUT';\nexport const AUTH_CHECK_TIMEOUT = 'AUTH_CHECK_TIMEOUT';\nexport const REFRESH_TOKEN = 'REFRESH_TOKEN';\n\n\nexport const FETCH_ASSISTANTS_REQUEST = 'FETCH_ASSISTANTS_REQUEST';\nexport const FETCH_ASSISTANTS_SUCCESS = 'FETCH_ASSISTANTS_SUCCESS';\nexport const FETCH_ASSISTANTS_FAILURE = 'FETCH_ASSISTANTS_FAILURE';\n\n    export const CHANGE_ASSISTANT_STATUS_REQUEST = 'CHANGE_ASSISTANT_STATUS_REQUEST';\n    export const CHANGE_ASSISTANT_STATUS_SUCCESS = 'CHANGE_ASSISTANT_STATUS_SUCCESS';\n    export const CHANGE_ASSISTANT_STATUS_FAILURE = 'CHANGE_ASSISTANT_STATUS_FAILURE';\n\n\n    export const ADD_ASSISTANT_REQUEST = 'ADD_ASSISTANTS_REQUEST';\n    export const ADD_ASSISTANT_SUCCESS = 'ADD_ASSISTANT_SUCCESS';\n    export const ADD_ASSISTANT_FAILURE = 'ADD_ASSISTANT_FAILURE';\n\n    export const UPDATE_ASSISTANT_SETTINGS_REQUEST = 'UPDATE_ASSISTANT_SETTINGS_REQUEST';\n    export const UPDATE_ASSISTANT_SETTINGS_SUCCESS = 'UPDATE_ASSISTANT_SETTINGS_SUCCESS';\n    export const UPDATE_ASSISTANT_SETTINGS_FAILURE = 'UPDATE_ASSISTANT_SETTINGS_FAILURE';\n\n\nexport const FETCH_FLOW_REQUEST = 'FETCH_FLOW_REQUEST';\nexport const FETCH_FLOW_SUCCESS = 'FETCH_FLOW_SUCCESS';\nexport const FETCH_FLOW_FAILURE = 'FETCH_FLOW_FAILURE';\n    // Groups\n    export const ADD_GROUP_REQUEST = 'ADD_GROUP_REQUEST';\n    export const ADD_GROUP_SUCCESS = 'ADD_GROUP_SUCCESS';\n    export const ADD_GROUP_FAILURE = 'ADD_GROUP_FAILURE';\n\n    export const EDIT_GROUP_REQUEST = 'EDIT_GROUP_REQUEST';\n    export const EDIT_GROUP_SUCCESS = 'EDIT_GROUP_SUCCESS';\n    export const EDIT_GROUP_FAILURE = 'EDIT_GROUP_FAILURE';\n\n    export const DELETE_GROUP_REQUEST = 'DELETE_GROUP_REQUEST';\n    export const DELETE_GROUP_SUCCESS = 'DELETE_GROUP_SUCCESS';\n    export const DELETE_GROUP_FAILURE = 'DELETE_GROUP_FAILURE';\n\n    // Block\n    export const ADD_BLOCK_REQUEST = 'ADD_BLOCK_REQUEST';\n    export const ADD_BLOCK_SUCCESS = 'ADD_BLOCK_SUCCESS';\n    export const ADD_BLOCK_FAILURE = 'ADD_BLOCK_FAILURE';\n\n    export const EDIT_BLOCK_REQUEST = 'EDIT_BLOCK_REQUEST';\n    export const EDIT_BLOCK_SUCCESS = 'EDIT_BLOCK_SUCCESS';\n    export const EDIT_BLOCK_FAILURE = 'EDIT_BLOCK_FAILURE';\n\n    export const DELETE_BLOCK_REQUEST = 'DELETE_BLOCK_REQUEST';\n    export const DELETE_BLOCK_SUCCESS = 'DELETE_BLOCK_SUCCESS';\n    export const DELETE_BLOCK_FAILURE = 'DELETE_BLOCK_FAILURE';\n\n    export const UPDATE_BLOCKS_ORDER_REQUEST = 'UPDATE_BLOCKS_ORDER_REQUEST';\n    export const UPDATE_BLOCKS_ORDER_SUCCESS = 'UPDATE_BLOCKS_ORDER_SUCCESS';\n    export const UPDATE_BLOCKS_ORDER_FAILURE = 'UPDATE_BLOCKS_ORDER_FAILURE';\n\n\n\n// Profile\nexport const GET_PROFILE_REQUEST = 'GET_PROFILE_REQUEST';\nexport const GET_PROFILE_SUCCESS = 'GET_PROFILE_SUCCESS';\nexport const GET_PROFILE_FAILURE = 'GET_PROFILE_FAILURE';\n\n    export const SAVE_PROFILE_DETAILS_REQUEST = 'SAVE_PROFILE_DETAILS_REQUEST';\n    export const SAVE_PROFILE_DETAILS_SUCCESS = 'SAVE_PROFILE_DETAILS_SUCCESS';\n    export const SAVE_PROFILE_DETAILS_FAILURE = 'SAVE_PROFILE_DETAILS_FAILURE';\n\n    export const SAVE_DATA_SETTINGS_REQUEST = 'SAVE_DATA_SETTINGS_REQUEST';\n    export const SAVE_DATA_SETTINGS_SUCCESS = 'SAVE_DATA_SETTINGS_SUCCESS';\n    export const SAVE_DATA_SETTINGS_FAILURE = 'SAVE_DATA_SETTINGS_FAILURE';\n\n// User Input\nexport const FETCH_USERINPUT_REQUEST = 'FETCH_USERINPUT_REQUEST';\nexport const FETCH_USERINPUT_SUCCESS = 'FETCH_USERINPUT_SUCCESS';\nexport const FETCH_USERINPUT_FAILURE = 'FETCH_USERINPUT_FAILURE';\n\n    export const CLEAR_ALL_USERINPUT_REQUEST = 'CLEAR_ALL_USERINPUT_REQUEST';\n    export const CLEAR_ALL_USERINPUT_SUCCESS = 'CLEAR_ALL_USERINPUT_SUCCESS';\n    export const CLEAR_ALL_USERINPUT_FAILURE = 'CLEAR_ALL_USERINPUT_FAILURE';\n\n// Solutions\nexport const GET_SOLUTIONS_REQUEST = 'GET_SOLUTIONS_REQUEST';\nexport const GET_SOLUTIONS_SUCCESS = 'GET_SOLUTIONS_SUCCESS';\nexport const GET_SOLUTIONS_FAILURE = 'GET_SOLUTIONS_FAILURE';\n\n    export const ADD_SOLUTION_REQUEST = 'ADD_SOLUTION_REQUEST';\n    export const ADD_SOLUTION_SUCCESS = 'ADD_SOLUTION_SUCCESS';\n    export const ADD_SOLUTION_FAILURE = 'ADD_SOLUTION_FAILURE';\n","export const updateObject = (oldObject, updatedValues) => {\n    return {\n        ...oldObject,\n        ...updatedValues\n    }\n};\n","import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\nlet user = JSON.parse(localStorage.getItem('user'));\nconst initialState = user ? {isAuthenticated: true, user} : {isAuthenticated: false, user: null};\n\nexport const auth = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.LOGIN_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isLoggingIn: true,\n            });\n        case actionTypes.LOGIN_SUCCESS:\n            return updateObject(state, {\n                isLoggingIn: false,\n                isAuthenticated: true,\n                user: action.user\n            });\n        case actionTypes.LOGIN_FAILURE:\n            return updateObject(state, {\n                isLoggingIn: false,\n                isAuthenticated: false,\n                user: null,\n                errorMsg: action.error.msg\n            });\n        case actionTypes.LOGOUT:\n            return updateObject(state, {\n                isLoggingIn: false,\n                isAuthenticated: false,\n                user: null,\n                errorMsg: null\n            });\n        default:\n            return state\n    }\n};","import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\nconst initialState = {assistantList: [], isLoading: false, errorMsg: null};\n\nexport const assistant = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.FETCH_ASSISTANTS_REQUEST:\n            return updateObject(state, {\n                assistantList: [],\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.FETCH_ASSISTANTS_SUCCESS:\n            return updateObject(state, {\n                assistantList: action.assistantList,\n                isLoading: false\n            });\n        case actionTypes.FETCH_ASSISTANTS_FAILURE:\n            return updateObject(state, {\n                assistantList: [],\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n\n\n        case actionTypes.ADD_ASSISTANT_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isAdding: true\n            });\n        case actionTypes.ADD_ASSISTANT_SUCCESS:\n            return updateObject(state, {\n                successMsg: action.successMsg,\n                isAdding: false\n            });\n        case actionTypes.ADD_ASSISTANT_FAILURE:\n            return updateObject(state, {\n                isAdding: false,\n                errorMsg: action.error.msg\n            });\n\n        case actionTypes.CHANGE_ASSISTANT_STATUS_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isChanging: true\n            });\n        case actionTypes.CHANGE_ASSISTANT_STATUS_SUCCESS:\n\n            return updateObject(state, {\n                successMsg: action.successMsg,\n                isChanging: false\n            });\n        case actionTypes.CHANGE_ASSISTANT_STATUS_FAILURE:\n            return updateObject(state, {\n                isChanging: false,\n                errorMsg: action.error.msg\n            });\n\n        default:\n            return state\n    }\n};","import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\nconst initialState = {isLoading: false, errorMsg: null, blockGroups: []};\n\nexport const flow = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.FETCH_FLOW_REQUEST:\n            return updateObject(state, {\n                isLoading: true\n            });\n        case actionTypes.FETCH_FLOW_SUCCESS:\n            return updateObject(state, {\n                isLoading: false,\n                blockGroups: action.blockGroups\n            });\n        case actionTypes.FETCH_FLOW_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n\n        // Groups\n        case actionTypes.ADD_GROUP_REQUEST:\n            return updateObject(state, {\n                isAddingGroup: true\n            });\n        case actionTypes.ADD_GROUP_SUCCESS:\n            return updateObject(state, {\n                isAddingGroup: false,\n                addSuccessMsg: action.msg\n            });\n        case actionTypes.ADD_GROUP_FAILURE:\n            return updateObject(state, {\n                isAddingGroup: false,\n                errorMsg: action.error.msg\n            });\n\n\n        case actionTypes.EDIT_GROUP_REQUEST:\n            return updateObject(state, {\n                isEditingGroup: true\n            });\n        case actionTypes.EDIT_GROUP_SUCCESS:\n            return updateObject(state, {\n                isEditingGroup: false,\n                editSuccessMsg: action.msg\n            });\n        case actionTypes.EDIT_GROUP_FAILURE:\n            return updateObject(state, {\n                isEditingGroup: false,\n                errorMsg: action.error.msg\n            });\n\n\n        case actionTypes.DELETE_GROUP_REQUEST:\n            return updateObject(state, {\n                isDeletingGroup: true\n            });\n        case actionTypes.DELETE_GROUP_SUCCESS:\n            return updateObject(state, {\n                isDeletingGroup: false,\n                deleteSuccessMsg: action.msg\n            });\n        case actionTypes.DELETE_GROUP_FAILURE:\n            return updateObject(state, {\n                isDeletingGroup: false,\n                errorMsg: action.error.msg\n            });\n\n\n        // Blocks\n        case actionTypes.ADD_BLOCK_REQUEST:\n            return updateObject(state, {\n                isAddingBlock: true\n            });\n        case actionTypes.ADD_BLOCK_SUCCESS:\n            return updateObject(state, {\n                isAddingBlock: false,\n                successMsg: action.msg\n            });\n        case actionTypes.ADD_BLOCK_FAILURE:\n            return updateObject(state, {\n                isAddingBlock: false,\n                errorMsg: action.error.msg\n            });\n        default:\n            return state\n    }\n};","import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\nconst initialState = {isLoading: false, errorMsg: null};\n\nexport const settings = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.UPDATE_ASSISTANT_SETTINGS_REQUEST:\n            return updateObject(state, {\n                successMsg: null,\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.UPDATE_ASSISTANT_SETTINGS_SUCCESS:\n            return updateObject(state, {\n                successMsg: action.successMsg,\n                isLoading: false\n            });\n        case actionTypes.UPDATE_ASSISTANT_SETTINGS_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n        default:\n            return state\n    }\n};","import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\nconst initialState = {profile: {}, isLoading: false, errorMsg: null};\n\nexport const profile = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.GET_PROFILE_REQUEST:\n            return updateObject(state, {\n                profile: {},\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.GET_PROFILE_SUCCESS:\n            return updateObject(state, {\n                profile: action.profileData,\n                isLoading: false\n            });\n        case actionTypes.GET_PROFILE_FAILURE:\n            return updateObject(state, {\n                profile: {},\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n        case actionTypes.SAVE_PROFILE_DETAILS_REQUEST:\n            return updateObject(state, {\n                successMsg: null,\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.SAVE_PROFILE_DETAILS_SUCCESS:\n            return updateObject(state, {\n                successMsg: action.successMsg,\n                isLoading: false\n            });\n        case actionTypes.SAVE_PROFILE_DETAILS_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n        case actionTypes.SAVE_DATA_SETTINGS_REQUEST:\n            return updateObject(state, {\n                successMsg: null,\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.SAVE_DATA_SETTINGS_SUCCESS:\n            return updateObject(state, {\n                successMsg: action.successMsg,\n                isLoading: false\n            });\n        case actionTypes.SAVE_DATA_SETTINGS_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n        default:\n            return state\n    }\n};","import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\nconst initialState = {userInputs: [], isLoading: false, errorMsg: null};\n\nexport const userInput = (state = initialState, action) => {\n    switch (action.type) {\n        // Fetching user inputs\n        case actionTypes.FETCH_USERINPUT_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.FETCH_USERINPUT_SUCCESS:\n            console.log(action.userInputs);\n            return updateObject(state, {\n                userInputs: action.userInputs,\n                isLoading: false\n            });\n        case actionTypes.FETCH_USERINPUT_FAILURE:\n            return updateObject(state, {\n                userInputs: [],\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n\n        //Clearing all user inputs\n        case actionTypes.CLEAR_ALL_USERINPUT_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isClearingAll: true\n            });\n        case actionTypes.CLEAR_ALL_USERINPUT_SUCCESS:\n            return updateObject(state, {\n                isClearingAll: false,\n                userInputs: [],\n                errorMsg: null,\n            });\n        case actionTypes.CLEAR_ALL_USERINPUT_FAILURE:\n            return updateObject(state, {\n                isClearingAll: false,\n                errorMsg: action.error.msg\n            });\n        default:\n            return state\n    }\n};","import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\nconst initialState = {solutionsData: {}, isLoading: false, errorMsg: null};\n\nexport const solutions = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.GET_SOLUTIONS_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.GET_SOLUTIONS_SUCCESS:\n            return updateObject(state, {\n                solutionsData: action.solutionsData,\n                isLoading: false\n            });\n        case actionTypes.GET_SOLUTIONS_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n        case actionTypes.ADD_SOLUTION_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.ADD_SOLUTION_SUCCESS:\n            return updateObject(state, {\n                isLoading: false,\n                message: action.message\n            });\n        case actionTypes.ADD_SOLUTION_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n        default:\n            return state\n    }\n};","import {combineReducers} from 'redux';\nimport {auth} from './auth.reducer';\nimport {assistant} from \"./assistant.reducer\";\nimport {flow} from \"./flow.reducer\";\nimport {settings} from \"./assistantSettings.reducer\";\nimport {profile} from \"./profile.reducer\";\nimport {userInput} from \"./userInput.reducer\";\nimport {solutions} from \"./solutions.reducer\";\n\n\nconst rootReducer = combineReducers({\n    auth,\n    assistant,\n    flow,\n    settings,\n    profile,\n    userInput,\n    solutions\n});\n\nexport default rootReducer;","import * as actionTypes from './actionTypes';\n\n\nfunction login (email, password) {\n    return {\n        type: actionTypes.LOGIN_REQUEST,\n        email,\n        password\n    };\n}\n\nfunction loginSuccess (user) {\n    return {\n        type: actionTypes.LOGIN_SUCCESS,\n        user\n    };\n}\n\nfunction loginFailure (error) {\n    return {\n        type: actionTypes.LOGIN_FAILURE,\n        error\n    };\n}\n\n\nconst logout = () => {\n    return {\n        type: actionTypes.LOGOUT\n    };\n};\n\nconst checkAuthTimeout = (expirationTime, refresh) => {\n    return {\n        type: actionTypes.AUTH_CHECK_TIMEOUT,\n        expirationTime, refresh\n    };\n};\n\nconst refreshToken = (refresh) => {\n    return {\n        type: actionTypes.REFRESH_TOKEN,\n        refresh\n    };\n};\n\nexport const authActions = {\n    login,\n    loginSuccess,\n    loginFailure,\n    logout,\n    refreshToken,\n    checkAuthTimeout\n};","import * as actionTypes from './actionTypes';\n\n\nconst fetchAssistants = () => {\n    return {\n        type: actionTypes.FETCH_ASSISTANTS_REQUEST\n    };\n};\n\nconst fetchAssistantsSuccess = (assistantList) => {\n    return {\n        type: actionTypes.FETCH_ASSISTANTS_SUCCESS,\n        assistantList\n    };\n};\n\nconst fetchAssistantsFailure = (error) => {\n    return {\n        type: actionTypes.FETCH_ASSISTANTS_FAILURE,\n        error\n    };\n};\n\n\nconst addAssistant = (newAssistant) => {\n    return {\n        type: actionTypes.ADD_ASSISTANT_REQUEST,\n        newAssistant\n    };\n};\n\nconst addAssistantSuccess = (successMsg) => {\n    return {\n        type: actionTypes.ADD_ASSISTANT_SUCCESS,\n        successMsg\n    };\n};\n\nconst addAssistantFailure = (error) => {\n    return {\n        type: actionTypes.ADD_ASSISTANT_FAILURE,\n        error\n    };\n};\n\n\n\nconst changeAssistantStatus = (assistantID) => {\n    return {\n        type: actionTypes.CHANGE_ASSISTANT_STATUS_REQUEST,\n        assistantID\n    };\n};\n\nconst changeAssistantStatusSuccess = (successMsg, status, assistantID) => {\n    return {\n        type: actionTypes.CHANGE_ASSISTANT_STATUS_SUCCESS,\n        successMsg,\n        status,\n        assistantID\n    };\n};\n\nconst changeAssistantStatusFailure = (error) => {\n    return {\n        type: actionTypes.CHANGE_ASSISTANT_STATUS_FAILURE,\n        error\n    };\n};\n\nexport const assistantActions = {\n    fetchAssistants,\n    fetchAssistantsSuccess,\n    fetchAssistantsFailure,\n    addAssistant,\n    addAssistantSuccess,\n    addAssistantFailure,\n\n    changeAssistantStatus,\n    changeAssistantStatusSuccess,\n    changeAssistantStatusFailure,\n};","import * as actionTypes from './actionTypes';\n\n\nconst fetchFlowRequest = (assistantID) => {\n    return {\n        type: actionTypes.FETCH_FLOW_REQUEST,\n        assistantID\n    };\n};\n\nconst fetchFlowSuccess = (args) => {\n    return {\n        type: actionTypes.FETCH_FLOW_SUCCESS,\n        blockGroups: args.blockGroups\n    };\n};\n\nconst fetchFlowFailure = (error) => {\n    return {\n        type: actionTypes.FETCH_FLOW_FAILURE,\n        error\n    };\n};\n\n// Groups Actions\nconst addGroupRequest = (values) => {\n    return {\n        type: actionTypes.ADD_GROUP_REQUEST,\n        ID: values.ID,\n        newGroup: values.newGroup\n    };\n};\n\nconst addGroupSuccess = (msg) => {\n    return {\n        type: actionTypes.ADD_GROUP_SUCCESS,\n        msg\n    };\n};\n\nconst addGroupFailure = (error) => {\n    return {\n        type: actionTypes.ADD_GROUP_FAILURE,\n        error\n    };\n};\n\n//////////////////////////////////////////\n\nconst editGroupRequest = (values) => {\n    return {\n        type: actionTypes.EDIT_GROUP_REQUEST,\n        ID: values.ID,\n        editedGroup: values.editedGroup\n    };\n};\n\nconst editGroupSuccess = (msg) => {\n    return {\n        type: actionTypes.EDIT_GROUP_SUCCESS,\n        msg\n    };\n};\n\nconst editGroupFailure = (error) => {\n    return {\n        type: actionTypes.EDIT_GROUP_FAILURE,\n        error\n    };\n};\n\n//////////////////////////////////////////\n\nconst deleteGroupRequest = (values) => {\n    return {\n        type: actionTypes.DELETE_GROUP_REQUEST,\n        assistantID: values.assistantID,\n        deletedGroup: values.deletedGroup\n    };\n};\n\nconst deleteGroupSuccess = (msg) => {\n    return {\n        type: actionTypes.DELETE_GROUP_SUCCESS,\n        msg\n    };\n};\n\nconst deleteGroupFailure = (error) => {\n    return {\n        type: actionTypes.DELETE_GROUP_FAILURE,\n        error\n    };\n};\n\n//////////////////////////////////////////\n// ADD Blocks Actions\nconst addBlockRequest = ({newBlock, assistantID, groupID}) => {\n    return {\n        type: actionTypes.ADD_BLOCK_REQUEST,\n        newBlock,\n        assistantID,\n        groupID\n    };\n};\n\nconst addBlockSuccess = (msg) => {\n    return {\n        type: actionTypes.ADD_BLOCK_SUCCESS,\n        msg\n    };\n};\n\nconst addBlockFailure = (error) => {\n    return {\n        type: actionTypes.ADD_BLOCK_FAILURE,\n        error\n    };\n};\n//////////////////////////////////////////\n// EDIT Blocks Actions\nconst editBlockRequest = ({edittedBlock, assistantID, groupID}) => {\n    return {\n        type: actionTypes.EDIT_BLOCK_REQUEST,\n        edittedBlock,\n        assistantID,\n        groupID\n    };\n};\n\nconst editBlockSuccess = (msg) => {\n    return {\n        type: actionTypes.EDIT_BLOCK_SUCCESS,\n        msg\n    };\n};\n\nconst editBlockFailure = (error) => {\n    return {\n        type: actionTypes.EDIT_BLOCK_FAILURE,\n        error\n    };\n};\n//////////////////////////////////////////\n\n//////////////////////////////////////////\n// DELETE Blocks Actions\nconst deleteBlockRequest = ({deletedBlock, assistantID, groupID}) => {\n    return {\n        type: actionTypes.DELETE_BLOCK_REQUEST,\n        deletedBlock,\n        assistantID,\n        groupID\n    };\n};\n\nconst deleteBlockSuccess = (msg) => {\n    return {\n        type: actionTypes.DELETE_BLOCK_SUCCESS,\n        msg\n    };\n};\n\nconst deleteBlockFailure = (error) => {\n    return {\n        type: actionTypes.DELETE_BLOCK_FAILURE,\n        error\n    };\n};\n//////////////////////////////////////////\n// UPDATE Blocks' order Actions\nconst updateBlocksOrderRequest = ({newBlocksOrder, assistantID, groupID}) => {\n    return {\n        type: actionTypes.UPDATE_BLOCKS_ORDER_REQUEST,\n        newBlocksOrder,\n        assistantID,\n        groupID\n    };\n};\n\nconst updateBlocksOrderSuccess = (msg) => {\n    return {\n        type: actionTypes.UPDATE_BLOCKS_ORDER_SUCCESS,\n        msg\n    };\n};\n\nconst updateBlocksOrderFailure = (error) => {\n    return {\n        type: actionTypes.UPDATE_BLOCKS_ORDER_FAILURE,\n        error\n    };\n};\n//////////////////////////////////////////\n\nexport const flowActions = {\n    fetchFlowRequest,\n    fetchFlowSuccess,\n    fetchFlowFailure,\n\n    addGroupRequest,\n    addGroupSuccess,\n    addGroupFailure,\n\n    editGroupRequest,\n    editGroupSuccess,\n    editGroupFailure,\n\n    deleteGroupRequest,\n    deleteGroupSuccess,\n    deleteGroupFailure,\n\n    addBlockRequest,\n    addBlockSuccess,\n    addBlockFailure,\n\n    editBlockRequest,\n    editBlockSuccess,\n    editBlockFailure,\n\n    deleteBlockRequest,\n    deleteBlockSuccess,\n    deleteBlockFailure,\n\n    updateBlocksOrderRequest,\n    updateBlocksOrderSuccess,\n    updateBlocksOrderFailure\n\n\n};","import * as actionTypes from './actionTypes';\n\n\nconst updateAssistantSettingsRequest = (args) => {\n    return {\n        type: actionTypes.UPDATE_ASSISTANT_SETTINGS_REQUEST,\n        ...args\n    };\n};\n\nconst updateAssistantSettingsSuccess = (successMsg) => {\n    return {\n        type: actionTypes.UPDATE_ASSISTANT_SETTINGS_SUCCESS,\n        successMsg\n    };\n};\n\nconst updateAssistantSettingsFailure = (error) => {\n    return {\n        type: actionTypes.UPDATE_ASSISTANT_SETTINGS_FAILURE,\n        error\n    };\n};\n\nexport const assistantSettingsActions = {\n    updateAssistantSettingsRequest,\n    updateAssistantSettingsSuccess,\n    updateAssistantSettingsFailure\n};","import * as actionTypes from './actionTypes';\n\nconst getProfile = () => {\n    return {\n        type: actionTypes.GET_PROFILE_REQUEST\n    }\n};\n\nconst getProfileSuccess = (profile) => {\n    return {\n        type: actionTypes.GET_PROFILE_SUCCESS,\n        profileData: profile.data\n    }\n};\n\nconst getProfileFailure = (error) => {\n    return {\n        type: actionTypes.GET_PROFILE_FAILURE,\n        error\n    }\n};\n\nconst saveProfileDetails = (profileData) => {\n    return {\n        type: actionTypes.SAVE_PROFILE_DETAILS_REQUEST,\n        profileData\n    }\n};\n\nconst saveProfileDetailsSuccess = (successMessage) => {\n    return {\n        type: actionTypes.SAVE_PROFILE_DETAILS_SUCCESS,\n        successMessage\n    }\n};\n\nconst saveProfileDetailsFailure = (error) => {\n    return {\n        type: actionTypes.SAVE_PROFILE_DETAILS_FAILURE,\n        error\n    }\n};\n\nconst saveDataSettings = (dataSettings) => {\n    return {\n        type: actionTypes.SAVE_DATA_SETTINGS_REQUEST,\n        dataSettings\n    }\n};\n\nconst saveDataSettingsSuccess = (successMessage) => {\n    return {\n        type: actionTypes.SAVE_DATA_SETTINGS_SUCCESS,\n        successMessage\n    }\n};\n\nconst saveDataSettingsFailure = (error) => {\n    return {\n        type: actionTypes.SAVE_DATA_SETTINGS_FAILURE,\n        error\n    }\n};\n\nexport const profileActions = {\n    getProfile,\n    getProfileSuccess,\n    getProfileFailure,\n    saveProfileDetails,\n    saveProfileDetailsSuccess,\n    saveProfileDetailsFailure,\n    saveDataSettings,\n    saveDataSettingsSuccess,\n    saveDataSettingsFailure\n}","import * as actionTypes from './actionTypes';\n\n\nconst fetchUserInputs = (assistantID) => {\n    return {\n        type: actionTypes.FETCH_USERINPUT_REQUEST,\n        assistantID\n    };\n};\n\nconst fetchUserInputsSuccess = (userInputs) => {\n    return {\n        type: actionTypes.FETCH_USERINPUT_SUCCESS,\n        userInputs\n    };\n};\n\nconst fetchUserInputsFailure = (error) => {\n    return {\n        type: actionTypes.FETCH_USERINPUT_FAILURE,\n        error\n    };\n};\n\n\nconst clearAllUserInputs = (assistantID) => {\n    return {\n        type: actionTypes.CLEAR_ALL_USERINPUT_REQUEST,\n        assistantID\n    };\n};\n\nconst clearAllUserInputsSuccess = () => {\n    return {\n        type: actionTypes.CLEAR_ALL_USERINPUT_SUCCESS,\n    };\n};\n\nconst clearAllUserInputsFailure = (error) => {\n    return {\n        type: actionTypes.CLEAR_ALL_USERINPUT_FAILURE,\n        error\n    };\n};\n\n\nexport const userInputActions = {\n    fetchUserInputs,\n    fetchUserInputsSuccess,\n    fetchUserInputsFailure,\n\n    clearAllUserInputs,\n    clearAllUserInputsSuccess,\n    clearAllUserInputsFailure\n};","import * as actionTypes from './actionTypes';\n\nconst getSolutions = (assistantID) => {\n    return {\n        type: actionTypes.GET_SOLUTIONS_REQUEST,\n        assistantID\n    }\n};\n\nconst getSolutionsSuccess = (solutions) => {\n    return {\n        type: actionTypes.GET_SOLUTIONS_SUCCESS,\n        solutionsData: solutions.data\n    }\n};\n\nconst getSolutionsFailure = (error) => {\n    return {\n        type: actionTypes.GET_SOLUTIONS_FAILURE,\n        error\n    }\n};\n\nconst addSolution = (assistantID, solution) => {\n    return {\n        type: actionTypes.ADD_SOLUTION_REQUEST,\n        assistantID,\n        solution\n    }\n};\n\nconst addSolutionSuccess = (message) => {\n    return {\n        type: actionTypes.ADD_SOLUTION_SUCCESS,\n        message\n    }\n};\n\nconst addSolutionFailure = (error) => {\n    return {\n        type: actionTypes.ADD_SOLUTION_FAILURE,\n        error\n    }\n};\n\nexport const solutionsActions = {\n    getSolutions,\n    getSolutionsSuccess,\n    getSolutionsFailure,\n    addSolution,\n    addSolutionSuccess,\n    addSolutionFailure\n};","import * as actionTypes from '../actions/actionTypes';\nimport { delay } from \"redux-saga\";\nimport { put, takeEvery, takeLatest, all } from 'redux-saga/effects'\nimport { authActions } from \"../actions\";\nimport { history, checkAuthenticity } from '../../helpers'\nimport axios from 'axios';\n\n\nfunction* checkAuthTimeout({expirationTime, refresh}) {\n    yield delay(expirationTime * 1000);\n    yield put(authActions.refreshToken(refresh));\n}\n\nfunction* watchCheckAuthTimeout() {\n    yield takeEvery(actionTypes.AUTH_CHECK_TIMEOUT, checkAuthTimeout)\n}\n\nfunction* login({email, password}) {\n    try {\n        const res = yield axios.post(`/api/auth`, {email, password}, {\n            headers: {'Content-Type': 'application/json'},\n        });\n\n        const {user, token, refresh, expiresIn} = yield res.data.data;\n        yield localStorage.setItem(\"user\", JSON.stringify(user));\n        yield localStorage.setItem(\"token\", token);\n        yield localStorage.setItem(\"refresh\", refresh);\n        yield localStorage.setItem(\"expiresIn\", expiresIn);\n        // When access token expires in seconds\n        const secondsToExpire = yield (new Date(expiresIn).getTime() - new Date().getTime()) / 1000\n        // Dispatch actions\n        yield put(authActions.loginSuccess(user));\n        yield put(authActions.checkAuthTimeout(secondsToExpire, refresh)); // refresh to access token when expired\n        // Redirect to dashboard page\n        yield history.push('/dashboard');\n    } catch (error) {\n        console.log(error);\n        yield put(authActions.loginFailure(error.response.data));\n    }\n}\n\nfunction* watchLogin() {\n    yield takeLatest(actionTypes.LOGIN_REQUEST, login)\n}\n\nfunction* logout() {\n    // Clear local storage from user, token...\n    yield localStorage.clear();\n    yield history.push('/login');\n}\n\nfunction* watchLogout() {\n    yield takeLatest(actionTypes.LOGOUT, logout)\n}\n\nfunction* refreshToken({refresh}) {\n    try {\n        if(!checkAuthenticity()){throw new Error('Authentication Failed')}\n        const res = yield axios.post(`/api/auth/refresh`, null,{\n            headers: {'Authorization': 'Bearer ' + refresh},\n        });\n\n        const {token, expiresIn} = res.data.data;\n        yield localStorage.setItem(\"token\", token);\n        yield localStorage.setItem(\"expiresIn\", expiresIn);\n        const secondsToExpire = yield (new Date(expiresIn).getTime() - new Date().getTime()) / 1000;\n        yield put(authActions.checkAuthTimeout(secondsToExpire, refresh));\n\n\n    } catch (error) {\n        console.log(error);\n        // Log the user out\n        yield put(authActions.logout());\n    }\n}\n\nfunction* watchRefreshToken() {\n    yield takeEvery(actionTypes.REFRESH_TOKEN, refreshToken)\n}\n\nexport function* authSaga() {\n    yield all([\n        watchLogin(),\n        watchLogout(),\n        watchCheckAuthTimeout(),\n        watchRefreshToken()\n    ])\n}\n","import {put, takeEvery, all} from 'redux-saga/effects'\nimport * as actionTypes from '../actions/actionTypes';\nimport {assistantActions, authActions} from \"../actions\";\nimport {http} from \"../../helpers\";\n\nfunction* fetchAssistants() {\n    try {\n        const res = yield http.get(`/assistants`);\n        return yield put(assistantActions.fetchAssistantsSuccess(res.data.data))\n    } catch (error) {\n        console.log(error);\n        return yield put(assistantActions.fetchAssistantsFailure(error.response.data));\n    }\n\n}\n\nfunction* addAssistant({type, newAssistant}) {\n    try {\n        const res = yield http.post(`/assistants`, newAssistant);\n        yield put(assistantActions.addAssistantSuccess(res.data.msg));\n        return yield put(assistantActions.fetchAssistants())\n    } catch (error) {\n        console.log(error);\n        //\n        // yield localStorage.removeItem('user');\n        // yield put(authActions.logout());\n        // return yield put(assistantActions.fetchAssistantsFailure(error.response.data));\n    }\n\n}\n\nfunction* watchFetchAssistants() {\n    yield takeEvery(actionTypes.FETCH_ASSISTANTS_REQUEST, fetchAssistants)\n}\n\nfunction* watchAddAssistant() {\n    yield takeEvery(actionTypes.ADD_ASSISTANT_REQUEST, addAssistant)\n}\n\n\nexport function* assistantSaga() {\n    yield all([\n        watchFetchAssistants(),\n        watchAddAssistant()\n    ])\n}","import {all, put, takeEvery} from 'redux-saga/effects'\nimport * as actionTypes from '../actions/actionTypes';\nimport {flowActions} from \"../actions/flow.actions\";\nimport {http} from \"../../helpers\";\nimport {alertError, alertSuccess, destroyMessage, loadingMessage} from \"../../helpers/alert\";\n\nfunction* fetchFlow({assistantID}) {\n    try {\n        const res = yield http.get(`/assistant/${assistantID}/flow`);\n        return yield put(flowActions.fetchFlowSuccess(res.data.data))\n    } catch (error) {\n        console.log(error);\n        return yield put(flowActions.fetchFlowFailure(error.response.data));\n    }\n\n}\n\nfunction* watchFetchFlow() {\n    yield takeEvery(actionTypes.FETCH_FLOW_REQUEST, fetchFlow)\n}\n\n// Groups\nfunction* addGroup(action) {\n    try {\n        loadingMessage('Adding Group');\n        const res = yield http.post(`/assistant/${action.ID}/flow/group`, action.newGroup);\n        yield put(flowActions.addGroupSuccess(res.data.msg));\n        yield destroyMessage();\n        yield alertSuccess('Group Added', res.data.msg);\n        return yield put(flowActions.fetchFlowRequest(action.ID))\n    } catch (error) {\n        console.log(error);\n        return yield put(flowActions.addGroupFailure(error.response.data));\n    }\n}\n\nfunction* editGroup(action) {\n    try {\n        loadingMessage('Updating Group');\n        const res = yield http.put(`/assistant/${action.ID}/flow/group`, action.editedGroup);\n        yield put(flowActions.editGroupSuccess(res.data.msg));\n        yield destroyMessage();\n        yield alertSuccess('Group Updated', res.data.msg);\n        return yield put(flowActions.fetchFlowRequest(action.ID))\n    } catch (error) {\n        console.log(error);\n        return yield put(flowActions.editGroupFailure(error.response.data));\n    }\n}\n\nfunction* deleteGroup({assistantID, deletedGroup}) {\n    try {\n        loadingMessage('Deleting Group');\n        const res = yield http.delete(`/assistant/${assistantID}/flow/group`, {data: {id: deletedGroup.id}});\n        yield put(flowActions.deleteGroupSuccess(res.data.msg));\n        yield destroyMessage();\n        yield alertSuccess('Group Deleted', res.data.msg);\n        return yield put(flowActions.fetchFlowRequest(assistantID))\n    } catch (error) {\n        console.log(error);\n        return yield put(flowActions.deleteGroupFailure(error.response.data));\n    }\n}\n\nfunction* watchAddGroup() {\n    yield takeEvery(actionTypes.ADD_GROUP_REQUEST, addGroup)\n}\n\nfunction* watchEditGroup() {\n    yield takeEvery(actionTypes.EDIT_GROUP_REQUEST, editGroup)\n}\n\nfunction* watchDeleteGroup() {\n    yield takeEvery(actionTypes.DELETE_GROUP_REQUEST, deleteGroup)\n}\n\n// Blocks\nfunction* addBlock({newBlock, groupID, assistantID}) {\n    try {\n        loadingMessage('Adding Block');\n        const res = yield http.post(`/assistant/flow/group/${groupID}/block`, newBlock);\n\n        yield destroyMessage();\n        yield alertSuccess('Block Added', res.data.msg);\n        yield put(flowActions.addBlockSuccess(res.data.msg));\n\n        return yield put(flowActions.fetchFlowRequest(assistantID))\n    } catch (error) {\n        console.log(error);\n        return yield put(flowActions.addBlockFailure(error.response.data));\n    }\n}\n\nfunction* editBlock({edittedBlock, groupID, assistantID}) {\n    try {\n        loadingMessage('Updating Block');\n        let res = yield http.get(`/assistant/${assistantID}/flow`);\n        let currentUpdatedGroup = [];\n        res.data.data.blockGroups.map((group) => {\n            if (group.id === groupID)\n                group.blocks.map((block) => {\n                    if (!block.groupID) block.groupID = groupID;\n                    block.id === edittedBlock.id ? currentUpdatedGroup.push(edittedBlock) : currentUpdatedGroup.push(block);\n                })\n        });\n        res = yield http.put(`/assistant/${assistantID}/flow`, {blocks: currentUpdatedGroup});\n        yield destroyMessage();\n        yield alertSuccess('Block Updated', res.data.msg);\n        yield put(flowActions.editBlockSuccess(res.data.msg));\n        return yield put(flowActions.fetchFlowRequest(assistantID))\n    } catch (error) {\n        console.log(error);\n        return yield put(flowActions.editBlockFailure(error.response.data));\n    }\n}\n\nfunction* deleteBlock({deletedBlock, assistantID, groupID}) {\n    try {\n        loadingMessage('Deleting Block');\n        const res = yield http.delete(`/assistant/flow/group/${groupID}/block`, {data: {id: deletedBlock.id}});\n        yield put(flowActions.deleteBlockSuccess(res.data.msg));\n        yield destroyMessage();\n        yield alertSuccess('Block Deleted', res.data.msg);\n        return yield put(flowActions.fetchFlowRequest(assistantID))\n    } catch (error) {\n        console.log(error);\n        return yield put(flowActions.deleteBlockFailure(error.response.data));\n    }\n}\n\nfunction* updateBlcoksOrder({newBlocksOrder, assistantID}) {\n    try {\n        loadingMessage('Updating Blocks Order');\n        const res = yield http.put(`/assistant/${assistantID}/flow`, {blocks: newBlocksOrder});\n        yield put(flowActions.updateBlocksOrderSuccess(res.data.msg));\n        yield destroyMessage();\n        return yield alertSuccess('Order Updated', res.data.msg);\n    } catch (error) {\n        console.log(error);\n        yield destroyMessage();\n        yield alertError('Error in Block Delete', error.message);\n        return yield put(flowActions.updateBlocksOrderFailure(error.response.data));\n    }\n}\n\nfunction* watchAddBlock() {\n    yield takeEvery(actionTypes.ADD_BLOCK_REQUEST, addBlock)\n}\n\nfunction* watchEditBlock() {\n    yield takeEvery(actionTypes.EDIT_BLOCK_REQUEST, editBlock)\n}\n\nfunction* watchDeleteBlock() {\n    yield takeEvery(actionTypes.DELETE_BLOCK_REQUEST, deleteBlock)\n}\n\nfunction* watchUpdateBlcoksOrder() {\n    yield takeEvery(actionTypes.UPDATE_BLOCKS_ORDER_REQUEST, updateBlcoksOrder)\n}\n\nexport function* flowSaga() {\n    yield all([\n        watchFetchFlow(),\n\n        watchAddGroup(),\n        watchEditGroup(),\n        watchDeleteGroup(),\n\n        watchAddBlock(),\n        watchEditBlock(),\n        watchDeleteBlock(),\n        watchUpdateBlcoksOrder()\n    ])\n}","import {put, takeEvery, all} from 'redux-saga/effects'\nimport * as actionTypes from '../actions/actionTypes';\nimport {http} from \"../../helpers\";\nimport {assistantActions, assistantSettingsActions} from \"../actions\";\n\nfunction* updateAssistantSettings(action) {\n    try {\n        const res = yield http.put(`assistant/${action.ID}`, action.updatedSettings);\n        yield put(assistantSettingsActions.updateAssistantSettingsSuccess(res.data.msg));\n        return yield put(assistantActions.fetchAssistants())\n    } catch (error) {\n        console.log(error);\n        return yield put(assistantSettingsActions.updateAssistantSettingsFailure(error.response.data));\n    }\n}\n\nfunction* watchUpdateAssistantSettings() {\n    yield takeEvery(actionTypes.UPDATE_ASSISTANT_SETTINGS_REQUEST, updateAssistantSettings)\n}\n\n\nexport function* settingsSage() {\n    yield all([\n        watchUpdateAssistantSettings()\n    ])\n}","import {put, takeEvery, all} from 'redux-saga/effects'\nimport * as actionTypes from '../actions/actionTypes';\nimport {http} from \"../../helpers\";\nimport {profileActions} from \"../actions\";\n\n\nfunction* getProfilePageData() {\n    try {\n        const res = yield http.get(`/profile`);\n        return yield put(profileActions.getProfileSuccess(res.data))\n    } catch (error) {\n        console.log(error);\n        return yield put(profileActions.getProfileFailure(error.response.data));\n    }\n\n}\n\nfunction* saveProfileDetails(action) {\n    try {\n        const res = yield http.post(`/profile/profiledetails`, action.profileData);\n        yield put(profileActions.saveProfileDetailsSuccess(res.data.msg));\n        return yield put(profileActions.getProfile())\n    } catch (error) {\n        console.log(error);\n        return yield put(profileActions.saveProfileDetailsFailure(error.response.data));\n    }\n}\n\nfunction* saveDataSettings(action) {\n    try {\n        const res = yield http.post(`/profile/datasettings`, action.dataSettings);\n        yield put(profileActions.saveDataSettingsSuccess(res.data.msg));\n        return yield put(profileActions.getProfile())\n    } catch (error) {\n        console.log(error);\n        return yield put(profileActions.saveDataSettingsFailure(error.response.data));\n    }\n}\n\nfunction* watchProfileRequests(){\n    yield takeEvery(actionTypes.GET_PROFILE_REQUEST, getProfilePageData)\n}\n\nfunction* watchProfileUpdates() {\n    yield takeEvery(actionTypes.SAVE_PROFILE_DETAILS_REQUEST, saveProfileDetails)\n}\n\nfunction* watchDataSettingsUpdates() {\n    yield takeEvery(actionTypes.SAVE_DATA_SETTINGS_REQUEST, saveDataSettings)\n}\n\n\nexport function* profileSaga() {\n    yield all([\n        watchProfileRequests(),\n        watchProfileUpdates(),\n        watchDataSettingsUpdates()\n    ])\n}","import {put, takeEvery, all} from 'redux-saga/effects'\nimport * as actionTypes from '../actions/actionTypes';\nimport {userInputActions} from \"../actions\";\nimport {http, alertSuccess, alertError} from \"../../helpers\";\n\nfunction* fetchUserInputs({assistantID}) {\n    try {\n        const res = yield http.get(`/assistant/${assistantID}/userinput`);\n        return yield put(userInputActions.fetchUserInputsSuccess(res.data.data))\n    } catch (error) {\n        console.log(error);\n        return yield put(userInputActions.fetchUserInputsFailure(error));\n    }\n}\n\nfunction* watchFetchUserInputs() {\n    yield takeEvery(actionTypes.FETCH_USERINPUT_REQUEST, fetchUserInputs)\n}\n\nfunction* clearAllUserInputs({assistantID}) {\n    try {\n        const res = yield http.delete(`/assistant/${assistantID}/userinput`);\n        yield put(userInputActions.clearAllUserInputsSuccess());\n        return yield alertSuccess('Cleared Successfully', res.data.msg)\n    } catch (error) {\n        console.log(error);\n        yield put(userInputActions.clearAllUserInputsFailure(error));\n        return yield alertError('Error', \"Sorry, we could'nt clear all the records!\");\n\n    }\n}\n\nfunction* watchClearAllUserInputs() {\n    yield takeEvery(actionTypes.CLEAR_ALL_USERINPUT_REQUEST, clearAllUserInputs)\n}\n\n\nexport function* userInputSaga() {\n    yield all([\n        watchFetchUserInputs(),\n        watchClearAllUserInputs(),\n    ])\n}","import {put, takeEvery, all} from 'redux-saga/effects'\nimport * as actionTypes from '../actions/actionTypes';\nimport {http} from \"../../helpers\";\nimport {solutionsActions} from \"../actions\";\n\n\nfunction* getSolutionsData({assistantID}) {\n    try {\n        const res = yield http.get(`/assistant/${assistantID}/solutionsData`);\n        return yield put(solutionsActions.getSolutionsSuccess(res.data))\n    } catch (error) {\n        console.log(error);\n        return yield put(solutionsActions.getSolutionsFailure(error.response.data));\n    }\n\n}\n\nfunction* addSolution({assistantID, solution}) {\n    try {\n        const res = yield http.put(`/assistant/${assistantID}/solutionsData`, solution);\n        yield put(solutionsActions.addSolutionSuccess(res.message))\n        return getSolutionsData({assistantID})\n    } catch (error) {\n        console.log(error);\n        return yield put(solutionsActions.addSolutionFailure(error.response.data));\n    }\n\n}\n\nfunction* watchSolutionsRequests(){\n    yield takeEvery(actionTypes.GET_SOLUTIONS_REQUEST, getSolutionsData)\n}\n\nfunction* watchAddSolutionRequests(){\n    yield takeEvery(actionTypes.ADD_SOLUTION_REQUEST, addSolution)\n}\n\nexport function* solutionsSaga() {\n    yield all([\n        watchSolutionsRequests(),\n        watchAddSolutionRequests()\n    ])\n}","import {createStore, applyMiddleware, compose} from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from './reducers';\nimport {assistantSaga, authSaga, flowSaga, settingsSage, profileSaga, userInputSaga, solutionsSaga} from './sagas'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(flowSaga);\nsagaMiddleware.run(assistantSaga);\nsagaMiddleware.run(authSaga);\nsagaMiddleware.run(settingsSage);\nsagaMiddleware.run(profileSaga);\nsagaMiddleware.run(userInputSaga);\nsagaMiddleware.run(solutionsSaga);\n\n\nexport default store;","import axios from 'axios';\nimport {authHeader} from './auth';\nimport store from '../store/store';\nimport { authActions } from \"../store/actions\";\n\nexport const http = axios.create({\n    baseURL: '/api',\n    headers: {'Content-Type': 'application/json'},\n});\n\nhttp.interceptors.request.use(\n    function (config) {\n        const header = authHeader();\n        if (!header) throw new Error('Token required!');  \n        config.headers = header;\n        return config;\n    },\n    function (error) {\n        console.log(error);\n        return Promise.reject(error);\n    }\n);\n\nhttp.interceptors.response.use(response => {\n    return response;\n}, error => {\n    if (error.response.status === 401) {\n        console.log('Axios Unauthorised');\n        store.dispatch(authActions.logout());\n    }\n    return Promise.reject(error);\n});","import Hashids from \"hashids\";\n\nconst hashids = new Hashids(\"b9iLXiAa\", 5);\n\nconst encode = (param) => {\n    return hashids.encode(param);\n};\n\nconst decode = (param) => {\n    return hashids.decode(param);\n};\n\n\nexport const hasher = {\n    encode,\n    decode\n};","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport {checkAuthenticity} from  '../helpers'\n\nexport const PrivateRoute = ({ component: Component, ...rest }) => {\n    console.log(\"Check Authenticity\", checkAuthenticity());\n    return (\n        <Route {...rest} render={props => (\n            checkAuthenticity()\n                ? <Component {...props} />\n                : <Redirect to={{pathname: '/login', state: {from: props.location}}}/>\n        )}/>\n    )\n}","import React, {Component} from 'react';\nimport \"./AssistantSettingsModal.less\"\nimport {Button, Form, Input, InputNumber, Modal, Switch} from \"antd\";\n\nconst FormItem = Form.Item;\n\n\nclass AssistantSettingsModal extends Component {\n    state = {\n        isPopupDisabled: this.props.assistant.SecondsUntilPopup <= 0\n    };\n\n    togglePopupSwitch = () => {\n        this.setState({isPopupDisabled: !this.state.isPopupDisabled})\n    }\n\n\n    componentDidMount() {\n        this.setState({\n            inputValue: this.props.assistant.SecondsUntilPopup\n        });\n    }\n\n    handleSave = () => {\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                if (this.state.isPopupDisabled) {\n                    values.secondsUntilPopup = 0\n                }\n                this.props.handleSave(values)\n            }\n        });\n    };\n\n    render() {\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        };\n        const {getFieldDecorator} = this.props.form;\n        const {assistant} = this.props;\n\n        const {inputValue} = this.state;\n\n        return (\n            <Modal\n                title=\"Edit Assistant\"\n                visible={this.props.visible}\n                width={800}\n                destroyOnClose={true}\n                onCancel={this.props.handleCancel}\n                footer={[\n                    <Button key=\"cancel\" onClick={this.props.handleCancel}>Cancel</Button>,\n                    <Button key=\"submit\" type=\"primary\" onClick={this.handleSave}>\n                        Save\n                    </Button>,\n                ]}>\n\n                <Form layout='horizontal'>\n                    <FormItem\n                        label=\"Assistant Name\"\n                        extra=\"Enter a name for your assistant to easily identify it in the dashboard\"\n                        {...formItemLayout}>\n                        {\n                            getFieldDecorator('assistantName', {\n                                initialValue: assistant.Name,\n                                rules: [{\n                                    required: true,\n                                    message: 'Please input your assistant name',\n                                }],\n                            })\n                            (<Input placeholder=\"Ex: My first assistant, Sales Assistant\"/>)\n                        }\n                    </FormItem>\n\n                    <FormItem\n                        label=\"Welcome Message\"\n                        extra=\"This will be sent as first message\"\n                        {...formItemLayout}>\n\n                        {\n                            getFieldDecorator('welcomeMessage', {\n                                initialValue: assistant.Message,\n                                rules: [{\n                                    required: true,\n                                    message: 'Please input your welcome message',\n                                }],\n                            })(\n                                <Input placeholder=\"Ex: Hey there, Welcome visitor\"/>\n                            )\n                        }\n                    </FormItem>\n\n                    <FormItem\n                        label=\"Header Title\"\n                        extra=\"This will apear on top of your chatbot\"\n                        {...formItemLayout}>\n                        {\n                            getFieldDecorator('topBarTitle', {\n                                initialValue: assistant.TopBarText,\n                                rules: [{\n                                    required: true,\n                                    message: 'Please input your header title',\n                                }],\n                            })(\n                                <Input placeholder=\"Ex: Recruiter Bot\"/>\n                            )\n                        }\n                    </FormItem>\n\n                    <FormItem\n                        {...formItemLayout}\n                        label=\"Time to Popup\"\n                        extra=\"This will enforce the assistants' (chatbot) to popup automatically\"\n                    >\n                        <Switch checked={!this.state.isPopupDisabled} onChange={this.togglePopupSwitch}\n                                style={{marginRight: '5px'}}/>\n                        {getFieldDecorator('secondsUntilPopup', {initialValue: assistant.SecondsUntilPopup === 0 ? 1 : assistant.SecondsUntilPopup})(\n                            <InputNumber disabled={this.state.isPopupDisabled} min={1}/>\n                        )}\n                        <span className=\"ant-form-text\"> seconds</span>\n                    </FormItem>\n\n                </Form>\n            </Modal>\n        );\n    }\n}\n\nexport default Form.create()(AssistantSettingsModal)\n","import React, {Component} from 'react';\nimport \"../Assistant.less\"\nimport connect from \"react-redux/es/connect/connect\";\nimport {assistantSettingsActions} from \"../../../../../store/actions\";\nimport AssistantSettingsModal from \"./AssistantSettingsModal/AssistantSettingsModal\";\n\nclass AssistantSettings extends Component {\n\n    handleSave = (updatedSettings) => {\n        this.props.hideModal();\n        // dispatch redux action\n        this.props.dispatch(assistantSettingsActions.updateAssistantSettingsRequest({\n            ID: this.props.assistant.ID,\n            updatedSettings: updatedSettings\n        }));\n    };\n\n    render() {\n        return (\n            <AssistantSettingsModal assistant={this.props.assistant} visible={this.props.visible}\n                                    handleSave={this.handleSave} handleCancel={this.props.hideModal}/>\n        )\n    }\n\n}\n\nconst mapStateToProps = (state) => ({\n    isLoading: state.settings.isLoading,\n});\nexport default connect(mapStateToProps)(AssistantSettings);\n","import React, {Component} from 'react';\nimport \"./Assistant.less\"\nimport {Card, Dropdown, Icon, Menu, Switch} from 'antd';\nimport {Link} from \"react-router-dom\";\nimport AssistantSettings from \"./AssistantSettings/AssistantSettings\";\n\nconst {Meta} = Card;\n\n\nconst menu = (assistant) => (\n    <Menu>\n        <Menu.Item key=\"1\">\n            <Link to={{\n                      pathname: `assistants/${assistant.ID}/solutions`,\n                      state: {assistant: assistant}\n                  }}>\n                <Icon type=\"database\"/> Solutions\n            </Link>\n        </Menu.Item>\n        <Menu.Item key=\"2\">\n            <Link to={{\n                      pathname: `assistants/${assistant.ID}/userInput`,\n                      state: {assistant: assistant}\n                  }}>\n                <Icon type=\"code\"/> User Input\n            </Link>\n        </Menu.Item>\n        <Menu.Item key=\"3\">\n            <Link to={{\n                      pathname: `assistants/${assistant.ID}/analytics`,\n                      state: {assistant: assistant}\n                  }}>\n                <Icon type=\"line-chart\"/> Analytics\n            </Link>\n        </Menu.Item>\n        <Menu.Divider/>\n        <Menu.Item key=\"4\">\n            <Link to={{\n                      pathname: `assistants/${assistant.ID}/integration`,\n                      state: {assistant: assistant}\n                  }}>\n                <Icon type=\"sync\"/> Integration\n            </Link>\n        </Menu.Item>\n    </Menu>\n);\n\nconst covers = [\n    'https://42f2671d685f51e10fc6-b9fcecea3e50b3b59bdc28dead054ebc.ssl.cf5.rackcdn.com/illustrations/active_support_6rwo.svg',\n    'https://42f2671d685f51e10fc6-b9fcecea3e50b3b59bdc28dead054ebc.ssl.cf5.rackcdn.com/illustrations/voice_control_ofo1.svg',\n    'https://42f2671d685f51e10fc6-b9fcecea3e50b3b59bdc28dead054ebc.ssl.cf5.rackcdn.com/illustrations/group_chat_v059.svg',\n    'https://42f2671d685f51e10fc6-b9fcecea3e50b3b59bdc28dead054ebc.ssl.cf5.rackcdn.com/illustrations/status_update_jjgk.svg',\n    'https://42f2671d685f51e10fc6-b9fcecea3e50b3b59bdc28dead054ebc.ssl.cf5.rackcdn.com/illustrations/messages1_9ah2.svg'\n];\n\n\nclass Assistant extends Component {\n\n    state = {visible: false};\n\n    showModal = () => {\n        this.setState({\n            visible: true,\n        });\n    };\n\n    hideModal = () => {\n        this.setState({\n            visible: false,\n        });\n    };\n\n    onActiveChanged = () => {\n\n    }\n\n    render() {\n        const {assistant} = this.props;\n        return (\n            <>\n                <Card loading={this.props.isLoading} style={{width: 300, margin: 15, float: 'left', height: 369}}\n                      cover={\n                          <img alt=\"example\"\n                               height={200}\n                               width=\"100%\"\n                               src={covers[Math.floor(Math.random() * covers.length)]}/>\n                      }\n                      title={assistant.Name}\n                      extra={<Switch defaultChecked={assistant.Active} onChange={this.onActiveChanged}/>}\n                      actions={[\n                          <div onClick={this.showModal}>\n                              <Icon type=\"setting\"/>\n                              <span> Settings</span>\n                          </div>,\n\n                          <div>\n                              <Link\n                                  to={{\n                                      pathname: `assistants/${assistant.ID}/flow`,\n                                      state: {assistant: assistant}\n                                  }}>\n                                  <Icon type=\"build\"/>\n                                  <span> Flow</span>\n                              </Link>\n                          </div>,\n\n                          <Dropdown overlay={menu(assistant)} trigger={['click']}>\n                              <a className=\"ant-dropdown-link\">\n                                  ...\n                              </a>\n                          </Dropdown>]}>\n                    <Meta description={assistant.TopBarText}/>\n                </Card>\n\n                <AssistantSettings assistant={assistant}\n                                   hideModal={this.hideModal}\n                                   visible={this.state.visible}/>\n\n            </>\n        )\n    }\n}\n\nexport default Assistant;\n","import React, {Component} from 'react';\nimport \"./NewAssistantModal.less\";\n\nimport {Button, Form, Input, Modal, Select, InputNumber, message, Switch} from 'antd';\nimport {connect} from \"react-redux\";\nimport {assistantActions} from \"../../../../store/actions\";\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\n\nconst loading = () => {\n    message.loading('Adding assistant', 0);\n};\n\nclass NewAssistantModal extends Component {\n\n    state = {\n        isPopupDisabled: true\n    };\n\n    togglePopupSwitch = () => {\n        this.setState({isPopupDisabled: !this.state.isPopupDisabled})\n    };\n\n    handleAdd = () => {\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                if(this.state.isPopupDisabled) {values.secondsUntilPopup = 0}\n                console.log(values);\n                // send to server\n                this.props.dispatch(assistantActions.addAssistant(values));\n                loading();\n            }\n        });\n    };\n\n    componentDidUpdate(prevProps) {\n        if (!this.props.isAdding && this.props.isAdding !== prevProps.isAdding) {\n            this.props.hideModal();\n            message.destroy();\n            message.success(this.props.successMsg)\n\n        }\n\n    }\n\n\n    render() {\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        };\n        const {getFieldDecorator} = this.props.form;\n\n        return (\n            <Modal\n                width={800}\n                title=\"Create New Assistant\"\n                visible={this.props.visible}\n                onOk={this.handleOk}\n                onCancel={this.handleCancel}\n                destroyOnClose={true}\n                footer={[\n                    <Button key=\"cancel\" onClick={this.props.hideModal}>Cancel</Button>,\n                    <Button key=\"submit\" type=\"primary\" onClick={this.handleAdd}>\n                        Add\n                    </Button>,\n                ]}>\n                <Form layout='horizontal'>\n                    <FormItem\n                        label=\"Assistant Name\"\n                        extra=\"Enter a name for your assistant to easily identify it in the dashboard\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('assistantName', {\n                            rules: [{\n                                required: true,\n                                message: 'Please input your assistant name',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: My first assistant, Sales Assistant\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem\n                        label=\"Welcome Message\"\n                        extra=\"This will be sent as first message\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('welcomeMessage', {\n                            rules: [{\n                                required: true,\n                                message: 'Please input your welcome message',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Hey there, Welcome visitor\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem\n                        label=\"Header Title\"\n                        extra=\"This will apear on top of your chatbot\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('topBarTitle', {\n                            rules: [{\n                                required: true,\n                                message: 'Please input your header title',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Recruiter Bot\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem\n                    {...formItemLayout}\n                    label=\"Time to Popup\"\n                    extra=\"This will enforce the assistants' (chatbot) to popup automatically\"\n                    >\n                    <Switch defaultChecked={false} onChange={this.togglePopupSwitch} style={{marginRight: '5px'}} />\n                    {getFieldDecorator('secondsUntilPopup', { initialValue: 1 })(\n                        <InputNumber disabled={this.state.isPopupDisabled} min={1} />\n                    )}\n                    <span className=\"ant-form-text\"> seconds</span>\n                    </FormItem>\n\n                    <FormItem {...formItemLayout}\n                              label=\"Assistant Template\">\n\n                        {\n                            getFieldDecorator('template')(\n                                <Select placeholder=\"Please select template\">\n                                    <Option value=\"recruitment\">Recruitment</Option>\n                                    <Option value=\"Shopping\">Shopping</Option>\n                                    <Option value=\"Sales\">Sales</Option>\n                                </Select>\n                            )\n                        }\n                    </FormItem>\n                </Form>\n            </Modal>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        successMsg: state.assistant.successMsg,\n        isAdding: state.assistant.isAdding\n    };\n}\n\nexport default connect(mapStateToProps)(Form.create()(NewAssistantModal))\n","import React, {Component} from 'react';\nimport {Button, message, Skeleton} from 'antd';\nimport {connect} from 'react-redux';\n\nimport \"./Assistants.less\"\nimport styles from \"./Assistants.module.less\"\nimport Assistant from \"./Assistant/Assistant\"\n\nimport {assistantActions} from \"../../../store/actions/assistant.actions\";\nimport NewAssistantModal from \"./NewAssistantModal/NewAssistantModal\";\n\n\nclass Assistants extends Component {\n    state = {\n        visible: false,\n    };\n\n    componentDidUpdate(prevProps) {\n        // Show feedback for settings update\n        if (Boolean(this.props.successSettings) && Boolean(prevProps.successSettings) !== Boolean(this.props.successSettings))\n            message.success(this.props.successSettings);\n\n        if (Boolean(this.props.errorSettings) && Boolean(prevProps.errorSettings) !== Boolean(this.props.errorSettings))\n            message.error(this.props.errorSettings);\n    }\n\n\n    componentDidMount() {\n        this.props.dispatch(assistantActions.fetchAssistants());\n    }\n\n\n    showModal = () => {\n        this.setState({\n            visible: true,\n        });\n    };\n\n    hideModal = () => {\n        this.setState({\n            visible: false,\n        });\n    };\n\n\n    render() {\n        return (\n            <div style={{height: '100%'}}>\n                <div className={styles.Panel}>\n                    <div className={styles.Panel_Header}>\n                        <div>\n                            <h3>Assistants List</h3>\n                            <p>Here you can see all assistants created by you</p>\n                        </div>\n                        <div>\n                            <Button className={styles.Panel_Header_Button} type=\"primary\" icon=\"plus\"\n                                    onClick={this.showModal}>\n                                Add Assistant\n                            </Button>\n                        </div>\n\n                    </div>\n\n\n                    <div className={styles.Panel_Body}>\n                        <div className={styles.AssistantsList}>\n                            {\n                                this.props.assistantList[0] ?\n                                    (\n                                        this.props.assistantList.map((assistant, i) => <Assistant assistant={assistant}\n                                                                                                  key={i}\n                                                                                                  index={i}\n                                                                                                  isLoading={this.props.isLoading}\n                                        />)\n                                    )\n                                    : <Skeleton active/>\n                            }\n                        </div>\n                    </div>\n\n                </div>\n\n\n                <NewAssistantModal visible={this.state.visible}\n                                   hideModal={this.hideModal}/>\n\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        assistantList: state.assistant.assistantList,\n        isLoading: state.assistant.isLoading,\n        successSettings: state.settings.successMsg,\n        errorSettings: state.settings.errorMsg,\n    };\n}\n\nexport default connect(mapStateToProps)(Assistants);\n","import React, {Component} from 'react';\nimport \"./NewGroup.less\"\nimport {Button, Modal, Form, Input} from \"antd\";\n\nconst FormItem = Form.Item;\n\nclass NewGroup extends Component {\n\n    state = {};\n\n    handleSave = () => this.props.form.validateFields((err, values) => {\n        if (!err)\n            this.props.handleSave(values)\n    });\n\n    render() {\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        };\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Modal\n                width={800}\n                title=\"Create New Group\"\n                destroyOnClose={true}\n                visible={this.props.visible}\n                onOk={this.props.handleSave}\n                onCancel={this.props.handleCancel}\n                footer={[\n                    <Button key=\"Cancel\" onClick={this.props.handleCancel}>Cancel</Button>,\n                    <Button key=\"submit\" type=\"primary\" onClick={this.handleSave}>\n                        Add\n                    </Button>\n                ]}>\n                <Form layout='horizontal'>\n                    <FormItem\n                        label=\"Group Name\"\n                        extra=\"Enter a name for your group to easily identify it in the group list\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('name', {\n                            rules: [{\n                                required: true,\n                                message: 'Please enter your group name',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Greetings group, Sales group\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem\n                        label=\"Group Description\"\n                        extra=\"Just a description for you\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('description', {\n                            rules: [{\n                                required: true,\n                                message: 'Please add description to your group name',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: this is first group, this group help get info from user\"/>\n                        )}\n                    </FormItem>\n\n\n                </Form>\n            </Modal>\n        );\n    }\n}\n\nexport default Form.create()(NewGroup)","import React, {Component} from 'react';\nimport {Button, Modal, Form, Input} from \"antd\";\n\nconst FormItem = Form.Item;\n\nclass EditGroup extends Component {\n\n    state = {};\n\n    handleUpdate = () => this.props.form.validateFields((err, values) => {\n        if (!err) {\n            this.props.group.name = values.name;\n            this.props.group.description = values.description;\n            this.props.handleUpdate(this.props.group)\n        }\n    });\n\n\n    render() {\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        };\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Modal\n                width={800}\n                title=\"Edit Group\"\n                visible={this.props.visible}\n                onOk={this.props.handleUpdate}\n                onCancel={this.props.handleCancel}\n                footer={[\n                    <Button key=\"delete\" type=\"danger\" onClick={() => this.props.handleDelete(this.props.group)}>\n                        Delete\n                    </Button>,\n                    <Button key=\"Cancel\" onClick={this.props.handleCancel}>Cancel</Button>,\n                    <Button key=\"submit\" type=\"primary\" onClick={this.handleUpdate}>\n                        Update\n                    </Button>\n                ]}>\n                <Form layout='horizontal'>\n                    <FormItem\n                        label=\"Group Name\"\n                        extra=\"Enter a name for your group to easily identify it in the group list\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('name', {\n                            initialValue: this.props.group.name,\n                            rules: [{\n                                required: true,\n                                message: 'Please enter your group name',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Greetings group, Sales group\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem\n                        label=\"Group Description\"\n                        extra=\"Just a description for you\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('description', {\n                            initialValue: this.props.group.description,\n                            rules: [{\n                                required: true,\n                                message: 'Please description to your group name',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: this is first group, this group help get info from user\"/>\n                        )}\n                    </FormItem>\n\n\n                </Form>\n            </Modal>\n        );\n    }\n}\n\nexport default Form.create()(EditGroup)","import React, {Component} from 'react';\nimport \"./Groups.less\"\nimport styles from \"./Groups.module.less\";\nimport {Avatar, Button, List, Spin, Skeleton} from \"antd\";\nimport NewGroup from \"./NewGroup/NewGroup\";\nimport EditGroup from \"./EditGroup/EditGroup\";\n\nclass Groups extends Component {\n\n    state = {\n        newGroupModal: false,\n        editGroupModal: false,\n        selectedGroupToEdit: {}\n    };\n\n\n    ////// ADD GROUP\n    handleAddGroup = (newGroup) => {\n        this.props.addGroup(newGroup);\n        this.setState({newGroupModal: false});\n    };\n\n    handleAddGroupCancel = () => this.setState({newGroupModal: false});\n\n    showNewGroupModal = () => this.setState({newGroupModal: true});\n\n\n    ////// EDIT GROUP\n    handleEditGroup = (editedGroup) => {\n        this.props.editGroup(editedGroup);\n        this.setState({editGroupModal: false, selectedGroupToEdit: {}});\n    };\n\n    handleEditGroupCancel = () => this.setState({editGroupModal: false});\n\n    showEditGroupModal = (item) => this.setState({editGroupModal: true, selectedGroupToEdit: item});\n\n    ////// DELETE GROUP\n    handleDeleteGroup = (deletedGroup) => {\n        this.props.deleteGroup(deletedGroup);\n        this.setState({editGroupModal: false, selectedGroupToEdit: {}});\n    };\n\n\n    render() {\n        return (\n            <div className={styles.Panel}>\n                <div className={styles.Panel_Header}>\n                    <div>\n                        <h3>Flow Groups</h3>\n                    </div>\n                    <div>\n                        <Button className={styles.Panel_Header_Button} type=\"primary\" icon=\"plus\"\n                                onClick={this.showNewGroupModal}>\n                            Add Group\n                        </Button>\n\n                        <NewGroup visible={this.state.newGroupModal}\n                                  handleCancel={this.handleAddGroupCancel}\n                                  handleSave={this.handleAddGroup}/>\n                    </div>\n                </div>\n\n\n                <div className={styles.Panel_Body}>\n                    {\n                        this.props.isLoading ?\n                            <Spin><Skeleton active={true}/></Spin>\n                            :\n                            <List\n                                itemLayout=\"horizontal\"\n                                dataSource={this.props.groupsList}\n                                renderItem={item => (\n                                    <List.Item\n                                        actions={[<Button icon={'edit'}\n                                                          onClick={() => this.showEditGroupModal(item)}/>]}>\n                                        <List.Item.Meta\n                                            avatar={<Avatar icon=\"ordered-list\"\n                                                            style={{backgroundColor: '#9254de'}}/>}\n                                            title={<a onClick={() => this.props.selectGroup(item)}>{item.name}</a>}\n                                            description={item.description}\n                                        />\n                                    </List.Item>\n                                )}\n                            />\n                    }\n                </div>\n\n                <EditGroup group={this.state.selectedGroupToEdit}\n                           visible={this.state.editGroupModal}\n                           handleCancel={this.handleEditGroupCancel}\n                           handleUpdate={this.handleEditGroup}\n                           handleDelete={this.handleDeleteGroup}/>\n            </div>\n        );\n    }\n}\n\nexport default Groups;\n","import React, {Component} from 'react';\nimport {Row, Col, Collapse, Divider, Button, Card, Tag, Checkbox} from \"antd\";\n\nconst Panel = Collapse.Panel;\nconst {Meta} = Card;\n\nclass Block extends Component {\n\n    editBlock(block) {\n        console.log('this block needs to be edited', block)\n        this.props.editBlock(block)\n    }\n\n    deleteBlock(block) {\n        console.log('this block needs to be delete', block)\n        this.props.deleteBlock(block)\n    }\n\n    render() {\n        const {block} = this.props;\n        return (\n            <Collapse bordered={true}>\n                <Panel header={(\n                    <>\n                        {block.type} <Divider type=\"vertical\"/>\n                        {block.content.text} <Divider type=\"vertical\"/>\n\n                        <Button icon={'edit'} size={\"small\"} onClick={() => this.editBlock(block)}/>\n                        <Divider type=\"vertical\"/>\n                        <Button icon={'delete'} size={\"small\"} type={\"danger\"}\n                                onClick={() => this.deleteBlock(block)}/>\n                    </>\n                )}\n                       key={this.props.key}>\n\n                    {block.content.text ?\n                        <Row>\n                            <Col span={6}>Question:</Col>\n                            <Col span={12}>{block.content.text}</Col>\n                            <Divider/>\n                        </Row>\n                        : null\n                    }\n\n                    {block.content.blockToGoID ?\n                        <Row>\n                            <Col span={6}>block To Go ID:</Col>\n                            <Col span={12}>{block.content.blockToGoID}</Col>\n                            <Divider/>\n                        </Row>\n                        : null\n                    }\n\n                    {block.content.validation ?\n                        <Row>\n                            <Col span={6}>validation</Col>\n                            <Col span={12}>{block.content.validation}</Col>\n                            <Divider/>\n                        </Row>\n                        : null\n                    }\n\n                    {block.content.action ?\n                        <Row>\n                            <Col span={6}>action</Col>\n                            <Col span={12}>{block.content.action}</Col>\n                            <Divider/>\n                        </Row>\n                        : null\n                    }\n\n                    {block.content.afterMessage ?\n                        <Row>\n                            <Col span={6}>after Message</Col>\n                            <Col span={12}>{block.content.afterMessage}</Col>\n                            <Divider/>\n                        </Row>\n                        : null\n                    }\n\n                    {block.content.showTop ?\n                        <Row>\n                            <Col span={6}>show Top</Col>\n                            <Col span={12}>{block.content.showTop}</Col>\n                            <Divider/>\n                        </Row>\n                        : null\n                    }\n\n                    {block.content.storeInDB ?\n                        <Row>\n                            <Col span={6}>Stroe in DB:</Col>\n                            <Col span={6}><Checkbox checked={block.content.storeInDB}></Checkbox></Col>\n\n                            <Col span={6}>Skippable:</Col>\n                            <Col span={6}><Checkbox checked={block.content.isSkippable}></Checkbox></Col>\n                            <Divider/>\n                        </Row>\n                        : null\n                    }\n\n                    {block.content.answers ?\n                        <div>\n                            Answers:\n                            {\n                                block.content.answers.map((answer, i) =>\n                                    <Card key={i} style={{margin: 5, width: 300}}>\n                                        <Meta\n                                            title={answer.text}\n                                            description={\n                                                (<>Keywords: {answer.keywords.map((keyword, i) =>\n                                                    <Tag key={i}>{keyword}</Tag>)}</>)\n                                            }\n                                        />\n                                        <Row>\n                                            <Divider/>\n                                            <Col span={6}>Action:</Col>\n                                            <Col span={12}>{answer.action}</Col>\n                                        </Row>\n\n                                        <Row>\n                                            <Divider/>\n                                            <Col span={6}>After Message</Col>\n                                            <Col span={12}>{answer.afterMessage}</Col>\n                                        </Row>\n\n                                    </Card>\n                                )\n                            }\n                        </div>\n                        : null\n                    }\n\n                </Panel>\n            </Collapse>\n        );\n    }\n\n}\n\nexport default Block;\n\n","import React, {Component} from 'react';\nimport {Button, Card, Checkbox, Form, Input, Select, Spin} from \"antd\";\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\nclass UserInput extends Component {\n\n    state = {\n        showGoToBlock: false,\n        showGoToGroup: false\n    };\n\n    onSubmit = () => {\n        return this.props.form.validateFields((err, values) => {\n            // If from is valid crete the new block following User Input block type format\n            if (!err) {\n                this.props.handleNewBlock({\n                    block: {\n                        type: 'User Input',\n                        groupID: this.props.options.currentGroup.id,\n                        storeInDB: values.storeInDB,\n                        isSkippable: values.isSkippable,\n                        labels: '',\n                        content: {\n                            text: values.text,\n                            blockToGoID: values.blockToGoID || values.blockToGoIDGroup || null,\n                            validation: values.validation,\n                            action: values.action,\n                            afterMessage: values.afterMessage\n                        }\n                    }\n                })\n            }\n        })\n    };\n\n    onCancel = () => this.props.handleNewBlock(false);\n\n    onSelectAction = (action) => {\n        if (action === \"Go To Specific Block\")\n            this.setState({showGoToBlock: true, showGoToGroup: false});\n        else if (action === \"Go To Group\")\n            this.setState({showGoToBlock: false, showGoToGroup: true});\n        else\n            this.setState({showGoToBlock: false, showGoToGroup: false});\n    };\n\n    render() {\n        const {blockTypes, blocks, allGroups} = this.props.options;\n        let blockOptions = {};\n        // extract the correct blockType from blockTypes[]\n        for (const blockType of blockTypes)\n            if (blockType.name === 'User Input')\n                blockOptions = blockType;\n\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Card style={{width: '100%'}}\n                  actions={[\n                      <Button key=\"cancel\" onClick={this.onCancel}>Cancel</Button>,\n                      <Button key=\"submit\" type=\"primary\" onClick={this.onSubmit}>Add</Button>]}\n            >\n                <Form layout='horizontal'>\n                    <FormItem label=\"Question\"\n                              extra=\"The above text will be shown in a bubble inside the chat\"\n                              {...this.props.options.layout}>\n                        {getFieldDecorator('text', {\n                            rules: [{\n                                required: true,\n                                message: \"Please input question field\",\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Where are you from?\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem label=\"Validation\"\n                              {...this.props.options.layout}>\n                        {\n                            blockOptions.validations ?\n                                getFieldDecorator('validation', {\n                                    rules: [{\n                                        required: true,\n                                        message: \"Please field validation\",\n                                    }]\n                                })(\n                                    <Select placeholder=\"Will validate the input\">{\n                                        blockOptions.validations.map((validation, i) =>\n                                            <Option key={i} value={validation}>{validation}</Option>)\n                                    }</Select>\n                                )\n                                : <Spin><Select placeholder=\"Will validate the input\"></Select></Spin>\n                        }\n                    </FormItem>\n\n                    <FormItem label=\"Action\"\n                              {...this.props.options.layout}>\n                        {\n                            blockOptions.actions ?\n                                getFieldDecorator('action', {\n                                    rules: [{\n                                        required: true,\n                                        message: \"Please input question field\",\n                                    }],\n                                })(\n                                    <Select onSelect={this.onSelectAction}\n                                            placeholder=\"The next step after this block\">{\n                                        blockOptions.actions.map((action, i) =>\n                                            <Option key={i}\n                                                    value={action}>{action}</Option>)\n                                    }</Select>\n                                )\n                                : <Spin><Select placeholder=\"The next step after this block\"></Select></Spin>\n                        }\n                    </FormItem>\n\n                    {this.state.showGoToBlock ?\n                        (<FormItem label=\"Go To Specific Block\" {...this.props.options.layout}>\n                            {\n                                getFieldDecorator('blockToGoID',\n                                    {\n                                        rules: [{required: true, message: \"Please select your next block\"}]\n\n                                    }\n                                )(\n                                    <Select placeholder=\"The next step after this block\">{\n                                        blocks.map((block, i) =>\n                                            <Option key={i} value={block.id}>\n                                                {`${block.id}- (${block.type}) ${block.content.text ? block.content.text : ''}`}\n                                            </Option>\n                                        )\n                                    }</Select>\n                                )\n                            }\n                        </FormItem>)\n                        : null\n                    }\n\n                    {this.state.showGoToGroup ?\n                        (<FormItem label=\"Go To Specific Group\"\n                                   extra=\"The selected group will start from its first block\"\n                                   {...this.props.options.layout}>\n                            {\n                                getFieldDecorator('blockToGoIDGroup',\n                                    {\n                                        rules: [{required: true, message: \"Please select your next group\"}]\n                                    }\n                                )(\n                                    <Select placeholder=\"The next block after this block\">{\n                                        allGroups.map((group, i) => {\n                                                if (group.blocks[0])\n                                                    return <Option key={i} value={group.blocks[0].id}>\n                                                        {`${group.name}`}\n                                                    </Option>;\n                                                else\n                                                    return <Option disabled key={i} value={group.name}>\n                                                        {`${group.name}`}\n                                                    </Option>\n                                            }\n                                        )\n                                    }</Select>\n                                )\n                            }\n                        </FormItem>)\n                        : null\n                    }\n\n\n                    <FormItem label=\"After message\"\n                              extra=\"This message will display straight after the user's response\"\n                              {...this.props.options.layout}>\n                        {getFieldDecorator('afterMessage', {\n                            rules: [{\n                                required: true,\n                                message: \"Please input question field\",\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Your input is recorded\"/>\n                        )}\n                    </FormItem>\n\n                    <Form.Item\n                        label=\"Skippable?\"\n                        {...this.props.options.layout}>\n                        {getFieldDecorator('isSkippable', {\n                            valuePropName: 'checked',\n                            initialValue: false,\n                        })(\n                            <Checkbox>Users can skip answering this question</Checkbox>\n                        )}\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"Store responses?\"\n                        {...this.props.options.layout}>\n                        {getFieldDecorator('storeInDB', {\n                            valuePropName: 'checked',\n                            initialValue: blockOptions.alwaysStoreInDB,\n                        })(\n                            <Checkbox disabled={blockOptions.alwaysStoreInDB}>\n                                Users' responses should be recorded</Checkbox>\n                        )}\n                    </Form.Item>\n\n                </Form>\n            </Card>\n        );\n    }\n}\n\nexport default Form.create()(UserInput);\n\n","import React, {Component} from 'react';\nimport {Button, Card, Checkbox, Form, Icon, Input, Modal, Select, Spin, Tag, Tooltip} from \"antd\";\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\nclass Question extends Component {\n\n    state = {\n        showGoToBlock: false,\n        showGoToGroup: false,\n        modalVisible: false,\n\n        tags: [],\n        inputVisible: false,\n        inputValue: '',\n        answers: []\n    };\n\n    onSubmit = () => {\n        return this.props.form.validateFields(['text', 'isSkippable', 'storeInDB'], (err, values) => {\n\n            // If from is valid crete the new block following User Input block type format\n            if (!err) {\n                this.props.handleNewBlock({\n                    block: {\n                        type: 'Question',\n                        groupID: this.props.options.currentGroup.id,\n                        storeInDB: values.storeInDB,\n                        isSkippable: values.isSkippable,\n                        labels: '',\n                        content: {\n                            text: values.text,\n                            answers: this.state.answers\n                        }\n                    }\n                })\n            }\n        })\n    };\n\n    onCancel = () => this.props.handleNewBlock(false);\n\n    onSelectAction = (action) => {\n        if (action === \"Go To Specific Block\")\n            this.setState({showGoToBlock: true, showGoToGroup: false});\n        else if (action === \"Go To Group\")\n            this.setState({showGoToBlock: false, showGoToGroup: true});\n        else\n            this.setState({showGoToBlock: false, showGoToGroup: false});\n    };\n\n\n    addAnswer = () => {\n        this.props.form.validateFields(['answer', 'action', 'blockToGoID', 'blockToGoIDGroup', 'afterMessage'], (err, values) => {\n            if (!err) {\n                const answer = {\n                    text: values.answer,\n                    keywords: this.state.tags,\n                    blockToGoID: values.blockToGoID || values.blockToGoIDGroup || null,\n                    action: values.action,\n                    afterMessage: values.afterMessage\n                };\n                this.setState({tags: []});\n                const answers = this.state.answers;\n                answers.push(answer);\n                this.setState({answers});\n                this.hideAddAnswer();\n                console.log(this.state.answers)\n            }\n        })\n\n    };\n\n    showAddAnswer = () => this.setState({modalVisible: true});\n    hideAddAnswer = () => this.setState({modalVisible: false});\n    removeAnswer = () => {\n        console.log(\"TODO\")\n    };\n\n// Tags component's functions\n    removeTag = (removedTag) => this.setState({tags: this.state.tags.filter(tag => tag !== removedTag)});\n    showInput = () => this.setState({inputVisible: true}, () => this.input.focus());\n    handleInputChange = e => this.setState({inputValue: e.target.value});\n    saveInputRef = input => this.input = input;\n    handleInputConfirm = () => {\n        const inputValue = this.state.inputValue;\n        let tags = this.state.tags;\n        if (inputValue && tags.indexOf(inputValue) === -1)\n            tags = [...tags, inputValue];\n        this.setState({tags, inputVisible: false, inputValue: '',});\n    };\n\n// END Tags component's functions\n\n\n    render() {\n        const {blockTypes, blocks, allGroups} = this.props.options;\n        let blockOptions = {};\n        // extract the correct blockType from blockTypes[]\n        for (const blockType of blockTypes)\n            if (blockType.name === 'Question')\n                blockOptions = blockType;\n\n        const {getFieldDecorator} = this.props.form;\n\n        const {tags, inputVisible, inputValue} = this.state;\n\n        return (\n            <Card style={{width: '100%'}}\n                  actions={[\n                      <Button key=\"cancel\" onClick={this.onCancel}>Cancel</Button>,\n                      <Button key=\"submit\" type=\"primary\" onClick={this.onSubmit}>Add</Button>]}>\n                <Form layout='horizontal'>\n                    <FormItem label=\"Question\"\n                              extra=\"The above text will be shown in a bubble inside the chat\"\n                              {...this.props.options.layout}>\n                        {getFieldDecorator('text', {\n                            rules: [{\n                                required: true,\n                                message: \"Please input question field\",\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Where are you from?\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem label=\"Answers\"\n                              {...this.props.options.layout}>\n                        <Button onClick={this.showAddAnswer}\n                                type=\"primary\" icon=\"plus\" shape=\"circle\" size={\"small\"}></Button>\n                        {\n                            this.state.answers.map((answer, i) => (\n                                <Card title={answer.text}\n                                      key={i}\n                                      extra={<Button onClick={this.removeAnswer}\n                                                     type=\"danger\" icon=\"delete\" shape=\"circle\"\n                                                     size={\"small\"}></Button>}\n                                      style={{width: 200, margin: 10}}>\n                                    <p>Action: {answer.action}</p>\n                                    Tags: <br/>\n                                    {answer.keywords.map((keyword, i) => <Tag key={i}>{keyword}</Tag>)}\n\n                                </Card>\n                            ))\n                        }\n                    </FormItem>\n\n                    <Form.Item\n                        label=\"Skippable?\"\n                        {...this.props.options.layout}>\n                        {getFieldDecorator('isSkippable', {\n                            valuePropName: 'checked',\n                            initialValue: false,\n                        })(\n                            <Checkbox>Users can skip answering this question</Checkbox>\n                        )}\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"Store responses?\"\n                        {...this.props.options.layout}>\n                        {getFieldDecorator('storeInDB', {\n                            valuePropName: 'checked',\n                            initialValue: blockOptions.alwaysStoreInDB,\n                        })(\n                            <Checkbox disabled={blockOptions.alwaysStoreInDB}>\n                                Users' responses should be recorded</Checkbox>\n                        )}\n                    </Form.Item>\n\n                </Form>\n\n\n                {/*ADDING ANSWER*/}\n                <Modal\n                    title=\"Add Answer\"\n                    width={700}\n                    destroyOnClose={true}\n                    visible={this.state.modalVisible}\n                    onOk={this.addAnswer}\n                    onCancel={this.hideAddAnswer}>\n\n                    <Form>\n                        <FormItem label=\"Answer\"\n                                  extra=\"This will be shown as answer in chatbot\"\n                                  {...this.props.options.layout}>\n                            {getFieldDecorator('answer', {\n                                rules: [{\n                                    required: true,\n                                    message: \"Please input answer field\",\n                                }],\n                            })(\n                                <Input placeholder=\"Ex: Yes I need it :)\"/>\n                            )}\n                        </FormItem>\n\n                        <FormItem label=\"Tags\" {...this.props.options.layout}>\n                            <div>\n                                {tags.map((tag) => {\n                                    const isLongTag = tag.length > 20;\n                                    const tagElem = (\n                                        <Tag key={tag} closable={true} afterClose={() => this.removeTag(tag)}>\n                                            {isLongTag ? `${tag.slice(0, 20)}...` : tag}\n                                        </Tag>\n                                    );\n                                    return isLongTag ? <Tooltip title={tag} key={tag}>{tagElem}</Tooltip> : tagElem;\n                                })}\n                                {inputVisible && (\n                                    <Input\n                                        ref={this.saveInputRef}\n                                        type=\"text\"\n                                        size=\"small\"\n                                        style={{width: 78}}\n                                        value={inputValue}\n                                        onChange={this.handleInputChange}\n                                        onBlur={this.handleInputConfirm}\n                                        onPressEnter={this.handleInputConfirm}\n                                    />\n                                )}\n                                {!inputVisible && (\n                                    <Tag\n                                        onClick={this.showInput}\n                                        style={{background: '#fff', borderStyle: 'dashed'}}>\n                                        <Icon type=\"plus\"/> New Tag\n                                    </Tag>\n                                )}\n                            </div>\n                        </FormItem>\n\n                        <FormItem label=\"Action\"{...this.props.options.layout}>{\n                            blockOptions.actions ?\n                                getFieldDecorator('action', {\n                                    rules: [{\n                                        required: true,\n                                        message: \"Please input action field\",\n                                    }],\n                                })(\n                                    <Select onSelect={this.onSelectAction}\n                                            placeholder=\"The next step after this block\">{\n                                        blockOptions.actions.map((action, i) =>\n                                            <Option key={i}\n                                                    value={action}>{action}</Option>)\n                                    }</Select>\n                                )\n                                : <Spin><Select placeholder=\"The next step after this block\"></Select></Spin>\n                        }</FormItem>\n\n                        {this.state.showGoToBlock ?\n                            (<FormItem label=\"Go To Specific Block\" {...this.props.options.layout}>\n                                {\n                                    getFieldDecorator('blockToGoID',\n                                        {\n                                            rules: [{required: true, message: \"Please select your next block\"}],\n                                        }\n                                    )(\n                                        <Select placeholder=\"The next step after this block\">{\n                                            blocks.map((block, i) =>\n                                                <Option key={i} value={block.id}>\n                                                    {`${block.id}- (${block.type}) ${block.content.text ? block.content.text : ''}`}\n                                                </Option>\n                                            )\n                                        }</Select>\n                                    )\n                                }\n                            </FormItem>)\n                            : null\n                        }\n\n                        {this.state.showGoToGroup ?\n                            (<FormItem label=\"Go To Specific Group\"\n                                       extra=\"The selected group will start from its first block\"\n                                       {...this.props.options.layout}>\n                                {\n                                    getFieldDecorator('blockToGoIDGroup',\n                                        {\n                                            rules: [{required: true, message: \"Please select your next group\"}]\n                                        }\n                                    )(\n                                        <Select placeholder=\"The next block after this block\">{\n                                            allGroups.map((group, i) => {\n                                                    if (group.blocks[0])\n                                                        return <Option key={i} value={group.blocks[0].id}>\n                                                            {`${group.name}`}\n                                                        </Option>;\n                                                    else\n                                                        return <Option disabled key={i} value={group.name}>\n                                                            {`${group.name}`}\n                                                        </Option>\n                                                }\n                                            )\n                                        }</Select>\n                                    )\n                                }\n                            </FormItem>)\n                            : null\n                        }\n\n                        <FormItem label=\"After message\"\n                                  extra=\"This message will display straight after the user's response\"\n                                  {...this.props.options.layout}>\n                            {getFieldDecorator('afterMessage', {\n                                rules: [{\n                                    required: true,\n                                    message: \"Please input after message field\",\n                                }],\n                            })(\n                                <Input placeholder=\"Ex: Your input is recorded\"/>\n                            )}\n                        </FormItem>\n                    </Form>\n\n                </Modal>\n            </Card>\n        );\n    }\n\n}\n\n\nexport default Form.create()(Question);\n\n","import React, {Component} from 'react';\nimport {Button, Card, Checkbox, Form, Input, Select, Spin} from \"antd\";\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\nconst CheckboxGroup = Checkbox.Group;\n\nclass FileUpload extends Component {\n\n    state = {\n        showGoToBlock: false,\n        showGoToGroup: false,\n        fileTypes: []\n    };\n\n    onSubmit = () => {\n        return this.props.form.validateFields((err, values) => {\n            if (!err) {\n                this.props.handleNewBlock({\n                    block: {\n                        type: 'File Upload',\n                        groupID: this.props.options.currentGroup.id,\n                        storeInDB: values.storeInDB,\n                        isSkippable: values.isSkippable,\n                        labels: '',\n                        content: {\n                            text: values.text,\n                            action: values.action,\n                            fileTypes: this.state.fileTypes,\n                            blockToGoID: values.blockToGoID || values.blockToGoIDGroup || null,\n                            afterMessage: values.afterMessage\n                        }\n                    }\n                })\n            }\n        })\n    };\n\n    onCancel = () => this.props.handleNewBlock(false);\n\n    onSelectAction = (action) => {\n        if (action === \"Go To Specific Block\")\n            this.setState({showGoToBlock: true, showGoToGroup: false});\n        else if (action === \"Go To Group\")\n            this.setState({showGoToBlock: false, showGoToGroup: true});\n        else\n            this.setState({showGoToBlock: false, showGoToGroup: false});\n    };\n\n    onChange = (checkedValues) => this.setState({fileTypes: checkedValues});\n\n    render() {\n        const {blockTypes, blocks, allGroups} = this.props.options;\n        let blockOptions = {};\n        // extract the correct blockType from blockTypes[]\n\n        for (const blockType of blockTypes)\n            if (blockType.name === \"File Upload\")\n                blockOptions = blockType;\n        const {getFieldDecorator} = this.props.form;\n\n        const typesAllowed = blockOptions.typesAllowed;\n        return (\n            <Card style={{width: '100%'}}\n                  actions={[\n                      <Button key=\"cancel\" onClick={this.onCancel}>Cancel</Button>,\n                      <Button key=\"submit\" type=\"primary\" onClick={this.onSubmit}>Add</Button>]}>\n                <Form layout='horizontal'>\n                    <FormItem label=\"Question\"\n                              extra=\"The above text will be shown in a bubble inside the chat\"\n                              {...this.props.options.layout}>\n                        {getFieldDecorator('text', {\n                            rules: [{\n                                required: true,\n                                message: \"Please input question field\",\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Please upload you cv\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem label=\"File Types\"\n                              {...this.props.options.layout}>\n                        {\n                            blockOptions.typesAllowed ?\n                                getFieldDecorator('fileTypes', {\n                                    rules: [{\n                                        required: true,\n                                        message: \"Please select the accepted file type\",\n                                    }]\n                                })(\n                                    <CheckboxGroup options={typesAllowed} onChange={this.onChange}/>\n                                )\n                                : <Spin/>\n                        }\n                    </FormItem>\n\n                    <FormItem label=\"Action\"{...this.props.options.layout}>\n                        {\n                            blockOptions.actions ?\n                                getFieldDecorator('action', {\n                                    rules: [{\n                                        required: true,\n                                        message: \"Please input question field\",\n                                    }],\n                                })(\n                                    <Select onSelect={this.onSelectAction}\n                                            placeholder=\"The next step after this block\">{\n                                        blockOptions.actions.map((action, i) =>\n                                            <Option key={i}\n                                                    value={action}>{action}</Option>)\n                                    }</Select>\n                                )\n                                : <Spin><Select placeholder=\"The next step after this block\"></Select></Spin>\n                        }\n                    </FormItem>\n\n                    {this.state.showGoToBlock ?\n                        (<FormItem label=\"Go To Specific Block\" {...this.props.options.layout}>\n                            {\n                                getFieldDecorator('blockToGoID',\n                                    {\n                                        rules: [{required: true, message: \"Please select your next block\"}]\n\n                                    }\n                                )(\n                                    <Select placeholder=\"The next step after this block\">{\n                                        blocks.map((block, i) =>\n                                            <Option key={i} value={block.id}>\n                                                {`${block.id}- (${block.type}) ${block.content.text ? block.content.text : ''}`}\n                                            </Option>\n                                        )\n                                    }</Select>\n                                )\n                            }\n                        </FormItem>)\n                        : null\n                    }\n\n                    {this.state.showGoToGroup ?\n                        (<FormItem label=\"Go To Specific Group\"\n                                   extra=\"The selected group will start from its first block\"\n                                   {...this.props.options.layout}>\n                            {\n                                getFieldDecorator('blockToGoIDGroup',\n                                    {\n                                        rules: [{required: true, message: \"Please select your next group\"}]\n                                    }\n                                )(\n                                    <Select placeholder=\"The next block after this block\">{\n                                        allGroups.map((group, i) => {\n                                                if (group.blocks[0])\n                                                    return <Option key={i} value={group.blocks[0].id}>\n                                                        {`${group.name}`}\n                                                    </Option>;\n                                                else\n                                                    return <Option disabled key={i} value={group.name}>\n                                                        {`${group.name}`}\n                                                    </Option>\n                                            }\n                                        )\n                                    }</Select>\n                                )\n                            }\n                        </FormItem>)\n                        : null\n                    }\n\n\n                    <FormItem label=\"After message\"\n                              extra=\"This message will display straight after the user's response\"\n                              {...this.props.options.layout}>\n                        {getFieldDecorator('afterMessage', {\n                            rules: [{\n                                required: true,\n                                message: \"Please input question field\",\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Your input is recorded\"/>\n                        )}\n                    </FormItem>\n\n                    <Form.Item\n                        label=\"Skippable?\"\n                        {...this.props.options.layout}>\n                        {getFieldDecorator('isSkippable', {\n                            valuePropName: 'checked',\n                            initialValue: false,\n                        })(\n                            <Checkbox>Users can skip answering this question</Checkbox>\n                        )}\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"Store responses?\"\n                        {...this.props.options.layout}>\n                        {getFieldDecorator('storeInDB', {\n                            valuePropName: 'checked',\n                            initialValue: blockOptions.alwaysStoreInDB,\n                        })(\n                            <Checkbox disabled={blockOptions.alwaysStoreInDB}>\n                                Users' responses should be recorded</Checkbox>\n                        )}\n                    </Form.Item>\n\n                </Form>\n            </Card>\n        );\n    }\n}\n\nexport default Form.create()(FileUpload);\n\n","import React, {Component} from 'react';\nimport {Button, Card, Checkbox, Form, Input, Select, Spin} from \"antd\";\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\nclass Solutions extends Component {\n\n    state = {\n        showGoToBlock: false,\n        showGoToGroup: false\n    };\n\n    onSubmit = () => {\n        return this.props.form.validateFields((err, values) => {\n            // If from is valid crete the new block following User Input block type format\n            if (!err) {\n                const newBlock = {\n                    block: {\n                        type: 'Solutions',\n                        groupID: this.props.options.currentGroup.id,\n                        storeInDB: values.storeInDB,\n                        isSkippable: values.isSkippable,\n                        labels: '',\n                        content: {\n                            showTop: Number(values.showTop),\n                            action: values.action,\n                            blockToGoID: values.blockToGoID || values.blockToGoIDGroup || null,\n                            afterMessage: values.afterMessage,\n                        }\n                    }\n                };\n                this.props.handleNewBlock(newBlock)\n            }\n        })\n    };\n\n    onCancel = () => this.props.handleNewBlock(false);\n\n    onSelectAction = (action) => {\n        if (action === \"Go To Specific Block\")\n            this.setState({showGoToBlock: true, showGoToGroup: false});\n        else if (action === \"Go To Group\")\n            this.setState({showGoToBlock: false, showGoToGroup: true});\n        else\n            this.setState({showGoToBlock: false, showGoToGroup: false});\n    };\n\n    render() {\n        const {blockTypes, blocks, allGroups} = this.props.options;\n        let blockOptions = {};\n        // extract the correct blockType from blockTypes[]\n        for (const blockType of blockTypes)\n            if (blockType.name === 'User Input')\n                blockOptions = blockType;\n\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Card style={{width: '100%'}}\n                  actions={[\n                      <Button key=\"cancel\" onClick={this.onCancel}>Cancel</Button>,\n                      <Button key=\"submit\" type=\"primary\" onClick={this.onSubmit}>Add</Button>]}\n            >\n                <Form layout='horizontal'>\n                    <FormItem label=\"Show Top Results\"\n                              extra=\"Number of results you want to return\"\n                              {...this.props.options.layout}>\n                        {getFieldDecorator('showTop', {\n                            rules: [{\n                                required: true,\n                                message: \"Please show top field\",\n                            }],\n                        })(\n                            <Input min=\"1\" type=\"number\" placeholder=\"Ex: Where are you from?\"/>\n                        )}\n                    </FormItem>\n\n\n                    <FormItem label=\"Action\"\n                              {...this.props.options.layout}>\n                        {\n                            blockOptions.actions ?\n                                getFieldDecorator('action', {\n                                    rules: [{\n                                        required: true,\n                                        message: \"Please input question field\",\n                                    }],\n                                })(\n                                    <Select onSelect={this.onSelectAction}\n                                            placeholder=\"The next step after this block\">{\n                                        blockOptions.actions.map((action, i) =>\n                                            <Option key={i}\n                                                    value={action}>{action}</Option>)\n                                    }</Select>\n                                )\n                                : <Spin><Select placeholder=\"The next step after this block\"></Select></Spin>\n                        }\n                    </FormItem>\n\n                    {this.state.showGoToBlock ?\n                        (<FormItem label=\"Go To Specific Block\" {...this.props.options.layout}>\n                            {\n                                getFieldDecorator('blockToGoID',\n                                    {\n                                        rules: [{required: true, message: \"Please select your next block\"}]\n\n                                    }\n                                )(\n                                    <Select placeholder=\"The next step after this block\">{\n                                        blocks.map((block, i) =>\n                                            <Option key={i} value={block.id}>\n                                                {`${block.id}- (${block.type}) ${block.content.text ? block.content.text : ''}`}\n                                            </Option>\n                                        )\n                                    }</Select>\n                                )\n                            }\n                        </FormItem>)\n                        : null\n                    }\n\n                    {this.state.showGoToGroup ?\n                        (<FormItem label=\"Go To Specific Group\"\n                                   extra=\"The selected group will start from its first block\"\n                                   {...this.props.options.layout}>\n                            {\n                                getFieldDecorator('blockToGoIDGroup',\n                                    {\n                                        rules: [{required: true, message: \"Please select your next group\"}]\n                                    }\n                                )(\n                                    <Select placeholder=\"The next block after this block\">{\n                                        allGroups.map((group, i) => {\n                                                if (group.blocks[0])\n                                                    return <Option key={i} value={group.blocks[0].id}>\n                                                        {`${group.name}`}\n                                                    </Option>;\n                                                else\n                                                    return <Option disabled key={i} value={group.name}>\n                                                        {`${group.name}`}\n                                                    </Option>\n                                            }\n                                        )\n                                    }</Select>\n                                )\n                            }\n                        </FormItem>)\n                        : null\n                    }\n\n                    <FormItem label=\"After message\"\n                              extra=\"This message will display straight after the user's response\"\n                              {...this.props.options.layout}>\n                        {getFieldDecorator('afterMessage', {\n                            rules: [{\n                                required: true,\n                                message: \"Please input after message field\",\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: There you go :)\"/>\n                        )}\n                    </FormItem>\n\n\n                    <Form.Item\n                        label=\"Skippable?\"\n                        {...this.props.options.layout}>\n                        {getFieldDecorator('isSkippable', {\n                            valuePropName: 'checked',\n                            initialValue: false,\n                        })(\n                            <Checkbox>Users can skip answering this question</Checkbox>\n                        )}\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"Store responses?\"\n                        {...this.props.options.layout}>\n                        {getFieldDecorator('storeInDB', {\n                            valuePropName: 'checked',\n                            initialValue: blockOptions.alwaysStoreInDB,\n                        })(\n                            <Checkbox disabled={blockOptions.alwaysStoreInDB}>\n                                Users' responses should be recorded</Checkbox>\n                        )}\n                    </Form.Item>\n\n                </Form>\n            </Card>\n        );\n    }\n}\n\nexport default Form.create()(Solutions);\n\n","import React, {Component} from 'react';\n\nimport {http} from \"../../../../../../../helpers\";\n\nimport {Icon, Modal, Tabs} from 'antd';\n\nimport UserInput from \"./Cards/UserInput\";\nimport Question from \"./Cards/Question\";\nimport FileUpload from \"./Cards/FileUpload\";\nimport Solutions from \"./Cards/Solutions\";\n\nconst TabPane = Tabs.TabPane;\n\nclass NewBlockModal extends Component {\n\n    state = {\n        layout: {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14}\n        },\n        blockTypes: [],\n        blocks: [],\n        allGroups: [],\n        currentGroup: null\n    };\n\n    componentDidMount() {\n        http.get(`/assistant/flow/options`)\n            .then(res => this.setState({blockTypes: res.data.data.blockTypes}))\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            blocks: nextProps.blocks,\n            allGroups: nextProps.allGroups,\n            currentGroup: nextProps.currentGroup,\n        })\n    }\n\n    handleNewBlock = (newBlock) => {\n        if (newBlock)\n            this.props.handleAddBlock(newBlock);\n        this.props.closeModal();\n    };\n\n\n    onChangeTab = (currentTab) => this.setState({currentTab});\n\n    render() {\n        return (\n            <Modal width={800}\n                   title=\"Add New Block\"\n                   visible={this.props.visible}\n                   onCancel={this.props.closeModal}\n                   destroyOnClose={true}\n                   footer={null}>\n\n                <Tabs type=\"card\" onChange={this.onChangeTab}>\n                    <TabPane tab={<span><Icon type=\"form\"/>User Input</span>}\n                             key=\"UserInput\">\n                        <UserInput options={this.state}\n                                   handleNewBlock={this.handleNewBlock}/>\n                    </TabPane>\n\n                    <TabPane tab={<span><Icon type=\"question-circle\"/>Question</span>}\n                             key=\"Question\">\n                        <Question options={this.state}\n                                  handleNewBlock={this.handleNewBlock}/>\n                    </TabPane>\n\n                    <TabPane tab={<span><Icon type=\"file-add\"/>File Upload</span>}\n                             key=\"FileUpload\">\n                        <FileUpload options={this.state}\n                                    handleNewBlock={this.handleNewBlock}/>\n                    </TabPane>\n\n                    <TabPane tab={<span><Icon type=\"tag\"/>Solutions</span>}\n                             key=\"Solutions\">\n                        <Solutions options={this.state}\n                                   handleNewBlock={this.handleNewBlock}/>\n                    </TabPane>\n\n                </Tabs>\n            </Modal>\n        );\n    }\n}\n\n\nexport default NewBlockModal\n","import React, {Component} from 'react';\nimport {Button, Card, Checkbox, Form, Input, Select, Spin} from \"antd\";\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\nclass UserInput extends Component {\n\n    state = {\n        showGoToBlock: false,\n        showGoToGroup: false,\n        groupName: ''\n    };\n\n    onSubmit = () => {\n        return this.props.form.validateFields((err, values) => {\n            if (!err)\n                this.props.handleEditBlock({\n                    type: 'User Input',\n                    groupID: this.props.options.currentGroup.id,\n                    id: this.props.options.block.id,\n                    order: this.props.options.block.order,\n                    isSkippable: values.isSkippable,\n                    labels: '',\n                    storeInDB: values.storeInDB,\n                    content: {\n                        text: values.text,\n                        blockToGoID: values.blockToGoID || values.blockToGoIDGroup || null,\n                        validation: values.validation,\n                        action: values.action,\n                        afterMessage: values.afterMessage,\n                    }\n                })\n        })\n    };\n\n    onCancel = () => this.props.handleEditBlock(false);\n\n    onSelectAction = (action) => {\n        if (action === \"Go To Specific Block\")\n            this.setState({showGoToBlock: true, showGoToGroup: false});\n        else if (action === \"Go To Group\")\n            this.setState({showGoToBlock: false, showGoToGroup: true});\n        else\n            this.setState({showGoToBlock: false, showGoToGroup: false});\n    };\n\n    componentDidMount() {\n        const {block, allGroups} = this.props.options;\n\n        if (block.content.action === \"Go To Specific Block\")\n            this.setState({showGoToBlock: true, showGoToGroup: false});\n        else if (block.content.action === \"Go To Group\") {\n            // because here we dont' have column in each block contains all the group\n            // this is a workaround to have the group name from the block id\n            this.setState({showGoToBlock: false, showGoToGroup: true});\n            const {blockToGoID} = block.content;\n            allGroups.map((group) => group.blocks[0].id === blockToGoID ? this.setState({groupName: group.name}) : null)\n        }\n        else\n            this.setState({showGoToBlock: false, showGoToGroup: false});\n    }\n\n\n    render() {\n        const {block, blockTypes, allBlocks, allGroups} = this.props.options;\n        let blockOptions = {};\n        // extract the correct blockType from blockTypes[]\n        for (const blockType of blockTypes)\n            if (blockType.name === 'User Input')\n                blockOptions = blockType;\n\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Card style={{width: '100%'}}\n                  actions={[\n                      <Button key=\"delete\" type=\"danger\" onClick={() => console.log('needs to be implement')}>\n                          Delete\n                      </Button>,\n                      <Button key=\"cancel\" onClick={() => this.props.handleEditBlock(false)}>Cancel</Button>,\n                      <Button key=\"submit\" type=\"primary\" onClick={this.onSubmit}>\n                          Update\n                      </Button>]}\n            >\n                <Form layout='horizontal'>\n                    <FormItem label=\"Question\"\n                              extra=\"The above text will be shown in a bubble inside the chat\"\n                              {...this.props.options.layout}>\n                        {getFieldDecorator('text', {\n                            initialValue: block.content.text,\n                            rules: [{\n                                required: true,\n                                message: \"Please input question field\",\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Where are you from?\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem label=\"Validation\"\n                              {...this.props.options.layout}>\n                        {\n                            blockOptions.validations ?\n                                getFieldDecorator('validation', {\n                                    initialValue: block.content.validation,\n                                    rules: [{\n                                        required: true,\n                                        message: \"Please field validation\",\n                                    }]\n                                })(\n                                    <Select placeholder=\"Will validate the input\">{\n                                        blockOptions.validations.map((validation, i) =>\n                                            <Option key={i} value={validation}>{validation}</Option>)\n                                    }</Select>\n                                )\n                                : <Spin><Select placeholder=\"Will validate the input\"></Select></Spin>\n                        }\n                    </FormItem>\n\n                    <FormItem label=\"Action\"\n                              {...this.props.options.layout}>\n                        {\n                            blockOptions.actions ?\n                                getFieldDecorator('action', {\n                                    initialValue: block.content.action,\n                                    rules: [{\n                                        required: true,\n                                        message: \"Please input question field\",\n                                    }],\n                                })(\n                                    <Select onSelect={this.onSelectAction}\n                                            placeholder=\"The next step after this block\">{\n                                        blockOptions.actions.map((action, i) =>\n                                            <Option key={i}\n                                                    value={action}>{action}</Option>)\n                                    }</Select>\n                                )\n                                : <Spin><Select placeholder=\"The next step after this block\"></Select></Spin>\n                        }\n                    </FormItem>\n\n                    {this.state.showGoToBlock ?\n                        (<FormItem label=\"Go To Specific Block\" {...this.props.options.layout}>\n                            {\n                                getFieldDecorator('blockToGoID',\n                                    {\n                                        initialValue: block.content.blockToGoID,\n                                        rules: [{required: true, message: \"Please select your next block\"}]\n\n                                    }\n                                )(\n                                    <Select placeholder=\"The next step after this block\">{\n                                        allBlocks.map((block, i) =>\n                                            <Option key={i} value={block.id}>\n                                                {`${block.id}- (${block.type}) ${block.content.text ? block.content.text : ''}`}\n                                            </Option>\n                                        )\n                                    }</Select>\n                                )\n                            }\n                        </FormItem>)\n                        : null\n                    }\n\n                    {this.state.showGoToGroup ?\n                        (<FormItem label=\"Go To Specific Group\"\n                                   extra=\"The selected group will start from its first block\"\n                                   {...this.props.options.layout}>\n                            {\n                                getFieldDecorator('blockToGoIDGroup',\n                                    {\n                                        initialValue: this.state.groupName,\n                                        rules: [{required: true, message: \"Please select your next group\"}]\n                                    }\n                                )(\n                                    <Select placeholder=\"The next block after this block\">{\n                                        allGroups.map((group, i) => {\n                                                if (group.blocks[0])\n                                                    return <Option key={i} value={group.blocks[0].id}>\n                                                        {`${group.name}`}\n                                                    </Option>;\n                                                else\n                                                    return <Option disabled key={i} value={group.name}>\n                                                        {`${group.name}`}\n                                                    </Option>\n                                            }\n                                        )\n                                    }</Select>\n                                )\n                            }\n                        </FormItem>)\n                        : null\n                    }\n\n\n                    <FormItem label=\"After message\"\n                              extra=\"This message will display straight after the user's response\"\n                              {...this.props.options.layout}>\n                        {getFieldDecorator('afterMessage', {\n                            initialValue: block.content.afterMessage,\n                            rules: [{\n                                required: true,\n                                message: \"Please input after message field\",\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Your input is recorded\"/>\n                        )}\n                    </FormItem>\n\n                    <Form.Item\n                        label=\"Skippable?\"\n                        {...this.props.options.layout}>\n                        {getFieldDecorator('isSkippable', {\n                            valuePropName: 'checked',\n                            initialValue: block.isSkippable,\n                        })(\n                            <Checkbox>Users can skip answering this question</Checkbox>\n                        )}\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"Store responses?\"\n                        {...this.props.options.layout}>\n                        {getFieldDecorator('storeInDB', {\n                            valuePropName: 'checked',\n                            initialValue: blockOptions.alwaysStoreInDB,\n                        })(\n                            <Checkbox disabled={blockOptions.alwaysStoreInDB}>\n                                Users' responses should be recorded</Checkbox>\n                        )}\n                    </Form.Item>\n\n                </Form>\n            </Card>\n        );\n    }\n}\n\nexport default Form.create()(UserInput);\n\n","import React, {Component} from 'react';\nimport {Button, Card, Checkbox, Form, Icon, Input, Modal, Select, Spin, Tag, Tooltip} from \"antd\";\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\nclass Question extends Component {\n\n    state = {\n        showGoToBlock: false,\n        showGoToGroup: false,\n        modalVisible: false,\n\n        tags: [],\n        inputVisible: false,\n        inputValue: '',\n        answers: [],\n\n        groupName: ''\n    };\n\n    componentDidMount() {\n        this.setState({answers: this.props.options.block.content.answers});\n\n        const {block, allGroups} = this.props.options;\n\n        if (block.content.action === \"Go To Specific Block\")\n            this.setState({showGoToBlock: true, showGoToGroup: false});\n        else if (block.content.action === \"Go To Group\") {\n            // because here we dont' have column in each block contains all the group\n            // this is a workaround to have the group name from the block id\n            this.setState({showGoToBlock: false, showGoToGroup: true});\n            const {blockToGoID} = block.content;\n            allGroups.map((group) => group.blocks[0].id === blockToGoID ? this.setState({groupName: group.name}) : null)\n        }\n        else\n            this.setState({showGoToBlock: false, showGoToGroup: false});\n    }\n\n    onSelectAction = (action) => {\n        if (action === \"Go To Specific Block\")\n            this.setState({showGoToBlock: true, showGoToGroup: false});\n        else if (action === \"Go To Group\")\n            this.setState({showGoToBlock: false, showGoToGroup: true});\n        else\n            this.setState({showGoToBlock: false, showGoToGroup: false});\n    };\n\n    onSubmit = () => {\n        return this.props.form.validateFields(['text', 'isSkippable', 'storeInDB'], (err, values) => {\n\n            // If from is valid crete the new block following User Input block type format\n            if (!err) {\n                this.props.handleEditBlock({\n                    type: 'Question',\n                    groupID: this.props.options.currentGroup.id,\n                    id: this.props.options.block.id,\n                    order: this.props.options.block.order,\n                    storeInDB: values.storeInDB,\n                    isSkippable: values.isSkippable,\n                    labels: '',\n                    content: {\n                        text: values.text,\n                        answers: this.state.answers\n                    }\n                })\n            }\n        })\n    };\n\n    onCancel = () => this.props.handleNewBlock(false);\n\n\n    addAnswer = () => {\n        this.props.form.validateFields(['answer', 'action', 'blockToGoID', 'blockToGoIDGroup', 'afterMessage'], (err, values) => {\n            if (!err) {\n                const answer = {\n                    text: values.answer,\n                    keywords: this.state.tags,\n                    blockToGoID: values.blockToGoID || values.blockToGoIDGroup || null,\n                    action: values.action,\n                    afterMessage: values.afterMessage\n                };\n                this.setState({tags: []});\n                // I feel there is a bug\n                const answers = this.state.answers;\n                answers.push(answer);\n                this.setState({answers});\n                this.hideAddAnswer();\n                console.log(this.state.answers)\n            }\n        })\n\n    };\n\n    showAddAnswer = () => this.setState({modalVisible: true});\n    hideAddAnswer = () => this.setState({modalVisible: false});\n    removeAnswer = () => {\n        console.log(\"TODO\")\n    };\n\n// Tags component's functions\n    removeTag = (removedTag) => this.setState({tags: this.state.tags.filter(tag => tag !== removedTag)});\n    showInput = () => this.setState({inputVisible: true}, () => this.input.focus());\n    handleInputChange = e => this.setState({inputValue: e.target.value});\n    saveInputRef = input => this.input = input;\n    handleInputConfirm = () => {\n        const inputValue = this.state.inputValue;\n        let tags = this.state.tags;\n        if (inputValue && tags.indexOf(inputValue) === -1)\n            tags = [...tags, inputValue];\n        this.setState({tags, inputVisible: false, inputValue: '',});\n    };\n\n// END Tags component's functions\n\n\n    render() {\n        const {block, blockTypes, allBlocks, allGroups} = this.props.options;\n        let blockOptions = {};\n        // extract the correct blockType from blockTypes[]\n        for (const blockType of blockTypes)\n            if (blockType.name === 'Question')\n                blockOptions = blockType;\n\n        const {getFieldDecorator} = this.props.form;\n\n        const {tags, inputVisible, inputValue} = this.state;\n\n        return (\n            <Card style={{width: '100%'}}\n                  actions={[\n                      <Button key=\"delete\" type=\"danger\" onClick={() => console.log('needs to be implement')}>\n                          Delete\n                      </Button>,\n                      <Button key=\"cancel\" onClick={() => this.props.handleEditBlock(false)}>Cancel</Button>,\n                      <Button key=\"submit\" type=\"primary\" onClick={this.onSubmit}>\n                          Update\n                      </Button>]}\n            >\n                <Form layout='horizontal'>\n                    <FormItem label=\"Question\"\n                              extra=\"The above text will be shown in a bubble inside the chat\"\n                              {...this.props.options.layout}>\n                        {getFieldDecorator('text', {\n                            initialValue: block.content.text,\n                            rules: [{\n                                required: true,\n                                message: \"Please input question field\",\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Where are you from?\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem label=\"Answers\"\n                              {...this.props.options.layout}>\n                        <Button onClick={this.showAddAnswer}\n                                type=\"primary\" icon=\"plus\" shape=\"circle\" size={\"small\"}></Button>\n                        {\n                            this.state.answers.map((answer, i) => (\n                                <Card title={answer.text}\n                                      key={i}\n                                      extra={<Button onClick={this.removeAnswer}\n                                                     type=\"danger\" icon=\"delete\" shape=\"circle\"\n                                                     size={\"small\"}></Button>}\n                                      style={{width: 200, margin: 10}}>\n                                    <p>Action: {answer.action}</p>\n                                    Tags: <br/>\n                                    {answer.keywords.map((keyword, i) => <Tag key={i}>{keyword}</Tag>)}\n\n                                </Card>\n                            ))\n                        }\n                    </FormItem>\n\n                    <Form.Item\n                        label=\"Skippable?\"\n                        {...this.props.options.layout}>\n                        {getFieldDecorator('isSkippable', {\n                            valuePropName: 'checked',\n                            initialValue: block.isSkippable,\n                        })(\n                            <Checkbox>Users can skip answering this question</Checkbox>\n                        )}\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"Store responses?\"\n                        {...this.props.options.layout}>\n                        {getFieldDecorator('storeInDB', {\n                            valuePropName: 'checked',\n                            initialValue: blockOptions.alwaysStoreInDB,\n                        })(\n                            <Checkbox disabled={blockOptions.alwaysStoreInDB}>\n                                Users' responses should be recorded</Checkbox>\n                        )}\n                    </Form.Item>\n\n                </Form>\n\n\n                {/*ADDING ANSWER*/}\n                <Modal\n                    title=\"Add Answer\"\n                    width={700}\n                    destroyOnClose={true}\n                    visible={this.state.modalVisible}\n                    onOk={this.addAnswer}\n                    onCancel={this.hideAddAnswer}>\n\n                    <Form>\n                        <FormItem label=\"Answer\"\n                                  extra=\"This will be shown as answer in chatbot\"\n                                  {...this.props.options.layout}>\n                            {getFieldDecorator('answer', {\n                                rules: [{\n                                    required: true,\n                                    message: \"Please input answer field\",\n                                }],\n                            })(\n                                <Input placeholder=\"Ex: Yes I need it :)\"/>\n                            )}\n                        </FormItem>\n\n                        <FormItem label=\"Tags\" {...this.props.options.layout}>\n                            <div>\n                                {tags.map((tag) => {\n                                    const isLongTag = tag.length > 20;\n                                    const tagElem = (\n                                        <Tag key={tag} closable={true} afterClose={() => this.removeTag(tag)}>\n                                            {isLongTag ? `${tag.slice(0, 20)}...` : tag}\n                                        </Tag>\n                                    );\n                                    return isLongTag ? <Tooltip title={tag} key={tag}>{tagElem}</Tooltip> : tagElem;\n                                })}\n                                {inputVisible && (\n                                    <Input\n                                        ref={this.saveInputRef}\n                                        type=\"text\"\n                                        size=\"small\"\n                                        style={{width: 78}}\n                                        value={inputValue}\n                                        onChange={this.handleInputChange}\n                                        onBlur={this.handleInputConfirm}\n                                        onPressEnter={this.handleInputConfirm}\n                                    />\n                                )}\n                                {!inputVisible && (\n                                    <Tag\n                                        onClick={this.showInput}\n                                        style={{background: '#fff', borderStyle: 'dashed'}}>\n                                        <Icon type=\"plus\"/> New Tag\n                                    </Tag>\n                                )}\n                            </div>\n                        </FormItem>\n\n                        <FormItem label=\"Action\"{...this.props.options.layout}>{\n                            blockOptions.actions ?\n                                getFieldDecorator('action', {\n                                    rules: [{\n                                        required: true,\n                                        message: \"Please input action field\",\n                                    }],\n                                })(\n                                    <Select onSelect={this.onSelectAction}\n                                            placeholder=\"The next step after this block\">{\n                                        blockOptions.actions.map((action, i) =>\n                                            <Option key={i}\n                                                    value={action}>{action}</Option>)\n                                    }</Select>\n                                )\n                                : <Spin><Select placeholder=\"The next step after this block\"></Select></Spin>\n                        }</FormItem>\n\n                        {this.state.showGoToBlock ?\n                            (<FormItem label=\"Go To Specific Block\" {...this.props.options.layout}>\n                                {\n                                    getFieldDecorator('blockToGoID',\n                                        {\n                                            rules: [{required: true, message: \"Please select your next block\"}],\n                                        }\n                                    )(\n                                        <Select placeholder=\"The next step after this block\">{\n                                            allBlocks.map((block, i) =>\n                                                <Option key={i} value={block.id}>\n                                                    {`${block.id}- (${block.type}) ${block.content.text ? block.content.text : ''}`}\n                                                </Option>\n                                            )\n                                        }</Select>\n                                    )\n                                }\n                            </FormItem>)\n                            : null\n                        }\n\n                        {this.state.showGoToGroup ?\n                            (<FormItem label=\"Go To Specific Group\"\n                                       extra=\"The selected group will start from its first block\"\n                                       {...this.props.options.layout}>\n                                {\n                                    getFieldDecorator('blockToGoIDGroup',\n                                        {\n                                            rules: [{required: true, message: \"Please select your next group\"}]\n                                        }\n                                    )(\n                                        <Select placeholder=\"The next block after this block\">{\n                                            allGroups.map((group, i) => {\n                                                    if (group.blocks[0])\n                                                        return <Option key={i} value={group.blocks[0].id}>\n                                                            {`${group.name}`}\n                                                        </Option>;\n                                                    else\n                                                        return <Option disabled key={i} value={group.name}>\n                                                            {`${group.name}`}\n                                                        </Option>\n                                                }\n                                            )\n                                        }</Select>\n                                    )\n                                }\n                            </FormItem>)\n                            : null\n                        }\n\n                        <FormItem label=\"After message\"\n                                  extra=\"This message will display straight after the user's response\"\n                                  {...this.props.options.layout}>\n                            {getFieldDecorator('afterMessage', {\n                                rules: [{\n                                    required: true,\n                                    message: \"Please input after message field\",\n                                }],\n                            })(\n                                <Input placeholder=\"Ex: Your input is recorded\"/>\n                            )}\n                        </FormItem>\n                    </Form>\n\n                </Modal>\n            </Card>\n        );\n    }\n\n}\n\n\nexport default Form.create()(Question);\n\n","import React, {Component} from 'react';\nimport {Button, Card, Checkbox, Form, Input, Select, Spin} from \"antd\";\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\nconst CheckboxGroup = Checkbox.Group;\n\nclass FileUpload extends Component {\n\n    state = {\n        showGoToBlock: false,\n        showGoToGroup: false,\n        fileTypes: [],\n        groupName: ''\n    };\n\n    onSubmit = () => {\n        return this.props.form.validateFields((err, values) => {\n            if (!err) {\n                this.props.handleEditBlock({\n                    type: 'File Upload',\n                    groupID: this.props.options.currentGroup.id,\n                    id: this.props.options.block.id,\n                    order: this.props.options.block.order,\n                    storeInDB: values.storeInDB,\n                    isSkippable: values.isSkippable,\n                    labels: '',\n                    content: {\n                        text: values.text,\n                        action: values.action,\n                        fileTypes: this.state.fileTypes,\n                        blockToGoID: values.blockToGoID || values.blockToGoIDGroup || null,\n                        afterMessage: values.afterMessage\n                    }\n                })\n            }\n        })\n    };\n\n    onCancel = () => this.props.handleEditBlock(false);\n\n    onSelectAction = (action) => {\n        if (action === \"Go To Specific Block\")\n            this.setState({showGoToBlock: true, showGoToGroup: false});\n        else if (action === \"Go To Group\")\n            this.setState({showGoToBlock: false, showGoToGroup: true});\n        else\n            this.setState({showGoToBlock: false, showGoToGroup: false});\n    };\n\n    componentDidMount() {\n        const {block, allGroups} = this.props.options;\n\n        if (block.content.action === \"Go To Specific Block\")\n            this.setState({showGoToBlock: true, showGoToGroup: false});\n        else if (block.content.action === \"Go To Group\") {\n            // because here we dont' have column in each block contains all the group\n            // this is a workaround to have the group name from the block id\n            this.setState({showGoToBlock: false, showGoToGroup: true});\n            const {blockToGoID} = block.content;\n            allGroups.map((group) => group.blocks[0].id === blockToGoID ? this.setState({groupName: group.name}) : null)\n        }\n        else\n            this.setState({showGoToBlock: false, showGoToGroup: false});\n    }\n\n    onChange = (checkedValues) => this.setState({fileTypes: checkedValues});\n\n    render() {\n        const {block, blockTypes, allBlocks, allGroups} = this.props.options;\n        let blockOptions = {};\n        // extract the correct blockType from blockTypes[]\n\n        for (const blockType of blockTypes)\n            if (blockType.name === \"File Upload\")\n                blockOptions = blockType;\n        const {getFieldDecorator} = this.props.form;\n\n        const typesAllowed = blockOptions.typesAllowed;\n        return (\n            <Card style={{width: '100%'}}\n                  actions={[\n                      <Button key=\"delete\" type=\"danger\" onClick={() => console.log('needs to be implement')}>\n                          Delete\n                      </Button>,\n                      <Button key=\"cancel\" onClick={() => this.props.handleEditBlock(false)}>Cancel</Button>,\n                      <Button key=\"submit\" type=\"primary\" onClick={this.onSubmit}>\n                          Update\n                      </Button>]}\n            >\n                <Form layout='horizontal'>\n                    <FormItem label=\"Question\"\n                              extra=\"The above text will be shown in a bubble inside the chat\"\n                              {...this.props.options.layout}>\n                        {getFieldDecorator('text', {\n                            initialValue: block.content.text,\n                            rules: [{\n                                required: true,\n                                message: \"Please input question field\",\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Please upload you cv\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem label=\"File Types\"\n                              {...this.props.options.layout}>\n                        {\n                            blockOptions.typesAllowed ?\n                                getFieldDecorator('fileTypes', {\n                                    initialValue: block.content.fileTypes,\n                                    rules: [{\n                                        required: true,\n                                        message: \"Please select the accepted file type\",\n                                    }]\n                                })(\n                                    <CheckboxGroup options={typesAllowed} onChange={this.onChange}/>\n                                )\n                                : <Spin/>\n                        }\n                    </FormItem>\n\n                    <FormItem label=\"Action\"{...this.props.options.layout}>\n                        {\n                            blockOptions.actions ?\n                                getFieldDecorator('action', {\n                                    initialValue: block.content.action,\n                                    rules: [{\n                                        required: true,\n                                        message: \"Please input question field\",\n                                    }],\n                                })(\n                                    <Select onSelect={this.onSelectAction}\n                                            placeholder=\"The next step after this block\">{\n                                        blockOptions.actions.map((action, i) =>\n                                            <Option key={i}\n                                                    value={action}>{action}</Option>)\n                                    }</Select>\n                                )\n                                : <Spin><Select placeholder=\"The next step after this block\"></Select></Spin>\n                        }\n                    </FormItem>\n\n                    {this.state.showGoToBlock ?\n                        (<FormItem label=\"Go To Specific Block\" {...this.props.options.layout}>\n                            {\n                                getFieldDecorator('blockToGoID',\n                                    {\n                                        initialValue: block.content.blockToGoID,\n                                        rules: [{required: true, message: \"Please select your next block\"}]\n\n                                    }\n                                )(\n                                    <Select placeholder=\"The next step after this block\">{\n                                        allBlocks.map((block, i) =>\n                                            <Option key={i} value={block.id}>\n                                                {`${block.id}- (${block.type}) ${block.content.text ? block.content.text : ''}`}\n                                            </Option>\n                                        )\n                                    }</Select>\n                                )\n                            }\n                        </FormItem>)\n                        : null\n                    }\n\n                    {this.state.showGoToGroup ?\n                        (<FormItem label=\"Go To Specific Group\"\n                                   extra=\"The selected group will start from its first block\"\n                                   {...this.props.options.layout}>\n                            {\n                                getFieldDecorator('blockToGoIDGroup',\n                                    {\n                                        initialValue: this.state.groupName,\n                                        rules: [{required: true, message: \"Please select your next group\"}]\n                                    }\n                                )(\n                                    <Select placeholder=\"The next block after this block\">{\n                                        allGroups.map((group, i) => {\n                                                if (group.blocks[0])\n                                                    return <Option key={i} value={group.blocks[0].id}>\n                                                        {`${group.name}`}\n                                                    </Option>;\n                                                else\n                                                    return <Option disabled key={i} value={group.name}>\n                                                        {`${group.name}`}\n                                                    </Option>\n                                            }\n                                        )\n                                    }</Select>\n                                )\n                            }\n                        </FormItem>)\n                        : null\n                    }\n\n                    <FormItem label=\"After message\"\n                              extra=\"This message will display straight after the user's response\"\n                              {...this.props.options.layout}>\n                        {getFieldDecorator('afterMessage', {\n                            initialValue: block.content.afterMessage,\n                            rules: [{\n                                required: true,\n                                message: \"Please input after message field\",\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Your input is recorded\"/>\n                        )}\n                    </FormItem>\n\n                    <Form.Item\n                        label=\"Skippable?\"\n                        {...this.props.options.layout}>\n                        {getFieldDecorator('isSkippable', {\n                            valuePropName: 'checked',\n                            initialValue: block.isSkippable,\n                        })(\n                            <Checkbox>Users can skip answering this question</Checkbox>\n                        )}\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"Store responses?\"\n                        {...this.props.options.layout}>\n                        {getFieldDecorator('storeInDB', {\n                            valuePropName: 'checked',\n                            initialValue: blockOptions.alwaysStoreInDB,\n                        })(\n                            <Checkbox disabled={blockOptions.alwaysStoreInDB}>\n                                Users' responses should be recorded</Checkbox>\n                        )}\n                    </Form.Item>\n\n                </Form>\n            </Card>\n        );\n    }\n}\n\nexport default Form.create()(FileUpload);\n\n","import React, {Component} from 'react';\nimport {Button, Card, Checkbox, Form, Input, Select, Spin} from \"antd\";\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\nclass Solutions extends Component {\n\n    state = {\n        showGoToBlock: false,\n        showGoToGroup: false,\n        groupName: ''\n    };\n\n    onSubmit = () => {\n        return this.props.form.validateFields((err, values) => {\n            // If from is valid crete the new block following User Input block type format\n            if (!err) {\n                this.props.handleEditBlock({\n                    type: 'Solutions',\n                    groupID: this.props.options.currentGroup.id,\n                    id: this.props.options.block.id,\n                    order: this.props.options.block.order,\n                    storeInDB: values.storeInDB,\n                    isSkippable: values.isSkippable,\n                    labels: '',\n                    content: {\n                        showTop: Number(values.showTop),\n                        action: values.action,\n                        blockToGoID: values.blockToGoID || values.blockToGoIDGroup || null,\n                        afterMessage: values.afterMessage,\n                    }\n                })\n            }\n        })\n    };\n\n    onCancel = () => this.props.handleEditBlock(false);\n\n    onSelectAction = (action) => {\n        if (action === \"Go To Specific Block\")\n            this.setState({showGoToBlock: true, showGoToGroup: false});\n        else if (action === \"Go To Group\")\n            this.setState({showGoToBlock: false, showGoToGroup: true});\n        else\n            this.setState({showGoToBlock: false, showGoToGroup: false});\n    };\n\n    componentDidMount() {\n        const {block, allGroups} = this.props.options;\n\n        if (block.content.action === \"Go To Specific Block\")\n            this.setState({showGoToBlock: true, showGoToGroup: false});\n        else if (block.content.action === \"Go To Group\") {\n            // because here we dont' have column in each block contains all the group\n            // this is a workaround to have the group name from the block id\n            this.setState({showGoToBlock: false, showGoToGroup: true});\n            const {blockToGoID} = block.content;\n            allGroups.map((group) => group.blocks[0].id === blockToGoID ? this.setState({groupName: group.name}) : null)\n        }\n        else\n            this.setState({showGoToBlock: false, showGoToGroup: false});\n    };\n\n    render() {\n        const {block, blockTypes, allBlocks, allGroups} = this.props.options;\n        let blockOptions = {};\n        // extract the correct blockType from blockTypes[]\n        for (const blockType of blockTypes)\n            if (blockType.name === 'User Input')\n                blockOptions = blockType;\n\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Card style={{width: '100%'}}\n                  actions={[\n                      <Button key=\"delete\" type=\"danger\" onClick={() => console.log('needs to be implement')}>\n                          Delete\n                      </Button>,\n                      <Button key=\"cancel\" onClick={() => this.props.handleEditBlock(false)}>Cancel</Button>,\n                      <Button key=\"submit\" type=\"primary\" onClick={this.onSubmit}>\n                          Update\n                      </Button>]}\n            >\n                <Form layout='horizontal'>\n                    <FormItem label=\"Show Top Results\"\n                              extra=\"Number of results you want to return\"\n                              {...this.props.options.layout}>\n                        {getFieldDecorator('showTop', {\n                            initialValue: block.content.showTop,\n                            rules: [{\n                                required: true,\n                                message: \"Please show top field\",\n                            }],\n                        })(\n                            <Input min=\"1\" type=\"number\" placeholder=\"Ex: Where are you from?\"/>\n                        )}\n                    </FormItem>\n\n\n                    <FormItem label=\"Action\"\n                              {...this.props.options.layout}>\n                        {\n                            blockOptions.actions ?\n                                getFieldDecorator('action', {\n                                    initialValue: block.content.action,\n                                    rules: [{\n                                        required: true,\n                                        message: \"Please input question field\",\n                                    }],\n                                })(\n                                    <Select onSelect={this.onSelectAction}\n                                            placeholder=\"The next step after this block\">{\n                                        blockOptions.actions.map((action, i) =>\n                                            <Option key={i}\n                                                    value={action}>{action}</Option>)\n                                    }</Select>\n                                )\n                                : <Spin><Select placeholder=\"The next step after this block\"></Select></Spin>\n                        }\n                    </FormItem>\n\n                    {this.state.showGoToBlock ?\n                        (<FormItem label=\"Go To Specific Block\" {...this.props.options.layout}>\n                            {\n                                getFieldDecorator('blockToGoID',\n                                    {\n                                        initialValue: block.content.blockToGoID,\n                                        rules: [{required: true, message: \"Please select your next block\"}]\n\n                                    }\n                                )(\n                                    <Select placeholder=\"The next step after this block\">{\n                                        allBlocks.map((block, i) =>\n                                            <Option key={i} value={block.id}>\n                                                {`${block.id}- (${block.type}) ${block.content.text ? block.content.text : ''}`}\n                                            </Option>\n                                        )\n                                    }</Select>\n                                )\n                            }\n                        </FormItem>)\n                        : null\n                    }\n\n                    {this.state.showGoToGroup ?\n                        (<FormItem label=\"Go To Specific Group\"\n                                   extra=\"The selected group will start from its first block\"\n                                   {...this.props.options.layout}>\n                            {\n                                getFieldDecorator('blockToGoIDGroup',\n                                    {\n                                        initialValue: this.state.groupName,\n                                        rules: [{required: true, message: \"Please select your next group\"}]\n                                    }\n                                )(\n                                    <Select placeholder=\"The next block after this block\">{\n                                        allGroups.map((group, i) => {\n                                                if (group.blocks[0])\n                                                    return <Option key={i} value={group.blocks[0].id}>\n                                                        {`${group.name}`}\n                                                    </Option>;\n                                                else\n                                                    return <Option disabled key={i} value={group.name}>\n                                                        {`${group.name}`}\n                                                    </Option>\n                                            }\n                                        )\n                                    }</Select>\n                                )\n                            }\n                        </FormItem>)\n                        : null\n                    }\n\n\n                    <FormItem label=\"After message\"\n                              extra=\"This message will display straight after the user's response\"\n                              {...this.props.options.layout}>\n                        {getFieldDecorator('afterMessage', {\n                            initialValue: block.content.afterMessage,\n                            rules: [{\n                                required: true,\n                                message: \"Please input after message field\",\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Your input is recorded\"/>\n                        )}\n                    </FormItem>\n\n                    <Form.Item\n                        label=\"Skippable?\"\n                        {...this.props.options.layout}>\n                        {getFieldDecorator('isSkippable', {\n                            valuePropName: 'checked',\n                            initialValue: block.isSkippable,\n                        })(\n                            <Checkbox>Users can skip answering this question</Checkbox>\n                        )}\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"Store responses?\"\n                        {...this.props.options.layout}>\n                        {getFieldDecorator('storeInDB', {\n                            valuePropName: 'checked',\n                            initialValue: blockOptions.alwaysStoreInDB,\n                        })(\n                            <Checkbox disabled={blockOptions.alwaysStoreInDB}>\n                                Users' responses should be recorded</Checkbox>\n                        )}\n                    </Form.Item>\n                </Form>\n            </Card>\n        );\n    }\n}\n\nexport default Form.create()(Solutions);\n\n","import React, {Component} from 'react';\n\nimport {http} from \"../../../../../../../helpers\";\n\nimport {Modal} from 'antd';\nimport UserInput from \"./Cards/UserInput\";\nimport Question from \"./Cards/Question\";\nimport FileUpload from \"./Cards/FileUpload\";\nimport Solutions from \"./Cards/Solutions\";\n\nclass EditBlockModal extends Component {\n\n    state = {\n        layout: {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14}\n        },\n        blockTypes: [],\n        allBlocks: [],\n        allGroups: [],\n        currentGroup: null\n    };\n\n    componentDidMount() {\n        http.get(`/assistant/flow/options`)\n            .then(res => this.setState({blockTypes: res.data.data.blockTypes}))\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            block: nextProps.block,\n\n            allBlocks: nextProps.blocks,\n            allGroups: nextProps.allGroups,\n            currentGroup: nextProps.currentGroup\n        })\n    }\n\n    handleEditBlock = (edittedBlock) => {\n        if (edittedBlock)\n            this.props.handleEditBlock(edittedBlock);\n        this.props.closeModal();\n    };\n\n    render() {\n        return (\n            <Modal width={800}\n                   title=\"Edit Block\"\n                   visible={this.props.visible}\n                   onCancel={this.props.closeModal}\n                   destroyOnClose={true}\n                   footer={null}>\n\n                {this.props.block.type === \"User Input\" ?\n                    <UserInput options={this.state} handleEditBlock={this.handleEditBlock}/> : null}\n                {this.props.block.type === \"Question\" ?\n                    <Question options={this.state} handleEditBlock={this.handleEditBlock}/> : null}\n                {this.props.block.type === \"File Upload\" ?\n                    <FileUpload options={this.state} handleEditBlock={this.handleEditBlock}/> : null}\n                {this.props.block.type === \"Solutions\" ?\n                    <Solutions options={this.state} handleEditBlock={this.handleEditBlock}/> : null}\n            </Modal>\n        );\n    }\n}\n\n\nexport default EditBlockModal\n","import React, {Component} from 'react';\n\nimport \"./Blocks.less\"\nimport styles from \"./Blocks.module.less\";\nimport {Button, Form, Modal} from \"antd\";\n\nimport Block from \"./Block/Block\";\nimport {DragDropContext, Draggable, Droppable} from 'react-beautiful-dnd';\nimport NewBlockModal from \"./NewBlockModal/NewBlockModal\";\nimport EditBlockModal from \"./EditBlockModal/EditBlockModal1\";\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n\nconst getItemStyle = draggableStyle => ({margin: `0 0 8px 0`, ...draggableStyle});\nconst confirm = Modal.confirm;\n\nclass Blocks extends Component {\n\n    state = {\n        addBlockVisible: false,\n        editBlockVisible: false,\n        deleteBlockVisible: false,\n        blocks: [],\n        edittedBlock: {},\n        deletedBlock: {content: {}}\n    };\n\n    constructor(props) {\n        super(props);\n        this.onDragEnd = this.onDragEnd.bind(this);\n    }\n\n    onDragEnd(result) {\n        // dropped outside the list\n        if (!result.destination) return;\n\n        let blocks = reorder(this.state.blocks, result.source.index, result.destination.index);\n        for (const i in blocks) blocks[i].order = Number(i) + 1;\n        this.setState({blocks});\n        // send a request to the server\n        this.props.reorderBlocks(blocks, this.props.currentGroup.id)\n    }\n\n    componentWillReceiveProps(nextProps) {\n        // This handles when updating the selected group to show its blocks\n        if (nextProps.currentGroup !== this.state.currentGroup && nextProps.currentGroup.blocks)\n            this.setState({blocks: nextProps.currentGroup.blocks})\n    }\n\n\n    ///////////////////////////////////////////////////\n\n    // ADD BLOCK MODAL CONFIGS\n    showAddBlockModal = () => this.setState({addBlockVisible: true});\n    closeAddBlockModal = () => this.setState({addBlockVisible: false});\n    handleAddBlock = (newBlock) => this.props.addBlock(newBlock, this.props.currentGroup.id);\n\n\n    // EDIT BLOCK MODAL CONFIGS\n    // this called from block.js when you click on edit block button\n    editBlock = (edittedBlock) => this.setState({edittedBlock, editBlockVisible: true});\n    closeEditBlockModal = () => this.setState({edittedBlock: {}, editBlockVisible: false});\n    handleEditBlock = (edittedBlock) => this.props.editBlock(edittedBlock, this.props.currentGroup.id);\n\n    // DELETE BLOCK MODAL CONFIGS\n    // this called from block.js when you click on delete block button\n    deleteBlock = (deletedBlock) => confirm({\n        title: `Delete block with type: ${deletedBlock.type}`,\n        content: `You can't get back to the deleted block after click ok`,\n        onOk: () => this.handleDeleteBlock(deletedBlock)\n    });\n    handleDeleteBlock = (deletedBlock) => this.props.deleteBlock(deletedBlock, this.props.currentGroup.id);\n\n\n\n    render() {\n        return (\n            <div className={styles.Panel}>\n                <div className={styles.Panel_Header}>\n                    <div>\n                        <h3>{this.props.currentGroup.name} Blocks</h3>\n                    </div>\n                    <div>\n                        <Button className={styles.Panel_Header_Button} type=\"primary\" icon=\"plus\"\n                                onClick={this.showAddBlockModal} disabled={!this.props.currentGroup.id}>\n                            Add Block\n                        </Button>\n                    </div>\n                </div>\n\n                <div className={styles.Panel_Body}>\n                    <div style={{height: \"100%\", width: '100%', overflowY: 'auto'}}>\n\n                        <DragDropContext onDragEnd={this.onDragEnd}>\n                            <Droppable droppableId=\"droppable\">\n                                {(provided) => (\n                                    <div ref={provided.innerRef}>\n                                        {this.state.blocks.map((block, index) => (\n                                            <Draggable key={block.id} draggableId={block.order} index={index}>\n                                                {(provided) => (\n                                                    <div ref={provided.innerRef} {...provided.draggableProps}\n                                                         {...provided.dragHandleProps}\n                                                         style={getItemStyle(provided.draggableProps.style)}>\n                                                        <Block block={block}\n                                                               editBlock={this.editBlock}\n                                                               deleteBlock={this.deleteBlock}\n                                                        />\n                                                    </div>\n                                                )}\n                                            </Draggable>\n                                        ))}\n                                        {provided.placeholder}\n                                    </div>\n                                )}\n                            </Droppable>\n                        </DragDropContext>\n                    </div>\n                </div>\n\n                <NewBlockModal visible={this.state.addBlockVisible}\n                               handleAddBlock={this.handleAddBlock}\n                               closeModal={this.closeAddBlockModal}\n\n                               blocks={this.state.blocks}\n                               currentGroup={this.props.currentGroup}\n                               allGroups={this.props.allGroups}/>\n\n                <EditBlockModal visible={this.state.editBlockVisible}\n                                handleEditBlock={this.handleEditBlock}\n                                closeModal={this.closeEditBlockModal}\n\n                                block={this.state.edittedBlock}\n                                blocks={this.state.blocks}\n                                currentGroup={this.props.currentGroup}\n                                allGroups={this.props.allGroups}/>\n            </div>\n        );\n    }\n}\n\nexport default Form.create()(Blocks);\n","import React, {Component} from 'react';\n\nimport styles from \"./Header.module.less\";\nimport {Button} from \"antd\";\nimport PropTypes from 'prop-types';\n\n\nclass Header extends Component {\n    static contextTypes = {\n        router: PropTypes.object\n    };\n\n    render() {\n\n        return (\n            <div style={{height: 56, marginBottom: 10}}>\n                <div className={styles.Panel}>\n                    <div className={styles.Panel_Header}>\n                        <div style={{display: '-webkit-inline-box'}}>\n                            <Button onClick={this.context.router.history.goBack}\n                                    type=\"primary\" icon=\"left\" shape=\"circle\" size={\"small\"}></Button>\n                            <h3>{this.props.assistantName || this.props.display}</h3>\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Header;\n","import React, {Component} from 'react';\nimport \"./Flow.less\"\n\nimport Groups from \"./Groups/Groups\";\nimport Blocks from \"./Blocks/Blocks\";\nimport Header from \"../../../../../components/Header/Header\";\nimport {flowActions} from \"../../../../../store/actions\";\nimport connect from \"react-redux/es/connect/connect\";\nimport styles from \"./Flow.module.less\"\nclass Flow extends Component {\n\n    state = {\n        currentGroup: {blocks: []}\n    };\n\n    componentDidMount() {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(flowActions.fetchFlowRequest(assistant.ID))\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.blockGroups !== this.props.blockGroups)\n            nextProps.blockGroups.map((group) => {\n                if (group.id === this.state.currentGroup.id)\n                    this.setState({currentGroup: group})\n            })\n    }\n\n    selectGroup = (currentGroup) => this.setState({currentGroup});\n\n\n    // GROUPS\n    addGroup = (newGroup) => {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(flowActions.addGroupRequest({ID: assistant.ID, newGroup: newGroup}));\n    };\n\n    editGroup = (editedGroup) => {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(flowActions.editGroupRequest({ID: assistant.ID, editedGroup: editedGroup}));\n    };\n\n    deleteGroup = (deletedGroup) => {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(flowActions.deleteGroupRequest({assistantID: assistant.ID, deletedGroup: deletedGroup}));\n    };\n\n\n    // BLOCKS\n    addBlock = (newBlock, groupID) => {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(flowActions.addBlockRequest({newBlock, groupID, assistantID: assistant.ID}));\n    };\n\n    editBlock = (edittedBlock, groupID) => {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(flowActions.editBlockRequest({edittedBlock, groupID, assistantID: assistant.ID}));\n    };\n\n    deleteBlock = (deletedBlock, groupID) => {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(flowActions.deleteBlockRequest({deletedBlock, groupID, assistantID: assistant.ID}));\n    };\n\n    reorderBlocks = (newBlocksOrder, groupID) => {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(flowActions.updateBlocksOrderRequest({newBlocksOrder, groupID, assistantID: assistant.ID}));\n    };\n\n    render() {\n        const {assistant} = this.props.location.state;\n\n        return (\n            <div style={{height: '100%'}}>\n                <Header display={assistant.Name}/>\n\n                <div className={styles.Panel_Body_Only}>\n                    <div style={{margin: '0 5px 0 0', width: '30%'}}>\n                        <Groups selectGroup={this.selectGroup}\n                                isLoading={this.props.isLoading}\n                                groupsList={this.props.blockGroups}\n                                addGroup={this.addGroup}\n                                editGroup={this.editGroup}\n                                deleteGroup={this.deleteGroup}/>\n                    </div>\n                    <div style={{margin: '0 0 0 5px', width: '70%'}}>\n                        <Blocks addBlock={this.addBlock}\n                                editBlock={this.editBlock}\n                                deleteBlock={this.deleteBlock}\n                                reorderBlocks={this.reorderBlocks}\n                                currentGroup={this.state.currentGroup}\n                                allGroups={this.props.blockGroups}/>\n                    </div>\n                </div>\n            </div>\n\n        );\n    }\n\n}\n\nfunction mapStateToProps(state) {\n    return {\n        blockGroups: state.flow.blockGroups,\n        isLoading: state.flow.isLoading,\n\n        addSuccessMsg: state.flow.addSuccessMsg,\n        editSuccessMsg: state.flow.editSuccessMsg,\n        deleteSuccessMsg: state.flow.deleteSuccessMsg,\n\n        isAddingGroup: state.flow.isAddingGroup,\n        isEditingGroup: state.flow.isEditingGroup,\n        isDeletingGroup: state.flow.isDeletingGroup,\n\n        isAddingBlock: state.flow.isAddingBlock,\n\n    };\n}\n\n\nexport default connect(mapStateToProps)(Flow);\n","import React from \"react\";\nimport {Input, Form, message} from \"antd\";\nimport {assistantActions} from \"../../../../../store/actions\";\n\nconst FormItem = Form.Item;\n\nclass ProfileInput extends React.Component {\n\n\n    render(){\n        return (\n        <FormItem\n            label={this.props.title + \":\"}\n            extra={this.props.description}\n            {...this.props.formItemLayout}>\n            {this.props.getFieldDecorator(this.props.name, {\n                rules: [this.props.rules],\n            })(\n                <Input type={this.props.type} checked={this.props.checked} name={this.props.name} onChange={this.props.handleChange} readOnly={this.props.readOnly}/>\n            )}\n        </FormItem>\n        )\n    }\n}\n\nProfileInput.defaultProps = {\n    type:\"text\",\n    checked:false,\n    readOnly:false,\n    rules:{required:false}\n};\n\nexport default ProfileInput;","import React from 'react';\nimport {Form, Button, message, Tabs} from \"antd\";\nimport {connect} from 'react-redux';\n\nimport \"./Profile.less\"\nimport styles from \"./Profile.module.less\"\nimport ProfileInput from \"./profileComponents/ProfileInput/ProfileInput\";\n\nimport {profileActions} from \"../../../store/actions/profile.actions\";\n\nconst loading = () => {\n    message.loading('Updating...', 0);\n};\n\nconst TabPane = Tabs.TabPane;\n\nclass Profile extends React.Component {\n    state = {\n        profile: {\n            name: \"\",\n            email: \"\",\n            companyName: \"\"\n        },\n        newsletters: false,\n        profileSettings: {\n            statNotifications: false,\n            trackData: false,\n            techSupport: false,\n            accountSpecialist: false\n        },\n        password: {\n            old: \"\",\n            new: \"\",\n            repeat: \"\"\n        },\n        formSubmitted: false,\n        dataCalled: false,\n        dataRendered: false,\n        tabIndex: 1\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                if (this.state.isPopupDisabled) {\n                    values.secondsUntilPopup = 0\n                }\n                // send to server\n                this.setState({formSubmitted: true});\n                switch (this.state.tabIndex) {\n                    case 1:\n                        this.props.dispatch(profileActions.saveProfileDetails(values));\n                        break;\n                    case 2:\n                        this.props.dispatch(profileActions.saveDataSettings(values));\n                        break;\n                }\n                //loading();\n            }\n        });\n    };\n\n    handleChange = (e) => {\n        let name = undefined;\n        let value = undefined;\n        if (e.target.type === \"checkbox\") {\n            name = e.target.name;\n            value = e.target.checked;\n        } else {\n            name = e.target.name;\n            value = e.target.value;\n        }\n        if (name.includes(\".\")) {\n            const names = name.split(\".\");\n            if (names.length > 2) {\n                console.log(\"More than 2 '.' depth is not supported\");\n                return null;\n            }\n            const tempState = {...this.state[names[0]]};\n\n            if (!tempState) {\n                return null;\n            }\n\n            tempState[names[1]] = value;\n            this.setState({[names[0]]: tempState});\n        } else {\n            this.setState({[name]: value});\n        }\n        this.props.form.setFieldsValue({\n            [name]: value\n        });\n    };\n\n    updateAllInputsFromState() {\n        const tempState = this.state;\n        this.props.form.setFieldsValue({\n            [\"profile.name\"]: tempState.profile.name,\n            [\"profile.email\"]: tempState.profile.email,\n            [\"profile.companyName\"]: tempState.profile.companyName,\n            [\"newsletters\"]: tempState.newsletters,\n            [\"profileSettings.statNotifications\"]: tempState.profileSettings.statNotifications,\n            [\"profileSettings.trackData\"]: tempState.profileSettings.trackData,\n            [\"profileSettings.techSupport\"]: tempState.profileSettings.techSupport,\n            [\"profileSettings.accountSpecialist\"]: tempState.profileSettings.accountSpecialist\n        });\n        this.setState({dataRendered: true});\n    }\n\n    updateStateFromProps(nextProps) {\n        const data = nextProps.profileData;\n        if(!this.isEmpty(data) && !this.state.dataRendered){\n            if(data.user){\n                this.setState({\n                    profile: {\n                        name: data.user.Firstname + \" \" + data.user.Surname,\n                        email: data.user.Email,\n                        companyName: data.company.Name\n                    }\n                });\n            }\n\n            if(data.newsletters){\n                this.setState({\n                    newsletters: data.newsletters\n                });\n            }\n\n            if(data.userSettings){\n                this.setState({\n                    profileSettings: {\n                        statNotifications: data.userSettings.UserInputNotifications,\n                        trackData: data.userSettings.TrackingData,\n                        techSupport: data.userSettings.TechnicalSupport,\n                        accountSpecialist: data.userSettings.AccountSpecialist\n                    }\n                });\n            }\n            this.setState({dataCalled: true});\n        }\n    }\n\n    isEmpty(obj) {\n        for(var key in obj) {\n            if(obj.hasOwnProperty(key))\n                return false;\n        }\n        return true;\n    }\n\n    componentDidMount() {\n        this.props.dispatch(profileActions.getProfile());\n    }\n\n    componentWillReceiveProps(nextProps){\n        this.updateStateFromProps(nextProps);\n    }\n\n    changeTab = (key) => {\n        this.setState({tabIndex: parseInt(key)});\n    };\n\n    render() {\n        if(this.state.dataCalled && !this.state.dataRendered){\n            this.updateAllInputsFromState();\n        }\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14}\n        };\n        const {getFieldDecorator} = this.props.form;\n\n        const newsletters = this.state.newsletters;\n\n        const {profileSettings} = this.state;\n\n        return (\n            <div style={{height: '100%'}}>\n                <div className={styles.Panel}>\n                    <div className={styles.Panel_Header}>\n                        <div>\n                            <h3>User Profile</h3>\n                            <p>Here you can edit your details and how we handle your data.</p>\n                        </div>\n                    </div>\n\n                    <div className={styles.Panel_Body} style={{overflowY: \"auto\"}}>\n                        <Tabs defaultActiveKey={\"1\"} onChange={this.changeTab}>\n                            <TabPane tab={\"Profile Details\"} key={\"1\"}>\n\n                                <Form onSubmit={this.handleSubmit}>\n                                    <ProfileInput title={\"Name\"} name=\"profile.name\"\n                                                  rules={{\n                                                      required: true,\n                                                      message: \"Please enter your first and last name here\"\n                                                  }}\n                                                  getFieldDecorator={getFieldDecorator} formItemLayout={formItemLayout}\n                                                  handleChange={this.handleChange}\n                                                  form={this.props.form}\n                                                  description={\"Enter your name here\"}\n                                    />\n\n                                    <ProfileInput title={\"Email\"} name=\"profile.email\"\n                                                  rules={{\n                                                      required: true,\n                                                      message: \"Please enter a valid email\"\n                                                  }}\n                                                  getFieldDecorator={getFieldDecorator} formItemLayout={formItemLayout}\n                                                  handleChange={this.handleChange} readOnly={true}\n                                                  form={this.props.form}\n                                                  description={\"Enter your email here (For your security we have temporarily disabled this box until we improve its system\"}\n                                    />\n\n                                    <ProfileInput title={\"Company Name\"} name=\"profile.companyName\"\n                                                  rules={{\n                                                      required: true,\n                                                      message: \"Please enter your company name\"\n                                                  }}\n                                                  getFieldDecorator={getFieldDecorator} formItemLayout={formItemLayout}\n                                                  handleChange={this.handleChange}\n                                                  form={this.props.form}\n                                                  description={\"Enter your company name here\"}\n                                    />\n\n                                    <br/>\n\n                                    <div style={{textAlign: \"center\"}}><Button htmlType={\"submit\"}\n                                                                               className={\"ant-btn-primary\"}>Update</Button>\n                                    </div>\n                                </Form>\n\n                            </TabPane>\n                            <TabPane tab={\"Data Settings\"} key={\"2\"}>\n\n                                <Form onSubmit={this.handleSubmit}>\n                                    <h2>Data Sharing Settings</h2>\n                                    <p>Any data that you collect, process and store on TheSearchBase platform is kept\n                                        secure\n                                        and confidential at all times. The data that you collect is data that enables\n                                        our\n                                        software to work at its optimum level.</p>\n                                    <h4>This part of the website enables you to control what settings you may share with\n                                        us.</h4>\n\n                                    <br/>\n\n                                    <ProfileInput title={\"Newsletters\"} name=\"newsletters\"\n                                                  type={\"checkbox\"} checked={newsletters}\n                                                  getFieldDecorator={getFieldDecorator} formItemLayout={formItemLayout}\n                                                  handleChange={this.handleChange}\n                                                  description={\"We would like to keep you updated with the latest software updates and features available\\n\" +\n                                                  \"                                to you, If you decide to not subscribe you may miss on important features and\\n\" +\n                                                  \"                                announcements.\"}>\n                                    </ProfileInput>\n\n                                    <br/>\n\n                                    <ProfileInput title={\"New Users Counter\"} name=\"profileSettings.statNotifications\"\n                                                  type={\"checkbox\"} checked={profileSettings.statNotifications}\n                                                  getFieldDecorator={getFieldDecorator} formItemLayout={formItemLayout}\n                                                  handleChange={this.handleChange}\n                                                  description={\"If allowed we will send you the number of new user records your assistants have\\n\" +\n                                                  \"                                    stored\\n\" +\n                                                  \"                                    every 12 hours through email.\"}>\n                                    </ProfileInput>\n\n                                    <br/>\n\n                                    <strong>Erasing data</strong>\n                                    <p>If you decide to stop using our platform, we will simply delete\n                                        your information after a year of inactivity.</p>\n\n                                    <br/>\n\n                                    <ProfileInput title={\"Tracking Data\"} name=\"profileSettings.trackData\"\n                                                  type={\"checkbox\"} checked={profileSettings.trackData}\n                                                  getFieldDecorator={getFieldDecorator} formItemLayout={formItemLayout}\n                                                  handleChange={this.handleChange}\n                                                  description={\"We do not in any way track your information for marketing purposes. However we\\n\" +\n                                                  \"                                    would recommend allowing us to contact you if we see that\\n\" +\n                                                  \"                                        there\\n\" +\n                                                  \"                                        are ways we could enhance your bot or use of our software.\"}>\n                                    </ProfileInput>\n\n                                    <br/>\n\n                                    <ProfileInput title={\"Technical Support\"} name=\"profileSettings.techSupport\"\n                                                  type={\"checkbox\"} checked={profileSettings.techSupport}\n                                                  getFieldDecorator={getFieldDecorator} formItemLayout={formItemLayout}\n                                                  handleChange={this.handleChange}\n                                                  description={\"Let our team view your errors and problems in order for us to\\n\" +\n                                                  \"                                    solve your issues.\"}>\n                                    </ProfileInput>\n\n                                    <br/>\n\n                                    <ProfileInput title={\"Account Specialist\"} name=\"profileSettings.accountSpecialist\"\n                                                  type={\"checkbox\"} checked={profileSettings.accountSpecialist}\n                                                  getFieldDecorator={getFieldDecorator} formItemLayout={formItemLayout}\n                                                  handleChange={this.handleChange}\n                                                  description={\"Let our team contact you to help make recommendations as to how you can make\\n\" +\n                                                  \"                                    your bots more successful and ways to collect more valuable data. If you\\n\" +\n                                                  \"                                    don't\\n\" +\n                                                  \"                                    have a sales specialist, we recommend you enable this so we can help you make the\\n\" +\n                                                  \"                                    most\\n\" +\n                                                  \"                                    of our software.\"}>\n                                    </ProfileInput>\n\n                                    <br/>\n\n                                    <div style={{textAlign: \"center\"}}><Button htmlType={\"submit\"}\n                                                                               className={\"ant-btn-primary\"}>Update</Button>\n                                    </div>\n                                </Form>\n                            </TabPane>\n                            {/*<TabPane tab={\"Change Password\"} key={\"3\"}>*/}\n\n                                {/*<Form onSubmit={this.handleSubmit}>*/}\n                                    {/*<ProfileInput title={\"Old Password\"} name=\"password.old\"*/}\n                                                  {/*rules={{*/}\n                                                      {/*required: true,*/}\n                                                      {/*message: \"Please enter your old password\"*/}\n                                                  {/*}}*/}\n                                                  {/*getFieldDecorator={getFieldDecorator} formItemLayout={formItemLayout}*/}\n                                                  {/*handleChange={this.handleChange}*/}\n                                                  {/*form={this.props.form}*/}\n                                                  {/*description={\"Enter your old password here\"}*/}\n                                    {/*/>*/}\n\n                                    {/*<ProfileInput title={\"New Password\"} name=\"password.new\"*/}\n                                                  {/*rules={{*/}\n                                                      {/*required: true,*/}\n                                                      {/*message: \"Please enter your new password\"*/}\n                                                  {/*}}*/}\n                                                  {/*getFieldDecorator={getFieldDecorator} formItemLayout={formItemLayout}*/}\n                                                  {/*handleChange={this.handleChange}*/}\n                                                  {/*form={this.props.form}*/}\n                                                  {/*description={\"Enter your new password here\"}*/}\n                                    {/*/>*/}\n\n                                    {/*<ProfileInput title={\"Repeat Password\"} name=\"password.repeat\"*/}\n                                                  {/*rules={{*/}\n                                                      {/*required: true,*/}\n                                                      {/*message: \"Passwords must match\"*/}\n                                                  {/*}}*/}\n                                                  {/*getFieldDecorator={getFieldDecorator} formItemLayout={formItemLayout}*/}\n                                                  {/*handleChange={this.handleChange}*/}\n                                                  {/*form={this.props.form}*/}\n                                                  {/*description={\"Enter your new password again here\"}*/}\n                                    {/*/>*/}\n\n                                    {/*<br/>*/}\n\n                                    {/*<div style={{textAlign: \"center\"}}><Button htmlType={\"submit\"}*/}\n                                                                               {/*className={\"ant-btn-primary\"}>Update</Button>*/}\n                                    {/*</div>*/}\n                                {/*</Form>*/}\n                            {/*</TabPane>*/}\n                        </Tabs>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        profileData: state.profile.profile\n    };\n}\n\nexport default connect(mapStateToProps)(Form.create()(Profile));\n","import React from 'react';\n\nimport {Button, Input} from \"antd\";\nimport Header from \"../../../../../components/Header/Header\"\n\nimport styles from \"./Integration.module.less\"\nimport ReactDOMServer from 'react-dom/server'\nimport {hasher} from \"../../../../../helpers\"\nimport \"./Integration.less\"\n\nclass Integration extends React.Component {\n\n    state = {\n        source: \"\",\n        dataName: \"tsb-widget\",\n        dataID: \"assistantid\",\n        // dataIcon: \"#ffffff\",\n        dataCircle: \"#9254de\",\n        async: true,\n        defer: true\n    };\n\n    componentDidMount() {\n        this.setState({\n            dataID: hasher.encode(this.props.match.params.id),\n            source: this.getWidgetSrc()\n        });\n    }\n\n    componentWillUnmount(){\n        this.removeChatbot();\n    }\n\n    handleChange = ({target}) => {\n        this.setState({\n            [target.name]: target.value\n        });\n    };\n\n    removeChatbot = () => {\n        let oldBot = document.getElementById(\"TheSearchBase_Chatbot\");\n        if(oldBot){ oldBot.remove(); }\n        let oldBotScript = document.getElementById(\"oldBotScript\");\n        if(oldBotScript){ oldBotScript.remove(); }\n    };\n\n    copyScriptPaste = () => {\n        const pasteArea = document.getElementById(\"pasteArea\");\n        pasteArea.select();\n        document.execCommand(\"copy\");\n    };\n\n    testIntegration = () => {\n        this.removeChatbot();\n        const script = document.createElement(\"script\");\n\n        script.src = this.state.source;\n        script.async = this.state.async;\n        script.defer = this.state.defer;\n        script.setAttribute(\"data-name\", this.state.dataName);\n        script.setAttribute(\"data-id\", this.state.dataID);\n        // script.setAttribute(\"data-icon\", this.state.dataIcon);\n        script.setAttribute(\"data-circle\", this.state.dataCircle);\n        script.setAttribute(\"id\", \"oldBotScript\");\n\n        document.body.appendChild(script);\n    };\n\n    getWidgetSrc = () => {\n        // include the colon if there is port number, which means localhost and not real server\n        let colon = \"\";\n        if (window.location.port !== \"\") {colon = \":\";}\n        const {protocol, port, hostname} = window.location;\n        return protocol + '//' + hostname + colon + port + \"/userdownloads/widget.js\";\n    };\n\n    getChatbotScript = () => {\n        return <script src={this.getWidgetSrc()}\n                       data-name={this.state.dataName}\n                       data-id={this.state.dataID}\n                       // data-icon={this.state.dataIcon}\n                       data-circle={this.state.dataCircle}\n                       async={this.state.async}\n                       defer={this.state.defer}/>\n    };\n\n    render() {\n        return (\n            <div style={{height: '100%'}}>\n                <Header display={\"Integration\"}/>\n\n                <div className={styles.Panel_Body_Only}>\n                    <div style={{marginRight: 5, width: '45%'}} className={styles.Panel}>\n\n                        <div className={styles.Panel_Header} style={{position: \"inherit\"}}>\n                            <h3>Choosing your Assistant's looks</h3>\n                        </div>\n\n                        <div className={styles.Panel_Body}>\n                            <p> Currently you can edit the colour setting of your assistant's button.\n                                Simply pick your preferred one bellow.</p>\n\n                            <table style={{margin: \"5% 28%\"}}>\n                                <tbody>\n                                <tr style={{paddingLeft: \"12%\"}}>\n                                    <td><label style={{fontSize: \"16px\", fontWeight: \"500\"}}>Circle</label></td>\n                                    <td style={{paddingLeft: \"34%\", paddingTop: \"5%\"}}>\n                                        <Input style={{padding: \"3px\", width: \"60px\"}} className={\"antd-primary\"}\n                                               type=\"color\" name=\"dataCircle\" value={this.state.dataCircle}\n                                               onChange={this.handleChange}/>\n                                    </td>\n                                </tr>\n                                </tbody>\n                            </table>\n                        </div>\n                    </div>\n                    <div style={{marginLeft: 5, width: '55%'}} className={styles.Panel}>\n\n                        <div className={styles.Panel_Header} style={{position: \"inherit\"}}>\n                            <h3>Connecting your assistant</h3>\n                        </div>\n\n                        <div className={styles.Panel_Body}>\n                            <p>\n                                To integrate your assistant, you must paste the pre-made code into any part of your\n                                HTML\n                                source code.\n                            </p>\n\n                            <textarea value={ReactDOMServer.renderToString(this.getChatbotScript())} id={\"pasteArea\"}\n                                      style={{width: \"94%\", height: \"110px\", fontWeight: \"600\", margin: \"1.5% 0\"}}\n                                      readOnly/>\n                            <Button onClick={this.copyScriptPaste} className={\"ant-btn-primary\"}>Copy</Button>\n                            <Button style={{marginLeft: \"5px\"}} onClick={this.testIntegration}\n                                    className={\"ant-btn-primary\"}>Test</Button>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default (Integration);","import React, {Component} from 'react';\n\nimport \"./Header.less\"\nimport styles from \"./Header.module.less\";\nimport {Button} from \"antd\";\nimport PropTypes from 'prop-types';\n\n\nclass Header extends Component {\n    static contextTypes = {\n        router: PropTypes.object\n    };\n\n\n    render() {\n\n        return (\n            <div className={styles.Panel}>\n                <div className={styles.Header}>\n                    <div style={{display: '-webkit-inline-box'}}>\n                        <Button onClick={this.context.router.history.goBack}\n                                type=\"primary\" icon=\"left\" shape=\"circle\" size={\"small\"}></Button>\n                        <h3>{this.props.display}</h3>\n                    </div>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nHeader.propTypes = {\n    assistantName: PropTypes.string,\n};\n\nexport default Header;\n","import React, {Component} from 'react';\nimport \"./ViewModal.less\"\nimport {Button, Modal, Table} from \"antd\";\nimport moment from \"moment\";\n\n\nclass ViewModal extends Component {\n\n    state = {};\n\n    columns = [{\n        title: 'Question',\n        key: 'questionText',\n        render: (text, record, index) => (<p>{record.questionText}</p>),\n    }, {\n        title: 'Input',\n        key: 'input',\n        render: (text, record, index) => (\n            <p>\n                {record.input}\n            </p>\n        ),\n    }];\n\n    render() {\n        return (\n            <Modal\n                width={800}\n                title=\"User Inputs\"\n                destroyOnClose={true}\n                visible={this.props.visible}\n                onCancel={this.props.closeViewModal}\n                onOk={this.props.closeViewModal}\n                footer={[\n                    <Button key=\"Cancel\" onClick={this.props.closeViewModal}>OK</Button>\n                ]}>\n                {this.props.record ? (\n                    <Table columns={this.columns}\n                           dataSource={this.props.record.Data.collectedInformation}\n                           size='middle'\n                           pagination={false}\n                    />\n                ) : (<p>No Data</p>)}\n\n            </Modal>\n        );\n    }\n}\n\nexport default ViewModal;","import React from 'react';\nimport \"./UserInput.less\"\nimport styles from \"./UserInput.module.less\"\nimport Header from \"./Header/Header\"\n\nimport {userInputActions} from \"../../../../../store/actions\";\nimport connect from \"react-redux/es/connect/connect\";\nimport ViewModal from \"./ViewModal/ViewModal\";\nimport { Table, Button, Modal } from 'antd';\nimport moment from 'moment';\n\nconst confirm = Modal.confirm;\n\n\nclass UserInput extends React.Component {\n\n    state = {\n        viewModal: false,\n        selectedRecord: null\n    };\n\n    columns = [{\n        title: '#',\n        dataIndex: '#',\n        key: '#',\n        render: (text, record, index) => (<p>{index+1}</p>),\n    }, {\n        title: 'Date & Time',\n        dataIndex: 'DateTime',\n        key: 'DateTime',\n        render: (text, record) => (<p>{moment(record.DateTime).format(\"llll\")}</p>),\n    }, {\n        title: 'Questions Answered',\n        dataIndex: 'QuestionsAnswered',\n    }, {\n        title: 'Solutions Returned',\n        dataIndex: 'SolutionsReturned',\n    }, {\n        title: 'Time Spent',\n        dataIndex: 'TimeSpent',\n        render: (text, record) => (<p>{\n            moment.duration(parseInt('55'), 'seconds').asMinutes().toFixed(2) + \" minute(s)\"\n        }\n        </p>),\n\n    }, {\n        title: 'Action',\n        key: 'action',\n        render: (text, record, index) => (\n            <span>\n              <a onClick={()=> {\n                  console.log(record);\n                  this.setState({viewModal: true, selectedRecord: record})\n                }\n              }> View</a>\n              {/*<Divider type=\"vertical\" />*/}\n              {/*<a>Delete</a>*/}\n            </span>\n        ),\n    }];\n\n    componentDidMount() {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(userInputActions.fetchUserInputs(assistant.ID))\n    }\n\n    closeViewModal = () => {\n        this.setState({viewModal: false, selectedRecord: null})\n    };\n\n    clearAllUserInputs = () => {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(userInputActions.clearAllUserInputs(assistant.ID))\n    };\n\n    showConfirmForClearing = () => {\n        const clear = this.clearAllUserInputs;\n        confirm({\n            title: 'Do you want to delete all records?',\n            content: 'By clicking OK, there will be no way to get these records back!',\n            okType: 'danger',\n            onOk() {clear()},\n            onCancel() {},\n        });\n    };\n\n\n    render() {\n        const {assistant} = this.props.location.state;\n\n        return (\n\n            <div style={{height: '100%'}}>\n                <div className={styles.Panel}>\n                    <div className={styles.Panel_Header}>\n                        <div>\n                            <h3>{assistant.Name}: User Inputs</h3>\n                            <p>Here you can find all the responses to your assistant's chatbot</p>\n                        </div>\n                    </div>\n\n                    <div className={styles.Panel_Body} style={{overflowY: \"auto\"}}>\n                        <Button className={styles.ClearAllBtn} type=\"primary\" icon=\"delete\"\n                                onClick={this.showConfirmForClearing} loading={this.props.isClearingAll}>\n                            Clear All\n                        </Button>\n                        <Table columns={this.columns}\n                               dataSource={this.props.userInputs.data}\n                               loading={this.props.isLoading}\n                               size='middle'\n                        />\n\n                    </div>\n                </div>\n\n                <ViewModal visible={this.state.viewModal}\n                           closeViewModal={this.closeViewModal}\n                           record={this.state.selectedRecord}\n                />\n            </div>\n\n\n\n\n        );\n    }\n}\n\nconst mapStateToProps = state =>  {\n    const {userInput} = state;\n    return {\n        userInputs: userInput.userInputs,\n        isLoading: userInput.isLoading,\n        errorMsg: userInput.errorMsg,\n\n        isClearingAll: userInput.isClearingAll\n    };\n};\n\n\nexport default connect(mapStateToProps)(UserInput);","import React, {Component} from 'react';\n\nimport \"./Header.less\"\nimport styles from \"./Header.module.less\";\nimport {Button} from \"antd\";\nimport PropTypes from 'prop-types';\n\n\nclass Header extends Component {\n    static contextTypes = {\n        router: PropTypes.object\n    };\n\n\n    render() {\n\n        return (\n            <div className={styles.Panel}>\n                <div className={styles.Header}>\n                    <div style={{display: '-webkit-inline-box'}}>\n                        <Button onClick={this.context.router.history.goBack}\n                                type=\"primary\" icon=\"left\" shape=\"circle\" size={\"small\"}></Button>\n                        <h3>{this.props.display}</h3>\n                    </div>\n\n                </div>\n            </div>\n        );\n    }\n}\n\nHeader.propTypes = {\n    assistantName: PropTypes.string,\n};\n\nexport default Header;\n","import React from 'react';\nimport \"./NewSolution.less\"\nimport {Button, Modal, Form, Input, Select, Tabs, Icon, Upload} from \"antd\";\n\nconst FormItem = Form.Item;\nconst TabPane = Tabs.TabPane;\nconst OptGroup = Select.OptGroup;\nconst Option = Select.Option;\n\nclass NewSolution extends React.Component {\n\n    state = {\n        connectionType: \"none\"\n    };\n\n    handleSave = () => this.props.form.validateFields((err, values) => {\n        if (!err)\n            this.props.handleSave(values)\n    });\n\n    changeTypeHandler = (e) => {\n        console.log(\"e: \", e);\n        if (e === \"RDB XML File Export\") {\n            this.setState({connectionType: \"fileUpload\"});\n        }\n        else if (e === \"Bullhorn\" || e === \"RDB\") {\n            this.setState({connectionType: \"CRMConnection\"});\n        } else {\n            this.setState({connectionType: \"none\"});\n        }\n    };\n\n    render() {\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        };\n        const {getFieldDecorator} = this.props.form;\n\n        return (\n            <Modal\n                width={800}\n                title=\"Create New Solution\"\n                destroyOnClose={true}\n                visible={this.props.visible}\n                onOk={this.props.handleSave}\n                onCancel={this.props.handleCancel}\n                footer={[\n                    <Button key=\"Cancel\" onClick={this.props.handleCancel}>Cancel</Button>,\n                    <Button key=\"submit\" type=\"primary\" onClick={this.handleSave}>\n                        Add\n                    </Button>\n                ]}>\n                <Form layout='horizontal'>\n                    <FormItem\n                        label=\"Solution Name\"\n                        extra=\"Enter a name for your solution to easily identify it in the solution list\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('name', {\n                            rules: [{\n                                required: true,\n                                message: 'Please enter your solution name',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Jobs file, Bullhorn connection\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem\n                        label=\"Solution Type\"\n                        extra=\"The type of File or CRM you want to connect\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('type', {\n                            rules: [{\n                                required: true,\n                                message: 'Please select what type of connection you are making',\n                            }],\n                        })(\n                            <Select onChange={this.changeTypeHandler}>\n                                <OptGroup label={\"File Upload\"}>\n                                    {\n                                        this.props.databaseFileTypes.map(fileType => (\n                                                <Option key={fileType} value={fileType}>{fileType}</Option>\n                                            )\n                                        )\n                                    }\n                                </OptGroup>\n                                <OptGroup label={\"CRM Connection\"}>\n                                    {\n                                        this.props.databaseCRMTypes.map(CRMType => (\n                                                <Option key={CRMType} value={CRMType}>{CRMType}</Option>\n                                            )\n                                        )\n                                    }\n                                </OptGroup>\n                            </Select>\n                        )}\n                    </FormItem>\n\n                    <Tabs activeKey={this.state.connectionType} tabBarStyle={{display:\"none\"}}>\n                        <TabPane tab={\"none\"} key={\"none\"}>\n                            <div style={{height: \"86px\", width:\"752px\"}}/>\n                        </TabPane>\n                        <TabPane tab={\"fileUpload\"} key={\"fileUpload\"}>\n                            <Button htmlFor={\"fileUpload\"}><Icon type={\"upload\"}/>Click to Upload</Button>\n                            <FormItem\n                                label=\"Upload File\"\n                                extra=\"Select the file you wish to upload\"\n                                {...formItemLayout}>\n                                {getFieldDecorator('uploadFile', {\n                                    rules: [{\n                                        required: this.state.connectionType === \"fileUpload\",\n                                        message: 'Please select the file you wish to upload from your local machine',\n                                    }],\n                                })(\n                                    <Input type={\"file\"} id={\"fileUpload\"} hidden={false} placeholder=\"Ex: Jobs.xml, Client.json\"/>\n                                )}\n                            </FormItem>\n                        </TabPane>\n                        <TabPane tab={\"CRMConnection\"} key={\"CRMConnection\"}>\n                            <FormItem\n                                label=\"CRM Connection Link\"\n                                extra=\"Please paste your connection link\"\n                                {...formItemLayout}>\n                                {getFieldDecorator('CRMLink', {\n                                    rules: [{\n                                        required: this.state.connectionType === \"CRMConnection\",\n                                        message: 'Please paste the connection link for your CRM provided to you by us or your CRM manager',\n                                    }],\n                                })(\n                                    <Input placeholder=\"\"/>\n                                )}\n                            </FormItem>\n                        </TabPane>\n                    </Tabs>\n                </Form>\n            </Modal>\n        );\n    }\n}\n\nexport default Form.create()(NewSolution)","import React from 'react';\nimport styles from \"../Solutions.module.less\";\nimport {Avatar, Button, List, Skeleton, Spin} from \"antd\";\nimport NewSolution from \"./NewSolution/NewSolution\";\n\nclass SolutionsDisplay extends React.Component{\n    state = {\n        newSolutionModal: false,\n        editSolutionModal: false,\n        selectedSolutionToEdit: {}\n    };\n\n    handleAddSolution = (newSolution) => {\n        this.props.addSolution(newSolution);\n        this.setState({newSolutionModal: false});\n    };\n\n    handleAddSolutionCancel = () => this.setState({newSolutionModal: false});\n\n    showNewSolutionModal = () => this.setState({newSolutionModal: true});\n\n\n    ////// EDIT GROUP\n    handleEditSolution = (editedSolution) => {\n        this.props.editSolution(editedSolution);\n        this.setState({editSolutionModal: false, selectedSolutionToEdit: {}});\n    };\n\n    handleEditSolutionCancel = () => this.setState({editSolutionModal: false});\n\n    showEditSolutionModal = (item) => this.setState({editSolutionModal: true, selectedSolutionToEdit: item});\n\n    ////// DELETE GROUP\n    handleDeleteSolution = (deletedSolution) => {\n        this.props.deleteSolution(deletedSolution);\n        this.setState({editSolutionModal: false, selectedSolutionToEdit: {}});\n    };\n\n    render (){\n        console.log(\"SOLUTIONS DISPLAY PROPS ON RENDER: \", this.props);\n\n        return(\n            <div className={styles.Panel}>\n                <div className={styles.Header} style={{}}>\n                    <div>\n                        <h3>Solutions List</h3>\n                    </div>\n                    <div>\n                        <Button className={styles.PanelButton} type=\"primary\" icon=\"plus\"\n                                onClick={this.showNewSolutionModal}>\n                            Add Solution\n                        </Button>\n\n                        <NewSolution visible={this.state.newSolutionModal}\n                                     handleCancel={this.handleAddSolutionCancel}\n                                     handleSave={this.handleAddSolution}\n                                     databaseFileTypes={this.props.databaseFileTypes}\n                                     databaseCRMTypes={this.props.databaseCRMTypes}\n                        />\n                    </div>\n                </div>\n\n\n                <div className={styles.Body}>\n                    {\n                        this.props.isLoading ?\n                            <Spin><Skeleton active={true}/></Spin>\n                            :\n                            <List\n                                itemLayout=\"horizontal\"\n                                dataSource={this.props.solutionsData}\n                                renderItem={item => (\n                                    <List.Item\n                                        actions={[<Button icon={'edit'}\n                                                          onClick={() => this.showEditSolutionModal(item)}/>]}>\n                                        <List.Item.Meta\n                                            avatar={<Avatar icon=\"ordered-list\"\n                                                            style={{backgroundColor: '#9254de'}}/>}\n                                            title={<a onClick={() => this.props.selectSolution(item)}>{item.Solution.Name}</a>}\n                                            description={item.description}\n                                        />\n                                    </List.Item>\n                                )}\n                            />\n                    }\n                </div>\n\n                {/*<EditSolution group={this.state.selectedSolutionToEdit}*/}\n                           {/*visible={this.state.editSolutionModal}*/}\n                           {/*handleCancel={this.handleEditSolutionCancel}*/}\n                           {/*handleUpdate={this.handleEditSolution}*/}\n                           {/*handleDelete={this.handleDeleteSolution}/>*/}\n            </div>\n        )\n    }\n}\n\nexport default SolutionsDisplay","import React from 'react'\nimport connect from \"react-redux/es/connect/connect\";\nimport styles from \"../../Assistants.module.less\";\nimport {Button, message} from \"antd\";\nimport Header from \"./Header/Header\";\nimport SolutionsDisplay from \"./SolutionsDisplay/SolutionsDisplay\";\nimport SolutionsSettings from \"./SolutionsSettings/SolutionsSettings\";\nimport {solutionsActions} from \"../../../../../store/actions\";\nimport Groups from \"../Flow/Groups/Groups\";\n\nclass Solutions extends React.Component{\n    state = {\n        currentSolution: {blocks: []},\n        databaseFileTypes: [\"RDB XML File Export\"],\n        databaseCRMTypes: [\"Bullhorn\", \"RDB\"]\n    };\n\n    componentDidMount() {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(solutionsActions.getSolutions(assistant.ID))\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.solutions !== this.props.solutions) {\n            nextProps.solutionsData.map((solution) => {\n                if (solution.id === this.state.currentSolution.id)\n                    this.setState({currentSolution: solution})\n            })\n        }\n    }\n\n    selectSolution = (currentSolution) => this.setState({currentSolution});\n\n\n    // GROUPS\n    addSolution = (newSolution) => {\n        const {assistant} = this.props.location.state;\n        console.log(\"NEW SOLUTION: \", newSolution);\n        this.props.dispatch(solutionsActions.addSolution({ID: assistant.ID, newSolution: newSolution}));\n        // message.loading(`Adding ${newSolution.name} group`, 0);\n    };\n\n    editSolution = (editedSolution) => {\n        // const {assistant} = this.props.location.state;\n        // this.props.dispatch(flowActions.editSolutionRequest({ID: assistant.ID, editedSolution: editedSolution}));\n        // message.loading(`Editing ${editedSolution.name} group`, 0);\n    };\n\n    deleteSolution = (deletedSolution) => {\n        // const {assistant} = this.props.location.state;\n        // this.props.dispatch(flowActions.deleteSolutionRequest({ID: assistant.ID, deletedSolution: deletedSolution}));\n        // message.loading(`Deleting ${deletedSolution.name} group`, 0);\n    };\n\n    componentDidUpdate(prevProps) {\n\n        // if (!this.props.isAddingSolution && prevProps.addSuccessMsg !== this.props.addSuccessMsg) {\n        //     message.destroy();\n        //     message.success(this.props.addSuccessMsg);\n        // }\n        //\n        // if (!this.props.isEditingSolution && prevProps.editSuccessMsg !== this.props.editSuccessMsg) {\n        //     message.destroy();\n        //     message.success(this.props.editSuccessMsg);\n        // }\n        //\n        // if (!this.props.isDeletingSolution && prevProps.deleteSuccessMsg !== this.props.deleteSuccessMsg) {\n        //     message.destroy();\n        //     message.success(this.props.deleteSuccessMsg);\n        // }\n    }\n\n\n\n    render(){\n\n        return (\n             <div style={{height: '100%'}}>\n                <div style={{padding: '0 5px'}}>\n                    <div style={{width: '100%', height: 56, marginBottom: 10}}>\n                        <Header display={\"Solutions\"}/>\n                    </div>\n                </div>\n\n                <div style={{height: 'calc(100% - 66px)', width: '100%', display: 'flex'}}>\n                    <div style={{margin: 5, width: '30%'}}>\n\n                        <SolutionsDisplay selectSolution={this.selectSolution}\n                                isLoading={this.props.isLoading}\n                                solutionsData={this.props.solutionsData}\n                                addSolution={this.addSolution}\n                                editSolution={this.editSolution}\n                                deleteSolution={this.deleteSolution}\n                                databaseFileTypes={this.state.databaseFileTypes}\n                                databaseCRMTypes={this.state.databaseCRMTypes}\n                        />\n\n                    </div>\n\n                    <div style={{margin: 5, width: '70%'}}>\n\n                        {/*<SolutionsSettings />*/}\n\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    console.log(\"PROPS STATE: \", state);\n    return {\n        solutionsData: state.solutions.solutionsData,\n        isLoading: state.solutions.isLoading,\n        errorMsg: state.solutions.errorMsg,\n    };\n}\n\nexport default connect(mapStateToProps)(Solutions)","import React, {Component} from 'react';\n\nimport {Icon, Layout, Menu} from 'antd';\nimport \"./Dashboard.less\"\nimport styles from \"./Dashboard.module.less\"\nimport Assistants from './Assistants/Assistants';\nimport {history} from '../../helpers';\nimport {Switch, Route} from 'react-router-dom';\nimport Flow from \"./Assistants/Assistant/Flow/Flow\";\nimport Profile from \"./Profile/Profile\";\nimport Integration from \"./Assistants/Assistant/Integration/Integration\";\nimport UserInput from \"./Assistants/Assistant/UserInput/UserInput\";\nimport Solutions from \"./Assistants/Assistant/Solutions/Solutions\";\n\nconst {SubMenu} = Menu;\nconst {Divider} = Menu;\nconst {Header, Content, Footer, Sider} = Layout;\n\n\nclass Dashboard extends Component {\n    state = {\n        collapsed: false,\n        marginLeft: 200,\n    };\n\n    toggle = () => {\n        this.setState({\n            collapsed: !this.state.collapsed,\n        }, () => this.setState({marginLeft: this.state.collapsed ? 81 : 200}));\n    };\n\n    handleMenuClick = (e) => {\n        e.key === 'dashboard' ? history.push(`/dashboard`) : history.push(`/dashboard/${e.key}`)\n    };\n\n    render() {\n        const {match} = this.props;\n        return (\n            <Layout style={{height: '100%'}}>\n                <Sider\n                    trigger={null}\n                    collapsible\n                    collapsed={this.state.collapsed}\n                    className={styles.Sider}>\n\n                    <div className={styles.Logo}>\n                        <div style={{display: 'flex'}}>\n                            <Icon type=\"cloud\" theme=\"twoTone\" twoToneColor=\"#9254de\" style={{fontSize: 44}}/>\n                            <div style={{lineHeight: '43px', marginLeft: 25}}>TheSearchBase</div>\n                        </div>\n                    </div>\n\n                    <Menu theme=\"light\" defaultSelectedKeys={['1']} mode=\"inline\" onClick={this.handleMenuClick}>\n                        <Menu.Item key=\"dashboard\">\n                            <Icon type=\"home\"/>\n                            <span>Home</span>\n                        </Menu.Item>\n\n                        <Menu.Item key=\"assistants\">\n                            <Icon type=\"robot\"/>\n                            <span>Assistants</span>\n                        </Menu.Item>\n\n                        <Divider/>\n\n                        <SubMenu key=\"sub2\"\n                                 title={<span><Icon type=\"user\"/><span>Account Details</span></span>}>\n                            <Menu.Item key=\"profile\">\n                                <Icon type=\"profile\"/>\n                                Profile\n                            </Menu.Item>\n                            <Menu.Item key=\"users-management\" style={{fontSize: '9pt'}}>\n                                <Icon type=\"usergroup-add\"/>Users Management\n                            </Menu.Item>\n                        </SubMenu>\n\n                        {/*<Menu.Item key=\"billing\">*/}\n                            {/*<Icon type=\"dollar\"/>*/}\n                            {/*<span>Billing</span>*/}\n                        {/*</Menu.Item>*/}\n                        <Menu.Item key=\"support\">\n                            <Icon type=\"question-circle\"/>\n                            <span>Support</span>\n                        </Menu.Item>\n                    </Menu>\n                </Sider>\n\n                <Layout style={{marginLeft: this.state.marginLeft, height: '100%'}}>\n\n                    <Header className={styles.Header}>\n                        <Icon\n                            className={styles.trigger}\n                            type={this.state.collapsed ? 'menu-unfold' : 'menu-fold'}\n                            onClick={this.toggle}\n                        />\n                    </Header>\n\n                    {/*HERE GOES ALL THE ROUTES*/}\n                    <Content style={{margin: 16, marginTop: 80, marginBottom: 0, height: '100%'}}>\n\n                        <Switch>\n                            <Route path={`${match.path}/assistants/:id/flow`} component={Flow}/>\n                            <Route path={`${match.path}/assistants/:id/integration`} component={Integration}/>\n                            <Route path={`${match.path}/assistants/:id/userInput`} component={UserInput}/>\n                            <Route path={`${match.path}/assistants/:id/solutions`} component={Solutions}/>\n                            <Route path={`${match.path}/assistants`} component={Assistants} exact/>\n                            <Route path={`${match.path}/profile`} component={Profile} exact/>\n\n                            {/*<Route path=\"/dashboard\" component={Dashboard}/>*/}\n                        </Switch>\n                    </Content>\n\n                    <Footer style={{textAlign: 'center', padding: 10}}>\n                        The Search Base ©2018\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n    }\n\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport {authActions} from '../../store/actions/index';\nimport styles from './Login.module.less';\nimport './Login.less';\n\nimport {Form, Icon, Input, Button} from 'antd';\nimport {Avatar} from 'antd';\n\n\nconst FormItem = Form.Item;\nclass Login extends React.Component {\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n                this.props.dispatch(authActions.login(values.email, values.password));\n            }\n        });\n    };\n\n    handleLogout = () => {\n        this.props.dispatch(authActions.logout());\n    };\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <div className={styles.Panel} style={{padding: 75, textAlign: 'center'}}>\n\n                <Avatar size={128} icon=\"user\" style={{marginBottom: 50}}/>\n\n                <Form onSubmit={this.handleSubmit} className=\"login-form\">\n                    <FormItem>\n                        {getFieldDecorator('email', {\n                            rules: [{required: true, message: 'Please input your email!'}],\n                        })(\n                            <Input prefix={<Icon type=\"user\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                                   placeholder=\"Email\"/>\n                        )}\n                    </FormItem>\n                    <FormItem>\n                        {getFieldDecorator('password', {\n                            rules: [{required: true, message: 'Please input your Password!'}],\n                        })(\n                            <Input prefix={<Icon type=\"lock\" style={{color: 'rgba(0,0,0,.25)'}}/>} type=\"password\"\n                                   placeholder=\"Password\"/>\n                        )}\n                    </FormItem>\n                    <FormItem>\n                        <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                            Log in\n                        </Button>\n                    </FormItem>\n                </Form>\n            </div>\n        );\n\n\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        isLoggingIn: state.auth.isLoggingIn\n    };\n}\n\nconst loginForm = Form.create()(Login);\nexport default connect(mapStateToProps)(loginForm);\n","import React, {Component} from 'react';\nimport {Switch, Route, withRouter, Redirect} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {history} from './helpers';\nimport {notification} from 'antd';\nimport './App.less';\n\nimport {PrivateRoute} from './hoc';\nimport Dashboard from \"./application/Dashboard/Dashboard\";\nimport Login from './application/Login/Login'\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        history.listen((location, action) => {\n            // Clear recent notifications boxes when route changes\n            notification.destroy();\n        });\n    }\n\n    render() {\n        return (\n            <Switch>\n                {/* <Route exact path=\"/\" component={Home} /> */}\n                <Route path=\"/login\" component={Login}/>\n                <PrivateRoute path=\"/dashboard\" component={Dashboard}/>\n                <Redirect to={{pathname: '/dashboard'}}/>\n            </Switch>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    const {alert} = state;\n    return {\n        alert,\n    };\n};\nexport default withRouter(connect(mapStateToProps)(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.less';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport {history} from './helpers'\nimport store from './store/store'\n\n\nconst app = (\n\n    <Provider store={store}>\n        <Router history={history} >\n            <App />\n        </Router>\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Integration_Logo__95x6p\",\"trigger\":\"Integration_trigger__k2iHG\",\"Sider\":\"Integration_Sider__2KM_8\",\"Header\":\"Integration_Header__1BlRc\",\"Panel\":\"Integration_Panel__YQm7V\",\"Panel_With_Header\":\"Integration_Panel_With_Header__1vwGy\",\"Panel_Header\":\"Integration_Panel_Header__3fTNI\",\"Panel_Body\":\"Integration_Panel_Body__4hmlE\",\"Panel_Body_Only\":\"Integration_Panel_Body_Only__2uxaX\",\"Panel_Header_Button\":\"Integration_Panel_Header_Button__2re5I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Assistants_Logo__1_c55\",\"trigger\":\"Assistants_trigger__1I51J\",\"Sider\":\"Assistants_Sider__206sR\",\"Header\":\"Assistants_Header__1p-1G\",\"Panel\":\"Assistants_Panel__1ntI9\",\"Panel_With_Header\":\"Assistants_Panel_With_Header__2KVCE\",\"Panel_Header\":\"Assistants_Panel_Header__29BDR\",\"Panel_Body\":\"Assistants_Panel_Body__2GgUc\",\"Panel_Body_Only\":\"Assistants_Panel_Body_Only__3T20i\",\"Panel_Header_Button\":\"Assistants_Panel_Header_Button__3zsj3\",\"AssistantsList\":\"Assistants_AssistantsList__Q3wG3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Dashboard_Logo__1tX2D\",\"trigger\":\"Dashboard_trigger__at3Ld\",\"Sider\":\"Dashboard_Sider__2ZI11\",\"Header\":\"Dashboard_Header__3Btdm\",\"Panel\":\"Dashboard_Panel__3xGal\",\"Panel_With_Header\":\"Dashboard_Panel_With_Header__223E9\",\"Panel_Header\":\"Dashboard_Panel_Header__WjA5O\",\"Panel_Body\":\"Dashboard_Panel_Body__2CCNs\",\"Panel_Body_Only\":\"Dashboard_Panel_Body_Only__1ghhm\",\"Panel_Header_Button\":\"Dashboard_Panel_Header_Button__3e-Uv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Groups_Logo__1Xp0E\",\"trigger\":\"Groups_trigger__3r8xb\",\"Sider\":\"Groups_Sider__2qjgl\",\"Header\":\"Groups_Header__62fiz\",\"Panel\":\"Groups_Panel__2qp5F\",\"Panel_With_Header\":\"Groups_Panel_With_Header__1JGwO\",\"Panel_Header\":\"Groups_Panel_Header__r-Yxh\",\"Panel_Body\":\"Groups_Panel_Body__6n_iM\",\"Panel_Body_Only\":\"Groups_Panel_Body_Only__2bKFB\",\"Panel_Header_Button\":\"Groups_Panel_Header_Button__1lCxR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"UserInput_Logo__20ebb\",\"trigger\":\"UserInput_trigger__Z7eB_\",\"Sider\":\"UserInput_Sider__MMQGv\",\"Header\":\"UserInput_Header__klDCI\",\"Panel\":\"UserInput_Panel__2pYne\",\"Panel_With_Header\":\"UserInput_Panel_With_Header__1ZK0O\",\"Panel_Header\":\"UserInput_Panel_Header__1-qpz\",\"Panel_Body\":\"UserInput_Panel_Body__13ePp\",\"Panel_Body_Only\":\"UserInput_Panel_Body_Only___04Ph\",\"Panel_Header_Button\":\"UserInput_Panel_Header_Button__2mK7o\",\"ClearAllBtn\":\"UserInput_ClearAllBtn__39TDz\"};"],"sourceRoot":""}