{"version":3,"sources":["application/Dashboard/Dashboard.module.less","application/Dashboard/Assistants/Assistant/Flow/Blocks/Blocks.module.less","application/Dashboard/Assistants/Assistant/UserInput/UserInput.module.less","application/Dashboard/Assistants/Assistant/Solutions/Solutions.module.less","application/Dashboard/Profile/Profile.module.less","application/Dashboard/Home/Home.module.less","components/Header/Header.module.less","application/Dashboard/Assistants/Assistant/Flow/Flow.module.less","application/Login/Login.module.less","helpers/history.js","helpers/auth.js","helpers/alert.js","store/actions/actionTypes.js","store/utility.js","store/reducers/auth.reducer.js","store/reducers/assistant.reducer.js","store/reducers/flow.reducer.js","store/reducers/assistantSettings.reducer.js","store/reducers/profile.reducer.js","store/reducers/userInput.reducer.js","store/reducers/solutions.reducer.js","store/reducers/index.js","store/actions/auth.actions.js","store/actions/assistant.actions.js","store/actions/flow.actions.js","store/actions/assistantSettings.actions.js","store/actions/profile.actions.js","store/actions/userInput.actions.js","store/actions/solutions.actions.js","store/sagas/auth.saga.js","store/sagas/assistant.saga.js","store/sagas/flow.saga.js","store/sagas/assistantSettings.saga.js","store/sagas/profile.saga.js","store/sagas/userInput.saga.js","store/sagas/solutions.saga.js","store/store.js","helpers/http.js","helpers/hashids.js","hoc/PrivateRoute.js","application/Dashboard/Assistants/Assistant/AssistantSettings/AssistantSettingsModal/AssistantSettingsModal.js","application/Dashboard/Assistants/Assistant/AssistantSettings/AssistantSettings.js","application/Dashboard/Assistants/Assistant/Assistant.js","application/Dashboard/Assistants/NewAssistantModal/NewAssistantModal.js","application/Dashboard/Assistants/Assistants.js","application/Dashboard/Assistants/Assistant/Flow/Groups/NewGroup/NewGroup.js","application/Dashboard/Assistants/Assistant/Flow/Groups/EditGroup/EditGroup.js","application/Dashboard/Assistants/Assistant/Flow/Groups/Groups.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/Block/Block.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/NewBlockModal/Cards/UserInput.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/NewBlockModal/Cards/Question.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/NewBlockModal/Cards/FileUpload.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/NewBlockModal/Cards/Solutions.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/NewBlockModal/NewBlockModal.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/EditBlockModal/Cards/UserInput.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/EditBlockModal/Cards/Question.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/EditBlockModal/Cards/FileUpload.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/EditBlockModal/Cards/Solutions.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/EditBlockModal/EditBlockModal1.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/Blocks.js","components/Header/Header.js","application/Dashboard/Assistants/Assistant/Flow/Flow.js","application/Dashboard/Profile/profileComponents/ProfileInput/ProfileInput.js","application/Dashboard/Profile/Profile.js","application/Dashboard/Assistants/Assistant/Integration/Integration.js","application/Dashboard/Assistants/Assistant/UserInput/ViewModal/ViewModal.js","application/Dashboard/Assistants/Assistant/UserInput/UserInput.js","application/Dashboard/Assistants/Assistant/Solutions/SolutionsDisplay/SolutionModal/SolutionModal.js","application/Dashboard/Assistants/Assistant/Solutions/SolutionsDisplay/SolutionsDisplay.js","application/Dashboard/Assistants/Assistant/Solutions/Solutions.js","application/Dashboard/Home/Home.js","application/Dashboard/Dashboard.js","application/Login/Login.js","App.js","serviceWorker.js","index.js","application/Dashboard/Assistants/Assistant/Integration/Integration.module.less","application/Dashboard/Assistants/Assistants.module.less","application/Dashboard/Assistants/Assistant/Flow/Groups/Groups.module.less"],"names":["module","exports","Logo","trigger","Sider","Header","Panel","Panel_With_Header","Panel_Header","Panel_Body","Panel_Body_Only","Panel_Header_Button","ClearAllBtn","history","createBrowserHistory","authHeader","token","localStorage","getItem","refresh","Authorization","checkAuthenticity","user","JSON","parse","getUser","alertSuccess","title","message","notification","success","description","duration","placement","alertError","error","loadingMessage","loading","destroyMessage","destroy","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","AUTH_CHECK_TIMEOUT","REFRESH_TOKEN","FETCH_ASSISTANTS_REQUEST","ADD_ASSISTANT_REQUEST","UPDATE_ASSISTANT_SETTINGS_REQUEST","FETCH_FLOW_REQUEST","ADD_GROUP_REQUEST","EDIT_GROUP_REQUEST","DELETE_GROUP_REQUEST","ADD_BLOCK_REQUEST","EDIT_BLOCK_REQUEST","DELETE_BLOCK_REQUEST","UPDATE_BLOCKS_ORDER_REQUEST","GET_PROFILE_REQUEST","SAVE_PROFILE_DETAILS_REQUEST","SAVE_DATA_SETTINGS_REQUEST","FETCH_USERINPUT_REQUEST","CLEAR_ALL_USERINPUT_REQUEST","GET_SOLUTIONS_REQUEST","ADD_SOLUTION_REQUEST","EDIT_SOLUTION_REQUEST","updateObject","oldObject","updatedValues","Object","objectSpread","initialState","isAuthenticated","assistantList","isLoading","errorMsg","blockGroups","profile","userInputs","solutionsData","rootReducer","combineReducers","auth","state","arguments","length","undefined","action","type","actionTypes","isLoggingIn","msg","assistant","isAdding","successMsg","isChanging","flow","isAddingGroup","addSuccessMsg","isEditingGroup","editSuccessMsg","isDeletingGroup","deleteSuccessMsg","isAddingBlock","settings","profileData","userInput","console","log","isClearingAll","solutions","authActions","login","email","password","loginSuccess","loginFailure","logout","refreshToken","checkAuthTimeout","expirationTime","assistantActions","fetchAssistants","fetchAssistantsSuccess","fetchAssistantsFailure","addAssistant","newAssistant","addAssistantSuccess","addAssistantFailure","changeAssistantStatus","assistantID","changeAssistantStatusSuccess","status","changeAssistantStatusFailure","flowActions","fetchFlowRequest","fetchFlowSuccess","args","fetchFlowFailure","addGroupRequest","values","ID","newGroup","addGroupSuccess","addGroupFailure","editGroupRequest","editedGroup","editGroupSuccess","editGroupFailure","deleteGroupRequest","deletedGroup","deleteGroupSuccess","deleteGroupFailure","addBlockRequest","_ref","newBlock","groupID","addBlockSuccess","addBlockFailure","editBlockRequest","_ref2","edittedBlock","editBlockSuccess","editBlockFailure","deleteBlockRequest","_ref3","deletedBlock","deleteBlockSuccess","deleteBlockFailure","updateBlocksOrderRequest","_ref4","newBlocksOrder","updateBlocksOrderSuccess","updateBlocksOrderFailure","assistantSettingsActions","updateAssistantSettingsRequest","updateAssistantSettingsSuccess","updateAssistantSettingsFailure","profileActions","getProfile","getProfileSuccess","data","getProfileFailure","saveProfileDetails","saveProfileDetailsSuccess","successMessage","saveProfileDetailsFailure","saveDataSettings","dataSettings","saveDataSettingsSuccess","saveDataSettingsFailure","userInputActions","fetchUserInputs","fetchUserInputsSuccess","fetchUserInputsFailure","clearAllUserInputs","clearAllUserInputsSuccess","clearAllUserInputsFailure","solutionsActions","getSolutions","getSolutionsSuccess","getSolutionsFailure","addSolution","params","addSolutionSuccess","addSolutionFailure","editSolution","editSolutionSuccess","editSolutionFailure","watchCheckAuthTimeout","watchLogin","watchLogout","watchRefreshToken","authSaga","regenerator_default","a","wrap","_context","prev","next","delay","put","stop","_marked","this","_context2","takeEvery","_marked2","res","expiresIn","secondsToExpire","_context3","axios","post","headers","Content-Type","sent","setItem","stringify","Date","getTime","push","t0","response","_marked3","_context4","takeLatest","_marked4","_context5","clear","_marked5","_context6","_marked6","_res$data$data","_context7","Error","_marked7","_context8","_marked8","_context9","all","_marked9","watchFetchAssistants","watchAddAssistant","assistantSaga","http","get","abrupt","assistant_saga_marked","assistant_saga_marked2","assistant_saga_marked3","assistant_saga_marked4","assistant_saga_marked5","fetchFlow","watchFetchFlow","addGroup","editGroup","deleteGroup","watchAddGroup","watchEditGroup","watchDeleteGroup","addBlock","editBlock","deleteBlock","updateBlocksOrder","watchAddBlock","watchEditBlock","watchDeleteBlock","watchUpdateBlcoksOrder","flowSaga","concat","flow_saga_marked","flow_saga_marked2","flow_saga_marked3","flow_saga_marked4","delete","id","flow_saga_marked5","flow_saga_marked6","flow_saga_marked7","flow_saga_marked8","flow_saga_marked9","currentUpdatedGroup","_context10","map","group","blocks","block","_marked10","_ref5","_context11","_marked11","_ref6","_context12","_marked12","_context13","_marked13","_context14","_marked14","_context15","_marked15","_context16","_marked16","_context17","_marked17","updateAssistantSettings","watchUpdateAssistantSettings","settingsSage","updatedSettings","assistantSettings_saga_marked","assistantSettings_saga_marked2","assistantSettings_saga_marked3","getProfilePageData","watchProfileRequests","watchProfileUpdates","watchDataSettingsUpdates","profileSaga","profile_saga_marked","profile_saga_marked2","profile_saga_marked3","profile_saga_marked4","profile_saga_marked5","profile_saga_marked6","profile_saga_marked7","watchFetchUserInputs","watchClearAllUserInputs","userInputSaga","userInput_saga_marked","userInput_saga_marked2","userInput_saga_marked3","userInput_saga_marked4","userInput_saga_marked5","getSolutionsData","watchSolutionsRequests","watchAddSolutionRequests","watchEditSolutionRequests","solutionsSaga","solutions_saga_marked","newSolution","solutions_saga_marked2","editedSolution","solutions_saga_marked3","solutions_saga_marked4","solutions_saga_marked5","solutions_saga_marked6","solutions_saga_marked7","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","create","baseURL","interceptors","request","use","config","header","Promise","reject","dispatch","hashids","Hashids","hasher","param","encode","PrivateRoute","Component","component","rest","objectWithoutProperties","react_default","createElement","Route","assign","render","props","Redirect","to","pathname","from","location","FormItem","Form","Item","AssistantSettingsModal","isPopupDisabled","_this","SecondsUntilPopup","togglePopupSwitch","setState","handleSave","form","validateFields","err","secondsUntilPopup","inputValue","formItemLayout","labelCol","span","wrapperCol","getFieldDecorator","modal","visible","width","destroyOnClose","onCancel","handleCancel","footer","es_button","key","onClick","es_form","layout","label","extra","initialValue","Name","rules","required","input","placeholder","Message","TopBarText","es_switch","checked","onChange","style","marginRight","input_number","disabled","min","className","AssistantSettings","hideModal","AssistantSettings_AssistantSettingsModal_AssistantSettingsModal","connect","Meta","Card","covers","Assistant","showModal","onActiveChanged","Fragment","card","margin","float","height","cover","alt","src","Math","floor","random","defaultChecked","Active","actions","icon","Link","dropdown","overlay","es_menu","Divider","menu","Assistant_AssistantSettings_AssistantSettings","Option","Select","NewAssistantModal","handleAdd","prevProps","onOk","handleOk","NewAssistantModal_FormItem","es_select","value","Assistants","Boolean","successSettings","errorSettings","_this2","styles","AssistantsList","i","Assistants_Assistant_Assistant","index","skeleton","active","Assistants_NewAssistantModal_NewAssistantModal","NewGroup","NewGroup_FormItem","EditGroup","handleUpdate","name","handleDelete","EditGroup_FormItem","Groups","newGroupModal","editGroupModal","selectedGroupToEdit","handleAddGroup","handleAddGroupCancel","showNewGroupModal","handleEditGroup","handleEditGroupCancel","showEditGroupModal","item","handleDeleteGroup","Groups_NewGroup_NewGroup","spin","es_list","itemLayout","dataSource","groupsList","renderItem","selectGroup","avatar","backgroundColor","Groups_EditGroup_EditGroup","Collapse","Block","collapse","bordered","divider","content","text","size","row","col","blockToGoID","validation","afterMessage","showTop","storeInDB","es_checkbox","isSkippable","answers","answer","Block_Meta","keywords","keyword","es_tag","UserInput","showGoToBlock","showGoToGroup","onSubmit","handleNewBlock","options","currentGroup","labels","blockToGoIDGroup","onSelectAction","_this$props$options","blockTypes","allGroups","blockOptions","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","blockType","return","UserInput_FormItem","validations","UserInput_Option","onSelect","valuePropName","alwaysStoreInDB","Question","modalVisible","tags","inputVisible","addAnswer","hideAddAnswer","showAddAnswer","removeAnswer","removeTag","removedTag","filter","tag","showInput","focus","handleInputChange","e","target","saveInputRef","handleInputConfirm","indexOf","toConsumableArray","_this$state","Question_FormItem","shape","isLongTag","tagElem","closable","afterClose","slice","tooltip","ref","onBlur","onPressEnter","background","borderStyle","Question_Option","CheckboxGroup","Checkbox","Group","FileUpload","fileTypes","checkedValues","typesAllowed","FileUpload_FormItem","FileUpload_Option","Solutions","Number","Solutions_FormItem","Solutions_Option","TabPane","Tabs","NewBlockModal","handleAddBlock","closeModal","onChangeTab","currentTab","then","nextProps","tabs","tab","Cards_UserInput","Cards_Question","Cards_FileUpload","Cards_Solutions","groupName","handleEditBlock","order","_this3","_this$props$options2","allBlocks","Cards_UserInput_FormItem","Cards_UserInput_Option","Cards_Question_FormItem","Cards_Question_Option","Cards_FileUpload_FormItem","FileUpload_CheckboxGroup","Cards_FileUpload_Option","Cards_Solutions_FormItem","Cards_Solutions_Option","EditBlockModal","EditBlockModal_Cards_UserInput","EditBlockModal_Cards_Question","EditBlockModal_Cards_FileUpload","EditBlockModal_Cards_Solutions","confirm","Modal","Blocks","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","addBlockVisible","editBlockVisible","deleteBlockVisible","showAddBlockModal","closeAddBlockModal","closeEditBlockModal","handleDeleteBlock","reorderBlocks","onDragEnd","bind","assertThisInitialized","result","destination","list","startIndex","endIndex","Array","_result$splice","splice","removed","slicedToArray","reorder","source","overflowY","react_beautiful_dnd_esm","droppableId","provided","innerRef","draggableId","draggableProps","dragHandleProps","draggableStyle","Blocks_Block_Block","Blocks_NewBlockModal_NewBlockModal","EditBlockModal1","marginBottom","display","context","router","goBack","assistantName","contextTypes","PropTypes","object","Flow","components_Header_Header","Flow_Groups_Groups","Flow_Blocks_Blocks","ProfileInput","ProfileInput_FormItem","handleChange","readOnly","React","defaultProps","Profile","companyName","newsletters","profileSettings","statNotifications","trackData","techSupport","accountSpecialist","old","new","repeat","formSubmitted","dataCalled","dataRendered","tabIndex","handleSubmit","preventDefault","includes","names","split","tempState","defineProperty","setFieldsValue","changeTab","parseInt","_this$props$form$setF2","isEmpty","Firstname","Surname","Email","company","userSettings","UserInputNotifications","TrackingData","TechnicalSupport","AccountSpecialist","obj","hasOwnProperty","updateStateFromProps","updateAllInputsFromState","defaultActiveKey","Profile_TabPane","profileComponents_ProfileInput_ProfileInput","textAlign","htmlType","Integration","dataName","dataID","dataCircle","async","defer","color","hex","removeChatbot","oldBot","document","getElementById","remove","oldBotScript","copyScriptPaste","select","execCommand","testIntegration","script","setAttribute","body","appendChild","getWidgetSrc","colon","port","_window$location","protocol","hostname","getChatbotScript","data-name","data-id","data-circle","match","position","justify","lib","lineHeight","padding","marginLeft","ReactDOMServer","renderToString","fontWeight","ViewModal","fileNames","counter","columns","record","questionText","hreftype","data-index","downloadFile","fileName","getAttribute","url","method","responseType","saveAs","Blob","catch","nextContext","FilePath","closeViewModal","table","Data","collectedInformation","pagination","viewModal","selectedRecord","dataIndex","moment","DateTime","format","asMinutes","toFixed","showConfirmForClearing","okType","UserInput_ViewModal_ViewModal","filesPath","OptGroup","SolutionModal","connectionType","uploadFile","edit","formData","FormData","append","changeTypeHandler","onFileChange","file","files","solutionExists","solutionToEdit","Solution","Type","SolutionModal_FormItem","databaseFileTypes","fileType","SolutionModal_Option","activeKey","tabBarStyle","SolutionModal_TabPane","hidden","click","SolutionsDisplay","editMode","selectedSolutionToEdit","handleSolution","handleSolutionCancel","showSolutionModal","selectSolution","SolutionsDisplay_SolutionModal_SolutionModal","databaseCRMTypes","currentSolution","deleteSolution","deletedSolution","solution","Solutions_SolutionsDisplay_SolutionsDisplay","Home","SubMenu","Menu","Layout","Content","Footer","Dashboard","collapsed","toggle","handleMenuClick","collapsible","theme","twoToneColor","fontSize","defaultSelectedKeys","mode","Dashboard_Header","marginTop","Switch","path","exact","Login","handleLogout","Login_FormItem","prefix","loginForm","App","listen","PrivateRoute_PrivateRoute","withRouter","alert","app","es","Router","src_App_0","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eb1944ee.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Dashboard_Logo__1tX2D\",\"trigger\":\"Dashboard_trigger__at3Ld\",\"Sider\":\"Dashboard_Sider__2ZI11\",\"Header\":\"Dashboard_Header__3Btdm\",\"Panel\":\"Dashboard_Panel__3xGal\",\"Panel_With_Header\":\"Dashboard_Panel_With_Header__223E9\",\"Panel_Header\":\"Dashboard_Panel_Header__WjA5O\",\"Panel_Body\":\"Dashboard_Panel_Body__2CCNs\",\"Panel_Body_Only\":\"Dashboard_Panel_Body_Only__1ghhm\",\"Panel_Header_Button\":\"Dashboard_Panel_Header_Button__3e-Uv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Blocks_Logo__3EenA\",\"trigger\":\"Blocks_trigger__YUx2b\",\"Sider\":\"Blocks_Sider__1vIWa\",\"Header\":\"Blocks_Header__26n00\",\"Panel\":\"Blocks_Panel__Bbjus\",\"Panel_With_Header\":\"Blocks_Panel_With_Header__2Oz2T\",\"Panel_Header\":\"Blocks_Panel_Header__17iCM\",\"Panel_Body\":\"Blocks_Panel_Body__2yUxP\",\"Panel_Body_Only\":\"Blocks_Panel_Body_Only__1Gj-A\",\"Panel_Header_Button\":\"Blocks_Panel_Header_Button__10_dQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"UserInput_Logo__20ebb\",\"trigger\":\"UserInput_trigger__Z7eB_\",\"Sider\":\"UserInput_Sider__MMQGv\",\"Header\":\"UserInput_Header__klDCI\",\"Panel\":\"UserInput_Panel__2pYne\",\"Panel_With_Header\":\"UserInput_Panel_With_Header__1ZK0O\",\"Panel_Header\":\"UserInput_Panel_Header__1-qpz\",\"Panel_Body\":\"UserInput_Panel_Body__13ePp\",\"Panel_Body_Only\":\"UserInput_Panel_Body_Only___04Ph\",\"Panel_Header_Button\":\"UserInput_Panel_Header_Button__2mK7o\",\"ClearAllBtn\":\"UserInput_ClearAllBtn__39TDz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Solutions_Logo__vxUai\",\"trigger\":\"Solutions_trigger__2W6U_\",\"Sider\":\"Solutions_Sider__cATdF\",\"Header\":\"Solutions_Header__cCswa\",\"Panel\":\"Solutions_Panel__3Em0T\",\"Panel_With_Header\":\"Solutions_Panel_With_Header__1ld8z\",\"Panel_Header\":\"Solutions_Panel_Header__3ncZT\",\"Panel_Body\":\"Solutions_Panel_Body__19X4S\",\"Panel_Body_Only\":\"Solutions_Panel_Body_Only__1ScF6\",\"Panel_Header_Button\":\"Solutions_Panel_Header_Button__11O6l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Profile_Logo__38p9S\",\"trigger\":\"Profile_trigger__2NmZS\",\"Sider\":\"Profile_Sider__3E2SK\",\"Header\":\"Profile_Header__nz7Sz\",\"Panel\":\"Profile_Panel__1jn2F\",\"Panel_With_Header\":\"Profile_Panel_With_Header__2nzlV\",\"Panel_Header\":\"Profile_Panel_Header__2wJcF\",\"Panel_Body\":\"Profile_Panel_Body__1xwLF\",\"Panel_Body_Only\":\"Profile_Panel_Body_Only__15Zq5\",\"Panel_Header_Button\":\"Profile_Panel_Header_Button__2WhxI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Home_Logo__3QAfe\",\"trigger\":\"Home_trigger__2twDQ\",\"Sider\":\"Home_Sider__3o5OO\",\"Header\":\"Home_Header__2Pzqj\",\"Panel\":\"Home_Panel__2IH4H\",\"Panel_With_Header\":\"Home_Panel_With_Header__2tEsh\",\"Panel_Header\":\"Home_Panel_Header__1uniL\",\"Panel_Body\":\"Home_Panel_Body__3d2sd\",\"Panel_Body_Only\":\"Home_Panel_Body_Only__23Vve\",\"Panel_Header_Button\":\"Home_Panel_Header_Button__mmeqI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Header_Logo__pPWqk\",\"trigger\":\"Header_trigger__1oWt2\",\"Sider\":\"Header_Sider__2FnLR\",\"Header\":\"Header_Header__SmyVP\",\"Panel\":\"Header_Panel__C4UsN\",\"Panel_With_Header\":\"Header_Panel_With_Header__5mkk7\",\"Panel_Header\":\"Header_Panel_Header__1uYtq\",\"Panel_Body\":\"Header_Panel_Body__1O0FM\",\"Panel_Body_Only\":\"Header_Panel_Body_Only__1obK3\",\"Panel_Header_Button\":\"Header_Panel_Header_Button__2Ri6l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Flow_Logo__hDNk3\",\"trigger\":\"Flow_trigger__RASrO\",\"Sider\":\"Flow_Sider__34Dhn\",\"Header\":\"Flow_Header__2WIFi\",\"Panel\":\"Flow_Panel__3bDX2\",\"Panel_With_Header\":\"Flow_Panel_With_Header__2UfLu\",\"Panel_Header\":\"Flow_Panel_Header__1JCa8\",\"Panel_Body\":\"Flow_Panel_Body__UqCCW\",\"Panel_Body_Only\":\"Flow_Panel_Body_Only__3Ge20\",\"Panel_Header_Button\":\"Flow_Panel_Header_Button__1p-dn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Panel\":\"Login_Panel__2vWmC\"};","import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();","\nexport const authHeader = () => {\n    // return authorization header with jwt token\n    let token = localStorage.getItem('token');\n    let refresh = localStorage.getItem('refresh');\n    if (!token || !refresh) {return null}\n    return {'Authorization': 'Bearer ' + token};\n};\n\n\nexport const getUser = () => {\n    // return user from local storage\n    let user = JSON.parse(localStorage.getItem('user'));\n    if(!user){return null;}\n    return user;\n};\n\nexport const checkAuthenticity = () => {\n    return !(!getUser() || !authHeader());\n\n};\n\n","import {message, notification} from 'antd';\n\nconst duration = 2.5;\nconst placement = \"topRight\";\n\nexport const alertSuccess = (title, message) => {\n    notification.success({\n        message: title,\n        description: message,\n        duration: duration,\n        placement: placement,\n    });\n};\n\n\nexport const alertError = (title, message) => {\n    notification.error({\n        message: title,\n        description: message\n    });\n};\n\nexport const loadingMessage = title => message.loading(title);\n\nexport const destroyMessage = () => {\n    message.destroy();\n    notification.destroy();\n};\n\nexport const alertInfo = (title, message) => {\n    notification.info({\n        message: title,\n        description: message,\n        duration: duration,\n        placement: placement,\n    });\n};\n\n\nexport const alertWarn = (title, message) => {\n    notification.warn({\n        message: title,\n        description: message,\n        duration: duration,\n        placement: placement,\n    });\n};","export const LOGIN_REQUEST = 'LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\nexport const LOGOUT = 'LOGOUT';\nexport const AUTH_CHECK_TIMEOUT = 'AUTH_CHECK_TIMEOUT';\nexport const REFRESH_TOKEN = 'REFRESH_TOKEN';\n\n\nexport const FETCH_ASSISTANTS_REQUEST = 'FETCH_ASSISTANTS_REQUEST';\nexport const FETCH_ASSISTANTS_SUCCESS = 'FETCH_ASSISTANTS_SUCCESS';\nexport const FETCH_ASSISTANTS_FAILURE = 'FETCH_ASSISTANTS_FAILURE';\n\n    export const CHANGE_ASSISTANT_STATUS_REQUEST = 'CHANGE_ASSISTANT_STATUS_REQUEST';\n    export const CHANGE_ASSISTANT_STATUS_SUCCESS = 'CHANGE_ASSISTANT_STATUS_SUCCESS';\n    export const CHANGE_ASSISTANT_STATUS_FAILURE = 'CHANGE_ASSISTANT_STATUS_FAILURE';\n\n\n    export const ADD_ASSISTANT_REQUEST = 'ADD_ASSISTANTS_REQUEST';\n    export const ADD_ASSISTANT_SUCCESS = 'ADD_ASSISTANT_SUCCESS';\n    export const ADD_ASSISTANT_FAILURE = 'ADD_ASSISTANT_FAILURE';\n\n    export const UPDATE_ASSISTANT_SETTINGS_REQUEST = 'UPDATE_ASSISTANT_SETTINGS_REQUEST';\n    export const UPDATE_ASSISTANT_SETTINGS_SUCCESS = 'UPDATE_ASSISTANT_SETTINGS_SUCCESS';\n    export const UPDATE_ASSISTANT_SETTINGS_FAILURE = 'UPDATE_ASSISTANT_SETTINGS_FAILURE';\n\n\nexport const FETCH_FLOW_REQUEST = 'FETCH_FLOW_REQUEST';\nexport const FETCH_FLOW_SUCCESS = 'FETCH_FLOW_SUCCESS';\nexport const FETCH_FLOW_FAILURE = 'FETCH_FLOW_FAILURE';\n    // Groups\n    export const ADD_GROUP_REQUEST = 'ADD_GROUP_REQUEST';\n    export const ADD_GROUP_SUCCESS = 'ADD_GROUP_SUCCESS';\n    export const ADD_GROUP_FAILURE = 'ADD_GROUP_FAILURE';\n\n    export const EDIT_GROUP_REQUEST = 'EDIT_GROUP_REQUEST';\n    export const EDIT_GROUP_SUCCESS = 'EDIT_GROUP_SUCCESS';\n    export const EDIT_GROUP_FAILURE = 'EDIT_GROUP_FAILURE';\n\n    export const DELETE_GROUP_REQUEST = 'DELETE_GROUP_REQUEST';\n    export const DELETE_GROUP_SUCCESS = 'DELETE_GROUP_SUCCESS';\n    export const DELETE_GROUP_FAILURE = 'DELETE_GROUP_FAILURE';\n\n    // Block\n    export const ADD_BLOCK_REQUEST = 'ADD_BLOCK_REQUEST';\n    export const ADD_BLOCK_SUCCESS = 'ADD_BLOCK_SUCCESS';\n    export const ADD_BLOCK_FAILURE = 'ADD_BLOCK_FAILURE';\n\n    export const EDIT_BLOCK_REQUEST = 'EDIT_BLOCK_REQUEST';\n    export const EDIT_BLOCK_SUCCESS = 'EDIT_BLOCK_SUCCESS';\n    export const EDIT_BLOCK_FAILURE = 'EDIT_BLOCK_FAILURE';\n\n    export const DELETE_BLOCK_REQUEST = 'DELETE_BLOCK_REQUEST';\n    export const DELETE_BLOCK_SUCCESS = 'DELETE_BLOCK_SUCCESS';\n    export const DELETE_BLOCK_FAILURE = 'DELETE_BLOCK_FAILURE';\n\n    export const UPDATE_BLOCKS_ORDER_REQUEST = 'UPDATE_BLOCKS_ORDER_REQUEST';\n    export const UPDATE_BLOCKS_ORDER_SUCCESS = 'UPDATE_BLOCKS_ORDER_SUCCESS';\n    export const UPDATE_BLOCKS_ORDER_FAILURE = 'UPDATE_BLOCKS_ORDER_FAILURE';\n\n\n\n// Profile\nexport const GET_PROFILE_REQUEST = 'GET_PROFILE_REQUEST';\nexport const GET_PROFILE_SUCCESS = 'GET_PROFILE_SUCCESS';\nexport const GET_PROFILE_FAILURE = 'GET_PROFILE_FAILURE';\n\n    export const SAVE_PROFILE_DETAILS_REQUEST = 'SAVE_PROFILE_DETAILS_REQUEST';\n    export const SAVE_PROFILE_DETAILS_SUCCESS = 'SAVE_PROFILE_DETAILS_SUCCESS';\n    export const SAVE_PROFILE_DETAILS_FAILURE = 'SAVE_PROFILE_DETAILS_FAILURE';\n\n    export const SAVE_DATA_SETTINGS_REQUEST = 'SAVE_DATA_SETTINGS_REQUEST';\n    export const SAVE_DATA_SETTINGS_SUCCESS = 'SAVE_DATA_SETTINGS_SUCCESS';\n    export const SAVE_DATA_SETTINGS_FAILURE = 'SAVE_DATA_SETTINGS_FAILURE';\n\n// User Input\nexport const FETCH_USERINPUT_REQUEST = 'FETCH_USERINPUT_REQUEST';\nexport const FETCH_USERINPUT_SUCCESS = 'FETCH_USERINPUT_SUCCESS';\nexport const FETCH_USERINPUT_FAILURE = 'FETCH_USERINPUT_FAILURE';\n\n    export const CLEAR_ALL_USERINPUT_REQUEST = 'CLEAR_ALL_USERINPUT_REQUEST';\n    export const CLEAR_ALL_USERINPUT_SUCCESS = 'CLEAR_ALL_USERINPUT_SUCCESS';\n    export const CLEAR_ALL_USERINPUT_FAILURE = 'CLEAR_ALL_USERINPUT_FAILURE';\n\n// Solutions\nexport const GET_SOLUTIONS_REQUEST = 'GET_SOLUTIONS_REQUEST';\nexport const GET_SOLUTIONS_SUCCESS = 'GET_SOLUTIONS_SUCCESS';\nexport const GET_SOLUTIONS_FAILURE = 'GET_SOLUTIONS_FAILURE';\n\n    export const ADD_SOLUTION_REQUEST = 'ADD_SOLUTION_REQUEST';\n    export const ADD_SOLUTION_SUCCESS = 'ADD_SOLUTION_SUCCESS';\n    export const ADD_SOLUTION_FAILURE = 'ADD_SOLUTION_FAILURE';\n\n    export const EDIT_SOLUTION_REQUEST = 'EDIT_SOLUTION_REQUEST';\n    export const EDIT_SOLUTION_SUCCESS = 'EDIT_SOLUTION_SUCCESS';\n    export const EDIT_SOLUTION_FAILURE = 'EDIT_SOLUTION_FAILURE';\n","export const updateObject = (oldObject, updatedValues) => {\n    return {\n        ...oldObject,\n        ...updatedValues\n    }\n};\n","import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\nlet user = JSON.parse(localStorage.getItem('user'));\nconst initialState = user ? {isAuthenticated: true, user} : {isAuthenticated: false, user: null};\n\nexport const auth = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.LOGIN_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isLoggingIn: true,\n            });\n        case actionTypes.LOGIN_SUCCESS:\n            return updateObject(state, {\n                isLoggingIn: false,\n                isAuthenticated: true,\n                user: action.user\n            });\n        case actionTypes.LOGIN_FAILURE:\n            return updateObject(state, {\n                isLoggingIn: false,\n                isAuthenticated: false,\n                user: null,\n                errorMsg: action.error.msg\n            });\n        case actionTypes.LOGOUT:\n            return updateObject(state, {\n                isLoggingIn: false,\n                isAuthenticated: false,\n                user: null,\n                errorMsg: null\n            });\n        default:\n            return state\n    }\n};","import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\nconst initialState = {assistantList: [], isLoading: false, errorMsg: null};\n\nexport const assistant = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.FETCH_ASSISTANTS_REQUEST:\n            return updateObject(state, {\n                assistantList: [],\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.FETCH_ASSISTANTS_SUCCESS:\n            return updateObject(state, {\n                assistantList: action.assistantList,\n                isLoading: false\n            });\n        case actionTypes.FETCH_ASSISTANTS_FAILURE:\n            return updateObject(state, {\n                assistantList: [],\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n\n\n        case actionTypes.ADD_ASSISTANT_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isAdding: true\n            });\n        case actionTypes.ADD_ASSISTANT_SUCCESS:\n            return updateObject(state, {\n                successMsg: action.successMsg,\n                isAdding: false\n            });\n        case actionTypes.ADD_ASSISTANT_FAILURE:\n            return updateObject(state, {\n                isAdding: false,\n                errorMsg: action.error.msg\n            });\n\n        case actionTypes.CHANGE_ASSISTANT_STATUS_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isChanging: true\n            });\n        case actionTypes.CHANGE_ASSISTANT_STATUS_SUCCESS:\n\n            return updateObject(state, {\n                successMsg: action.successMsg,\n                isChanging: false\n            });\n        case actionTypes.CHANGE_ASSISTANT_STATUS_FAILURE:\n            return updateObject(state, {\n                isChanging: false,\n                errorMsg: action.error.msg\n            });\n\n        default:\n            return state\n    }\n};","import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\nconst initialState = {isLoading: false, errorMsg: null, blockGroups: []};\n\nexport const flow = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.FETCH_FLOW_REQUEST:\n            return updateObject(state, {\n                isLoading: true\n            });\n        case actionTypes.FETCH_FLOW_SUCCESS:\n            return updateObject(state, {\n                isLoading: false,\n                blockGroups: action.blockGroups\n            });\n        case actionTypes.FETCH_FLOW_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n\n        // Groups\n        case actionTypes.ADD_GROUP_REQUEST:\n            return updateObject(state, {\n                isAddingGroup: true\n            });\n        case actionTypes.ADD_GROUP_SUCCESS:\n            return updateObject(state, {\n                isAddingGroup: false,\n                addSuccessMsg: action.msg\n            });\n        case actionTypes.ADD_GROUP_FAILURE:\n            return updateObject(state, {\n                isAddingGroup: false,\n                errorMsg: action.error.msg\n            });\n\n\n        case actionTypes.EDIT_GROUP_REQUEST:\n            return updateObject(state, {\n                isEditingGroup: true\n            });\n        case actionTypes.EDIT_GROUP_SUCCESS:\n            return updateObject(state, {\n                isEditingGroup: false,\n                editSuccessMsg: action.msg\n            });\n        case actionTypes.EDIT_GROUP_FAILURE:\n            return updateObject(state, {\n                isEditingGroup: false,\n                errorMsg: action.error.msg\n            });\n\n\n        case actionTypes.DELETE_GROUP_REQUEST:\n            return updateObject(state, {\n                isDeletingGroup: true\n            });\n        case actionTypes.DELETE_GROUP_SUCCESS:\n            return updateObject(state, {\n                isDeletingGroup: false,\n                deleteSuccessMsg: action.msg\n            });\n        case actionTypes.DELETE_GROUP_FAILURE:\n            return updateObject(state, {\n                isDeletingGroup: false,\n                errorMsg: action.error.msg\n            });\n\n\n        // Blocks\n        case actionTypes.ADD_BLOCK_REQUEST:\n            return updateObject(state, {\n                isAddingBlock: true\n            });\n        case actionTypes.ADD_BLOCK_SUCCESS:\n            return updateObject(state, {\n                isAddingBlock: false,\n                successMsg: action.msg\n            });\n        case actionTypes.ADD_BLOCK_FAILURE:\n            return updateObject(state, {\n                isAddingBlock: false,\n                errorMsg: action.error.msg\n            });\n        default:\n            return state\n    }\n};","import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\nconst initialState = {isLoading: false, errorMsg: null};\n\nexport const settings = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.UPDATE_ASSISTANT_SETTINGS_REQUEST:\n            return updateObject(state, {\n                successMsg: null,\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.UPDATE_ASSISTANT_SETTINGS_SUCCESS:\n            return updateObject(state, {\n                successMsg: action.successMsg,\n                isLoading: false\n            });\n        case actionTypes.UPDATE_ASSISTANT_SETTINGS_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n        default:\n            return state\n    }\n};","import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\nconst initialState = {profile: {}, isLoading: false, errorMsg: null};\n\nexport const profile = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.GET_PROFILE_REQUEST:\n            return updateObject(state, {\n                profile: {},\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.GET_PROFILE_SUCCESS:\n            return updateObject(state, {\n                profile: action.profileData,\n                isLoading: false\n            });\n        case actionTypes.GET_PROFILE_FAILURE:\n            return updateObject(state, {\n                profile: {},\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n        case actionTypes.SAVE_PROFILE_DETAILS_REQUEST:\n            return updateObject(state, {\n                successMsg: null,\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.SAVE_PROFILE_DETAILS_SUCCESS:\n            return updateObject(state, {\n                successMsg: action.successMsg,\n                isLoading: false\n            });\n        case actionTypes.SAVE_PROFILE_DETAILS_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n        case actionTypes.SAVE_DATA_SETTINGS_REQUEST:\n            return updateObject(state, {\n                successMsg: null,\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.SAVE_DATA_SETTINGS_SUCCESS:\n            return updateObject(state, {\n                successMsg: action.successMsg,\n                isLoading: false\n            });\n        case actionTypes.SAVE_DATA_SETTINGS_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n        default:\n            return state\n    }\n};","import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\nconst initialState = {userInputs: [], isLoading: false, errorMsg: null};\n\nexport const userInput = (state = initialState, action) => {\n    switch (action.type) {\n        // Fetching user inputs\n        case actionTypes.FETCH_USERINPUT_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.FETCH_USERINPUT_SUCCESS:\n            console.log(action.userInputs);\n            return updateObject(state, {\n                userInputs: action.userInputs,\n                isLoading: false\n            });\n        case actionTypes.FETCH_USERINPUT_FAILURE:\n            return updateObject(state, {\n                userInputs: [],\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n\n        //Clearing all user inputs\n        case actionTypes.CLEAR_ALL_USERINPUT_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isClearingAll: true\n            });\n        case actionTypes.CLEAR_ALL_USERINPUT_SUCCESS:\n            return updateObject(state, {\n                isClearingAll: false,\n                userInputs: [],\n                errorMsg: null,\n            });\n        case actionTypes.CLEAR_ALL_USERINPUT_FAILURE:\n            return updateObject(state, {\n                isClearingAll: false,\n                errorMsg: action.error.msg\n            });\n        default:\n            return state\n    }\n};","import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\nconst initialState = {solutionsData: {}, isLoading: false, errorMsg: null};\n\nexport const solutions = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.GET_SOLUTIONS_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.GET_SOLUTIONS_SUCCESS:\n            return updateObject(state, {\n                solutionsData: action.solutionsData,\n                isLoading: false\n            });\n        case actionTypes.GET_SOLUTIONS_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n        case actionTypes.ADD_SOLUTION_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.ADD_SOLUTION_SUCCESS:\n            return updateObject(state, {\n                isLoading: false,\n                message: action.message\n            });\n        case actionTypes.ADD_SOLUTION_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n        case actionTypes.EDIT_SOLUTION_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.EDIT_SOLUTION_SUCCESS:\n            return updateObject(state, {\n                isLoading: false,\n                message: action.message\n            });\n        case actionTypes.EDIT_SOLUTION_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n        default:\n            return state\n    }\n};","import {combineReducers} from 'redux';\nimport {auth} from './auth.reducer';\nimport {assistant} from \"./assistant.reducer\";\nimport {flow} from \"./flow.reducer\";\nimport {settings} from \"./assistantSettings.reducer\";\nimport {profile} from \"./profile.reducer\";\nimport {userInput} from \"./userInput.reducer\";\nimport {solutions} from \"./solutions.reducer\";\n\n\nconst rootReducer = combineReducers({\n    auth,\n    assistant,\n    flow,\n    settings,\n    profile,\n    userInput,\n    solutions\n});\n\nexport default rootReducer;","import * as actionTypes from './actionTypes';\n\n\nfunction login (email, password) {\n    return {\n        type: actionTypes.LOGIN_REQUEST,\n        email,\n        password\n    };\n}\n\nfunction loginSuccess (user) {\n    return {\n        type: actionTypes.LOGIN_SUCCESS,\n        user\n    };\n}\n\nfunction loginFailure (error) {\n    return {\n        type: actionTypes.LOGIN_FAILURE,\n        error\n    };\n}\n\n\nconst logout = () => {\n    return {\n        type: actionTypes.LOGOUT\n    };\n};\n\nconst checkAuthTimeout = (expirationTime, refresh) => {\n    return {\n        type: actionTypes.AUTH_CHECK_TIMEOUT,\n        expirationTime, refresh\n    };\n};\n\nconst refreshToken = (refresh) => {\n    return {\n        type: actionTypes.REFRESH_TOKEN,\n        refresh\n    };\n};\n\nexport const authActions = {\n    login,\n    loginSuccess,\n    loginFailure,\n    logout,\n    refreshToken,\n    checkAuthTimeout\n};","import * as actionTypes from './actionTypes';\n\n\nconst fetchAssistants = () => {\n    return {\n        type: actionTypes.FETCH_ASSISTANTS_REQUEST\n    };\n};\n\nconst fetchAssistantsSuccess = (assistantList) => {\n    return {\n        type: actionTypes.FETCH_ASSISTANTS_SUCCESS,\n        assistantList\n    };\n};\n\nconst fetchAssistantsFailure = (error) => {\n    return {\n        type: actionTypes.FETCH_ASSISTANTS_FAILURE,\n        error\n    };\n};\n\n\nconst addAssistant = (newAssistant) => {\n    return {\n        type: actionTypes.ADD_ASSISTANT_REQUEST,\n        newAssistant\n    };\n};\n\nconst addAssistantSuccess = (successMsg) => {\n    return {\n        type: actionTypes.ADD_ASSISTANT_SUCCESS,\n        successMsg\n    };\n};\n\nconst addAssistantFailure = (error) => {\n    return {\n        type: actionTypes.ADD_ASSISTANT_FAILURE,\n        error\n    };\n};\n\n\n\nconst changeAssistantStatus = (assistantID) => {\n    return {\n        type: actionTypes.CHANGE_ASSISTANT_STATUS_REQUEST,\n        assistantID\n    };\n};\n\nconst changeAssistantStatusSuccess = (successMsg, status, assistantID) => {\n    return {\n        type: actionTypes.CHANGE_ASSISTANT_STATUS_SUCCESS,\n        successMsg,\n        status,\n        assistantID\n    };\n};\n\nconst changeAssistantStatusFailure = (error) => {\n    return {\n        type: actionTypes.CHANGE_ASSISTANT_STATUS_FAILURE,\n        error\n    };\n};\n\nexport const assistantActions = {\n    fetchAssistants,\n    fetchAssistantsSuccess,\n    fetchAssistantsFailure,\n    addAssistant,\n    addAssistantSuccess,\n    addAssistantFailure,\n\n    changeAssistantStatus,\n    changeAssistantStatusSuccess,\n    changeAssistantStatusFailure,\n};","import * as actionTypes from './actionTypes';\n\n\nconst fetchFlowRequest = (assistantID) => {\n    return {\n        type: actionTypes.FETCH_FLOW_REQUEST,\n        assistantID\n    };\n};\n\nconst fetchFlowSuccess = (args) => {\n    return {\n        type: actionTypes.FETCH_FLOW_SUCCESS,\n        blockGroups: args.blockGroups\n    };\n};\n\nconst fetchFlowFailure = (error) => {\n    return {\n        type: actionTypes.FETCH_FLOW_FAILURE,\n        error\n    };\n};\n\n// Groups Actions\nconst addGroupRequest = (values) => {\n    return {\n        type: actionTypes.ADD_GROUP_REQUEST,\n        ID: values.ID,\n        newGroup: values.newGroup\n    };\n};\n\nconst addGroupSuccess = (msg) => {\n    return {\n        type: actionTypes.ADD_GROUP_SUCCESS,\n        msg\n    };\n};\n\nconst addGroupFailure = (error) => {\n    return {\n        type: actionTypes.ADD_GROUP_FAILURE,\n        error\n    };\n};\n\n//////////////////////////////////////////\n\nconst editGroupRequest = (values) => {\n    return {\n        type: actionTypes.EDIT_GROUP_REQUEST,\n        ID: values.ID,\n        editedGroup: values.editedGroup\n    };\n};\n\nconst editGroupSuccess = (msg) => {\n    return {\n        type: actionTypes.EDIT_GROUP_SUCCESS,\n        msg\n    };\n};\n\nconst editGroupFailure = (error) => {\n    return {\n        type: actionTypes.EDIT_GROUP_FAILURE,\n        error\n    };\n};\n\n//////////////////////////////////////////\n\nconst deleteGroupRequest = (values) => {\n    return {\n        type: actionTypes.DELETE_GROUP_REQUEST,\n        assistantID: values.assistantID,\n        deletedGroup: values.deletedGroup\n    };\n};\n\nconst deleteGroupSuccess = (msg) => {\n    return {\n        type: actionTypes.DELETE_GROUP_SUCCESS,\n        msg\n    };\n};\n\nconst deleteGroupFailure = (error) => {\n    return {\n        type: actionTypes.DELETE_GROUP_FAILURE,\n        error\n    };\n};\n\n//////////////////////////////////////////\n// ADD Blocks Actions\nconst addBlockRequest = ({newBlock, assistantID, groupID}) => {\n    return {\n        type: actionTypes.ADD_BLOCK_REQUEST,\n        newBlock,\n        assistantID,\n        groupID\n    };\n};\n\nconst addBlockSuccess = (msg) => {\n    return {\n        type: actionTypes.ADD_BLOCK_SUCCESS,\n        msg\n    };\n};\n\nconst addBlockFailure = (error) => {\n    return {\n        type: actionTypes.ADD_BLOCK_FAILURE,\n        error\n    };\n};\n//////////////////////////////////////////\n// EDIT Blocks Actions\nconst editBlockRequest = ({edittedBlock, assistantID, groupID}) => {\n    return {\n        type: actionTypes.EDIT_BLOCK_REQUEST,\n        edittedBlock,\n        assistantID,\n        groupID\n    };\n};\n\nconst editBlockSuccess = (msg) => {\n    return {\n        type: actionTypes.EDIT_BLOCK_SUCCESS,\n        msg\n    };\n};\n\nconst editBlockFailure = (error) => {\n    return {\n        type: actionTypes.EDIT_BLOCK_FAILURE,\n        error\n    };\n};\n//////////////////////////////////////////\n\n//////////////////////////////////////////\n// DELETE Blocks Actions\nconst deleteBlockRequest = ({deletedBlock, assistantID, groupID}) => {\n    return {\n        type: actionTypes.DELETE_BLOCK_REQUEST,\n        deletedBlock,\n        assistantID,\n        groupID\n    };\n};\n\nconst deleteBlockSuccess = (msg) => {\n    return {\n        type: actionTypes.DELETE_BLOCK_SUCCESS,\n        msg\n    };\n};\n\nconst deleteBlockFailure = (error) => {\n    return {\n        type: actionTypes.DELETE_BLOCK_FAILURE,\n        error\n    };\n};\n//////////////////////////////////////////\n// UPDATE Blocks' order Actions\nconst updateBlocksOrderRequest = ({newBlocksOrder, assistantID, groupID}) => {\n    return {\n        type: actionTypes.UPDATE_BLOCKS_ORDER_REQUEST,\n        newBlocksOrder,\n        assistantID,\n        groupID\n    };\n};\n\nconst updateBlocksOrderSuccess = (msg) => {\n    return {\n        type: actionTypes.UPDATE_BLOCKS_ORDER_SUCCESS,\n        msg\n    };\n};\n\nconst updateBlocksOrderFailure = (error) => {\n    return {\n        type: actionTypes.UPDATE_BLOCKS_ORDER_FAILURE,\n        error\n    };\n};\n//////////////////////////////////////////\n\nexport const flowActions = {\n    fetchFlowRequest,\n    fetchFlowSuccess,\n    fetchFlowFailure,\n\n    addGroupRequest,\n    addGroupSuccess,\n    addGroupFailure,\n\n    editGroupRequest,\n    editGroupSuccess,\n    editGroupFailure,\n\n    deleteGroupRequest,\n    deleteGroupSuccess,\n    deleteGroupFailure,\n\n    addBlockRequest,\n    addBlockSuccess,\n    addBlockFailure,\n\n    editBlockRequest,\n    editBlockSuccess,\n    editBlockFailure,\n\n    deleteBlockRequest,\n    deleteBlockSuccess,\n    deleteBlockFailure,\n\n    updateBlocksOrderRequest,\n    updateBlocksOrderSuccess,\n    updateBlocksOrderFailure\n\n\n};","import * as actionTypes from './actionTypes';\n\n\nconst updateAssistantSettingsRequest = (args) => {\n    return {\n        type: actionTypes.UPDATE_ASSISTANT_SETTINGS_REQUEST,\n        ...args\n    };\n};\n\nconst updateAssistantSettingsSuccess = (successMsg) => {\n    return {\n        type: actionTypes.UPDATE_ASSISTANT_SETTINGS_SUCCESS,\n        successMsg\n    };\n};\n\nconst updateAssistantSettingsFailure = (error) => {\n    return {\n        type: actionTypes.UPDATE_ASSISTANT_SETTINGS_FAILURE,\n        error\n    };\n};\n\nexport const assistantSettingsActions = {\n    updateAssistantSettingsRequest,\n    updateAssistantSettingsSuccess,\n    updateAssistantSettingsFailure\n};","import * as actionTypes from './actionTypes';\n\nconst getProfile = () => {\n    return {\n        type: actionTypes.GET_PROFILE_REQUEST\n    }\n};\n\nconst getProfileSuccess = (profile) => {\n    return {\n        type: actionTypes.GET_PROFILE_SUCCESS,\n        profileData: profile.data\n    }\n};\n\nconst getProfileFailure = (error) => {\n    return {\n        type: actionTypes.GET_PROFILE_FAILURE,\n        error\n    }\n};\n\nconst saveProfileDetails = (profileData) => {\n    return {\n        type: actionTypes.SAVE_PROFILE_DETAILS_REQUEST,\n        profileData\n    }\n};\n\nconst saveProfileDetailsSuccess = (successMessage) => {\n    return {\n        type: actionTypes.SAVE_PROFILE_DETAILS_SUCCESS,\n        successMessage\n    }\n};\n\nconst saveProfileDetailsFailure = (error) => {\n    return {\n        type: actionTypes.SAVE_PROFILE_DETAILS_FAILURE,\n        error\n    }\n};\n\nconst saveDataSettings = (dataSettings) => {\n    return {\n        type: actionTypes.SAVE_DATA_SETTINGS_REQUEST,\n        dataSettings\n    }\n};\n\nconst saveDataSettingsSuccess = (successMessage) => {\n    return {\n        type: actionTypes.SAVE_DATA_SETTINGS_SUCCESS,\n        successMessage\n    }\n};\n\nconst saveDataSettingsFailure = (error) => {\n    return {\n        type: actionTypes.SAVE_DATA_SETTINGS_FAILURE,\n        error\n    }\n};\n\nexport const profileActions = {\n    getProfile,\n    getProfileSuccess,\n    getProfileFailure,\n    saveProfileDetails,\n    saveProfileDetailsSuccess,\n    saveProfileDetailsFailure,\n    saveDataSettings,\n    saveDataSettingsSuccess,\n    saveDataSettingsFailure\n}","import * as actionTypes from './actionTypes';\n\n\nconst fetchUserInputs = (assistantID) => {\n    return {\n        type: actionTypes.FETCH_USERINPUT_REQUEST,\n        assistantID\n    };\n};\n\nconst fetchUserInputsSuccess = (userInputs) => {\n    return {\n        type: actionTypes.FETCH_USERINPUT_SUCCESS,\n        userInputs\n    };\n};\n\nconst fetchUserInputsFailure = (error) => {\n    return {\n        type: actionTypes.FETCH_USERINPUT_FAILURE,\n        error\n    };\n};\n\n\nconst clearAllUserInputs = (assistantID) => {\n    return {\n        type: actionTypes.CLEAR_ALL_USERINPUT_REQUEST,\n        assistantID\n    };\n};\n\nconst clearAllUserInputsSuccess = () => {\n    return {\n        type: actionTypes.CLEAR_ALL_USERINPUT_SUCCESS,\n    };\n};\n\nconst clearAllUserInputsFailure = (error) => {\n    return {\n        type: actionTypes.CLEAR_ALL_USERINPUT_FAILURE,\n        error\n    };\n};\n\n\nexport const userInputActions = {\n    fetchUserInputs,\n    fetchUserInputsSuccess,\n    fetchUserInputsFailure,\n\n    clearAllUserInputs,\n    clearAllUserInputsSuccess,\n    clearAllUserInputsFailure\n};","import * as actionTypes from './actionTypes';\n\nconst getSolutions = (assistantID) => {\n    return {\n        type: actionTypes.GET_SOLUTIONS_REQUEST,\n        assistantID\n    }\n};\n\nconst getSolutionsSuccess = (solutions) => {\n    return {\n        type: actionTypes.GET_SOLUTIONS_SUCCESS,\n        solutionsData: solutions.data\n    }\n};\n\nconst getSolutionsFailure = (error) => {\n    return {\n        type: actionTypes.GET_SOLUTIONS_FAILURE,\n        error\n    }\n};\n\nconst addSolution = (params) => {\n    console.log(params);\n    return {\n        type: actionTypes.ADD_SOLUTION_REQUEST,\n        params\n    }\n};\n\nconst addSolutionSuccess = (message) => {\n    return {\n        type: actionTypes.ADD_SOLUTION_SUCCESS,\n        message\n    }\n};\n\nconst addSolutionFailure = (error) => {\n    return {\n        type: actionTypes.ADD_SOLUTION_FAILURE,\n        error\n    }\n};\n\nconst editSolution = (params) => {\n    console.log(params);\n    return {\n        type: actionTypes.EDIT_SOLUTION_REQUEST,\n        params\n    }\n};\n\nconst editSolutionSuccess = (message) => {\n    return {\n        type: actionTypes.EDIT_SOLUTION_SUCCESS,\n        message\n    }\n};\n\nconst editSolutionFailure = (error) => {\n    return {\n        type: actionTypes.EDIT_SOLUTION_FAILURE,\n        error\n    }\n};\n\nexport const solutionsActions = {\n    getSolutions,\n    getSolutionsSuccess,\n    getSolutionsFailure,\n    addSolution,\n    addSolutionSuccess,\n    addSolutionFailure,\n    editSolution,\n    editSolutionSuccess,\n    editSolutionFailure\n};","import * as actionTypes from '../actions/actionTypes';\nimport { delay } from \"redux-saga\";\nimport { put, takeEvery, takeLatest, all } from 'redux-saga/effects'\nimport { authActions } from \"../actions\";\nimport { history, checkAuthenticity } from '../../helpers'\nimport axios from 'axios';\n\n\nfunction* checkAuthTimeout({expirationTime, refresh}) {\n    yield delay(expirationTime * 1000);\n    yield put(authActions.refreshToken(refresh));\n}\n\nfunction* watchCheckAuthTimeout() {\n    yield takeEvery(actionTypes.AUTH_CHECK_TIMEOUT, checkAuthTimeout)\n}\n\nfunction* login({email, password}) {\n    try {\n        const res = yield axios.post(`/api/auth`, {email, password}, {\n            headers: {'Content-Type': 'application/json'},\n        });\n\n        const {user, token, refresh, expiresIn} = yield res.data.data;\n        yield localStorage.setItem(\"user\", JSON.stringify(user));\n        yield localStorage.setItem(\"token\", token);\n        yield localStorage.setItem(\"refresh\", refresh);\n        yield localStorage.setItem(\"expiresIn\", expiresIn);\n        // When access token expires in seconds\n        const secondsToExpire = yield (new Date(expiresIn).getTime() - new Date().getTime()) / 1000\n        // Dispatch actions\n        yield put(authActions.loginSuccess(user));\n        yield put(authActions.checkAuthTimeout(secondsToExpire, refresh)); // refresh to access token when expired\n        // Redirect to dashboard page\n        yield history.push('/dashboard');\n    } catch (error) {\n        console.log(error);\n        yield put(authActions.loginFailure(error.response.data));\n    }\n}\n\nfunction* watchLogin() {\n    yield takeLatest(actionTypes.LOGIN_REQUEST, login)\n}\n\nfunction* logout() {\n    // Clear local storage from user, token...\n    yield localStorage.clear();\n    yield history.push('/login');\n}\n\nfunction* watchLogout() {\n    yield takeLatest(actionTypes.LOGOUT, logout)\n}\n\nfunction* refreshToken({refresh}) {\n    try {\n        if(!checkAuthenticity()){throw new Error('Authentication Failed')}\n        const res = yield axios.post(`/api/auth/refresh`, null,{\n            headers: {'Authorization': 'Bearer ' + refresh},\n        });\n\n        const {token, expiresIn} = res.data.data;\n        yield localStorage.setItem(\"token\", token);\n        yield localStorage.setItem(\"expiresIn\", expiresIn);\n        const secondsToExpire = yield (new Date(expiresIn).getTime() - new Date().getTime()) / 1000;\n        yield put(authActions.checkAuthTimeout(secondsToExpire, refresh));\n\n\n    } catch (error) {\n        console.log(error);\n        // Log the user out\n        yield put(authActions.logout());\n    }\n}\n\nfunction* watchRefreshToken() {\n    yield takeEvery(actionTypes.REFRESH_TOKEN, refreshToken)\n}\n\nexport function* authSaga() {\n    yield all([\n        watchLogin(),\n        watchLogout(),\n        watchCheckAuthTimeout(),\n        watchRefreshToken()\n    ])\n}\n","import {put, takeEvery, all} from 'redux-saga/effects'\nimport * as actionTypes from '../actions/actionTypes';\nimport {assistantActions, authActions} from \"../actions\";\nimport {http} from \"../../helpers\";\n\nfunction* fetchAssistants() {\n    try {\n        const res = yield http.get(`/assistants`);\n        return yield put(assistantActions.fetchAssistantsSuccess(res.data.data))\n    } catch (error) {\n        console.log(error);\n        return yield put(assistantActions.fetchAssistantsFailure(error.response.data));\n    }\n\n}\n\nfunction* addAssistant({type, newAssistant}) {\n    try {\n        const res = yield http.post(`/assistants`, newAssistant);\n        yield put(assistantActions.addAssistantSuccess(res.data.msg));\n        return yield put(assistantActions.fetchAssistants())\n    } catch (error) {\n        console.log(error);\n        //\n        // yield localStorage.removeItem('user');\n        // yield put(authActions.logout());\n        // return yield put(assistantActions.fetchAssistantsFailure(error.response.data));\n    }\n\n}\n\nfunction* watchFetchAssistants() {\n    yield takeEvery(actionTypes.FETCH_ASSISTANTS_REQUEST, fetchAssistants)\n}\n\nfunction* watchAddAssistant() {\n    yield takeEvery(actionTypes.ADD_ASSISTANT_REQUEST, addAssistant)\n}\n\n\nexport function* assistantSaga() {\n    yield all([\n        watchFetchAssistants(),\n        watchAddAssistant()\n    ])\n}","import {all, put, takeEvery} from 'redux-saga/effects'\nimport * as actionTypes from '../actions/actionTypes';\nimport {flowActions} from \"../actions/flow.actions\";\nimport {http} from \"../../helpers\";\nimport {alertError, alertSuccess, destroyMessage, loadingMessage} from \"../../helpers/alert\";\n\nfunction* fetchFlow({assistantID}) {\n    try {\n        const res = yield http.get(`/assistant/${assistantID}/flow`);\n        return yield put(flowActions.fetchFlowSuccess(res.data.data))\n    } catch (error) {\n        console.log(error);\n        return yield put(flowActions.fetchFlowFailure(error.response.data));\n    }\n\n}\n\nfunction* watchFetchFlow() {\n    yield takeEvery(actionTypes.FETCH_FLOW_REQUEST, fetchFlow)\n}\n\n// Groups\nfunction* addGroup(action) {\n    try {\n        loadingMessage('Adding Group');\n        const res = yield http.post(`/assistant/${action.ID}/flow/group`, action.newGroup);\n        yield put(flowActions.addGroupSuccess(res.data.msg));\n        yield destroyMessage();\n        yield alertSuccess('Group Added', res.data.msg);\n        return yield put(flowActions.fetchFlowRequest(action.ID))\n    } catch (error) {\n        console.log(error);\n        return yield put(flowActions.addGroupFailure(error.response.data));\n    }\n}\n\nfunction* editGroup(action) {\n    try {\n        loadingMessage('Updating Group');\n        const res = yield http.put(`/assistant/${action.ID}/flow/group`, action.editedGroup);\n        yield put(flowActions.editGroupSuccess(res.data.msg));\n        yield destroyMessage();\n        yield alertSuccess('Group Updated', res.data.msg);\n        return yield put(flowActions.fetchFlowRequest(action.ID))\n    } catch (error) {\n        console.log(error);\n        return yield put(flowActions.editGroupFailure(error.response.data));\n    }\n}\n\nfunction* deleteGroup({assistantID, deletedGroup}) {\n    try {\n        loadingMessage('Deleting Group');\n        const res = yield http.delete(`/assistant/${assistantID}/flow/group`, {data: {id: deletedGroup.id}});\n        yield put(flowActions.deleteGroupSuccess(res.data.msg));\n        yield destroyMessage();\n        yield alertSuccess('Group Deleted', res.data.msg);\n        return yield put(flowActions.fetchFlowRequest(assistantID))\n    } catch (error) {\n        console.log(error);\n        return yield put(flowActions.deleteGroupFailure(error.response.data));\n    }\n}\n\nfunction* watchAddGroup() {\n    yield takeEvery(actionTypes.ADD_GROUP_REQUEST, addGroup)\n}\n\nfunction* watchEditGroup() {\n    yield takeEvery(actionTypes.EDIT_GROUP_REQUEST, editGroup)\n}\n\nfunction* watchDeleteGroup() {\n    yield takeEvery(actionTypes.DELETE_GROUP_REQUEST, deleteGroup)\n}\n\n// Blocks\nfunction* addBlock({newBlock, groupID, assistantID}) {\n    try {\n        loadingMessage('Adding Block');\n        const res = yield http.post(`/assistant/flow/group/${groupID}/block`, newBlock);\n\n        yield destroyMessage();\n        yield alertSuccess('Block Added', res.data.msg);\n        yield put(flowActions.addBlockSuccess(res.data.msg));\n\n        return yield put(flowActions.fetchFlowRequest(assistantID))\n    } catch (error) {\n        console.log(error);\n        return yield put(flowActions.addBlockFailure(error.response.data));\n    }\n}\n\nfunction* editBlock({edittedBlock, groupID, assistantID}) {\n    try {\n        loadingMessage('Updating Block');\n        let res = yield http.get(`/assistant/${assistantID}/flow`);\n        let currentUpdatedGroup = [];\n        res.data.data.blockGroups.map((group) => {\n            if (group.id === groupID)\n                group.blocks.map((block) => {\n                    if (!block.groupID) block.groupID = groupID;\n                    block.id === edittedBlock.id ? currentUpdatedGroup.push(edittedBlock) : currentUpdatedGroup.push(block);\n                })\n        });\n        res = yield http.put(`/assistant/${assistantID}/flow`, {blocks: currentUpdatedGroup});\n        yield destroyMessage();\n        yield alertSuccess('Block Updated', res.data.msg);\n        yield put(flowActions.editBlockSuccess(res.data.msg));\n        return yield put(flowActions.fetchFlowRequest(assistantID))\n    } catch (error) {\n        console.log(error);\n        return yield put(flowActions.editBlockFailure(error.response.data));\n    }\n}\n\nfunction* deleteBlock({deletedBlock, assistantID, groupID}) {\n    try {\n        loadingMessage('Deleting Block');\n        const res = yield http.delete(`/assistant/flow/group/${groupID}/block`, {data: {id: deletedBlock.id}});\n        yield put(flowActions.deleteBlockSuccess(res.data.msg));\n        yield destroyMessage();\n        yield alertSuccess('Block Deleted', res.data.msg);\n        return yield put(flowActions.fetchFlowRequest(assistantID))\n    } catch (error) {\n        console.log(error);\n        return yield put(flowActions.deleteBlockFailure(error.response.data));\n    }\n}\n\nfunction* updateBlocksOrder({newBlocksOrder, assistantID}) {\n    try {\n        loadingMessage('Updating Blocks Order');\n        const res = yield http.put(`/assistant/${assistantID}/flow`, {blocks: newBlocksOrder});\n        yield put(flowActions.updateBlocksOrderSuccess(res.data.msg));\n        yield destroyMessage();\n        return yield alertSuccess('Order Updated', res.data.msg);\n    } catch (error) {\n        console.log(error);\n        yield destroyMessage();\n        yield alertError('Error in Block Delete', error.message);\n        return yield put(flowActions.updateBlocksOrderFailure(error.response.data));\n    }\n}\n\nfunction* watchAddBlock() {\n    yield takeEvery(actionTypes.ADD_BLOCK_REQUEST, addBlock)\n}\n\nfunction* watchEditBlock() {\n    yield takeEvery(actionTypes.EDIT_BLOCK_REQUEST, editBlock)\n}\n\nfunction* watchDeleteBlock() {\n    yield takeEvery(actionTypes.DELETE_BLOCK_REQUEST, deleteBlock)\n}\n\nfunction* watchUpdateBlcoksOrder() {\n    yield takeEvery(actionTypes.UPDATE_BLOCKS_ORDER_REQUEST, updateBlocksOrder)\n}\n\nexport function* flowSaga() {\n    yield all([\n        watchFetchFlow(),\n\n        watchAddGroup(),\n        watchEditGroup(),\n        watchDeleteGroup(),\n\n        watchAddBlock(),\n        watchEditBlock(),\n        watchDeleteBlock(),\n        watchUpdateBlcoksOrder()\n    ])\n}","import {put, takeEvery, all} from 'redux-saga/effects'\nimport * as actionTypes from '../actions/actionTypes';\nimport {http} from \"../../helpers\";\nimport {assistantActions, assistantSettingsActions} from \"../actions\";\n\nfunction* updateAssistantSettings(action) {\n    try {\n        const res = yield http.put(`assistant/${action.ID}`, action.updatedSettings);\n        yield put(assistantSettingsActions.updateAssistantSettingsSuccess(res.data.msg));\n        return yield put(assistantActions.fetchAssistants())\n    } catch (error) {\n        console.log(error);\n        return yield put(assistantSettingsActions.updateAssistantSettingsFailure(error.response.data));\n    }\n}\n\nfunction* watchUpdateAssistantSettings() {\n    yield takeEvery(actionTypes.UPDATE_ASSISTANT_SETTINGS_REQUEST, updateAssistantSettings)\n}\n\n\nexport function* settingsSage() {\n    yield all([\n        watchUpdateAssistantSettings()\n    ])\n}","import {put, takeEvery, all} from 'redux-saga/effects'\nimport * as actionTypes from '../actions/actionTypes';\nimport {http} from \"../../helpers\";\nimport {profileActions} from \"../actions\";\n\n\nfunction* getProfilePageData() {\n    try {\n        const res = yield http.get(`/profile`);\n        return yield put(profileActions.getProfileSuccess(res.data))\n    } catch (error) {\n        console.log(error);\n        return yield put(profileActions.getProfileFailure(error.response.data));\n    }\n\n}\n\nfunction* saveProfileDetails(action) {\n    try {\n        const res = yield http.post(`/profile/profiledetails`, action.profileData);\n        yield put(profileActions.saveProfileDetailsSuccess(res.data.msg));\n        return yield put(profileActions.getProfile())\n    } catch (error) {\n        console.log(error);\n        return yield put(profileActions.saveProfileDetailsFailure(error.response.data));\n    }\n}\n\nfunction* saveDataSettings(action) {\n    try {\n        const res = yield http.post(`/profile/datasettings`, action.dataSettings);\n        yield put(profileActions.saveDataSettingsSuccess(res.data.msg));\n        return yield put(profileActions.getProfile())\n    } catch (error) {\n        console.log(error);\n        return yield put(profileActions.saveDataSettingsFailure(error.response.data));\n    }\n}\n\nfunction* watchProfileRequests(){\n    yield takeEvery(actionTypes.GET_PROFILE_REQUEST, getProfilePageData)\n}\n\nfunction* watchProfileUpdates() {\n    yield takeEvery(actionTypes.SAVE_PROFILE_DETAILS_REQUEST, saveProfileDetails)\n}\n\nfunction* watchDataSettingsUpdates() {\n    yield takeEvery(actionTypes.SAVE_DATA_SETTINGS_REQUEST, saveDataSettings)\n}\n\n\nexport function* profileSaga() {\n    yield all([\n        watchProfileRequests(),\n        watchProfileUpdates(),\n        watchDataSettingsUpdates()\n    ])\n}","import {put, takeEvery, all} from 'redux-saga/effects'\nimport * as actionTypes from '../actions/actionTypes';\nimport {userInputActions} from \"../actions\";\nimport {http, alertSuccess, alertError} from \"../../helpers\";\n\nfunction* fetchUserInputs({assistantID}) {\n    try {\n        const res = yield http.get(`/assistant/${assistantID}/userinput`);\n        return yield put(userInputActions.fetchUserInputsSuccess(res.data.data))\n    } catch (error) {\n        console.log(error);\n        return yield put(userInputActions.fetchUserInputsFailure(error));\n    }\n}\n\nfunction* watchFetchUserInputs() {\n    yield takeEvery(actionTypes.FETCH_USERINPUT_REQUEST, fetchUserInputs)\n}\n\nfunction* clearAllUserInputs({assistantID}) {\n    try {\n        const res = yield http.delete(`/assistant/${assistantID}/userinput`);\n        yield put(userInputActions.clearAllUserInputsSuccess());\n        return yield alertSuccess('Cleared Successfully', res.data.msg)\n    } catch (error) {\n        console.log(error);\n        yield put(userInputActions.clearAllUserInputsFailure(error));\n        return yield alertError('Error', \"Sorry, we could'nt clear all the records!\");\n\n    }\n}\n\nfunction* watchClearAllUserInputs() {\n    yield takeEvery(actionTypes.CLEAR_ALL_USERINPUT_REQUEST, clearAllUserInputs)\n}\n\n\nexport function* userInputSaga() {\n    yield all([\n        watchFetchUserInputs(),\n        watchClearAllUserInputs(),\n    ])\n}","import {put, takeEvery, all} from 'redux-saga/effects'\nimport * as actionTypes from '../actions/actionTypes';\nimport {http} from \"../../helpers\";\nimport {solutionsActions} from \"../actions\";\nimport {alertError, alertSuccess, destroyMessage, loadingMessage} from \"../../helpers/alert\";\n\n\nfunction* getSolutionsData({assistantID}) {\n    try {\n        const res = yield http.get(`/assistant/${assistantID}/solutionsData`);\n        return yield put(solutionsActions.getSolutionsSuccess(res.data))\n    } catch (error) {\n        console.log(error);\n        return yield put(solutionsActions.getSolutionsFailure(error.response.data));\n    }\n\n}\n\nfunction* addSolution(action) {\n    try {\n        loadingMessage('Adding Solution');\n        const res = yield http.put(`/assistant/${action.params.ID}/solutionsData`, action.params.newSolution);\n        yield put(solutionsActions.addSolutionSuccess(res.message));\n        yield destroyMessage();\n        yield alertSuccess('Solution Added', res.data.msg);\n        return yield http.get(solutionsActions.getSolutions(action.assistantID))\n    } catch (error) {\n        console.log(error.response);\n        yield alertError('Error in adding Solution', error.response.data.msg);\n        return yield put(solutionsActions.addSolutionFailure(error.response.data));\n    }\n}\n\nfunction* editSolution(action) {\n    try {\n        loadingMessage('Editing Solution');\n        const res = yield http.post(`/assistant/${action.params.ID}/solutionsData`, action.params.editedSolution);\n        yield put(solutionsActions.editSolutionSuccess(res.message));\n        yield destroyMessage();\n        yield alertSuccess('Solution Edited', res.data.msg);\n        return yield http.get(solutionsActions.getSolutions(action.assistantID))\n    } catch (error) {\n        console.log(error.response);\n        yield alertError('Error in editing Solution', error.response.data.msg);\n        return yield put(solutionsActions.editSolutionFailure(error.response.data));\n    }\n}\n\nfunction* watchSolutionsRequests(){\n    yield takeEvery(actionTypes.GET_SOLUTIONS_REQUEST, getSolutionsData)\n}\n\nfunction* watchAddSolutionRequests(){\n    yield takeEvery(actionTypes.ADD_SOLUTION_REQUEST, addSolution)\n}\n\nfunction* watchEditSolutionRequests(){\n    yield takeEvery(actionTypes.EDIT_SOLUTION_REQUEST, editSolution)\n}\n\nexport function* solutionsSaga() {\n    yield all([\n        watchSolutionsRequests(),\n        watchAddSolutionRequests(),\n        watchEditSolutionRequests()\n    ])\n}","import {createStore, applyMiddleware, compose} from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from './reducers';\nimport {assistantSaga, authSaga, flowSaga, settingsSage, profileSaga, userInputSaga, solutionsSaga} from './sagas'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(flowSaga);\nsagaMiddleware.run(assistantSaga);\nsagaMiddleware.run(authSaga);\nsagaMiddleware.run(settingsSage);\nsagaMiddleware.run(profileSaga);\nsagaMiddleware.run(userInputSaga);\nsagaMiddleware.run(solutionsSaga);\n\n\nexport default store;","import axios from 'axios';\nimport {authHeader} from './auth';\nimport store from '../store/store';\nimport { authActions } from \"../store/actions\";\n\nexport const http = axios.create({\n    baseURL: '/api',\n    headers: {'Content-Type': 'application/json'},\n});\n\nhttp.interceptors.request.use(\n    function (config) {\n        const header = authHeader();\n        if (!header) throw new Error('Token required!');  \n        config.headers = header;\n        return config;\n    },\n    function (error) {\n        console.log(error);\n        return Promise.reject(error);\n    }\n);\n\nhttp.interceptors.response.use(response => {\n    return response;\n}, error => {\n    if (error.response.status === 401) {\n        console.log('Axios Unauthorised');\n        store.dispatch(authActions.logout());\n    }\n    return Promise.reject(error);\n});","import Hashids from \"hashids\";\n\nconst hashids = new Hashids(\"b9iLXiAa\", 5);\n\nconst encode = (param) => {\n    return hashids.encode(param);\n};\n\nconst decode = (param) => {\n    return hashids.decode(param);\n};\n\n\nexport const hasher = {\n    encode,\n    decode\n};","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport {checkAuthenticity} from  '../helpers'\n\nexport const PrivateRoute = ({ component: Component, ...rest }) => {\n    console.log(\"Check Authenticity\", checkAuthenticity());\n    return (\n        <Route {...rest} render={props => (\n            checkAuthenticity()\n                ? <Component {...props} />\n                : <Redirect to={{pathname: '/login', state: {from: props.location}}}/>\n        )}/>\n    )\n}","import React, {Component} from 'react';\nimport \"./AssistantSettingsModal.less\"\nimport {Button, Form, Input, InputNumber, Modal, Switch} from \"antd\";\n\nconst FormItem = Form.Item;\n\n\nclass AssistantSettingsModal extends Component {\n    state = {\n        isPopupDisabled: this.props.assistant.SecondsUntilPopup <= 0\n    };\n\n    togglePopupSwitch = () => {\n        this.setState({isPopupDisabled: !this.state.isPopupDisabled})\n    }\n\n\n    componentDidMount() {\n        this.setState({\n            inputValue: this.props.assistant.SecondsUntilPopup\n        });\n    }\n\n    handleSave = () => {\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                if (this.state.isPopupDisabled) {\n                    values.secondsUntilPopup = 0\n                }\n                this.props.handleSave(values)\n            }\n        });\n    };\n\n    render() {\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        };\n        const {getFieldDecorator} = this.props.form;\n        const {assistant} = this.props;\n\n        const {inputValue} = this.state;\n\n        return (\n            <Modal\n                title=\"Edit Assistant\"\n                visible={this.props.visible}\n                width={800}\n                destroyOnClose={true}\n                onCancel={this.props.handleCancel}\n                footer={[\n                    <Button key=\"cancel\" onClick={this.props.handleCancel}>Cancel</Button>,\n                    <Button key=\"submit\" type=\"primary\" onClick={this.handleSave}>\n                        Save\n                    </Button>,\n                ]}>\n\n                <Form layout='horizontal'>\n                    <FormItem\n                        label=\"Assistant Name\"\n                        extra=\"Enter a name for your assistant to easily identify it in the dashboard\"\n                        {...formItemLayout}>\n                        {\n                            getFieldDecorator('assistantName', {\n                                initialValue: assistant.Name,\n                                rules: [{\n                                    required: true,\n                                    message: 'Please input your assistant name',\n                                }],\n                            })\n                            (<Input placeholder=\"Ex: My first assistant, Sales Assistant\"/>)\n                        }\n                    </FormItem>\n\n                    <FormItem\n                        label=\"Welcome Message\"\n                        extra=\"This will be sent as first message\"\n                        {...formItemLayout}>\n\n                        {\n                            getFieldDecorator('welcomeMessage', {\n                                initialValue: assistant.Message,\n                                rules: [{\n                                    required: true,\n                                    message: 'Please input your welcome message',\n                                }],\n                            })(\n                                <Input placeholder=\"Ex: Hey there, Welcome visitor\"/>\n                            )\n                        }\n                    </FormItem>\n\n                    <FormItem\n                        label=\"Header Title\"\n                        extra=\"This will apear on top of your chatbot\"\n                        {...formItemLayout}>\n                        {\n                            getFieldDecorator('topBarTitle', {\n                                initialValue: assistant.TopBarText,\n                                rules: [{\n                                    required: true,\n                                    message: 'Please input your header title',\n                                }],\n                            })(\n                                <Input placeholder=\"Ex: Recruiter Bot\"/>\n                            )\n                        }\n                    </FormItem>\n\n                    <FormItem\n                        {...formItemLayout}\n                        label=\"Time to Popup\"\n                        extra=\"This will enforce the assistants' (chatbot) to popup automatically\"\n                    >\n                        <Switch checked={!this.state.isPopupDisabled} onChange={this.togglePopupSwitch}\n                                style={{marginRight: '5px'}}/>\n                        {getFieldDecorator('secondsUntilPopup', {initialValue: assistant.SecondsUntilPopup === 0 ? 1 : assistant.SecondsUntilPopup})(\n                            <InputNumber disabled={this.state.isPopupDisabled} min={1}/>\n                        )}\n                        <span className=\"ant-form-text\"> seconds</span>\n                    </FormItem>\n\n                </Form>\n            </Modal>\n        );\n    }\n}\n\nexport default Form.create()(AssistantSettingsModal)\n","import React, {Component} from 'react';\nimport \"../Assistant.less\"\nimport connect from \"react-redux/es/connect/connect\";\nimport {assistantSettingsActions} from \"../../../../../store/actions\";\nimport AssistantSettingsModal from \"./AssistantSettingsModal/AssistantSettingsModal\";\n\nclass AssistantSettings extends Component {\n\n    handleSave = (updatedSettings) => {\n        this.props.hideModal();\n        // dispatch redux action\n        this.props.dispatch(assistantSettingsActions.updateAssistantSettingsRequest({\n            ID: this.props.assistant.ID,\n            updatedSettings: updatedSettings\n        }));\n    };\n\n    render() {\n        return (\n            <AssistantSettingsModal assistant={this.props.assistant} visible={this.props.visible}\n                                    handleSave={this.handleSave} handleCancel={this.props.hideModal}/>\n        )\n    }\n\n}\n\nconst mapStateToProps = (state) => ({\n    isLoading: state.settings.isLoading,\n});\nexport default connect(mapStateToProps)(AssistantSettings);\n","import React, {Component} from 'react';\nimport \"./Assistant.less\"\nimport {Card, Dropdown, Icon, Menu, Switch} from 'antd';\nimport {Link} from \"react-router-dom\";\nimport AssistantSettings from \"./AssistantSettings/AssistantSettings\";\n\nconst {Meta} = Card;\n\n\nconst menu = (assistant) => (\n    <Menu>\n        <Menu.Item key=\"1\">\n            <Link to={{\n                      pathname: `assistants/${assistant.ID}/solutions`,\n                      state: {assistant: assistant}\n                  }}>\n                <Icon type=\"database\"/> Solutions\n            </Link>\n        </Menu.Item>\n        <Menu.Item key=\"2\">\n            <Link to={{\n                      pathname: `assistants/${assistant.ID}/userInput`,\n                      state: {assistant: assistant}\n                  }}>\n                <Icon type=\"code\"/> User Input\n            </Link>\n        </Menu.Item>\n        <Menu.Item key=\"3\">\n            <Link to={{\n                      pathname: `assistants/${assistant.ID}/analytics`,\n                      state: {assistant: assistant}\n                  }}>\n                <Icon type=\"line-chart\"/> Analytics\n            </Link>\n        </Menu.Item>\n        <Menu.Divider/>\n        <Menu.Item key=\"4\">\n            <Link to={{\n                      pathname: `assistants/${assistant.ID}/integration`,\n                      state: {assistant: assistant}\n                  }}>\n                <Icon type=\"sync\"/> Integration\n            </Link>\n        </Menu.Item>\n    </Menu>\n);\n\nconst covers = [\n    'https://42f2671d685f51e10fc6-b9fcecea3e50b3b59bdc28dead054ebc.ssl.cf5.rackcdn.com/illustrations/active_support_6rwo.svg',\n    'https://42f2671d685f51e10fc6-b9fcecea3e50b3b59bdc28dead054ebc.ssl.cf5.rackcdn.com/illustrations/voice_control_ofo1.svg',\n    'https://42f2671d685f51e10fc6-b9fcecea3e50b3b59bdc28dead054ebc.ssl.cf5.rackcdn.com/illustrations/group_chat_v059.svg',\n    'https://42f2671d685f51e10fc6-b9fcecea3e50b3b59bdc28dead054ebc.ssl.cf5.rackcdn.com/illustrations/status_update_jjgk.svg',\n    'https://42f2671d685f51e10fc6-b9fcecea3e50b3b59bdc28dead054ebc.ssl.cf5.rackcdn.com/illustrations/messages1_9ah2.svg'\n];\n\n\nclass Assistant extends Component {\n\n    state = {visible: false};\n\n    showModal = () => {\n        this.setState({\n            visible: true,\n        });\n    };\n\n    hideModal = () => {\n        this.setState({\n            visible: false,\n        });\n    };\n\n    onActiveChanged = () => {\n\n    }\n\n    render() {\n        const {assistant} = this.props;\n        return (\n            <>\n                <Card loading={this.props.isLoading} style={{width: 300, margin: 15, float: 'left', height: 369}}\n                      cover={\n                          <img alt=\"example\"\n                               height={200}\n                               width=\"100%\"\n                               src={covers[Math.floor(Math.random() * covers.length)]}/>\n                      }\n                      title={assistant.Name}\n                      extra={<Switch defaultChecked={assistant.Active} onChange={this.onActiveChanged}/>}\n                      actions={[\n                          <div onClick={this.showModal}>\n                              <Icon type=\"setting\"/>\n                              <span> Settings</span>\n                          </div>,\n\n                          <div>\n                              <Link\n                                  to={{\n                                      pathname: `assistants/${assistant.ID}/flow`,\n                                      state: {assistant: assistant}\n                                  }}>\n                                  <Icon type=\"build\"/>\n                                  <span> Flow</span>\n                              </Link>\n                          </div>,\n\n                          <Dropdown overlay={menu(assistant)} trigger={['click']}>\n                              <a className=\"ant-dropdown-link\">\n                                  ...\n                              </a>\n                          </Dropdown>]}>\n                    <Meta description={assistant.TopBarText}/>\n                </Card>\n\n                <AssistantSettings assistant={assistant}\n                                   hideModal={this.hideModal}\n                                   visible={this.state.visible}/>\n\n            </>\n        )\n    }\n}\n\nexport default Assistant;\n","import React, {Component} from 'react';\nimport \"./NewAssistantModal.less\";\n\nimport {Button, Form, Input, Modal, Select, InputNumber, message, Switch} from 'antd';\nimport {connect} from \"react-redux\";\nimport {assistantActions} from \"../../../../store/actions\";\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\n\nconst loading = () => {\n    message.loading('Adding assistant', 0);\n};\n\nclass NewAssistantModal extends Component {\n\n    state = {\n        isPopupDisabled: true\n    };\n\n    togglePopupSwitch = () => {\n        this.setState({isPopupDisabled: !this.state.isPopupDisabled})\n    };\n\n    handleAdd = () => {\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                if(this.state.isPopupDisabled) {values.secondsUntilPopup = 0}\n                console.log(values);\n                // send to server\n                this.props.dispatch(assistantActions.addAssistant(values));\n                loading();\n            }\n        });\n    };\n\n    componentDidUpdate(prevProps) {\n        if (!this.props.isAdding && this.props.isAdding !== prevProps.isAdding) {\n            this.props.hideModal();\n            message.destroy();\n            message.success(this.props.successMsg)\n\n        }\n\n    }\n\n\n    render() {\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        };\n        const {getFieldDecorator} = this.props.form;\n\n        return (\n            <Modal\n                width={800}\n                title=\"Create New Assistant\"\n                visible={this.props.visible}\n                onOk={this.handleOk}\n                onCancel={this.handleCancel}\n                destroyOnClose={true}\n                footer={[\n                    <Button key=\"cancel\" onClick={this.props.hideModal}>Cancel</Button>,\n                    <Button key=\"submit\" type=\"primary\" onClick={this.handleAdd}>\n                        Add\n                    </Button>,\n                ]}>\n                <Form layout='horizontal'>\n                    <FormItem\n                        label=\"Assistant Name\"\n                        extra=\"Enter a name for your assistant to easily identify it in the dashboard\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('assistantName', {\n                            rules: [{\n                                required: true,\n                                message: 'Please input your assistant name',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: My first assistant, Sales Assistant\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem\n                        label=\"Welcome Message\"\n                        extra=\"This will be sent as first message\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('welcomeMessage', {\n                            rules: [{\n                                required: true,\n                                message: 'Please input your welcome message',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Hey there, Welcome visitor\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem\n                        label=\"Header Title\"\n                        extra=\"This will apear on top of your chatbot\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('topBarTitle', {\n                            rules: [{\n                                required: true,\n                                message: 'Please input your header title',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Recruiter Bot\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem\n                    {...formItemLayout}\n                    label=\"Time to Popup\"\n                    extra=\"This will enforce the assistants' (chatbot) to popup automatically\"\n                    >\n                    <Switch defaultChecked={false} onChange={this.togglePopupSwitch} style={{marginRight: '5px'}} />\n                    {getFieldDecorator('secondsUntilPopup', { initialValue: 1 })(\n                        <InputNumber disabled={this.state.isPopupDisabled} min={1} />\n                    )}\n                    <span className=\"ant-form-text\"> seconds</span>\n                    </FormItem>\n\n                    <FormItem {...formItemLayout}\n                              label=\"Assistant Template\">\n\n                        {\n                            getFieldDecorator('template')(\n                                <Select placeholder=\"Please select template\">\n                                    <Option value=\"recruitment\">Recruitment</Option>\n                                    <Option value=\"Shopping\">Shopping</Option>\n                                    <Option value=\"Sales\">Sales</Option>\n                                </Select>\n                            )\n                        }\n                    </FormItem>\n                </Form>\n            </Modal>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        successMsg: state.assistant.successMsg,\n        isAdding: state.assistant.isAdding\n    };\n}\n\nexport default connect(mapStateToProps)(Form.create()(NewAssistantModal))\n","import React, {Component} from 'react';\nimport {Button, message, Skeleton} from 'antd';\nimport {connect} from 'react-redux';\n\nimport \"./Assistants.less\"\nimport styles from \"./Assistants.module.less\"\nimport Assistant from \"./Assistant/Assistant\"\n\nimport {assistantActions} from \"../../../store/actions/assistant.actions\";\nimport NewAssistantModal from \"./NewAssistantModal/NewAssistantModal\";\n\n\nclass Assistants extends Component {\n    state = {\n        visible: false,\n    };\n\n    componentDidUpdate(prevProps) {\n        // Show feedback for settings update\n        if (Boolean(this.props.successSettings) && Boolean(prevProps.successSettings) !== Boolean(this.props.successSettings))\n            message.success(this.props.successSettings);\n\n        if (Boolean(this.props.errorSettings) && Boolean(prevProps.errorSettings) !== Boolean(this.props.errorSettings))\n            message.error(this.props.errorSettings);\n    }\n\n\n    componentDidMount() {\n        this.props.dispatch(assistantActions.fetchAssistants());\n    }\n\n\n    showModal = () => {\n        this.setState({\n            visible: true,\n        });\n    };\n\n    hideModal = () => {\n        this.setState({\n            visible: false,\n        });\n    };\n\n\n    render() {\n        return (\n            <div style={{height: '100%'}}>\n                <div className={styles.Panel}>\n                    <div className={styles.Panel_Header}>\n                        <div>\n                            <h3>Assistants List</h3>\n                            <p>Here you can see all assistants created by you</p>\n                        </div>\n                        <div>\n                            <Button className={styles.Panel_Header_Button} type=\"primary\" icon=\"plus\"\n                                    onClick={this.showModal}>\n                                Add Assistant\n                            </Button>\n                        </div>\n\n                    </div>\n\n\n                    <div className={styles.Panel_Body}>\n                        <div className={styles.AssistantsList}>\n                            {\n                                this.props.assistantList[0] ?\n                                    (\n                                        this.props.assistantList.map((assistant, i) => <Assistant assistant={assistant}\n                                                                                                  key={i}\n                                                                                                  index={i}\n                                                                                                  isLoading={this.props.isLoading}\n                                        />)\n                                    )\n                                    : <Skeleton active/>\n                            }\n                        </div>\n                    </div>\n\n                </div>\n\n\n                <NewAssistantModal visible={this.state.visible}\n                                   hideModal={this.hideModal}/>\n\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        assistantList: state.assistant.assistantList,\n        isLoading: state.assistant.isLoading,\n        successSettings: state.settings.successMsg,\n        errorSettings: state.settings.errorMsg,\n    };\n}\n\nexport default connect(mapStateToProps)(Assistants);\n","import React, {Component} from 'react';\nimport \"./NewGroup.less\"\nimport {Button, Modal, Form, Input} from \"antd\";\n\nconst FormItem = Form.Item;\n\nclass NewGroup extends Component {\n\n    state = {};\n\n    handleSave = () => this.props.form.validateFields((err, values) => {\n        if (!err)\n            this.props.handleSave(values)\n    });\n\n    render() {\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        };\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Modal\n                width={800}\n                title=\"Create New Group\"\n                destroyOnClose={true}\n                visible={this.props.visible}\n                onOk={this.props.handleSave}\n                onCancel={this.props.handleCancel}\n                footer={[\n                    <Button key=\"Cancel\" onClick={this.props.handleCancel}>Cancel</Button>,\n                    <Button key=\"submit\" type=\"primary\" onClick={this.handleSave}>\n                        Add\n                    </Button>\n                ]}>\n                <Form layout='horizontal'>\n                    <FormItem\n                        label=\"Group Name\"\n                        extra=\"Enter a name for your group to easily identify it in the group list\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('name', {\n                            rules: [{\n                                required: true,\n                                message: 'Please enter your group name',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Greetings group, Sales group\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem\n                        label=\"Group Description\"\n                        extra=\"Just a description for you\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('description', {\n                            rules: [{\n                                required: true,\n                                message: 'Please add description to your group name',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: this is first group, this group help get info from user\"/>\n                        )}\n                    </FormItem>\n\n\n                </Form>\n            </Modal>\n        );\n    }\n}\n\nexport default Form.create()(NewGroup)","import React, {Component} from 'react';\nimport {Button, Modal, Form, Input} from \"antd\";\n\nconst FormItem = Form.Item;\n\nclass EditGroup extends Component {\n\n    state = {};\n\n    handleUpdate = () => this.props.form.validateFields((err, values) => {\n        if (!err) {\n            this.props.group.name = values.name;\n            this.props.group.description = values.description;\n            this.props.handleUpdate(this.props.group)\n        }\n    });\n\n\n    render() {\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        };\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Modal\n                width={800}\n                title=\"Edit Group\"\n                visible={this.props.visible}\n                onOk={this.props.handleUpdate}\n                onCancel={this.props.handleCancel}\n                footer={[\n                    <Button key=\"delete\" type=\"danger\" onClick={() => this.props.handleDelete(this.props.group)}>\n                        Delete\n                    </Button>,\n                    <Button key=\"Cancel\" onClick={this.props.handleCancel}>Cancel</Button>,\n                    <Button key=\"submit\" type=\"primary\" onClick={this.handleUpdate}>\n                        Update\n                    </Button>\n                ]}>\n                <Form layout='horizontal'>\n                    <FormItem\n                        label=\"Group Name\"\n                        extra=\"Enter a name for your group to easily identify it in the group list\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('name', {\n                            initialValue: this.props.group.name,\n                            rules: [{\n                                required: true,\n                                message: 'Please enter your group name',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Greetings group, Sales group\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem\n                        label=\"Group Description\"\n                        extra=\"Just a description for you\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('description', {\n                            initialValue: this.props.group.description,\n                            rules: [{\n                                required: true,\n                                message: 'Please description to your group name',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: this is first group, this group help get info from user\"/>\n                        )}\n                    </FormItem>\n\n\n                </Form>\n            </Modal>\n        );\n    }\n}\n\nexport default Form.create()(EditGroup)","import React, {Component} from 'react';\nimport \"./Groups.less\"\nimport styles from \"./Groups.module.less\";\nimport {Avatar, Button, List, Skeleton, Spin} from \"antd\";\nimport NewGroup from \"./NewGroup/NewGroup\";\nimport EditGroup from \"./EditGroup/EditGroup\";\n\nclass Groups extends Component {\n\n    state = {\n        newGroupModal: false,\n        editGroupModal: false,\n        selectedGroupToEdit: {}\n    };\n\n\n    ////// ADD GROUP\n    handleAddGroup = (newGroup) => {\n        this.props.addGroup(newGroup);\n        this.setState({newGroupModal: false});\n    };\n\n    handleAddGroupCancel = () => this.setState({newGroupModal: false});\n\n    showNewGroupModal = () => this.setState({newGroupModal: true});\n\n\n    ////// EDIT GROUP\n    handleEditGroup = (editedGroup) => {\n        this.props.editGroup(editedGroup);\n        this.setState({editGroupModal: false, selectedGroupToEdit: {}});\n    };\n\n    handleEditGroupCancel = () => this.setState({editGroupModal: false});\n\n    showEditGroupModal = (item) => this.setState({editGroupModal: true, selectedGroupToEdit: item});\n\n    ////// DELETE GROUP\n    handleDeleteGroup = (deletedGroup) => {\n        this.props.deleteGroup(deletedGroup);\n        this.setState({editGroupModal: false, selectedGroupToEdit: {}});\n    };\n\n\n    render() {\n        return (\n            <div className={styles.Panel}>\n                <div className={styles.Panel_Header}>\n                    <div>\n                        <h3>Flow Groups</h3>\n                    </div>\n                    <div>\n                        <Button className={styles.Panel_Header_Button} type=\"primary\" icon=\"plus\"\n                                onClick={this.showNewGroupModal}>\n                            Add Group\n                        </Button>\n\n                        <NewGroup visible={this.state.newGroupModal}\n                                  handleCancel={this.handleAddGroupCancel}\n                                  handleSave={this.handleAddGroup}/>\n                    </div>\n                </div>\n\n\n                <div className={styles.Panel_Body}>\n                    {\n                        this.props.isLoading ?\n                            <Spin><Skeleton active={true}/></Spin>\n                            :\n                            <List\n                                itemLayout=\"horizontal\"\n                                dataSource={this.props.groupsList}\n                                renderItem={item => (\n                                    <List.Item actions={[<Button icon={'edit'}\n                                                                 onClick={() => this.showEditGroupModal(item)}/>]}>\n                                        <List.Item.Meta\n                                            onClick={() => this.props.selectGroup(item)}\n                                            className={styles.groupsList}\n                                            avatar={<Avatar icon=\"ordered-list\" style={{backgroundColor: '#9254de'}}/>}\n                                            title={item.name}\n                                            description={item.description}\n                                        />\n                                    </List.Item>\n                                )}\n                            />\n                    }\n                </div>\n\n                <EditGroup group={this.state.selectedGroupToEdit}\n                           visible={this.state.editGroupModal}\n                           handleCancel={this.handleEditGroupCancel}\n                           handleUpdate={this.handleEditGroup}\n                           handleDelete={this.handleDeleteGroup}/>\n            </div>\n        );\n    }\n}\n\nexport default Groups;\n","import React, {Component} from 'react';\nimport {Row, Col, Collapse, Divider, Button, Card, Tag, Checkbox} from \"antd\";\n\nconst Panel = Collapse.Panel;\nconst {Meta} = Card;\n\nclass Block extends Component {\n\n    editBlock(block) {\n        console.log('this block needs to be edited', block)\n        this.props.editBlock(block)\n    }\n\n    deleteBlock(block) {\n        console.log('this block needs to be delete', block)\n        this.props.deleteBlock(block)\n    }\n\n    render() {\n        const {block} = this.props;\n        return (\n            <Collapse bordered={true}>\n                <Panel header={(\n                    <>\n                        {block.type} <Divider type=\"vertical\"/>\n                        {block.content.text} <Divider type=\"vertical\"/>\n\n                        <Button icon={'edit'} size={\"small\"} onClick={() => this.editBlock(block)}/>\n                        <Divider type=\"vertical\"/>\n                        <Button icon={'delete'} size={\"small\"} type={\"danger\"}\n                                onClick={() => this.deleteBlock(block)}/>\n                    </>\n                )}\n                       key={this.props.key}>\n\n                    {block.content.text ?\n                        <Row>\n                            <Col span={6}>Question:</Col>\n                            <Col span={12}>{block.content.text}</Col>\n                            <Divider/>\n                        </Row>\n                        : null\n                    }\n\n                    {block.content.blockToGoID ?\n                        <Row>\n                            <Col span={6}>block To Go ID:</Col>\n                            <Col span={12}>{block.content.blockToGoID}</Col>\n                            <Divider/>\n                        </Row>\n                        : null\n                    }\n\n                    {block.content.validation ?\n                        <Row>\n                            <Col span={6}>validation</Col>\n                            <Col span={12}>{block.content.validation}</Col>\n                            <Divider/>\n                        </Row>\n                        : null\n                    }\n\n                    {block.content.action ?\n                        <Row>\n                            <Col span={6}>action</Col>\n                            <Col span={12}>{block.content.action}</Col>\n                            <Divider/>\n                        </Row>\n                        : null\n                    }\n\n                    {block.content.afterMessage ?\n                        <Row>\n                            <Col span={6}>after Message</Col>\n                            <Col span={12}>{block.content.afterMessage}</Col>\n                            <Divider/>\n                        </Row>\n                        : null\n                    }\n\n                    {block.content.showTop ?\n                        <Row>\n                            <Col span={6}>show Top</Col>\n                            <Col span={12}>{block.content.showTop}</Col>\n                            <Divider/>\n                        </Row>\n                        : null\n                    }\n\n                    {block.content.storeInDB ?\n                        <Row>\n                            <Col span={6}>Stroe in DB:</Col>\n                            <Col span={6}><Checkbox checked={block.content.storeInDB}></Checkbox></Col>\n\n                            <Col span={6}>Skippable:</Col>\n                            <Col span={6}><Checkbox checked={block.content.isSkippable}></Checkbox></Col>\n                            <Divider/>\n                        </Row>\n                        : null\n                    }\n\n                    {block.content.answers ?\n                        <div>\n                            Answers:\n                            {\n                                block.content.answers.map((answer, i) =>\n                                    <Card key={i} style={{margin: 5, width: 300}}>\n                                        <Meta\n                                            title={answer.text}\n                                            description={\n                                                (<>Keywords: {answer.keywords.map((keyword, i) =>\n                                                    <Tag key={i}>{keyword}</Tag>)}</>)\n                                            }\n                                        />\n                                        <Row>\n                                            <Divider/>\n                                            <Col span={6}>Action:</Col>\n                                            <Col span={12}>{answer.action}</Col>\n                                        </Row>\n\n                                        <Row>\n                                            <Divider/>\n                                            <Col span={6}>After Message</Col>\n                                            <Col span={12}>{answer.afterMessage}</Col>\n                                        </Row>\n\n                                    </Card>\n                                )\n                            }\n                        </div>\n                        : null\n                    }\n\n                </Panel>\n            </Collapse>\n        );\n    }\n\n}\n\nexport default Block;\n\n","import React, {Component} from 'react';\nimport {Button, Card, Checkbox, Form, Input, Select, Spin} from \"antd\";\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\nclass UserInput extends Component {\n\n    state = {\n        showGoToBlock: false,\n        showGoToGroup: false\n    };\n\n    onSubmit = () => {\n        return this.props.form.validateFields((err, values) => {\n            // If from is valid crete the new block following User Input block type format\n            if (!err) {\n                this.props.handleNewBlock({\n                    block: {\n                        type: 'User Input',\n                        groupID: this.props.options.currentGroup.id,\n                        storeInDB: values.storeInDB,\n                        isSkippable: values.isSkippable,\n                        labels: '',\n                        content: {\n                            text: values.text,\n                            blockToGoID: values.blockToGoID || values.blockToGoIDGroup || null,\n                            validation: values.validation,\n                            action: values.action,\n                            afterMessage: values.afterMessage\n                        }\n                    }\n                })\n            }\n        })\n    };\n\n    onCancel = () => this.props.handleNewBlock(false);\n\n    onSelectAction = (action) => {\n        if (action === \"Go To Specific Block\")\n            this.setState({showGoToBlock: true, showGoToGroup: false});\n        else if (action === \"Go To Group\")\n            this.setState({showGoToBlock: false, showGoToGroup: true});\n        else\n            this.setState({showGoToBlock: false, showGoToGroup: false});\n    };\n\n    render() {\n        const {blockTypes, blocks, allGroups} = this.props.options;\n        let blockOptions = {};\n        // extract the correct blockType from blockTypes[]\n        for (const blockType of blockTypes)\n            if (blockType.name === 'User Input')\n                blockOptions = blockType;\n\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Card style={{width: '100%'}}\n                  actions={[\n                      <Button key=\"cancel\" onClick={this.onCancel}>Cancel</Button>,\n                      <Button key=\"submit\" type=\"primary\" onClick={this.onSubmit}>Add</Button>]}\n            >\n                <Form layout='horizontal'>\n                    <FormItem label=\"Question\"\n                              extra=\"The above text will be shown in a bubble inside the chat\"\n                              {...this.props.options.layout}>\n                        {getFieldDecorator('text', {\n                            rules: [{\n                                required: true,\n                                message: \"Please input question field\",\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Where are you from?\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem label=\"Validation\"\n                              {...this.props.options.layout}>\n                        {\n                            blockOptions.validations ?\n                                getFieldDecorator('validation', {\n                                    rules: [{\n                                        required: true,\n                                        message: \"Please field validation\",\n                                    }]\n                                })(\n                                    <Select placeholder=\"Will validate the input\">{\n                                        blockOptions.validations.map((validation, i) =>\n                                            <Option key={i} value={validation}>{validation}</Option>)\n                                    }</Select>\n                                )\n                                : <Spin><Select placeholder=\"Will validate the input\"></Select></Spin>\n                        }\n                    </FormItem>\n\n                    <FormItem label=\"Action\"\n                              {...this.props.options.layout}>\n                        {\n                            blockOptions.actions ?\n                                getFieldDecorator('action', {\n                                    rules: [{\n                                        required: true,\n                                        message: \"Please input question field\",\n                                    }],\n                                })(\n                                    <Select onSelect={this.onSelectAction}\n                                            placeholder=\"The next step after this block\">{\n                                        blockOptions.actions.map((action, i) =>\n                                            <Option key={i}\n                                                    value={action}>{action}</Option>)\n                                    }</Select>\n                                )\n                                : <Spin><Select placeholder=\"The next step after this block\"></Select></Spin>\n                        }\n                    </FormItem>\n\n                    {this.state.showGoToBlock ?\n                        (<FormItem label=\"Go To Specific Block\" {...this.props.options.layout}>\n                            {\n                                getFieldDecorator('blockToGoID',\n                                    {\n                                        rules: [{required: true, message: \"Please select your next block\"}]\n\n                                    }\n                                )(\n                                    <Select placeholder=\"The next step after this block\">{\n                                        blocks.map((block, i) =>\n                                            <Option key={i} value={block.id}>\n                                                {`${block.id}- (${block.type}) ${block.content.text ? block.content.text : ''}`}\n                                            </Option>\n                                        )\n                                    }</Select>\n                                )\n                            }\n                        </FormItem>)\n                        : null\n                    }\n\n                    {this.state.showGoToGroup ?\n                        (<FormItem label=\"Go To Specific Group\"\n                                   extra=\"The selected group will start from its first block\"\n                                   {...this.props.options.layout}>\n                            {\n                                getFieldDecorator('blockToGoIDGroup',\n                                    {\n                                        rules: [{required: true, message: \"Please select your next group\"}]\n                                    }\n                                )(\n                                    <Select placeholder=\"The next block after this block\">{\n                                        allGroups.map((group, i) => {\n                                                if (group.blocks[0])\n                                                    return <Option key={i} value={group.blocks[0].id}>\n                                                        {`${group.name}`}\n                                                    </Option>;\n                                                else\n                                                    return <Option disabled key={i} value={group.name}>\n                                                        {`${group.name}`}\n                                                    </Option>\n                                            }\n                                        )\n                                    }</Select>\n                                )\n                            }\n                        </FormItem>)\n                        : null\n                    }\n\n\n                    <FormItem label=\"After message\"\n                              extra=\"This message will display straight after the user's response\"\n                              {...this.props.options.layout}>\n                        {getFieldDecorator('afterMessage', {\n                            rules: [{\n                                required: true,\n                                message: \"Please input question field\",\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Your input is recorded\"/>\n                        )}\n                    </FormItem>\n\n                    <Form.Item\n                        label=\"Skippable?\"\n                        {...this.props.options.layout}>\n                        {getFieldDecorator('isSkippable', {\n                            valuePropName: 'checked',\n                            initialValue: false,\n                        })(\n                            <Checkbox>Users can skip answering this question</Checkbox>\n                        )}\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"Store responses?\"\n                        {...this.props.options.layout}>\n                        {getFieldDecorator('storeInDB', {\n                            valuePropName: 'checked',\n                            initialValue: blockOptions.alwaysStoreInDB,\n                        })(\n                            <Checkbox disabled={blockOptions.alwaysStoreInDB}>\n                                Users' responses should be recorded</Checkbox>\n                        )}\n                    </Form.Item>\n\n                </Form>\n            </Card>\n        );\n    }\n}\n\nexport default Form.create()(UserInput);\n\n","import React, {Component} from 'react';\nimport {Button, Card, Checkbox, Form, Icon, Input, Modal, Select, Spin, Tag, Tooltip} from \"antd\";\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\nclass Question extends Component {\n\n    state = {\n        showGoToBlock: false,\n        showGoToGroup: false,\n        modalVisible: false,\n\n        tags: [],\n        inputVisible: false,\n        inputValue: '',\n        answers: []\n    };\n\n    onSubmit = () => {\n        return this.props.form.validateFields(['text', 'isSkippable', 'storeInDB'], (err, values) => {\n\n            // If from is valid crete the new block following User Input block type format\n            if (!err) {\n                this.props.handleNewBlock({\n                    block: {\n                        type: 'Question',\n                        groupID: this.props.options.currentGroup.id,\n                        storeInDB: values.storeInDB,\n                        isSkippable: values.isSkippable,\n                        labels: '',\n                        content: {\n                            text: values.text,\n                            answers: this.state.answers\n                        }\n                    }\n                })\n            }\n        })\n    };\n\n    onCancel = () => this.props.handleNewBlock(false);\n\n    onSelectAction = (action) => {\n        if (action === \"Go To Specific Block\")\n            this.setState({showGoToBlock: true, showGoToGroup: false});\n        else if (action === \"Go To Group\")\n            this.setState({showGoToBlock: false, showGoToGroup: true});\n        else\n            this.setState({showGoToBlock: false, showGoToGroup: false});\n    };\n\n\n    addAnswer = () => {\n        this.props.form.validateFields(['answer', 'action', 'blockToGoID', 'blockToGoIDGroup', 'afterMessage'], (err, values) => {\n            if (!err) {\n                const answer = {\n                    text: values.answer,\n                    keywords: this.state.tags,\n                    blockToGoID: values.blockToGoID || values.blockToGoIDGroup || null,\n                    action: values.action,\n                    afterMessage: values.afterMessage\n                };\n                this.setState({tags: []});\n                const answers = this.state.answers;\n                answers.push(answer);\n                this.setState({answers});\n                this.hideAddAnswer();\n                console.log(this.state.answers)\n            }\n        })\n\n    };\n\n    showAddAnswer = () => this.setState({modalVisible: true});\n    hideAddAnswer = () => this.setState({modalVisible: false});\n    removeAnswer = () => {\n        console.log(\"TODO\")\n    };\n\n// Tags component's functions\n    removeTag = (removedTag) => this.setState({tags: this.state.tags.filter(tag => tag !== removedTag)});\n    showInput = () => this.setState({inputVisible: true}, () => this.input.focus());\n    handleInputChange = e => this.setState({inputValue: e.target.value});\n    saveInputRef = input => this.input = input;\n    handleInputConfirm = () => {\n        const inputValue = this.state.inputValue;\n        let tags = this.state.tags;\n        if (inputValue && tags.indexOf(inputValue) === -1)\n            tags = [...tags, inputValue];\n        this.setState({tags, inputVisible: false, inputValue: '',});\n    };\n\n// END Tags component's functions\n\n\n    render() {\n        const {blockTypes, blocks, allGroups} = this.props.options;\n        let blockOptions = {};\n        // extract the correct blockType from blockTypes[]\n        for (const blockType of blockTypes)\n            if (blockType.name === 'Question')\n                blockOptions = blockType;\n\n        const {getFieldDecorator} = this.props.form;\n\n        const {tags, inputVisible, inputValue} = this.state;\n\n        return (\n            <Card style={{width: '100%'}}\n                  actions={[\n                      <Button key=\"cancel\" onClick={this.onCancel}>Cancel</Button>,\n                      <Button key=\"submit\" type=\"primary\" onClick={this.onSubmit}>Add</Button>]}>\n                <Form layout='horizontal'>\n                    <FormItem label=\"Question\"\n                              extra=\"The above text will be shown in a bubble inside the chat\"\n                              {...this.props.options.layout}>\n                        {getFieldDecorator('text', {\n                            rules: [{\n                                required: true,\n                                message: \"Please input question field\",\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Where are you from?\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem label=\"Answers\"\n                              {...this.props.options.layout}>\n                        <Button onClick={this.showAddAnswer}\n                                type=\"primary\" icon=\"plus\" shape=\"circle\" size={\"small\"}></Button>\n                        {\n                            this.state.answers.map((answer, i) => (\n                                <Card title={answer.text}\n                                      key={i}\n                                      extra={<Button onClick={this.removeAnswer}\n                                                     type=\"danger\" icon=\"delete\" shape=\"circle\"\n                                                     size={\"small\"}></Button>}\n                                      style={{width: 200, margin: 10}}>\n                                    <p>Action: {answer.action}</p>\n                                    Tags: <br/>\n                                    {answer.keywords.map((keyword, i) => <Tag key={i}>{keyword}</Tag>)}\n\n                                </Card>\n                            ))\n                        }\n                    </FormItem>\n\n                    <Form.Item\n                        label=\"Skippable?\"\n                        {...this.props.options.layout}>\n                        {getFieldDecorator('isSkippable', {\n                            valuePropName: 'checked',\n                            initialValue: false,\n                        })(\n                            <Checkbox>Users can skip answering this question</Checkbox>\n                        )}\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"Store responses?\"\n                        {...this.props.options.layout}>\n                        {getFieldDecorator('storeInDB', {\n                            valuePropName: 'checked',\n                            initialValue: blockOptions.alwaysStoreInDB,\n                        })(\n                            <Checkbox disabled={blockOptions.alwaysStoreInDB}>\n                                Users' responses should be recorded</Checkbox>\n                        )}\n                    </Form.Item>\n\n                </Form>\n\n\n                {/*ADDING ANSWER*/}\n                <Modal\n                    title=\"Add Answer\"\n                    width={700}\n                    destroyOnClose={true}\n                    visible={this.state.modalVisible}\n                    onOk={this.addAnswer}\n                    onCancel={this.hideAddAnswer}>\n\n                    <Form>\n                        <FormItem label=\"Answer\"\n                                  extra=\"This will be shown as answer in chatbot\"\n                                  {...this.props.options.layout}>\n                            {getFieldDecorator('answer', {\n                                rules: [{\n                                    required: true,\n                                    message: \"Please input answer field\",\n                                }],\n                            })(\n                                <Input placeholder=\"Ex: Yes I need it :)\"/>\n                            )}\n                        </FormItem>\n\n                        <FormItem label=\"Tags\" {...this.props.options.layout}>\n                            <div>\n                                {tags.map((tag) => {\n                                    const isLongTag = tag.length > 20;\n                                    const tagElem = (\n                                        <Tag key={tag} closable={true} afterClose={() => this.removeTag(tag)}>\n                                            {isLongTag ? `${tag.slice(0, 20)}...` : tag}\n                                        </Tag>\n                                    );\n                                    return isLongTag ? <Tooltip title={tag} key={tag}>{tagElem}</Tooltip> : tagElem;\n                                })}\n                                {inputVisible && (\n                                    <Input\n                                        ref={this.saveInputRef}\n                                        type=\"text\"\n                                        size=\"small\"\n                                        style={{width: 78}}\n                                        value={inputValue}\n                                        onChange={this.handleInputChange}\n                                        onBlur={this.handleInputConfirm}\n                                        onPressEnter={this.handleInputConfirm}\n                                    />\n                                )}\n                                {!inputVisible && (\n                                    <Tag\n                                        onClick={this.showInput}\n                                        style={{background: '#fff', borderStyle: 'dashed'}}>\n                                        <Icon type=\"plus\"/> New Tag\n                                    </Tag>\n                                )}\n                            </div>\n                        </FormItem>\n\n                        <FormItem label=\"Action\"{...this.props.options.layout}>{\n                            blockOptions.actions ?\n                                getFieldDecorator('action', {\n                                    rules: [{\n                                        required: true,\n                                        message: \"Please input action field\",\n                                    }],\n                                })(\n                                    <Select onSelect={this.onSelectAction}\n                                            placeholder=\"The next step after this block\">{\n                                        blockOptions.actions.map((action, i) =>\n                                            <Option key={i}\n                                                    value={action}>{action}</Option>)\n                                    }</Select>\n                                )\n                                : <Spin><Select placeholder=\"The next step after this block\"></Select></Spin>\n                        }</FormItem>\n\n                        {this.state.showGoToBlock ?\n                            (<FormItem label=\"Go To Specific Block\" {...this.props.options.layout}>\n                                {\n                                    getFieldDecorator('blockToGoID',\n                                        {\n                                            rules: [{required: true, message: \"Please select your next block\"}],\n                                        }\n                                    )(\n                                        <Select placeholder=\"The next step after this block\">{\n                                            blocks.map((block, i) =>\n                                                <Option key={i} value={block.id}>\n                                                    {`${block.id}- (${block.type}) ${block.content.text ? block.content.text : ''}`}\n                                                </Option>\n                                            )\n                                        }</Select>\n                                    )\n                                }\n                            </FormItem>)\n                            : null\n                        }\n\n                        {this.state.showGoToGroup ?\n                            (<FormItem label=\"Go To Specific Group\"\n                                       extra=\"The selected group will start from its first block\"\n                                       {...this.props.options.layout}>\n                                {\n                                    getFieldDecorator('blockToGoIDGroup',\n                                        {\n                                            rules: [{required: true, message: \"Please select your next group\"}]\n                                        }\n                                    )(\n                                        <Select placeholder=\"The next block after this block\">{\n                                            allGroups.map((group, i) => {\n                                                    if (group.blocks[0])\n                                                        return <Option key={i} value={group.blocks[0].id}>\n                                                            {`${group.name}`}\n                                                        </Option>;\n                                                    else\n                                                        return <Option disabled key={i} value={group.name}>\n                                                            {`${group.name}`}\n                                                        </Option>\n                                                }\n                                            )\n                                        }</Select>\n                                    )\n                                }\n                            </FormItem>)\n                            : null\n                        }\n\n                        <FormItem label=\"After message\"\n                                  extra=\"This message will display straight after the user's response\"\n                                  {...this.props.options.layout}>\n                            {getFieldDecorator('afterMessage', {\n                                rules: [{\n                                    required: true,\n                                    message: \"Please input after message field\",\n                                }],\n                            })(\n                                <Input placeholder=\"Ex: Your input is recorded\"/>\n                            )}\n                        </FormItem>\n                    </Form>\n\n                </Modal>\n            </Card>\n        );\n    }\n\n}\n\n\nexport default Form.create()(Question);\n\n","import React, {Component} from 'react';\nimport {Button, Card, Checkbox, Form, Input, Select, Spin} from \"antd\";\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\nconst CheckboxGroup = Checkbox.Group;\n\nclass FileUpload extends Component {\n\n    state = {\n        showGoToBlock: false,\n        showGoToGroup: false,\n        fileTypes: []\n    };\n\n    onSubmit = () => {\n        return this.props.form.validateFields((err, values) => {\n            if (!err) {\n                this.props.handleNewBlock({\n                    block: {\n                        type: 'File Upload',\n                        groupID: this.props.options.currentGroup.id,\n                        storeInDB: values.storeInDB,\n                        isSkippable: values.isSkippable,\n                        labels: '',\n                        content: {\n                            text: values.text,\n                            action: values.action,\n                            fileTypes: this.state.fileTypes,\n                            blockToGoID: values.blockToGoID || values.blockToGoIDGroup || null,\n                            afterMessage: values.afterMessage\n                        }\n                    }\n                })\n            }\n        })\n    };\n\n    onCancel = () => this.props.handleNewBlock(false);\n\n    onSelectAction = (action) => {\n        if (action === \"Go To Specific Block\")\n            this.setState({showGoToBlock: true, showGoToGroup: false});\n        else if (action === \"Go To Group\")\n            this.setState({showGoToBlock: false, showGoToGroup: true});\n        else\n            this.setState({showGoToBlock: false, showGoToGroup: false});\n    };\n\n    onChange = (checkedValues) => this.setState({fileTypes: checkedValues});\n\n    render() {\n        const {blockTypes, blocks, allGroups} = this.props.options;\n        let blockOptions = {};\n        // extract the correct blockType from blockTypes[]\n\n        for (const blockType of blockTypes)\n            if (blockType.name === \"File Upload\")\n                blockOptions = blockType;\n        const {getFieldDecorator} = this.props.form;\n\n        const typesAllowed = blockOptions.typesAllowed;\n        return (\n            <Card style={{width: '100%'}}\n                  actions={[\n                      <Button key=\"cancel\" onClick={this.onCancel}>Cancel</Button>,\n                      <Button key=\"submit\" type=\"primary\" onClick={this.onSubmit}>Add</Button>]}>\n                <Form layout='horizontal'>\n                    <FormItem label=\"Question\"\n                              extra=\"The above text will be shown in a bubble inside the chat\"\n                              {...this.props.options.layout}>\n                        {getFieldDecorator('text', {\n                            rules: [{\n                                required: true,\n                                message: \"Please input question field\",\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Please upload you cv\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem label=\"File Types\"\n                              {...this.props.options.layout}>\n                        {\n                            blockOptions.typesAllowed ?\n                                getFieldDecorator('fileTypes', {\n                                    rules: [{\n                                        required: true,\n                                        message: \"Please select the accepted file type\",\n                                    }]\n                                })(\n                                    <CheckboxGroup options={typesAllowed} onChange={this.onChange}/>\n                                )\n                                : <Spin/>\n                        }\n                    </FormItem>\n\n                    <FormItem label=\"Action\"{...this.props.options.layout}>\n                        {\n                            blockOptions.actions ?\n                                getFieldDecorator('action', {\n                                    rules: [{\n                                        required: true,\n                                        message: \"Please input question field\",\n                                    }],\n                                })(\n                                    <Select onSelect={this.onSelectAction}\n                                            placeholder=\"The next step after this block\">{\n                                        blockOptions.actions.map((action, i) =>\n                                            <Option key={i}\n                                                    value={action}>{action}</Option>)\n                                    }</Select>\n                                )\n                                : <Spin><Select placeholder=\"The next step after this block\"></Select></Spin>\n                        }\n                    </FormItem>\n\n                    {this.state.showGoToBlock ?\n                        (<FormItem label=\"Go To Specific Block\" {...this.props.options.layout}>\n                            {\n                                getFieldDecorator('blockToGoID',\n                                    {\n                                        rules: [{required: true, message: \"Please select your next block\"}]\n\n                                    }\n                                )(\n                                    <Select placeholder=\"The next step after this block\">{\n                                        blocks.map((block, i) =>\n                                            <Option key={i} value={block.id}>\n                                                {`${block.id}- (${block.type}) ${block.content.text ? block.content.text : ''}`}\n                                            </Option>\n                                        )\n                                    }</Select>\n                                )\n                            }\n                        </FormItem>)\n                        : null\n                    }\n\n                    {this.state.showGoToGroup ?\n                        (<FormItem label=\"Go To Specific Group\"\n                                   extra=\"The selected group will start from its first block\"\n                                   {...this.props.options.layout}>\n                            {\n                                getFieldDecorator('blockToGoIDGroup',\n                                    {\n                                        rules: [{required: true, message: \"Please select your next group\"}]\n                                    }\n                                )(\n                                    <Select placeholder=\"The next block after this block\">{\n                                        allGroups.map((group, i) => {\n                                                if (group.blocks[0])\n                                                    return <Option key={i} value={group.blocks[0].id}>\n                                                        {`${group.name}`}\n                                                    </Option>;\n                                                else\n                                                    return <Option disabled key={i} value={group.name}>\n                                                        {`${group.name}`}\n                                                    </Option>\n                                            }\n                                        )\n                                    }</Select>\n                                )\n                            }\n                        </FormItem>)\n                        : null\n                    }\n\n\n                    <FormItem label=\"After message\"\n                              extra=\"This message will display straight after the user's response\"\n                              {...this.props.options.layout}>\n                        {getFieldDecorator('afterMessage', {\n                            rules: [{\n                                required: true,\n                                message: \"Please input question field\",\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Your input is recorded\"/>\n                        )}\n                    </FormItem>\n\n                    <Form.Item\n                        label=\"Skippable?\"\n                        {...this.props.options.layout}>\n                        {getFieldDecorator('isSkippable', {\n                            valuePropName: 'checked',\n                            initialValue: false,\n                        })(\n                            <Checkbox>Users can skip answering this question</Checkbox>\n                        )}\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"Store responses?\"\n                        {...this.props.options.layout}>\n                        {getFieldDecorator('storeInDB', {\n                            valuePropName: 'checked',\n                            initialValue: blockOptions.alwaysStoreInDB,\n                        })(\n                            <Checkbox disabled={blockOptions.alwaysStoreInDB}>\n                                Users' responses should be recorded</Checkbox>\n                        )}\n                    </Form.Item>\n\n                </Form>\n            </Card>\n        );\n    }\n}\n\nexport default Form.create()(FileUpload);\n\n","import React, {Component} from 'react';\nimport {Button, Card, Checkbox, Form, Input, Select, Spin} from \"antd\";\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\nclass Solutions extends Component {\n\n    state = {\n        showGoToBlock: false,\n        showGoToGroup: false\n    };\n\n    onSubmit = () => {\n        return this.props.form.validateFields((err, values) => {\n            // If from is valid crete the new block following User Input block type format\n            if (!err) {\n                const newBlock = {\n                    block: {\n                        type: 'Solutions',\n                        groupID: this.props.options.currentGroup.id,\n                        storeInDB: values.storeInDB,\n                        isSkippable: values.isSkippable,\n                        labels: '',\n                        content: {\n                            showTop: Number(values.showTop),\n                            action: values.action,\n                            blockToGoID: values.blockToGoID || values.blockToGoIDGroup || null,\n                            afterMessage: values.afterMessage,\n                        }\n                    }\n                };\n                this.props.handleNewBlock(newBlock)\n            }\n        })\n    };\n\n    onCancel = () => this.props.handleNewBlock(false);\n\n    onSelectAction = (action) => {\n        if (action === \"Go To Specific Block\")\n            this.setState({showGoToBlock: true, showGoToGroup: false});\n        else if (action === \"Go To Group\")\n            this.setState({showGoToBlock: false, showGoToGroup: true});\n        else\n            this.setState({showGoToBlock: false, showGoToGroup: false});\n    };\n\n    render() {\n        const {blockTypes, blocks, allGroups} = this.props.options;\n        let blockOptions = {};\n        // extract the correct blockType from blockTypes[]\n        for (const blockType of blockTypes)\n            if (blockType.name === 'User Input')\n                blockOptions = blockType;\n\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Card style={{width: '100%'}}\n                  actions={[\n                      <Button key=\"cancel\" onClick={this.onCancel}>Cancel</Button>,\n                      <Button key=\"submit\" type=\"primary\" onClick={this.onSubmit}>Add</Button>]}\n            >\n                <Form layout='horizontal'>\n                    <FormItem label=\"Show Top Results\"\n                              extra=\"Number of results you want to return\"\n                              {...this.props.options.layout}>\n                        {getFieldDecorator('showTop', {\n                            rules: [{\n                                required: true,\n                                message: \"Please show top field\",\n                            }],\n                        })(\n                            <Input min=\"1\" type=\"number\" placeholder=\"Ex: Where are you from?\"/>\n                        )}\n                    </FormItem>\n\n\n                    <FormItem label=\"Action\"\n                              {...this.props.options.layout}>\n                        {\n                            blockOptions.actions ?\n                                getFieldDecorator('action', {\n                                    rules: [{\n                                        required: true,\n                                        message: \"Please input question field\",\n                                    }],\n                                })(\n                                    <Select onSelect={this.onSelectAction}\n                                            placeholder=\"The next step after this block\">{\n                                        blockOptions.actions.map((action, i) =>\n                                            <Option key={i}\n                                                    value={action}>{action}</Option>)\n                                    }</Select>\n                                )\n                                : <Spin><Select placeholder=\"The next step after this block\"></Select></Spin>\n                        }\n                    </FormItem>\n\n                    {this.state.showGoToBlock ?\n                        (<FormItem label=\"Go To Specific Block\" {...this.props.options.layout}>\n                            {\n                                getFieldDecorator('blockToGoID',\n                                    {\n                                        rules: [{required: true, message: \"Please select your next block\"}]\n\n                                    }\n                                )(\n                                    <Select placeholder=\"The next step after this block\">{\n                                        blocks.map((block, i) =>\n                                            <Option key={i} value={block.id}>\n                                                {`${block.id}- (${block.type}) ${block.content.text ? block.content.text : ''}`}\n                                            </Option>\n                                        )\n                                    }</Select>\n                                )\n                            }\n                        </FormItem>)\n                        : null\n                    }\n\n                    {this.state.showGoToGroup ?\n                        (<FormItem label=\"Go To Specific Group\"\n                                   extra=\"The selected group will start from its first block\"\n                                   {...this.props.options.layout}>\n                            {\n                                getFieldDecorator('blockToGoIDGroup',\n                                    {\n                                        rules: [{required: true, message: \"Please select your next group\"}]\n                                    }\n                                )(\n                                    <Select placeholder=\"The next block after this block\">{\n                                        allGroups.map((group, i) => {\n                                                if (group.blocks[0])\n                                                    return <Option key={i} value={group.blocks[0].id}>\n                                                        {`${group.name}`}\n                                                    </Option>;\n                                                else\n                                                    return <Option disabled key={i} value={group.name}>\n                                                        {`${group.name}`}\n                                                    </Option>\n                                            }\n                                        )\n                                    }</Select>\n                                )\n                            }\n                        </FormItem>)\n                        : null\n                    }\n\n                    <FormItem label=\"After message\"\n                              extra=\"This message will display straight after the user's response\"\n                              {...this.props.options.layout}>\n                        {getFieldDecorator('afterMessage', {\n                            rules: [{\n                                required: true,\n                                message: \"Please input after message field\",\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: There you go :)\"/>\n                        )}\n                    </FormItem>\n\n\n                    <Form.Item\n                        label=\"Skippable?\"\n                        {...this.props.options.layout}>\n                        {getFieldDecorator('isSkippable', {\n                            valuePropName: 'checked',\n                            initialValue: false,\n                        })(\n                            <Checkbox>Users can skip answering this question</Checkbox>\n                        )}\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"Store responses?\"\n                        {...this.props.options.layout}>\n                        {getFieldDecorator('storeInDB', {\n                            valuePropName: 'checked',\n                            initialValue: blockOptions.alwaysStoreInDB,\n                        })(\n                            <Checkbox disabled={blockOptions.alwaysStoreInDB}>\n                                Users' responses should be recorded</Checkbox>\n                        )}\n                    </Form.Item>\n\n                </Form>\n            </Card>\n        );\n    }\n}\n\nexport default Form.create()(Solutions);\n\n","import React, {Component} from 'react';\n\nimport {http} from \"../../../../../../../helpers\";\n\nimport {Icon, Modal, Tabs} from 'antd';\n\nimport UserInput from \"./Cards/UserInput\";\nimport Question from \"./Cards/Question\";\nimport FileUpload from \"./Cards/FileUpload\";\nimport Solutions from \"./Cards/Solutions\";\n\nconst TabPane = Tabs.TabPane;\n\nclass NewBlockModal extends Component {\n\n    state = {\n        layout: {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14}\n        },\n        blockTypes: [],\n        blocks: [],\n        allGroups: [],\n        currentGroup: null\n    };\n\n    componentDidMount() {\n        http.get(`/assistant/flow/options`)\n            .then(res => this.setState({blockTypes: res.data.data.blockTypes}))\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            blocks: nextProps.blocks,\n            allGroups: nextProps.allGroups,\n            currentGroup: nextProps.currentGroup,\n        })\n    }\n\n    handleNewBlock = (newBlock) => {\n        if (newBlock)\n            this.props.handleAddBlock(newBlock);\n        this.props.closeModal();\n    };\n\n\n    onChangeTab = (currentTab) => this.setState({currentTab});\n\n    render() {\n        return (\n            <Modal width={800}\n                   title=\"Add New Block\"\n                   visible={this.props.visible}\n                   onCancel={this.props.closeModal}\n                   destroyOnClose={true}\n                   footer={null}>\n\n                <Tabs type=\"card\" onChange={this.onChangeTab}>\n                    <TabPane tab={<span><Icon type=\"form\"/>User Input</span>}\n                             key=\"UserInput\">\n                        <UserInput options={this.state}\n                                   handleNewBlock={this.handleNewBlock}/>\n                    </TabPane>\n\n                    <TabPane tab={<span><Icon type=\"question-circle\"/>Question</span>}\n                             key=\"Question\">\n                        <Question options={this.state}\n                                  handleNewBlock={this.handleNewBlock}/>\n                    </TabPane>\n\n                    <TabPane tab={<span><Icon type=\"file-add\"/>File Upload</span>}\n                             key=\"FileUpload\">\n                        <FileUpload options={this.state}\n                                    handleNewBlock={this.handleNewBlock}/>\n                    </TabPane>\n\n                    <TabPane tab={<span><Icon type=\"tag\"/>Solutions</span>}\n                             key=\"Solutions\">\n                        <Solutions options={this.state}\n                                   handleNewBlock={this.handleNewBlock}/>\n                    </TabPane>\n\n                </Tabs>\n            </Modal>\n        );\n    }\n}\n\n\nexport default NewBlockModal\n","import React, {Component} from 'react';\nimport {Button, Card, Checkbox, Form, Input, Select, Spin} from \"antd\";\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\nclass UserInput extends Component {\n\n    state = {\n        showGoToBlock: false,\n        showGoToGroup: false,\n        groupName: ''\n    };\n\n    onSubmit = () => {\n        return this.props.form.validateFields((err, values) => {\n            if (!err)\n                this.props.handleEditBlock({\n                    type: 'User Input',\n                    groupID: this.props.options.currentGroup.id,\n                    id: this.props.options.block.id,\n                    order: this.props.options.block.order,\n                    isSkippable: values.isSkippable,\n                    labels: '',\n                    storeInDB: values.storeInDB,\n                    content: {\n                        text: values.text,\n                        blockToGoID: values.blockToGoID || values.blockToGoIDGroup || null,\n                        validation: values.validation,\n                        action: values.action,\n                        afterMessage: values.afterMessage,\n                    }\n                })\n        })\n    };\n\n    onCancel = () => this.props.handleEditBlock(false);\n\n    onSelectAction = (action) => {\n        if (action === \"Go To Specific Block\")\n            this.setState({showGoToBlock: true, showGoToGroup: false});\n        else if (action === \"Go To Group\")\n            this.setState({showGoToBlock: false, showGoToGroup: true});\n        else\n            this.setState({showGoToBlock: false, showGoToGroup: false});\n    };\n\n    componentDidMount() {\n        const {block, allGroups} = this.props.options;\n\n        if (block.content.action === \"Go To Specific Block\")\n            this.setState({showGoToBlock: true, showGoToGroup: false});\n        else if (block.content.action === \"Go To Group\") {\n            // because here we dont' have column in each block contains all the group\n            // this is a workaround to have the group name from the block id\n            this.setState({showGoToBlock: false, showGoToGroup: true});\n            const {blockToGoID} = block.content;\n            allGroups.map((group) => group.blocks[0].id === blockToGoID ? this.setState({groupName: group.name}) : null)\n        }\n        else\n            this.setState({showGoToBlock: false, showGoToGroup: false});\n    }\n\n\n    render() {\n        const {block, blockTypes, allBlocks, allGroups} = this.props.options;\n        let blockOptions = {};\n        // extract the correct blockType from blockTypes[]\n        for (const blockType of blockTypes)\n            if (blockType.name === 'User Input')\n                blockOptions = blockType;\n\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Card style={{width: '100%'}}\n                  actions={[\n                      <Button key=\"delete\" type=\"danger\" onClick={() => console.log('needs to be implement')}>\n                          Delete\n                      </Button>,\n                      <Button key=\"cancel\" onClick={() => this.props.handleEditBlock(false)}>Cancel</Button>,\n                      <Button key=\"submit\" type=\"primary\" onClick={this.onSubmit}>\n                          Update\n                      </Button>]}\n            >\n                <Form layout='horizontal'>\n                    <FormItem label=\"Question\"\n                              extra=\"The above text will be shown in a bubble inside the chat\"\n                              {...this.props.options.layout}>\n                        {getFieldDecorator('text', {\n                            initialValue: block.content.text,\n                            rules: [{\n                                required: true,\n                                message: \"Please input question field\",\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Where are you from?\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem label=\"Validation\"\n                              {...this.props.options.layout}>\n                        {\n                            blockOptions.validations ?\n                                getFieldDecorator('validation', {\n                                    initialValue: block.content.validation,\n                                    rules: [{\n                                        required: true,\n                                        message: \"Please field validation\",\n                                    }]\n                                })(\n                                    <Select placeholder=\"Will validate the input\">{\n                                        blockOptions.validations.map((validation, i) =>\n                                            <Option key={i} value={validation}>{validation}</Option>)\n                                    }</Select>\n                                )\n                                : <Spin><Select placeholder=\"Will validate the input\"></Select></Spin>\n                        }\n                    </FormItem>\n\n                    <FormItem label=\"Action\"\n                              {...this.props.options.layout}>\n                        {\n                            blockOptions.actions ?\n                                getFieldDecorator('action', {\n                                    initialValue: block.content.action,\n                                    rules: [{\n                                        required: true,\n                                        message: \"Please input question field\",\n                                    }],\n                                })(\n                                    <Select onSelect={this.onSelectAction}\n                                            placeholder=\"The next step after this block\">{\n                                        blockOptions.actions.map((action, i) =>\n                                            <Option key={i}\n                                                    value={action}>{action}</Option>)\n                                    }</Select>\n                                )\n                                : <Spin><Select placeholder=\"The next step after this block\"></Select></Spin>\n                        }\n                    </FormItem>\n\n                    {this.state.showGoToBlock ?\n                        (<FormItem label=\"Go To Specific Block\" {...this.props.options.layout}>\n                            {\n                                getFieldDecorator('blockToGoID',\n                                    {\n                                        initialValue: block.content.blockToGoID,\n                                        rules: [{required: true, message: \"Please select your next block\"}]\n\n                                    }\n                                )(\n                                    <Select placeholder=\"The next step after this block\">{\n                                        allBlocks.map((block, i) =>\n                                            <Option key={i} value={block.id}>\n                                                {`${block.id}- (${block.type}) ${block.content.text ? block.content.text : ''}`}\n                                            </Option>\n                                        )\n                                    }</Select>\n                                )\n                            }\n                        </FormItem>)\n                        : null\n                    }\n\n                    {this.state.showGoToGroup ?\n                        (<FormItem label=\"Go To Specific Group\"\n                                   extra=\"The selected group will start from its first block\"\n                                   {...this.props.options.layout}>\n                            {\n                                getFieldDecorator('blockToGoIDGroup',\n                                    {\n                                        initialValue: this.state.groupName,\n                                        rules: [{required: true, message: \"Please select your next group\"}]\n                                    }\n                                )(\n                                    <Select placeholder=\"The next block after this block\">{\n                                        allGroups.map((group, i) => {\n                                                if (group.blocks[0])\n                                                    return <Option key={i} value={group.blocks[0].id}>\n                                                        {`${group.name}`}\n                                                    </Option>;\n                                                else\n                                                    return <Option disabled key={i} value={group.name}>\n                                                        {`${group.name}`}\n                                                    </Option>\n                                            }\n                                        )\n                                    }</Select>\n                                )\n                            }\n                        </FormItem>)\n                        : null\n                    }\n\n\n                    <FormItem label=\"After message\"\n                              extra=\"This message will display straight after the user's response\"\n                              {...this.props.options.layout}>\n                        {getFieldDecorator('afterMessage', {\n                            initialValue: block.content.afterMessage,\n                            rules: [{\n                                required: true,\n                                message: \"Please input after message field\",\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Your input is recorded\"/>\n                        )}\n                    </FormItem>\n\n                    <Form.Item\n                        label=\"Skippable?\"\n                        {...this.props.options.layout}>\n                        {getFieldDecorator('isSkippable', {\n                            valuePropName: 'checked',\n                            initialValue: block.isSkippable,\n                        })(\n                            <Checkbox>Users can skip answering this question</Checkbox>\n                        )}\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"Store responses?\"\n                        {...this.props.options.layout}>\n                        {getFieldDecorator('storeInDB', {\n                            valuePropName: 'checked',\n                            initialValue: blockOptions.alwaysStoreInDB,\n                        })(\n                            <Checkbox disabled={blockOptions.alwaysStoreInDB}>\n                                Users' responses should be recorded</Checkbox>\n                        )}\n                    </Form.Item>\n\n                </Form>\n            </Card>\n        );\n    }\n}\n\nexport default Form.create()(UserInput);\n\n","import React, {Component} from 'react';\nimport {Button, Card, Checkbox, Form, Icon, Input, Modal, Select, Spin, Tag, Tooltip} from \"antd\";\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\nclass Question extends Component {\n\n    state = {\n        showGoToBlock: false,\n        showGoToGroup: false,\n        modalVisible: false,\n\n        tags: [],\n        inputVisible: false,\n        inputValue: '',\n        answers: [],\n\n        groupName: ''\n    };\n\n    componentDidMount() {\n        this.setState({answers: this.props.options.block.content.answers});\n\n        const {block, allGroups} = this.props.options;\n\n        if (block.content.action === \"Go To Specific Block\")\n            this.setState({showGoToBlock: true, showGoToGroup: false});\n        else if (block.content.action === \"Go To Group\") {\n            // because here we dont' have column in each block contains all the group\n            // this is a workaround to have the group name from the block id\n            this.setState({showGoToBlock: false, showGoToGroup: true});\n            const {blockToGoID} = block.content;\n            allGroups.map((group) => group.blocks[0].id === blockToGoID ? this.setState({groupName: group.name}) : null)\n        }\n        else\n            this.setState({showGoToBlock: false, showGoToGroup: false});\n    }\n\n    onSelectAction = (action) => {\n        if (action === \"Go To Specific Block\")\n            this.setState({showGoToBlock: true, showGoToGroup: false});\n        else if (action === \"Go To Group\")\n            this.setState({showGoToBlock: false, showGoToGroup: true});\n        else\n            this.setState({showGoToBlock: false, showGoToGroup: false});\n    };\n\n    onSubmit = () => {\n        return this.props.form.validateFields(['text', 'isSkippable', 'storeInDB'], (err, values) => {\n\n            // If from is valid crete the new block following User Input block type format\n            if (!err) {\n                this.props.handleEditBlock({\n                    type: 'Question',\n                    groupID: this.props.options.currentGroup.id,\n                    id: this.props.options.block.id,\n                    order: this.props.options.block.order,\n                    storeInDB: values.storeInDB,\n                    isSkippable: values.isSkippable,\n                    labels: '',\n                    content: {\n                        text: values.text,\n                        answers: this.state.answers\n                    }\n                })\n            }\n        })\n    };\n\n    onCancel = () => this.props.handleNewBlock(false);\n\n\n    addAnswer = () => {\n        this.props.form.validateFields(['answer', 'action', 'blockToGoID', 'blockToGoIDGroup', 'afterMessage'], (err, values) => {\n            if (!err) {\n                const answer = {\n                    text: values.answer,\n                    keywords: this.state.tags,\n                    blockToGoID: values.blockToGoID || values.blockToGoIDGroup || null,\n                    action: values.action,\n                    afterMessage: values.afterMessage\n                };\n                this.setState({tags: []});\n                // I feel there is a bug\n                const answers = this.state.answers;\n                answers.push(answer);\n                this.setState({answers});\n                this.hideAddAnswer();\n                console.log(this.state.answers)\n            }\n        })\n\n    };\n\n    showAddAnswer = () => this.setState({modalVisible: true});\n    hideAddAnswer = () => this.setState({modalVisible: false});\n    removeAnswer = () => {\n        console.log(\"TODO\")\n    };\n\n// Tags component's functions\n    removeTag = (removedTag) => this.setState({tags: this.state.tags.filter(tag => tag !== removedTag)});\n    showInput = () => this.setState({inputVisible: true}, () => this.input.focus());\n    handleInputChange = e => this.setState({inputValue: e.target.value});\n    saveInputRef = input => this.input = input;\n    handleInputConfirm = () => {\n        const inputValue = this.state.inputValue;\n        let tags = this.state.tags;\n        if (inputValue && tags.indexOf(inputValue) === -1)\n            tags = [...tags, inputValue];\n        this.setState({tags, inputVisible: false, inputValue: '',});\n    };\n\n// END Tags component's functions\n\n\n    render() {\n        const {block, blockTypes, allBlocks, allGroups} = this.props.options;\n        let blockOptions = {};\n        // extract the correct blockType from blockTypes[]\n        for (const blockType of blockTypes)\n            if (blockType.name === 'Question')\n                blockOptions = blockType;\n\n        const {getFieldDecorator} = this.props.form;\n\n        const {tags, inputVisible, inputValue} = this.state;\n\n        return (\n            <Card style={{width: '100%'}}\n                  actions={[\n                      <Button key=\"delete\" type=\"danger\" onClick={() => console.log('needs to be implement')}>\n                          Delete\n                      </Button>,\n                      <Button key=\"cancel\" onClick={() => this.props.handleEditBlock(false)}>Cancel</Button>,\n                      <Button key=\"submit\" type=\"primary\" onClick={this.onSubmit}>\n                          Update\n                      </Button>]}\n            >\n                <Form layout='horizontal'>\n                    <FormItem label=\"Question\"\n                              extra=\"The above text will be shown in a bubble inside the chat\"\n                              {...this.props.options.layout}>\n                        {getFieldDecorator('text', {\n                            initialValue: block.content.text,\n                            rules: [{\n                                required: true,\n                                message: \"Please input question field\",\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Where are you from?\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem label=\"Answers\"\n                              {...this.props.options.layout}>\n                        <Button onClick={this.showAddAnswer}\n                                type=\"primary\" icon=\"plus\" shape=\"circle\" size={\"small\"}></Button>\n                        {\n                            this.state.answers.map((answer, i) => (\n                                <Card title={answer.text}\n                                      key={i}\n                                      extra={<Button onClick={this.removeAnswer}\n                                                     type=\"danger\" icon=\"delete\" shape=\"circle\"\n                                                     size={\"small\"}></Button>}\n                                      style={{width: 200, margin: 10}}>\n                                    <p>Action: {answer.action}</p>\n                                    Tags: <br/>\n                                    {answer.keywords.map((keyword, i) => <Tag key={i}>{keyword}</Tag>)}\n\n                                </Card>\n                            ))\n                        }\n                    </FormItem>\n\n                    <Form.Item\n                        label=\"Skippable?\"\n                        {...this.props.options.layout}>\n                        {getFieldDecorator('isSkippable', {\n                            valuePropName: 'checked',\n                            initialValue: block.isSkippable,\n                        })(\n                            <Checkbox>Users can skip answering this question</Checkbox>\n                        )}\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"Store responses?\"\n                        {...this.props.options.layout}>\n                        {getFieldDecorator('storeInDB', {\n                            valuePropName: 'checked',\n                            initialValue: blockOptions.alwaysStoreInDB,\n                        })(\n                            <Checkbox disabled={blockOptions.alwaysStoreInDB}>\n                                Users' responses should be recorded</Checkbox>\n                        )}\n                    </Form.Item>\n\n                </Form>\n\n\n                {/*ADDING ANSWER*/}\n                <Modal\n                    title=\"Add Answer\"\n                    width={700}\n                    destroyOnClose={true}\n                    visible={this.state.modalVisible}\n                    onOk={this.addAnswer}\n                    onCancel={this.hideAddAnswer}>\n\n                    <Form>\n                        <FormItem label=\"Answer\"\n                                  extra=\"This will be shown as answer in chatbot\"\n                                  {...this.props.options.layout}>\n                            {getFieldDecorator('answer', {\n                                rules: [{\n                                    required: true,\n                                    message: \"Please input answer field\",\n                                }],\n                            })(\n                                <Input placeholder=\"Ex: Yes I need it :)\"/>\n                            )}\n                        </FormItem>\n\n                        <FormItem label=\"Tags\" {...this.props.options.layout}>\n                            <div>\n                                {tags.map((tag) => {\n                                    const isLongTag = tag.length > 20;\n                                    const tagElem = (\n                                        <Tag key={tag} closable={true} afterClose={() => this.removeTag(tag)}>\n                                            {isLongTag ? `${tag.slice(0, 20)}...` : tag}\n                                        </Tag>\n                                    );\n                                    return isLongTag ? <Tooltip title={tag} key={tag}>{tagElem}</Tooltip> : tagElem;\n                                })}\n                                {inputVisible && (\n                                    <Input\n                                        ref={this.saveInputRef}\n                                        type=\"text\"\n                                        size=\"small\"\n                                        style={{width: 78}}\n                                        value={inputValue}\n                                        onChange={this.handleInputChange}\n                                        onBlur={this.handleInputConfirm}\n                                        onPressEnter={this.handleInputConfirm}\n                                    />\n                                )}\n                                {!inputVisible && (\n                                    <Tag\n                                        onClick={this.showInput}\n                                        style={{background: '#fff', borderStyle: 'dashed'}}>\n                                        <Icon type=\"plus\"/> New Tag\n                                    </Tag>\n                                )}\n                            </div>\n                        </FormItem>\n\n                        <FormItem label=\"Action\"{...this.props.options.layout}>{\n                            blockOptions.actions ?\n                                getFieldDecorator('action', {\n                                    rules: [{\n                                        required: true,\n                                        message: \"Please input action field\",\n                                    }],\n                                })(\n                                    <Select onSelect={this.onSelectAction}\n                                            placeholder=\"The next step after this block\">{\n                                        blockOptions.actions.map((action, i) =>\n                                            <Option key={i}\n                                                    value={action}>{action}</Option>)\n                                    }</Select>\n                                )\n                                : <Spin><Select placeholder=\"The next step after this block\"></Select></Spin>\n                        }</FormItem>\n\n                        {this.state.showGoToBlock ?\n                            (<FormItem label=\"Go To Specific Block\" {...this.props.options.layout}>\n                                {\n                                    getFieldDecorator('blockToGoID',\n                                        {\n                                            rules: [{required: true, message: \"Please select your next block\"}],\n                                        }\n                                    )(\n                                        <Select placeholder=\"The next step after this block\">{\n                                            allBlocks.map((block, i) =>\n                                                <Option key={i} value={block.id}>\n                                                    {`${block.id}- (${block.type}) ${block.content.text ? block.content.text : ''}`}\n                                                </Option>\n                                            )\n                                        }</Select>\n                                    )\n                                }\n                            </FormItem>)\n                            : null\n                        }\n\n                        {this.state.showGoToGroup ?\n                            (<FormItem label=\"Go To Specific Group\"\n                                       extra=\"The selected group will start from its first block\"\n                                       {...this.props.options.layout}>\n                                {\n                                    getFieldDecorator('blockToGoIDGroup',\n                                        {\n                                            rules: [{required: true, message: \"Please select your next group\"}]\n                                        }\n                                    )(\n                                        <Select placeholder=\"The next block after this block\">{\n                                            allGroups.map((group, i) => {\n                                                    if (group.blocks[0])\n                                                        return <Option key={i} value={group.blocks[0].id}>\n                                                            {`${group.name}`}\n                                                        </Option>;\n                                                    else\n                                                        return <Option disabled key={i} value={group.name}>\n                                                            {`${group.name}`}\n                                                        </Option>\n                                                }\n                                            )\n                                        }</Select>\n                                    )\n                                }\n                            </FormItem>)\n                            : null\n                        }\n\n                        <FormItem label=\"After message\"\n                                  extra=\"This message will display straight after the user's response\"\n                                  {...this.props.options.layout}>\n                            {getFieldDecorator('afterMessage', {\n                                rules: [{\n                                    required: true,\n                                    message: \"Please input after message field\",\n                                }],\n                            })(\n                                <Input placeholder=\"Ex: Your input is recorded\"/>\n                            )}\n                        </FormItem>\n                    </Form>\n\n                </Modal>\n            </Card>\n        );\n    }\n\n}\n\n\nexport default Form.create()(Question);\n\n","import React, {Component} from 'react';\nimport {Button, Card, Checkbox, Form, Input, Select, Spin} from \"antd\";\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\nconst CheckboxGroup = Checkbox.Group;\n\nclass FileUpload extends Component {\n\n    state = {\n        showGoToBlock: false,\n        showGoToGroup: false,\n        fileTypes: [],\n        groupName: ''\n    };\n\n    onSubmit = () => {\n        return this.props.form.validateFields((err, values) => {\n            if (!err) {\n                this.props.handleEditBlock({\n                    type: 'File Upload',\n                    groupID: this.props.options.currentGroup.id,\n                    id: this.props.options.block.id,\n                    order: this.props.options.block.order,\n                    storeInDB: values.storeInDB,\n                    isSkippable: values.isSkippable,\n                    labels: '',\n                    content: {\n                        text: values.text,\n                        action: values.action,\n                        fileTypes: this.state.fileTypes,\n                        blockToGoID: values.blockToGoID || values.blockToGoIDGroup || null,\n                        afterMessage: values.afterMessage\n                    }\n                })\n            }\n        })\n    };\n\n    onCancel = () => this.props.handleEditBlock(false);\n\n    onSelectAction = (action) => {\n        if (action === \"Go To Specific Block\")\n            this.setState({showGoToBlock: true, showGoToGroup: false});\n        else if (action === \"Go To Group\")\n            this.setState({showGoToBlock: false, showGoToGroup: true});\n        else\n            this.setState({showGoToBlock: false, showGoToGroup: false});\n    };\n\n    componentDidMount() {\n        const {block, allGroups} = this.props.options;\n\n        if (block.content.action === \"Go To Specific Block\")\n            this.setState({showGoToBlock: true, showGoToGroup: false});\n        else if (block.content.action === \"Go To Group\") {\n            // because here we dont' have column in each block contains all the group\n            // this is a workaround to have the group name from the block id\n            this.setState({showGoToBlock: false, showGoToGroup: true});\n            const {blockToGoID} = block.content;\n            allGroups.map((group) => group.blocks[0].id === blockToGoID ? this.setState({groupName: group.name}) : null)\n        }\n        else\n            this.setState({showGoToBlock: false, showGoToGroup: false});\n    }\n\n    onChange = (checkedValues) => this.setState({fileTypes: checkedValues});\n\n    render() {\n        const {block, blockTypes, allBlocks, allGroups} = this.props.options;\n        let blockOptions = {};\n        // extract the correct blockType from blockTypes[]\n\n        for (const blockType of blockTypes)\n            if (blockType.name === \"File Upload\")\n                blockOptions = blockType;\n        const {getFieldDecorator} = this.props.form;\n\n        const typesAllowed = blockOptions.typesAllowed;\n        return (\n            <Card style={{width: '100%'}}\n                  actions={[\n                      <Button key=\"delete\" type=\"danger\" onClick={() => console.log('needs to be implement')}>\n                          Delete\n                      </Button>,\n                      <Button key=\"cancel\" onClick={() => this.props.handleEditBlock(false)}>Cancel</Button>,\n                      <Button key=\"submit\" type=\"primary\" onClick={this.onSubmit}>\n                          Update\n                      </Button>]}\n            >\n                <Form layout='horizontal'>\n                    <FormItem label=\"Question\"\n                              extra=\"The above text will be shown in a bubble inside the chat\"\n                              {...this.props.options.layout}>\n                        {getFieldDecorator('text', {\n                            initialValue: block.content.text,\n                            rules: [{\n                                required: true,\n                                message: \"Please input question field\",\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Please upload you cv\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem label=\"File Types\"\n                              {...this.props.options.layout}>\n                        {\n                            blockOptions.typesAllowed ?\n                                getFieldDecorator('fileTypes', {\n                                    initialValue: block.content.fileTypes,\n                                    rules: [{\n                                        required: true,\n                                        message: \"Please select the accepted file type\",\n                                    }]\n                                })(\n                                    <CheckboxGroup options={typesAllowed} onChange={this.onChange}/>\n                                )\n                                : <Spin/>\n                        }\n                    </FormItem>\n\n                    <FormItem label=\"Action\"{...this.props.options.layout}>\n                        {\n                            blockOptions.actions ?\n                                getFieldDecorator('action', {\n                                    initialValue: block.content.action,\n                                    rules: [{\n                                        required: true,\n                                        message: \"Please input question field\",\n                                    }],\n                                })(\n                                    <Select onSelect={this.onSelectAction}\n                                            placeholder=\"The next step after this block\">{\n                                        blockOptions.actions.map((action, i) =>\n                                            <Option key={i}\n                                                    value={action}>{action}</Option>)\n                                    }</Select>\n                                )\n                                : <Spin><Select placeholder=\"The next step after this block\"></Select></Spin>\n                        }\n                    </FormItem>\n\n                    {this.state.showGoToBlock ?\n                        (<FormItem label=\"Go To Specific Block\" {...this.props.options.layout}>\n                            {\n                                getFieldDecorator('blockToGoID',\n                                    {\n                                        initialValue: block.content.blockToGoID,\n                                        rules: [{required: true, message: \"Please select your next block\"}]\n\n                                    }\n                                )(\n                                    <Select placeholder=\"The next step after this block\">{\n                                        allBlocks.map((block, i) =>\n                                            <Option key={i} value={block.id}>\n                                                {`${block.id}- (${block.type}) ${block.content.text ? block.content.text : ''}`}\n                                            </Option>\n                                        )\n                                    }</Select>\n                                )\n                            }\n                        </FormItem>)\n                        : null\n                    }\n\n                    {this.state.showGoToGroup ?\n                        (<FormItem label=\"Go To Specific Group\"\n                                   extra=\"The selected group will start from its first block\"\n                                   {...this.props.options.layout}>\n                            {\n                                getFieldDecorator('blockToGoIDGroup',\n                                    {\n                                        initialValue: this.state.groupName,\n                                        rules: [{required: true, message: \"Please select your next group\"}]\n                                    }\n                                )(\n                                    <Select placeholder=\"The next block after this block\">{\n                                        allGroups.map((group, i) => {\n                                                if (group.blocks[0])\n                                                    return <Option key={i} value={group.blocks[0].id}>\n                                                        {`${group.name}`}\n                                                    </Option>;\n                                                else\n                                                    return <Option disabled key={i} value={group.name}>\n                                                        {`${group.name}`}\n                                                    </Option>\n                                            }\n                                        )\n                                    }</Select>\n                                )\n                            }\n                        </FormItem>)\n                        : null\n                    }\n\n                    <FormItem label=\"After message\"\n                              extra=\"This message will display straight after the user's response\"\n                              {...this.props.options.layout}>\n                        {getFieldDecorator('afterMessage', {\n                            initialValue: block.content.afterMessage,\n                            rules: [{\n                                required: true,\n                                message: \"Please input after message field\",\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Your input is recorded\"/>\n                        )}\n                    </FormItem>\n\n                    <Form.Item\n                        label=\"Skippable?\"\n                        {...this.props.options.layout}>\n                        {getFieldDecorator('isSkippable', {\n                            valuePropName: 'checked',\n                            initialValue: block.isSkippable,\n                        })(\n                            <Checkbox>Users can skip answering this question</Checkbox>\n                        )}\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"Store responses?\"\n                        {...this.props.options.layout}>\n                        {getFieldDecorator('storeInDB', {\n                            valuePropName: 'checked',\n                            initialValue: blockOptions.alwaysStoreInDB,\n                        })(\n                            <Checkbox disabled={blockOptions.alwaysStoreInDB}>\n                                Users' responses should be recorded</Checkbox>\n                        )}\n                    </Form.Item>\n\n                </Form>\n            </Card>\n        );\n    }\n}\n\nexport default Form.create()(FileUpload);\n\n","import React, {Component} from 'react';\nimport {Button, Card, Checkbox, Form, Input, Select, Spin} from \"antd\";\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\nclass Solutions extends Component {\n\n    state = {\n        showGoToBlock: false,\n        showGoToGroup: false,\n        groupName: ''\n    };\n\n    onSubmit = () => {\n        return this.props.form.validateFields((err, values) => {\n            // If from is valid crete the new block following User Input block type format\n            if (!err) {\n                this.props.handleEditBlock({\n                    type: 'Solutions',\n                    groupID: this.props.options.currentGroup.id,\n                    id: this.props.options.block.id,\n                    order: this.props.options.block.order,\n                    storeInDB: values.storeInDB,\n                    isSkippable: values.isSkippable,\n                    labels: '',\n                    content: {\n                        showTop: Number(values.showTop),\n                        action: values.action,\n                        blockToGoID: values.blockToGoID || values.blockToGoIDGroup || null,\n                        afterMessage: values.afterMessage,\n                    }\n                })\n            }\n        })\n    };\n\n    onCancel = () => this.props.handleEditBlock(false);\n\n    onSelectAction = (action) => {\n        if (action === \"Go To Specific Block\")\n            this.setState({showGoToBlock: true, showGoToGroup: false});\n        else if (action === \"Go To Group\")\n            this.setState({showGoToBlock: false, showGoToGroup: true});\n        else\n            this.setState({showGoToBlock: false, showGoToGroup: false});\n    };\n\n    componentDidMount() {\n        const {block, allGroups} = this.props.options;\n\n        if (block.content.action === \"Go To Specific Block\")\n            this.setState({showGoToBlock: true, showGoToGroup: false});\n        else if (block.content.action === \"Go To Group\") {\n            // because here we dont' have column in each block contains all the group\n            // this is a workaround to have the group name from the block id\n            this.setState({showGoToBlock: false, showGoToGroup: true});\n            const {blockToGoID} = block.content;\n            allGroups.map((group) => group.blocks[0].id === blockToGoID ? this.setState({groupName: group.name}) : null)\n        }\n        else\n            this.setState({showGoToBlock: false, showGoToGroup: false});\n    };\n\n    render() {\n        const {block, blockTypes, allBlocks, allGroups} = this.props.options;\n        let blockOptions = {};\n        // extract the correct blockType from blockTypes[]\n        for (const blockType of blockTypes)\n            if (blockType.name === 'User Input')\n                blockOptions = blockType;\n\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Card style={{width: '100%'}}\n                  actions={[\n                      <Button key=\"delete\" type=\"danger\" onClick={() => console.log('needs to be implement')}>\n                          Delete\n                      </Button>,\n                      <Button key=\"cancel\" onClick={() => this.props.handleEditBlock(false)}>Cancel</Button>,\n                      <Button key=\"submit\" type=\"primary\" onClick={this.onSubmit}>\n                          Update\n                      </Button>]}\n            >\n                <Form layout='horizontal'>\n                    <FormItem label=\"Show Top Results\"\n                              extra=\"Number of results you want to return\"\n                              {...this.props.options.layout}>\n                        {getFieldDecorator('showTop', {\n                            initialValue: block.content.showTop,\n                            rules: [{\n                                required: true,\n                                message: \"Please show top field\",\n                            }],\n                        })(\n                            <Input min=\"1\" type=\"number\" placeholder=\"Ex: Where are you from?\"/>\n                        )}\n                    </FormItem>\n\n\n                    <FormItem label=\"Action\"\n                              {...this.props.options.layout}>\n                        {\n                            blockOptions.actions ?\n                                getFieldDecorator('action', {\n                                    initialValue: block.content.action,\n                                    rules: [{\n                                        required: true,\n                                        message: \"Please input question field\",\n                                    }],\n                                })(\n                                    <Select onSelect={this.onSelectAction}\n                                            placeholder=\"The next step after this block\">{\n                                        blockOptions.actions.map((action, i) =>\n                                            <Option key={i}\n                                                    value={action}>{action}</Option>)\n                                    }</Select>\n                                )\n                                : <Spin><Select placeholder=\"The next step after this block\"></Select></Spin>\n                        }\n                    </FormItem>\n\n                    {this.state.showGoToBlock ?\n                        (<FormItem label=\"Go To Specific Block\" {...this.props.options.layout}>\n                            {\n                                getFieldDecorator('blockToGoID',\n                                    {\n                                        initialValue: block.content.blockToGoID,\n                                        rules: [{required: true, message: \"Please select your next block\"}]\n\n                                    }\n                                )(\n                                    <Select placeholder=\"The next step after this block\">{\n                                        allBlocks.map((block, i) =>\n                                            <Option key={i} value={block.id}>\n                                                {`${block.id}- (${block.type}) ${block.content.text ? block.content.text : ''}`}\n                                            </Option>\n                                        )\n                                    }</Select>\n                                )\n                            }\n                        </FormItem>)\n                        : null\n                    }\n\n                    {this.state.showGoToGroup ?\n                        (<FormItem label=\"Go To Specific Group\"\n                                   extra=\"The selected group will start from its first block\"\n                                   {...this.props.options.layout}>\n                            {\n                                getFieldDecorator('blockToGoIDGroup',\n                                    {\n                                        initialValue: this.state.groupName,\n                                        rules: [{required: true, message: \"Please select your next group\"}]\n                                    }\n                                )(\n                                    <Select placeholder=\"The next block after this block\">{\n                                        allGroups.map((group, i) => {\n                                                if (group.blocks[0])\n                                                    return <Option key={i} value={group.blocks[0].id}>\n                                                        {`${group.name}`}\n                                                    </Option>;\n                                                else\n                                                    return <Option disabled key={i} value={group.name}>\n                                                        {`${group.name}`}\n                                                    </Option>\n                                            }\n                                        )\n                                    }</Select>\n                                )\n                            }\n                        </FormItem>)\n                        : null\n                    }\n\n\n                    <FormItem label=\"After message\"\n                              extra=\"This message will display straight after the user's response\"\n                              {...this.props.options.layout}>\n                        {getFieldDecorator('afterMessage', {\n                            initialValue: block.content.afterMessage,\n                            rules: [{\n                                required: true,\n                                message: \"Please input after message field\",\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Your input is recorded\"/>\n                        )}\n                    </FormItem>\n\n                    <Form.Item\n                        label=\"Skippable?\"\n                        {...this.props.options.layout}>\n                        {getFieldDecorator('isSkippable', {\n                            valuePropName: 'checked',\n                            initialValue: block.isSkippable,\n                        })(\n                            <Checkbox>Users can skip answering this question</Checkbox>\n                        )}\n                    </Form.Item>\n\n                    <Form.Item\n                        label=\"Store responses?\"\n                        {...this.props.options.layout}>\n                        {getFieldDecorator('storeInDB', {\n                            valuePropName: 'checked',\n                            initialValue: blockOptions.alwaysStoreInDB,\n                        })(\n                            <Checkbox disabled={blockOptions.alwaysStoreInDB}>\n                                Users' responses should be recorded</Checkbox>\n                        )}\n                    </Form.Item>\n                </Form>\n            </Card>\n        );\n    }\n}\n\nexport default Form.create()(Solutions);\n\n","import React, {Component} from 'react';\n\nimport {http} from \"../../../../../../../helpers\";\n\nimport {Modal} from 'antd';\nimport UserInput from \"./Cards/UserInput\";\nimport Question from \"./Cards/Question\";\nimport FileUpload from \"./Cards/FileUpload\";\nimport Solutions from \"./Cards/Solutions\";\n\nclass EditBlockModal extends Component {\n\n    state = {\n        layout: {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14}\n        },\n        blockTypes: [],\n        allBlocks: [],\n        allGroups: [],\n        currentGroup: null\n    };\n\n    componentDidMount() {\n        http.get(`/assistant/flow/options`)\n            .then(res => this.setState({blockTypes: res.data.data.blockTypes}))\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            block: nextProps.block,\n\n            allBlocks: nextProps.blocks,\n            allGroups: nextProps.allGroups,\n            currentGroup: nextProps.currentGroup\n        })\n    }\n\n    handleEditBlock = (edittedBlock) => {\n        if (edittedBlock)\n            this.props.handleEditBlock(edittedBlock);\n        this.props.closeModal();\n    };\n\n    render() {\n        return (\n            <Modal width={800}\n                   title=\"Edit Block\"\n                   visible={this.props.visible}\n                   onCancel={this.props.closeModal}\n                   destroyOnClose={true}\n                   footer={null}>\n\n                {this.props.block.type === \"User Input\" ?\n                    <UserInput options={this.state} handleEditBlock={this.handleEditBlock}/> : null}\n                {this.props.block.type === \"Question\" ?\n                    <Question options={this.state} handleEditBlock={this.handleEditBlock}/> : null}\n                {this.props.block.type === \"File Upload\" ?\n                    <FileUpload options={this.state} handleEditBlock={this.handleEditBlock}/> : null}\n                {this.props.block.type === \"Solutions\" ?\n                    <Solutions options={this.state} handleEditBlock={this.handleEditBlock}/> : null}\n            </Modal>\n        );\n    }\n}\n\n\nexport default EditBlockModal\n","import React, {Component} from 'react';\n\nimport \"./Blocks.less\"\nimport styles from \"./Blocks.module.less\";\nimport {Button, Form, Modal} from \"antd\";\n\nimport Block from \"./Block/Block\";\nimport {DragDropContext, Draggable, Droppable} from 'react-beautiful-dnd';\nimport NewBlockModal from \"./NewBlockModal/NewBlockModal\";\nimport EditBlockModal from \"./EditBlockModal/EditBlockModal1\";\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n\nconst getItemStyle = draggableStyle => ({margin: `0 0 8px 0`, ...draggableStyle});\nconst confirm = Modal.confirm;\n\nclass Blocks extends Component {\n\n    state = {\n        addBlockVisible: false,\n        editBlockVisible: false,\n        deleteBlockVisible: false,\n        blocks: [],\n        edittedBlock: {},\n        deletedBlock: {content: {}}\n    };\n\n    constructor(props) {\n        super(props);\n        this.onDragEnd = this.onDragEnd.bind(this);\n    }\n\n    onDragEnd(result) {\n        // dropped outside the list\n        if (!result.destination) return;\n\n        let blocks = reorder(this.state.blocks, result.source.index, result.destination.index);\n        for (const i in blocks) blocks[i].order = Number(i) + 1;\n        this.setState({blocks});\n        // send a request to the server\n        this.props.reorderBlocks(blocks, this.props.currentGroup.id)\n    }\n\n    componentWillReceiveProps(nextProps) {\n        // This handles when updating the selected group to show its blocks\n        if (nextProps.currentGroup !== this.state.currentGroup && nextProps.currentGroup.blocks)\n            this.setState({blocks: nextProps.currentGroup.blocks})\n    }\n\n\n    ///////////////////////////////////////////////////\n\n    // ADD BLOCK MODAL CONFIGS\n    showAddBlockModal = () => this.setState({addBlockVisible: true});\n    closeAddBlockModal = () => this.setState({addBlockVisible: false});\n    handleAddBlock = (newBlock) => this.props.addBlock(newBlock, this.props.currentGroup.id);\n\n\n    // EDIT BLOCK MODAL CONFIGS\n    // this called from block.js when you click on edit block button\n    editBlock = (edittedBlock) => this.setState({edittedBlock, editBlockVisible: true});\n    closeEditBlockModal = () => this.setState({edittedBlock: {}, editBlockVisible: false});\n    handleEditBlock = (edittedBlock) => this.props.editBlock(edittedBlock, this.props.currentGroup.id);\n\n    // DELETE BLOCK MODAL CONFIGS\n    // this called from block.js when you click on delete block button\n    deleteBlock = (deletedBlock) => confirm({\n        title: `Delete block with type: ${deletedBlock.type}`,\n        content: `You can't get back to the deleted block after click ok`,\n        onOk: () => this.handleDeleteBlock(deletedBlock)\n    });\n    handleDeleteBlock = (deletedBlock) => {\n        this.props.deleteBlock(deletedBlock, this.props.currentGroup.id);\n\n        // Remove the deletedBlock\n        let blocks = this.state.blocks.filter((block) => block.id !== deletedBlock.id);\n        // Update order\n        for (const i in blocks) blocks[i].order = Number(i) + 1;\n        this.setState({blocks});\n        // send a request to the server\n        this.props.reorderBlocks(blocks, this.props.currentGroup.id)\n    };\n\n\n\n    render() {\n        return (\n            <div className={styles.Panel}>\n                <div className={styles.Panel_Header}>\n                    <div>\n                        <h3>{this.props.currentGroup.name} Blocks</h3>\n                    </div>\n                    <div>\n                        <Button className={styles.Panel_Header_Button} type=\"primary\" icon=\"plus\"\n                                onClick={this.showAddBlockModal} disabled={!this.props.currentGroup.id}>\n                            Add Block\n                        </Button>\n                    </div>\n                </div>\n\n                <div className={styles.Panel_Body}>\n                    <div style={{height: \"100%\", width: '100%', overflowY: 'auto'}}>\n\n                        <DragDropContext onDragEnd={this.onDragEnd}>\n                            <Droppable droppableId=\"droppable\">\n                                {(provided) => (\n                                    <div ref={provided.innerRef}>\n                                        {this.state.blocks.map((block, index) => (\n                                            <Draggable key={block.id} draggableId={block.order} index={index}>\n                                                {(provided) => (\n                                                    <div ref={provided.innerRef} {...provided.draggableProps}\n                                                         {...provided.dragHandleProps}\n                                                         style={getItemStyle(provided.draggableProps.style)}>\n                                                        <Block block={block}\n                                                               editBlock={this.editBlock}\n                                                               deleteBlock={this.deleteBlock}\n                                                        />\n                                                    </div>\n                                                )}\n                                            </Draggable>\n                                        ))}\n                                        {provided.placeholder}\n                                    </div>\n                                )}\n                            </Droppable>\n                        </DragDropContext>\n                    </div>\n                </div>\n\n                <NewBlockModal visible={this.state.addBlockVisible}\n                               handleAddBlock={this.handleAddBlock}\n                               closeModal={this.closeAddBlockModal}\n\n                               blocks={this.state.blocks}\n                               currentGroup={this.props.currentGroup}\n                               allGroups={this.props.allGroups}/>\n\n                <EditBlockModal visible={this.state.editBlockVisible}\n                                handleEditBlock={this.handleEditBlock}\n                                closeModal={this.closeEditBlockModal}\n\n                                block={this.state.edittedBlock}\n                                blocks={this.state.blocks}\n                                currentGroup={this.props.currentGroup}\n                                allGroups={this.props.allGroups}/>\n            </div>\n        );\n    }\n}\n\nexport default Form.create()(Blocks);\n","import React, {Component} from 'react';\n\nimport styles from \"./Header.module.less\";\nimport {Button} from \"antd\";\nimport PropTypes from 'prop-types';\n\n\nclass Header extends Component {\n    static contextTypes = {\n        router: PropTypes.object\n    };\n\n    render() {\n\n        return (\n            <div style={{height: 56, marginBottom: 10}}>\n                <div className={styles.Panel}>\n                    <div className={styles.Panel_Header}>\n                        <div style={{display: '-webkit-inline-box'}}>\n                            <Button onClick={this.context.router.history.goBack}\n                                    type=\"primary\" icon=\"left\" shape=\"circle\" size={\"small\"}></Button>\n                            <h3>{this.props.assistantName || this.props.display}</h3>\n                        </div>\n\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Header;\n","import React, {Component} from 'react';\nimport \"./Flow.less\"\n\nimport Groups from \"./Groups/Groups\";\nimport Blocks from \"./Blocks/Blocks\";\nimport Header from \"../../../../../components/Header/Header\";\nimport {flowActions} from \"../../../../../store/actions\";\nimport connect from \"react-redux/es/connect/connect\";\nimport styles from \"./Flow.module.less\"\nclass Flow extends Component {\n\n    state = {\n        currentGroup: {blocks: []}\n    };\n\n    componentDidMount() {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(flowActions.fetchFlowRequest(assistant.ID))\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.blockGroups !== this.props.blockGroups)\n            nextProps.blockGroups.map((group) => {\n                if (group.id === this.state.currentGroup.id)\n                    this.setState({currentGroup: group})\n            })\n    }\n\n    selectGroup = (currentGroup) => this.setState({currentGroup});\n\n\n    // GROUPS\n    addGroup = (newGroup) => {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(flowActions.addGroupRequest({ID: assistant.ID, newGroup: newGroup}));\n    };\n\n    editGroup = (editedGroup) => {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(flowActions.editGroupRequest({ID: assistant.ID, editedGroup: editedGroup}));\n    };\n\n    deleteGroup = (deletedGroup) => {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(flowActions.deleteGroupRequest({assistantID: assistant.ID, deletedGroup: deletedGroup}));\n    };\n\n\n    // BLOCKS\n    addBlock = (newBlock, groupID) => {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(flowActions.addBlockRequest({newBlock, groupID, assistantID: assistant.ID}));\n    };\n\n    editBlock = (edittedBlock, groupID) => {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(flowActions.editBlockRequest({edittedBlock, groupID, assistantID: assistant.ID}));\n    };\n\n    deleteBlock = (deletedBlock, groupID) => {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(flowActions.deleteBlockRequest({deletedBlock, groupID, assistantID: assistant.ID}));\n    };\n\n    reorderBlocks = (newBlocksOrder, groupID) => {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(flowActions.updateBlocksOrderRequest({newBlocksOrder, groupID, assistantID: assistant.ID}));\n    };\n\n    render() {\n        const {assistant} = this.props.location.state;\n\n        return (\n            <div style={{height: '100%'}}>\n                <Header display={assistant.Name}/>\n\n                <div className={styles.Panel_Body_Only}>\n                    <div style={{margin: '0 5px 0 0', width: '30%'}}>\n                        <Groups selectGroup={this.selectGroup}\n                                isLoading={this.props.isLoading}\n                                groupsList={this.props.blockGroups}\n                                addGroup={this.addGroup}\n                                editGroup={this.editGroup}\n                                deleteGroup={this.deleteGroup}/>\n                    </div>\n                    <div style={{margin: '0 0 0 5px', width: '70%'}}>\n                        <Blocks addBlock={this.addBlock}\n                                editBlock={this.editBlock}\n                                deleteBlock={this.deleteBlock}\n                                reorderBlocks={this.reorderBlocks}\n                                currentGroup={this.state.currentGroup}\n                                allGroups={this.props.blockGroups}/>\n                    </div>\n                </div>\n            </div>\n\n        );\n    }\n\n}\n\nfunction mapStateToProps(state) {\n    return {\n        blockGroups: state.flow.blockGroups,\n        isLoading: state.flow.isLoading,\n\n        addSuccessMsg: state.flow.addSuccessMsg,\n        editSuccessMsg: state.flow.editSuccessMsg,\n        deleteSuccessMsg: state.flow.deleteSuccessMsg,\n\n        isAddingGroup: state.flow.isAddingGroup,\n        isEditingGroup: state.flow.isEditingGroup,\n        isDeletingGroup: state.flow.isDeletingGroup,\n\n        isAddingBlock: state.flow.isAddingBlock,\n\n    };\n}\n\n\nexport default connect(mapStateToProps)(Flow);\n","import React from \"react\";\nimport {Input, Form, message} from \"antd\";\nimport {assistantActions} from \"../../../../../store/actions\";\n\nconst FormItem = Form.Item;\n\nclass ProfileInput extends React.Component {\n\n\n    render(){\n        return (\n        <FormItem\n            label={this.props.title + \":\"}\n            extra={this.props.description}\n            {...this.props.formItemLayout}>\n            {this.props.getFieldDecorator(this.props.name, {\n                rules: [this.props.rules],\n            })(\n                <Input type={this.props.type} checked={this.props.checked} name={this.props.name} onChange={this.props.handleChange} readOnly={this.props.readOnly}/>\n            )}\n        </FormItem>\n        )\n    }\n}\n\nProfileInput.defaultProps = {\n    type:\"text\",\n    checked:false,\n    readOnly:false,\n    rules:{required:false}\n};\n\nexport default ProfileInput;","import React from 'react';\nimport {Form, Button, message, Tabs} from \"antd\";\nimport {connect} from 'react-redux';\n\nimport \"./Profile.less\"\nimport styles from \"./Profile.module.less\"\nimport ProfileInput from \"./profileComponents/ProfileInput/ProfileInput\";\n\nimport {profileActions} from \"../../../store/actions/profile.actions\";\n\nconst loading = () => {\n    message.loading('Updating...', 0);\n};\n\nconst TabPane = Tabs.TabPane;\n\nclass Profile extends React.Component {\n    state = {\n        profile: {\n            name: \"\",\n            email: \"\",\n            companyName: \"\"\n        },\n        newsletters: false,\n        profileSettings: {\n            statNotifications: false,\n            trackData: false,\n            techSupport: false,\n            accountSpecialist: false\n        },\n        password: {\n            old: \"\",\n            new: \"\",\n            repeat: \"\"\n        },\n        formSubmitted: false,\n        dataCalled: false,\n        dataRendered: false,\n        tabIndex: 1\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                if (this.state.isPopupDisabled) {\n                    values.secondsUntilPopup = 0\n                }\n                // send to server\n                this.setState({formSubmitted: true});\n                switch (this.state.tabIndex) {\n                    case 1:\n                        this.props.dispatch(profileActions.saveProfileDetails(values));\n                        break;\n                    case 2:\n                        this.props.dispatch(profileActions.saveDataSettings(values));\n                        break;\n                }\n                //loading();\n            }\n        });\n    };\n\n    handleChange = (e) => {\n        let name = undefined;\n        let value = undefined;\n        if (e.target.type === \"checkbox\") {\n            name = e.target.name;\n            value = e.target.checked;\n        } else {\n            name = e.target.name;\n            value = e.target.value;\n        }\n        if (name.includes(\".\")) {\n            const names = name.split(\".\");\n            if (names.length > 2) {\n                console.log(\"More than 2 '.' depth is not supported\");\n                return null;\n            }\n            const tempState = {...this.state[names[0]]};\n\n            if (!tempState) {\n                return null;\n            }\n\n            tempState[names[1]] = value;\n            this.setState({[names[0]]: tempState});\n        } else {\n            this.setState({[name]: value});\n        }\n        this.props.form.setFieldsValue({\n            [name]: value\n        });\n    };\n\n    updateAllInputsFromState() {\n        const tempState = this.state;\n        this.props.form.setFieldsValue({\n            [\"profile.name\"]: tempState.profile.name,\n            [\"profile.email\"]: tempState.profile.email,\n            [\"profile.companyName\"]: tempState.profile.companyName,\n            [\"newsletters\"]: tempState.newsletters,\n            [\"profileSettings.statNotifications\"]: tempState.profileSettings.statNotifications,\n            [\"profileSettings.trackData\"]: tempState.profileSettings.trackData,\n            [\"profileSettings.techSupport\"]: tempState.profileSettings.techSupport,\n            [\"profileSettings.accountSpecialist\"]: tempState.profileSettings.accountSpecialist\n        });\n        this.setState({dataRendered: true});\n    }\n\n    updateStateFromProps(nextProps) {\n        const data = nextProps.profileData;\n        if(!this.isEmpty(data) && !this.state.dataRendered){\n            if(data.user){\n                this.setState({\n                    profile: {\n                        name: data.user.Firstname + \" \" + data.user.Surname,\n                        email: data.user.Email,\n                        companyName: data.company.Name\n                    }\n                });\n            }\n\n            if(data.newsletters){\n                this.setState({\n                    newsletters: data.newsletters\n                });\n            }\n\n            if(data.userSettings){\n                this.setState({\n                    profileSettings: {\n                        statNotifications: data.userSettings.UserInputNotifications,\n                        trackData: data.userSettings.TrackingData,\n                        techSupport: data.userSettings.TechnicalSupport,\n                        accountSpecialist: data.userSettings.AccountSpecialist\n                    }\n                });\n            }\n            this.setState({dataCalled: true});\n        }\n    }\n\n    isEmpty(obj) {\n        for(var key in obj) {\n            if(obj.hasOwnProperty(key))\n                return false;\n        }\n        return true;\n    }\n\n    componentDidMount() {\n        this.props.dispatch(profileActions.getProfile());\n    }\n\n    componentWillReceiveProps(nextProps){\n        this.updateStateFromProps(nextProps);\n    }\n\n    changeTab = (key) => {\n        this.setState({tabIndex: parseInt(key)});\n    };\n\n    render() {\n        if(this.state.dataCalled && !this.state.dataRendered){\n            this.updateAllInputsFromState();\n        }\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14}\n        };\n        const {getFieldDecorator} = this.props.form;\n\n        const newsletters = this.state.newsletters;\n\n        const {profileSettings} = this.state;\n\n        return (\n            <div style={{height: '100%'}}>\n                <div className={styles.Panel}>\n                    <div className={styles.Panel_Header}>\n                        <div>\n                            <h3>User Profile</h3>\n                            <p>Here you can edit your details and how we handle your data.</p>\n                        </div>\n                    </div>\n\n                    <div className={styles.Panel_Body} style={{overflowY: \"auto\"}}>\n                        <Tabs defaultActiveKey={\"1\"} onChange={this.changeTab}>\n                            <TabPane tab={\"Profile Details\"} key={\"1\"}>\n\n                                <Form onSubmit={this.handleSubmit}>\n                                    <ProfileInput title={\"Name\"} name=\"profile.name\"\n                                                  rules={{\n                                                      required: true,\n                                                      message: \"Please enter your first and last name here\"\n                                                  }}\n                                                  getFieldDecorator={getFieldDecorator} formItemLayout={formItemLayout}\n                                                  handleChange={this.handleChange}\n                                                  form={this.props.form}\n                                                  description={\"Enter your name here\"}\n                                    />\n\n                                    <ProfileInput title={\"Email\"} name=\"profile.email\"\n                                                  rules={{\n                                                      required: true,\n                                                      message: \"Please enter a valid email\"\n                                                  }}\n                                                  getFieldDecorator={getFieldDecorator} formItemLayout={formItemLayout}\n                                                  handleChange={this.handleChange} readOnly={true}\n                                                  form={this.props.form}\n                                                  description={\"Enter your email here (For your security we have temporarily disabled this box until we improve its system\"}\n                                    />\n\n                                    <ProfileInput title={\"Company Name\"} name=\"profile.companyName\"\n                                                  rules={{\n                                                      required: true,\n                                                      message: \"Please enter your company name\"\n                                                  }}\n                                                  getFieldDecorator={getFieldDecorator} formItemLayout={formItemLayout}\n                                                  handleChange={this.handleChange}\n                                                  form={this.props.form}\n                                                  description={\"Enter your company name here\"}\n                                    />\n\n                                    <br/>\n\n                                    <div style={{textAlign: \"center\"}}><Button htmlType={\"submit\"}\n                                                                               className={\"ant-btn-primary\"}>Update</Button>\n                                    </div>\n                                </Form>\n\n                            </TabPane>\n                            <TabPane tab={\"Data Settings\"} key={\"2\"}>\n\n                                <Form onSubmit={this.handleSubmit}>\n                                    <h2>Data Sharing Settings</h2>\n                                    <p>Any data that you collect, process and store on TheSearchBase platform is kept\n                                        secure\n                                        and confidential at all times. The data that you collect is data that enables\n                                        our\n                                        software to work at its optimum level.</p>\n                                    <h4>This part of the website enables you to control what settings you may share with\n                                        us.</h4>\n\n                                    <br/>\n\n                                    <ProfileInput title={\"Newsletters\"} name=\"newsletters\"\n                                                  type={\"checkbox\"} checked={newsletters}\n                                                  getFieldDecorator={getFieldDecorator} formItemLayout={formItemLayout}\n                                                  handleChange={this.handleChange}\n                                                  description={\"We would like to keep you updated with the latest software updates and features available\\n\" +\n                                                  \"                                to you, If you decide to not subscribe you may miss on important features and\\n\" +\n                                                  \"                                announcements.\"}>\n                                    </ProfileInput>\n\n                                    <br/>\n\n                                    <ProfileInput title={\"New Users Counter\"} name=\"profileSettings.statNotifications\"\n                                                  type={\"checkbox\"} checked={profileSettings.statNotifications}\n                                                  getFieldDecorator={getFieldDecorator} formItemLayout={formItemLayout}\n                                                  handleChange={this.handleChange}\n                                                  description={\"If allowed we will send you the number of new user records your assistants have\\n\" +\n                                                  \"                                    stored\\n\" +\n                                                  \"                                    every 12 hours through email.\"}>\n                                    </ProfileInput>\n\n                                    <br/>\n\n                                    <strong>Erasing data</strong>\n                                    <p>If you decide to stop using our platform, we will simply delete\n                                        your information after a year of inactivity.</p>\n\n                                    <br/>\n\n                                    <ProfileInput title={\"Tracking Data\"} name=\"profileSettings.trackData\"\n                                                  type={\"checkbox\"} checked={profileSettings.trackData}\n                                                  getFieldDecorator={getFieldDecorator} formItemLayout={formItemLayout}\n                                                  handleChange={this.handleChange}\n                                                  description={\"We do not in any way track your information for marketing purposes. However we\\n\" +\n                                                  \"                                    would recommend allowing us to contact you if we see that\\n\" +\n                                                  \"                                        there\\n\" +\n                                                  \"                                        are ways we could enhance your bot or use of our software.\"}>\n                                    </ProfileInput>\n\n                                    <br/>\n\n                                    <ProfileInput title={\"Technical Support\"} name=\"profileSettings.techSupport\"\n                                                  type={\"checkbox\"} checked={profileSettings.techSupport}\n                                                  getFieldDecorator={getFieldDecorator} formItemLayout={formItemLayout}\n                                                  handleChange={this.handleChange}\n                                                  description={\"Let our team view your errors and problems in order for us to\\n\" +\n                                                  \"                                    solve your issues.\"}>\n                                    </ProfileInput>\n\n                                    <br/>\n\n                                    <ProfileInput title={\"Account Specialist\"} name=\"profileSettings.accountSpecialist\"\n                                                  type={\"checkbox\"} checked={profileSettings.accountSpecialist}\n                                                  getFieldDecorator={getFieldDecorator} formItemLayout={formItemLayout}\n                                                  handleChange={this.handleChange}\n                                                  description={\"Let our team contact you to help make recommendations as to how you can make\\n\" +\n                                                  \"                                    your bots more successful and ways to collect more valuable data. If you\\n\" +\n                                                  \"                                    don't\\n\" +\n                                                  \"                                    have a sales specialist, we recommend you enable this so we can help you make the\\n\" +\n                                                  \"                                    most\\n\" +\n                                                  \"                                    of our software.\"}>\n                                    </ProfileInput>\n\n                                    <br/>\n\n                                    <div style={{textAlign: \"center\"}}><Button htmlType={\"submit\"}\n                                                                               className={\"ant-btn-primary\"}>Update</Button>\n                                    </div>\n                                </Form>\n                            </TabPane>\n                            {/*<TabPane tab={\"Change Password\"} key={\"3\"}>*/}\n\n                                {/*<Form onSubmit={this.handleSubmit}>*/}\n                                    {/*<ProfileInput title={\"Old Password\"} name=\"password.old\"*/}\n                                                  {/*rules={{*/}\n                                                      {/*required: true,*/}\n                                                      {/*message: \"Please enter your old password\"*/}\n                                                  {/*}}*/}\n                                                  {/*getFieldDecorator={getFieldDecorator} formItemLayout={formItemLayout}*/}\n                                                  {/*handleChange={this.handleChange}*/}\n                                                  {/*form={this.props.form}*/}\n                                                  {/*description={\"Enter your old password here\"}*/}\n                                    {/*/>*/}\n\n                                    {/*<ProfileInput title={\"New Password\"} name=\"password.new\"*/}\n                                                  {/*rules={{*/}\n                                                      {/*required: true,*/}\n                                                      {/*message: \"Please enter your new password\"*/}\n                                                  {/*}}*/}\n                                                  {/*getFieldDecorator={getFieldDecorator} formItemLayout={formItemLayout}*/}\n                                                  {/*handleChange={this.handleChange}*/}\n                                                  {/*form={this.props.form}*/}\n                                                  {/*description={\"Enter your new password here\"}*/}\n                                    {/*/>*/}\n\n                                    {/*<ProfileInput title={\"Repeat Password\"} name=\"password.repeat\"*/}\n                                                  {/*rules={{*/}\n                                                      {/*required: true,*/}\n                                                      {/*message: \"Passwords must match\"*/}\n                                                  {/*}}*/}\n                                                  {/*getFieldDecorator={getFieldDecorator} formItemLayout={formItemLayout}*/}\n                                                  {/*handleChange={this.handleChange}*/}\n                                                  {/*form={this.props.form}*/}\n                                                  {/*description={\"Enter your new password again here\"}*/}\n                                    {/*/>*/}\n\n                                    {/*<br/>*/}\n\n                                    {/*<div style={{textAlign: \"center\"}}><Button htmlType={\"submit\"}*/}\n                                                                               {/*className={\"ant-btn-primary\"}>Update</Button>*/}\n                                    {/*</div>*/}\n                                {/*</Form>*/}\n                            {/*</TabPane>*/}\n                        </Tabs>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        profileData: state.profile.profile\n    };\n}\n\nexport default connect(mapStateToProps)(Form.create()(Profile));\n","import React from 'react';\n\nimport {Button, Col, Input, Row} from \"antd\";\nimport Header from \"../../../../../components/Header/Header\"\n\nimport styles from \"./Integration.module.less\"\nimport ReactDOMServer from 'react-dom/server'\nimport {hasher} from \"../../../../../helpers\"\nimport {SwatchesPicker} from 'react-color';\n\nimport \"./Integration.less\"\n\nclass Integration extends React.Component {\n\n    state = {\n        source: \"\",\n        dataName: \"tsb-widget\",\n        dataID: \"assistantid\",\n        // dataIcon: \"#ffffff\",\n        dataCircle: \"#9254de\",\n        async: true,\n        defer: true\n    };\n\n    componentDidMount() {\n        this.setState({\n            dataID: hasher.encode(this.props.match.params.id),\n            source: this.getWidgetSrc()\n        });\n    }\n\n    componentWillUnmount(){\n        this.removeChatbot();\n    }\n\n    handleChange = (color) => this.setState({dataCircle: color.hex || color.target.value});\n\n    removeChatbot = () => {\n        let oldBot = document.getElementById(\"TheSearchBase_Chatbot\");\n        if (oldBot) oldBot.remove();\n        let oldBotScript = document.getElementById(\"oldBotScript\");\n        if (oldBotScript) oldBotScript.remove();\n    };\n\n    copyScriptPaste = () => {\n        const pasteArea = document.getElementById(\"pasteArea\");\n        pasteArea.select();\n        document.execCommand(\"copy\");\n    };\n\n    testIntegration = () => {\n        this.removeChatbot();\n        const script = document.createElement(\"script\");\n\n        script.src = this.state.source;\n        script.async = this.state.async;\n        script.defer = this.state.defer;\n        script.setAttribute(\"data-name\", this.state.dataName);\n        script.setAttribute(\"data-id\", this.state.dataID);\n        // script.setAttribute(\"data-icon\", this.state.dataIcon);\n        script.setAttribute(\"data-circle\", this.state.dataCircle);\n        script.setAttribute(\"id\", \"oldBotScript\");\n\n        document.body.appendChild(script);\n    };\n\n    getWidgetSrc = () => {\n        // include the colon if there is port number, which means localhost and not real server\n        let colon = \"\";\n        if (window.location.port !== \"\") {colon = \":\";}\n        const {protocol, port, hostname} = window.location;\n        return protocol + '//' + hostname + colon + port + \"/userdownloads/widget.js\";\n    };\n\n    getChatbotScript = () => {\n        return <script src={this.getWidgetSrc()}\n                       data-name={this.state.dataName}\n                       data-id={this.state.dataID}\n                       // data-icon={this.state.dataIcon}\n                       data-circle={this.state.dataCircle}\n                       async={this.state.async}\n                       defer={this.state.defer}/>\n    };\n\n    render() {\n        return (\n            <div style={{height: '100%'}}>\n                <Header display={`Integration`}/>\n\n                <div className={styles.Panel_Body_Only}>\n                    <div style={{marginRight: 5, width: '45%'}} className={styles.Panel}>\n\n                        <div className={styles.Panel_Header} style={{position: \"inherit\"}}>\n                            <h3>Choosing your Assistant's looks</h3>\n                        </div>\n\n                        <div className={styles.Panel_Body}>\n                            <Row type=\"flex\" justify=\"center\">\n                                <Col>\n                                    <p> Currently you can edit the colour setting of your assistant's button.\n                                        Simply pick your preferred one bellow.</p>\n                                </Col>\n                            </Row>\n\n                            <br/>\n\n                            <Row type=\"flex\" justify=\"center\" style={{marginBottom: 50}}>\n                                <Col>\n                                    <SwatchesPicker color={this.state.dataCircle} onChange={this.handleChange}/>\n                                </Col>\n                            </Row>\n\n                            <Row type=\"flex\" justify=\"center\">\n                                <Col>\n                                    <p style={{lineHeight: '27px', marginRight: 5}}>Selected Color:</p>\n                                </Col>\n                                <Col>\n                                    <Input style={{padding: \"3px\", width: \"60px\"}} type=\"color\" name=\"dataCircle\"\n                                           value={this.state.dataCircle} onChange={this.handleChange}/>\n                                </Col>\n\n                            </Row>\n                        </div>\n                    </div>\n\n\n                    <div style={{marginLeft: 5, width: '55%'}} className={styles.Panel}>\n\n                        <div className={styles.Panel_Header} style={{position: \"inherit\"}}>\n                            <h3>Connecting your assistant</h3>\n                        </div>\n\n                        <div className={styles.Panel_Body}>\n                            <p>\n                                To integrate your assistant, you must paste the pre-made code into any part of your\n                                HTML\n                                source code.\n                            </p>\n\n                            <textarea value={ReactDOMServer.renderToString(this.getChatbotScript())} id={\"pasteArea\"}\n                                      style={{width: \"94%\", height: \"110px\", fontWeight: \"600\", margin: \"1.5% 0\"}}\n                                      readOnly/>\n                            <Button onClick={this.copyScriptPaste} className={\"ant-btn-primary\"}>Copy</Button>\n                            <Button style={{marginLeft: \"5px\"}} onClick={this.testIntegration}\n                                    className={\"ant-btn-primary\"}>Test</Button>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default (Integration);","import React, {Component} from 'react';\nimport \"./ViewModal.less\"\nimport {Button, Modal, Table} from \"antd\";\nimport {http, alertError} from '../../../../../../helpers';\nimport saveAs from 'file-saver';\n\n\nclass ViewModal extends Component {\n\n    state = {\n        fileNames: []\n    };\n    counter = -1;\n    columns = [{\n        title: 'Question',\n        key: 'questionText',\n        render: (text, record, index) => (<p>{record.questionText}</p>),\n    }, {\n        title: 'Input',\n        key: 'input',\n        render: (text, record, index) => {\n\n            if (record.input === '&FILE_UPLOAD&') {\n                this.counter+=1;\n                return (<Button hreftype=\"primary\" data-index={this.counter} icon=\"download\" size=\"small\"\n                                onClick={(e) => {this.downloadFile(e)}}>\n                    Download File\n                </Button>);\n            }\n\n            else {\n               return (<p>\n                   {record.input}\n               </p>);\n            }\n        },\n    }];\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        if(nextProps.record && nextProps.record.FilePath){\n            this.setState({fileNames: nextProps.record.FilePath.split(',')})\n        }\n    }\n\n    downloadFile = (e) => {\n        // Get file name by index. indexes stored in each button corresponds to filenames stored in the state\n        const fileName = this.state.fileNames[e.target.getAttribute('data-index')];\n        if (!fileName){\n            alertError(\"File Error\", \"Sorry, but file doesn't exist!\");\n            return;\n        }\n\n        http({\n            url: `/assistant/${this.props.assistant.ID}/userinput/${fileName}`,\n            method: 'GET',\n            responseType: 'blob', // important\n        }).then((response) => {\n            saveAs(new Blob([response.data]), fileName);\n        }).catch(error => {\n            alertError(\"File Error\", \"Sorry, cannot download this file!\")\n        });\n    };\n\n    render() {\n        const {record} = this.props;\n        console.log(this.state);\n        return (\n            <Modal\n                width={800}\n                title=\"User Inputs\"\n                destroyOnClose={true}\n                visible={this.props.visible}\n                onCancel={this.props.closeViewModal}\n                onOk={this.props.closeViewModal}\n                footer={[\n                    <Button key=\"Cancel\" onClick={this.props.closeViewModal}>OK</Button>\n                ]}>\n                {this.props.record ? (\n                    <Table columns={this.columns}\n                           dataSource={record.Data.collectedInformation}\n                           size='middle'\n                           pagination={false}\n                    />\n                ) : (<p>No Data</p>)}\n\n            </Modal>\n        );\n    }\n}\n\nexport default ViewModal;","import React from 'react';\nimport \"./UserInput.less\"\nimport styles from \"./UserInput.module.less\"\nimport Header from \"../../../../../components/Header/Header\";\n\nimport {userInputActions} from \"../../../../../store/actions\";\nimport connect from \"react-redux/es/connect/connect\";\nimport ViewModal from \"./ViewModal/ViewModal\";\nimport { Table, Button, Modal } from 'antd';\nimport moment from 'moment';\n\nconst confirm = Modal.confirm;\n\n\nclass UserInput extends React.Component {\n\n    state = {\n        viewModal: false,\n        selectedRecord: null\n    };\n\n    columns = [{\n        title: '#',\n        dataIndex: '#',\n        key: '#',\n        render: (text, record, index) => (<p>{index+1}</p>),\n    }, {\n        title: 'Date & Time',\n        dataIndex: 'DateTime',\n        key: 'DateTime',\n        render: (text, record) => (<p>{moment(record.DateTime).format(\"llll\")}</p>),\n    }, {\n        title: 'Questions Answered',\n        dataIndex: 'QuestionsAnswered',\n        key: 'QuestionsAnswered',\n    }, {\n        title: 'Solutions Returned',\n        dataIndex: 'SolutionsReturned',\n    }, {\n        title: 'Time Spent',\n        dataIndex: 'TimeSpent',\n        key: 'TimeSpent',\n        render: (text, record) => (<p>{\n            moment.duration(parseInt(text), 'seconds').asMinutes().toFixed(2) + \" minute(s)\"\n        }\n        </p>),\n\n    }, {\n        title: 'Action',\n        key: 'action',\n        render: (text, record, index) => (\n            <span>\n              <a onClick={()=> {\n                  this.setState({viewModal: true, selectedRecord: record})\n                }\n              }> View</a>\n              {/*<Divider type=\"vertical\" />*/}\n              {/*<a>Delete</a>*/}\n            </span>\n        ),\n    }];\n\n    componentDidMount() {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(userInputActions.fetchUserInputs(assistant.ID))\n    }\n\n    closeViewModal = () => {\n        this.setState({viewModal: false, selectedRecord: null})\n    };\n\n    clearAllUserInputs = () => {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(userInputActions.clearAllUserInputs(assistant.ID))\n    };\n\n    showConfirmForClearing = () => {\n        const clear = this.clearAllUserInputs;\n        confirm({\n            title: 'Do you want to delete all records?',\n            content: 'By clicking OK, there will be no way to get these records back!',\n            okType: 'danger',\n            onOk() {clear()},\n            onCancel() {},\n        });\n    };\n\n\n    render() {\n        const {assistant} = this.props.location.state;\n        console.log(this.props.userInputs);\n        return (\n\n            <div style={{height: '100%'}}>\n\n                <Header display={assistant.Name}/>\n\n                <div className={styles.Panel}>\n                    <div className={styles.Panel_Header}>\n                        <div>\n                            <h3>{assistant.Name}: User Inputs</h3>\n                            <p>Here you can find all the responses to your assistant's chatbot</p>\n                        </div>\n                    </div>\n\n                    <div className={styles.Panel_Body} style={{overflowY: \"auto\"}}>\n                        <Button className={styles.ClearAllBtn} type=\"primary\" icon=\"delete\"\n                                onClick={this.showConfirmForClearing} loading={this.props.isClearingAll}>\n                            Clear All\n                        </Button>\n                        <Table columns={this.columns}\n                               dataSource={this.props.userInputs.data}\n                               loading={this.props.isLoading}\n                               size='middle'\n                        />\n\n                    </div>\n                </div>\n\n                <ViewModal visible={this.state.viewModal}\n                           closeViewModal={this.closeViewModal}\n                           filesPath={this.props.userInputs.filesPath}\n                           record={this.state.selectedRecord}\n                           assistant={assistant}\n                />\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state =>  {\n    const {userInput} = state;\n    return {\n        userInputs: userInput.userInputs,\n        isLoading: userInput.isLoading,\n        errorMsg: userInput.errorMsg,\n\n        isClearingAll: userInput.isClearingAll\n    };\n};\n\n\nexport default connect(mapStateToProps)(UserInput);","import React from 'react';\nimport \"./SolutionModal.less\"\nimport {Button, Modal, Form, Input, Select, Tabs, Icon, Upload} from \"antd\";\nimport {isEmpty} from \"lodash\";\n\nconst FormItem = Form.Item;\nconst TabPane = Tabs.TabPane;\nconst OptGroup = Select.OptGroup;\nconst Option = Select.Option;\n\nclass SolutionModal extends React.Component {\n\n    state = {\n        connectionType: \"none\",\n        uploadFile: undefined\n    };\n\n    handleSave = () => this.props.form.validateFields((err, values) => {\n        if (err || (this.state.uploadFile === undefined && !this.props.edit)){\n            return false;\n        }\n        values[\"uploadFile\"] = this.state.uploadFile;\n        const formData = new FormData();\n        for (let key in values) {\n            // skip loop if the property is from prototype\n            if (!values.hasOwnProperty(key)) continue;\n\n            formData.append(key, values[key]);\n        }\n        this.props.handleSave(formData, this.props.edit);\n    });\n\n    changeTypeHandler = (e) => {\n        if (e === \"RDB XML File Export\") {\n            this.setState({connectionType: \"fileUpload\"});\n        }\n        else if (e === \"Bullhorn\" || e === \"RDB\") {\n            this.setState({connectionType: \"CRMConnection\"});\n        } else {\n            this.setState({connectionType: \"none\"});\n        }\n    };\n\n    onFileChange = (e) => {\n      const file = e.target.files[0];\n      this.setState({uploadFile: file})\n    };\n\n    componentWillReceiveProps(){\n        if(!this.props.visible){\n            this.setState({uploadFile: undefined, connectionType: \"none\"});\n            this.changeTypeHandler(\"none\");\n        }\n    }\n\n    closeModal = () => {\n        this.props.handleCancel();\n    };\n\n    render() {\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        };\n        const {getFieldDecorator} = this.props.form;\n\n        const solutionExists = this.props.edit;\n        if(solutionExists && this.state.connectionType === \"none\"){\n            this.changeTypeHandler(this.props.solutionToEdit.Solution.Type);\n        }\n        return (\n            <Modal\n                width={800}\n                title=\"Create New Solution\"\n                destroyOnClose={true}\n                visible={this.props.visible}\n                onOk={this.props.handleSave}\n                onCancel={this.props.handleCancel}\n                footer={[\n                    <Button key=\"Cancel\" onClick={this.closeModal}>Cancel</Button>,\n                    <Button key=\"submit\" type=\"primary\" onClick={this.handleSave}>\n                        {solutionExists ? \"Update\" : \"Add\"}\n                    </Button>\n                ]}>\n                <Form layout='horizontal'>\n                    <FormItem\n                        label=\"Solution Name\"\n                        extra=\"Enter a name for your solution to easily identify it in the solution list\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('name', {\n                            initialValue: solutionExists ? this.props.solutionToEdit.Solution.Name : \"\",\n                            rules: [{\n                                required: true,\n                                message: 'Please enter your solution name',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Jobs file, Bullhorn connection\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem\n                        label=\"Solution Type\"\n                        extra=\"The type of File or CRM you want to connect\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('type', {\n                            initialValue: solutionExists ? this.props.solutionToEdit.Solution.Type : \"\",\n                            rules: [{\n                                required: true,\n                                message: 'Please select what type of connection you are making',\n                            }],\n                        })(\n                            <Select onChange={this.changeTypeHandler}>\n                                <OptGroup label={\"File Upload\"}>\n                                    {\n                                        this.props.databaseFileTypes.map(fileType => (\n                                                <Option key={fileType} value={fileType}>{fileType}</Option>\n                                            )\n                                        )\n                                    }\n                                </OptGroup>\n                                {/*<OptGroup label={\"CRM Connection\"}>*/}\n                                    {/*{*/}\n                                        {/*this.props.databaseCRMTypes.map(CRMType => (*/}\n                                                {/*<Option key={CRMType} value={CRMType}>{CRMType}</Option>*/}\n                                            {/*)*/}\n                                        {/*)*/}\n                                    {/*}*/}\n                                {/*</OptGroup>*/}\n                            </Select>\n                        )}\n                    </FormItem>\n\n                    <Tabs activeKey={this.state.connectionType} tabBarStyle={{display:\"none\"}}>\n                        <TabPane tab={\"none\"} key={\"none\"}>\n                            <div style={{height: \"86px\", width:\"752px\"}}/>\n                        </TabPane>\n                        <TabPane tab={\"fileUpload\"} key={\"fileUpload\"}>\n                            {/*<Button htmlFor={\"fileUpload\"}><Icon type={\"upload\"}/>Click to Upload</Button>*/}\n                            <FormItem\n                                label= {solutionExists ? \"Upload New File\" : \"Upload File\"}\n                                extra=\"Select the file you wish to upload\"\n                                {...formItemLayout}>\n\n                                <Input type={\"file\"} id={\"fileUpload\"} hidden={true} onChange={this.onFileChange}/>\n                                <Button onClick={() => {document.getElementById(\"fileUpload\").click()}}>\n                                    <Icon type={\"upload\"}/>Select File\n                                </Button> <label>{this.state.uploadFile ? this.state.uploadFile.name : \"No File Chosen\"}</label>\n\n                            </FormItem>\n                        </TabPane>\n                        <TabPane tab={\"CRMConnection\"} key={\"CRMConnection\"}>\n                            <FormItem\n                                label=\"CRM Connection Link\"\n                                extra=\"Please paste your connection link\"\n                                {...formItemLayout}>\n                                {getFieldDecorator('CRMLink', {\n                                    rules: [{\n                                        required: this.state.connectionType === \"CRMConnection\",\n                                        message: 'Please paste the connection link for your CRM provided to you by us or your CRM manager',\n                                    }],\n                                })(\n                                    <Input placeholder=\"\"/>\n                                )}\n                            </FormItem>\n                        </TabPane>\n                    </Tabs>\n                </Form>\n            </Modal>\n        );\n    }\n}\n\nexport default Form.create()(SolutionModal)","import React from 'react';\nimport styles from \"../Solutions.module.less\";\nimport {Avatar, Button, List, Skeleton, Spin} from \"antd\";\nimport SolutionModal from \"./SolutionModal/SolutionModal\";\n\nclass SolutionsDisplay extends React.Component{\n    state = {\n        SolutionModal: false,\n        editMode: false,\n        selectedSolutionToEdit: {}\n    };\n\n    handleSolution = (Solution, edit) => {\n        if(!edit){\n            this.props.addSolution(Solution);\n            this.setState({SolutionModal: false, editMode:false});\n        } else {\n            this.props.editSolution(Solution);\n            this.setState({SolutionModal: false, editMode:false});\n        }\n    };\n\n    handleSolutionCancel = () => this.setState({SolutionModal: false, editMode:false});\n\n    showSolutionModal = () => this.setState({SolutionModal: true});\n\n    selectSolution = (item) => {\n        this.setState({selectedSolutionToEdit: item, editMode:true, SolutionModal:true});\n    };\n\n\n    // ////// EDIT GROUP\n    // handleEditSolution = (editedSolution) => {\n    //     this.props.editSolution(editedSolution);\n    //     this.setState({editSolutionModal: false, selectedSolutionToEdit: {}});\n    // };\n    //\n    // handleEditSolutionCancel = () => this.setState({editSolutionModal: false});\n    //\n    // showEditSolutionModal = (item) => this.setState({editSolutionModal: true, selectedSolutionToEdit: item});\n    //\n    // ////// DELETE GROUP\n    // handleDeleteSolution = (deletedSolution) => {\n    //     this.props.deleteSolution(deletedSolution);\n    //     this.setState({editSolutionModal: false, selectedSolutionToEdit: {}});\n    // };\n\n    render (){\n        return(\n            <div className={styles.Panel}>\n                <div className={styles.Panel_Header}>\n                    <div>\n                        <h3>Solutions List</h3>\n                    </div>\n                    <div>\n                        <Button className={styles.Panel_Header_Button} type=\"primary\" icon=\"plus\"\n                                onClick={this.showSolutionModal}>\n                            Add Solution\n                        </Button>\n                    </div>\n                </div>\n\n\n                <div className={styles.Panel_Body}>\n                    {\n                        this.props.isLoading ?\n                            <Spin><Skeleton active={true}/></Spin>\n                            :\n                            <List\n                                itemLayout=\"horizontal\"\n                                dataSource={this.props.solutionsData}\n                                renderItem={item => (\n                                    <List.Item\n                                        actions={[<Button icon={'edit'}\n                                                          onClick={() => this.selectSolution(item)}/>]}>\n                                        <List.Item.Meta\n                                            avatar={<Avatar icon=\"ordered-list\"\n                                                            style={{backgroundColor: '#9254de'}}/>}\n                                            title={<a onClick={() => this.props.selectSolution(item)}>{item.Solution.Name}</a>}\n                                            description={item.description}\n                                        />\n                                    </List.Item>\n                                )}\n                            />\n                    }\n                </div>\n\n                <SolutionModal visible={this.state.SolutionModal}\n                                     handleCancel={this.handleSolutionCancel}\n                                     handleSave={this.handleSolution}\n                                     databaseFileTypes={this.props.databaseFileTypes}\n                                     databaseCRMTypes={this.props.databaseCRMTypes}\n                                     edit={this.state.editMode}\n                                     solutionToEdit={this.state.editMode ? this.state.selectedSolutionToEdit : {}}\n                        />\n            </div>\n        )\n    }\n}\n\nexport default SolutionsDisplay","import React from 'react'\nimport connect from \"react-redux/es/connect/connect\";\nimport styles from \"../../Assistants.module.less\";\nimport Header from \"../../../../../components/Header/Header\"\nimport SolutionsDisplay from \"./SolutionsDisplay/SolutionsDisplay\";\nimport SolutionsSettings from \"./SolutionsSettings/SolutionsSettings\";\nimport {solutionsActions} from \"../../../../../store/actions\";\n\nclass Solutions extends React.Component{\n    state = {\n        currentSolution: {blocks: []},\n        databaseFileTypes: [\"RDB XML File Export\"],\n        databaseCRMTypes: [\"Bullhorn\", \"RDB\"]\n    };\n\n    componentDidMount() {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(solutionsActions.getSolutions(assistant.ID))\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.solutions !== this.props.solutions) {\n            nextProps.solutionsData.map((solution) => {\n                if (solution.id === this.state.currentSolution.id)\n                    this.setState({currentSolution: solution})\n            })\n        }\n    }\n\n    selectSolution = (currentSolution) => this.setState({currentSolution});\n\n    addSolution = (newSolution) => {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(solutionsActions.addSolution({ID: assistant.ID, newSolution: newSolution}));\n    };\n\n    editSolution = (editedSolution) => {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(solutionsActions.editSolution({ID: assistant.ID, editedSolution: editedSolution}));\n    };\n\n    deleteSolution = (deletedSolution) => {\n        // const {assistant} = this.props.location.state;\n        // this.props.dispatch(flowActions.deleteSolutionRequest({ID: assistant.ID, deletedSolution: deletedSolution}));\n    };\n\n    componentDidUpdate(prevProps) {\n        // if (!this.props.isAddingSolution && prevProps.addSuccessMsg !== this.props.addSuccessMsg) {\n        //     message.destroy();\n        //     message.success(this.props.addSuccessMsg);\n        // }\n        //\n        // if (!this.props.isEditingSolution && prevProps.editSuccessMsg !== this.props.editSuccessMsg) {\n        //     message.destroy();\n        //     message.success(this.props.editSuccessMsg);\n        // }\n        //\n        // if (!this.props.isDeletingSolution && prevProps.deleteSuccessMsg !== this.props.deleteSuccessMsg) {\n        //     message.destroy();\n        //     message.success(this.props.deleteSuccessMsg);\n        // }\n    }\n\n\n\n    render(){\n\n        return (\n             <div style={{height: '100%'}}>\n                <div style={{padding: '0 5px'}}>\n                    <div style={{width: '100%', height: 56, marginBottom: 10}}>\n                        <Header display={\"Solutions\"}/>\n                    </div>\n                </div>\n\n                <div style={{height: 'calc(100% - 66px)', width: '100%', display: 'flex'}}>\n                    <div style={{margin: 5, width: '30%'}}>\n\n                        <SolutionsDisplay selectSolution={this.selectSolution}\n                                isLoading={this.props.isLoading}\n                                solutionsData={this.props.solutionsData}\n                                addSolution={this.addSolution}\n                                editSolution={this.editSolution}\n                                deleteSolution={this.deleteSolution}\n                                databaseFileTypes={this.state.databaseFileTypes}\n                                databaseCRMTypes={this.state.databaseCRMTypes}\n                        />\n\n                    </div>\n\n                    <div style={{margin: 5, width: '70%'}}>\n\n                        {/*<SolutionsSettings />*/}\n\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    console.log(\"PROPS STATE: \", state);\n    return {\n        solutionsData: state.solutions.solutionsData,\n        isLoading: state.solutions.isLoading,\n        errorMsg: state.solutions.errorMsg,\n    };\n}\n\nexport default connect(mapStateToProps)(Solutions)","import React from 'react';\nimport \"./Home.less\"\nimport styles from \"./Home.module.less\"\n\nclass Home extends React.Component {\n\n    state = {\n\n    };\n\n    render() {\n        return (\n\n            <div style={{height: '100%'}}>\n                <div className={styles.Panel}>\n                    <div className={styles.Panel_Header}>\n\n                    </div>\n\n                    <div className={styles.Panel_Body} style={{overflowY: \"auto\"}}>\n                        <h1>Welcome to the Dashboard.</h1>\n                        <h3>Use your side navigation to navigate the application.</h3>\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React, {Component} from 'react';\n\nimport {Icon, Layout, Menu} from 'antd';\nimport \"./Dashboard.less\"\nimport styles from \"./Dashboard.module.less\"\nimport Assistants from './Assistants/Assistants';\nimport {history} from '../../helpers';\nimport {Switch, Route} from 'react-router-dom';\nimport Flow from \"./Assistants/Assistant/Flow/Flow\";\nimport Profile from \"./Profile/Profile\";\nimport Integration from \"./Assistants/Assistant/Integration/Integration\";\nimport UserInput from \"./Assistants/Assistant/UserInput/UserInput\";\nimport Solutions from \"./Assistants/Assistant/Solutions/Solutions\";\nimport Home from \"./Home/Home\";\n\n\nconst {SubMenu} = Menu;\nconst {Divider} = Menu;\nconst {Header, Content, Footer, Sider} = Layout;\n\n\nclass Dashboard extends Component {\n    state = {\n        collapsed: false,\n        marginLeft: 200,\n    };\n\n    toggle = () => {\n        this.setState({\n            collapsed: !this.state.collapsed,\n        }, () => this.setState({marginLeft: this.state.collapsed ? 81 : 200}));\n    };\n\n    handleMenuClick = (e) => {\n        e.key === 'dashboard' ? history.push(`/dashboard`) : history.push(`/dashboard/${e.key}`)\n    };\n\n    render() {\n        const {match} = this.props;\n        return (\n            <Layout style={{height: '100%'}}>\n                <Sider\n                    trigger={null}\n                    collapsible\n                    collapsed={this.state.collapsed}\n                    className={styles.Sider}>\n\n                    <div className={styles.Logo}>\n                        <div style={{display: 'flex'}}>\n                            <Icon type=\"cloud\" theme=\"twoTone\" twoToneColor=\"#9254de\" style={{fontSize: 44}}/>\n                            <div style={{lineHeight: '43px', marginLeft: 25}}>TheSearchBase</div>\n                        </div>\n                    </div>\n\n                    <Menu theme=\"light\" defaultSelectedKeys={['1']} mode=\"inline\" onClick={this.handleMenuClick}>\n                        <Menu.Item key=\"dashboard\">\n                            <Icon type=\"home\"/>\n                            <span>Home</span>\n                        </Menu.Item>\n\n                        <Menu.Item key=\"assistants\">\n                            <Icon type=\"robot\"/>\n                            <span>Assistants</span>\n                        </Menu.Item>\n\n                        <Divider/>\n\n                        <SubMenu key=\"sub2\"\n                                 title={<span><Icon type=\"user\"/><span>Account Details</span></span>}>\n                            <Menu.Item key=\"profile\">\n                                <Icon type=\"profile\"/>\n                                Profile\n                            </Menu.Item>\n                            <Menu.Item key=\"users-management\" style={{fontSize: '9pt'}}>\n                                <Icon type=\"usergroup-add\"/>Users Management\n                            </Menu.Item>\n                        </SubMenu>\n\n                        {/*<Menu.Item key=\"billing\">*/}\n                            {/*<Icon type=\"dollar\"/>*/}\n                            {/*<span>Billing</span>*/}\n                        {/*</Menu.Item>*/}\n                        <Menu.Item key=\"support\">\n                            <Icon type=\"question-circle\"/>\n                            <span>Support</span>\n                        </Menu.Item>\n                    </Menu>\n                </Sider>\n\n                <Layout style={{marginLeft: this.state.marginLeft, height: '100%'}}>\n\n                    <Header className={styles.Header}>\n                        <Icon\n                            className={styles.trigger}\n                            type={this.state.collapsed ? 'menu-unfold' : 'menu-fold'}\n                            onClick={this.toggle}\n                        />\n                    </Header>\n\n                    {/*HERE GOES ALL THE ROUTES*/}\n                    <Content style={{margin: 16, marginTop: 80, marginBottom: 0, height: '100%'}}>\n                        <Switch>\n                            <Route path={`${match.path}/assistants/:id/flow`} component={Flow}/>\n                            <Route path={`${match.path}/assistants/:id/integration`} component={Integration}/>\n                            <Route path={`${match.path}/assistants/:id/userInput`} component={UserInput}/>\n                            <Route path={`${match.path}/assistants/:id/solutions`} component={Solutions}/>\n                            <Route path={`${match.path}/assistants`} component={Assistants} exact/>\n                            <Route path={`${match.path}/profile`} component={Profile} exact/>\n                            <Route path=\"/dashboard\" component={Home}/>\n                        </Switch>\n                    </Content>\n\n\n\n\n                    <Footer style={{textAlign: 'center', padding: 10}}>\n                        Copyright TheSearchBase Limited 2019. All rights reserved.\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n    }\n\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport {authActions} from '../../store/actions/index';\nimport styles from './Login.module.less';\nimport './Login.less';\n\nimport {Form, Icon, Input, Button} from 'antd';\nimport {Avatar} from 'antd';\n\n\nconst FormItem = Form.Item;\nclass Login extends React.Component {\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n                this.props.dispatch(authActions.login(values.email, values.password));\n            }\n        });\n    };\n\n    handleLogout = () => {\n        this.props.dispatch(authActions.logout());\n    };\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <div className={styles.Panel} style={{padding: 75, textAlign: 'center'}}>\n\n                <Avatar size={128} icon=\"user\" style={{marginBottom: 50}}/>\n\n                <Form onSubmit={this.handleSubmit} className=\"login-form\">\n                    <FormItem>\n                        {getFieldDecorator('email', {\n                            rules: [{required: true, message: 'Please input your email!'}],\n                        })(\n                            <Input prefix={<Icon type=\"user\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                                   placeholder=\"Email\"/>\n                        )}\n                    </FormItem>\n                    <FormItem>\n                        {getFieldDecorator('password', {\n                            rules: [{required: true, message: 'Please input your Password!'}],\n                        })(\n                            <Input prefix={<Icon type=\"lock\" style={{color: 'rgba(0,0,0,.25)'}}/>} type=\"password\"\n                                   placeholder=\"Password\"/>\n                        )}\n                    </FormItem>\n                    <FormItem>\n                        <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                            Log in\n                        </Button>\n                    </FormItem>\n                </Form>\n            </div>\n        );\n\n\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        isLoggingIn: state.auth.isLoggingIn\n    };\n}\n\nconst loginForm = Form.create()(Login);\nexport default connect(mapStateToProps)(loginForm);\n","import React, {Component} from 'react';\nimport {Switch, Route, withRouter, Redirect} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {history} from './helpers';\nimport {notification} from 'antd';\nimport './App.less';\n\nimport {PrivateRoute} from './hoc';\nimport Dashboard from \"./application/Dashboard/Dashboard\";\nimport Login from './application/Login/Login'\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        history.listen((location, action) => {\n            // Clear recent notifications boxes when route changes\n            notification.destroy();\n        });\n    }\n\n    render() {\n        return (\n            <Switch>\n                {/* <Route exact path=\"/\" component={Home} /> */}\n                <Route path=\"/login\" component={Login}/>\n                <PrivateRoute path=\"/dashboard\" component={Dashboard}/>\n                <Redirect to={{pathname: '/dashboard'}}/>\n            </Switch>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    const {alert} = state;\n    return {\n        alert,\n    };\n};\nexport default withRouter(connect(mapStateToProps)(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.less';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport {history} from './helpers'\nimport store from './store/store'\n\n\nconst app = (\n\n    <Provider store={store}>\n        <Router history={history} >\n            <App />\n        </Router>\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Integration_Logo__95x6p\",\"trigger\":\"Integration_trigger__k2iHG\",\"Sider\":\"Integration_Sider__2KM_8\",\"Header\":\"Integration_Header__1BlRc\",\"Panel\":\"Integration_Panel__YQm7V\",\"Panel_With_Header\":\"Integration_Panel_With_Header__1vwGy\",\"Panel_Header\":\"Integration_Panel_Header__3fTNI\",\"Panel_Body\":\"Integration_Panel_Body__4hmlE\",\"Panel_Body_Only\":\"Integration_Panel_Body_Only__2uxaX\",\"Panel_Header_Button\":\"Integration_Panel_Header_Button__2re5I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Assistants_Logo__1_c55\",\"trigger\":\"Assistants_trigger__1I51J\",\"Sider\":\"Assistants_Sider__206sR\",\"Header\":\"Assistants_Header__1p-1G\",\"Panel\":\"Assistants_Panel__1ntI9\",\"Panel_With_Header\":\"Assistants_Panel_With_Header__2KVCE\",\"Panel_Header\":\"Assistants_Panel_Header__29BDR\",\"Panel_Body\":\"Assistants_Panel_Body__2GgUc\",\"Panel_Body_Only\":\"Assistants_Panel_Body_Only__3T20i\",\"Panel_Header_Button\":\"Assistants_Panel_Header_Button__3zsj3\",\"AssistantsList\":\"Assistants_AssistantsList__Q3wG3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Groups_Logo__1Xp0E\",\"trigger\":\"Groups_trigger__3r8xb\",\"Sider\":\"Groups_Sider__2qjgl\",\"Header\":\"Groups_Header__62fiz\",\"Panel\":\"Groups_Panel__2qp5F\",\"Panel_With_Header\":\"Groups_Panel_With_Header__1JGwO\",\"Panel_Header\":\"Groups_Panel_Header__r-Yxh\",\"Panel_Body\":\"Groups_Panel_Body__6n_iM\",\"Panel_Body_Only\":\"Groups_Panel_Body_Only__2bKFB\",\"Panel_Header_Button\":\"Groups_Panel_Header_Button__1lCxR\",\"groupsList\":\"Groups_groupsList__30oXd\"};"],"sourceRoot":""}