{"version":3,"sources":["application/Dashboard/Assistants/Assistant/Integration/Integration.module.less","application/Dashboard/Documentation/Documentation.module.less","application/Login/Login.module.less","application/ForgetPassword/NewResetPassword/NewResetPassword.module.less","application/Dashboard/Dashboard.module.less","application/Dashboard/Assistants/Assistants.module.less","application/Dashboard/Assistants/Assistant/Flow/Groups/Groups.module.less","application/Dashboard/Assistants/Assistant/Sessions/Sessions.module.less","application/ForgetPassword/ForgetPassword.module.less","application/Dashboard/Assistants/Assistant/Flow/Blocks/Blocks.module.less","components/Header/Header.module.less","application/Dashboard/AccountDetails/Profile/Profile.module.less","application/Dashboard/AccountDetails/Billing/Billing.module.less","application/Dashboard/AccountDetails/UsersManagement/UsersManagement.module.less","application/Dashboard/Home/Home.module.less","application/Dashboard/Databases/NewDatabaseModal/NewDatabaseModal.module.less","application/Dashboard/Databases/NewDatabaseModal/NewDatabaseSteps/UploadDatabaseStep/excel.worker.js","application/Dashboard/Assistants/Assistant/Flow/Flow.module.less","application/Signup/Signup.module.less","helpers/history.js","helpers/auth.js","helpers/alert.js","store/actions/actionTypes.js","store/utility.js","store/reducers/auth.reducer.js","store/reducers/assistant.reducer.js","store/reducers/profile.reducer.js","store/reducers/chatbotSessions.reducer.js","store/reducers/usersManagement.reducer.js","store/reducers/database.reducer.js","store/reducers/options.reducer.js","store/reducers/index.js","store/actions/auth.actions.js","store/actions/assistant.actions.js","store/actions/database.actions.js","store/actions/profile.actions.js","store/actions/chatbotSessions.actions.js","store/actions/usersManagement.actions.js","store/actions/options.actions.js","store/sagas/auth.saga.js","store/sagas/assistant.saga.js","store/sagas/profile.saga.js","store/sagas/chatbotSessions.js","store/sagas/usersManagement.saga.js","store/sagas/database.saga.js","store/sagas/options.saga.js","store/store.js","helpers/http.js","helpers/hashids.js","hoc/PrivateRoute.js","application/Dashboard/Assistants/Assistant/AssistantSettings/AssistantSettingsModal/AssistantSettingsModal.js","application/Dashboard/Assistants/Assistant/AssistantSettings/AssistantSettings.js","application/Dashboard/Assistants/Assistant/Assistant.js","application/Dashboard/Assistants/Modals/NewAssistantModal.js","application/Dashboard/Assistants/Assistants.js","application/Dashboard/Databases/NewDatabaseModal/NewDatabaseSteps/UploadDatabaseStep/UploadDatabaseStep.js","application/Dashboard/Databases/NewDatabaseModal/NewDatabaseSteps/ConfigureDatabaseStep.js","application/Dashboard/Databases/NewDatabaseModal/NewDatabaseSteps/ColumnSelectionStep.js","application/Dashboard/Databases/NewDatabaseModal/NewDatabaseSteps/ConfirmStep.js","application/Dashboard/Databases/NewDatabaseModal/ColumnsOptions.js","application/Dashboard/Databases/NewDatabaseModal/NewDatabaseModal.js","components/Header/Header.js","application/Dashboard/Databases/DatabaseInfo/DatabaseInfo.js","application/Dashboard/Databases/Databases.js","application/Dashboard/Assistants/Assistant/Flow/Groups/NewGroup/NewGroup.js","application/Dashboard/Assistants/Assistant/Flow/Groups/EditGroup/EditGroup.js","application/Dashboard/Assistants/Assistant/Flow/Groups/Groups.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/Block/Block.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/CardTypes/CardTypesHelpers.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/CardTypes/CardTypesFormItems.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/CardTypes/UserInput.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/CardTypes/Question.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/CardTypes/FileUpload.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/CardTypes/Solutions.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/Modals/NewBlockModal.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/Modals/EditBlockModal1.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/Blocks.js","application/Dashboard/Assistants/Assistant/Flow/Flow.js","application/Dashboard/AccountDetails/Profile/profileComponents/ProfileDetails/ProfileDetails.js","application/Dashboard/AccountDetails/Profile/profileComponents/DataSettings/DataSettings.js","application/Dashboard/AccountDetails/Profile/profileComponents/ChangePassword/ChangePassword.js","application/Dashboard/AccountDetails/Profile/Profile.js","application/Dashboard/AccountDetails/Billing/Billing.js","application/Dashboard/AccountDetails/UsersManagement/UsersDisplay/UserModal/UserModal.js","application/Dashboard/AccountDetails/UsersManagement/UsersDisplay/UsersDisplay.js","application/Dashboard/AccountDetails/UsersManagement/UsersManagement.js","application/Dashboard/Assistants/Assistant/Analytics/Analytics.js","application/Dashboard/Documentation/Documentation.js","application/Dashboard/Assistants/Assistant/Integration/Integration.js","application/Dashboard/Assistants/Assistant/Sessions/Profile/Profile.js","application/Dashboard/Assistants/Assistant/Sessions/Conversation/Conversation.js","application/Dashboard/Assistants/Assistant/Sessions/ViewModal/ViewsModal.js","application/Dashboard/Assistants/Assistant/Sessions/Sessions.js","application/Dashboard/Home/Home.js","application/Dashboard/Dashboard.js","application/Login/Login.js","application/Signup/Signup.js","application/ForgetPassword/ForgetPassword.js","application/ForgetPassword/NewResetPassword/NewResetPassword.js","App.js","serviceWorker.js","index.js","application/Dashboard/Databases/Databases.module.less","application/Dashboard/Assistants/Assistant/Analytics/Analytics.module.less"],"names":["module","exports","Logo","Trigger","Header","Sider","Panel","Panel_With_Header","Panel_Header","Panel_Header_With_Button","Panel_Body","Panel_Body_Only","Panel_Header_Button","LoginFormItem","LoginBackground","LoginPanel","LoginButton","fadeIn","fade-in","NewResetPasswordFormItem","NewResetPasswordBackground","NewResetPasswordPanel","NewResetPasswordButton","AssistantsList","groupsList","ResetPasswordFormItem","ResetPasswordBackground","ResetPasswordPanel","ResetPasswordButton","steps_content","steps_action","Worker","__webpack_require__","p","ErrorMsg","SignupFormItem","SignupBackground","SignupPanel","SignupButton","history","createBrowserHistory","authHeader","token","localStorage","getItem","refresh","Authorization","getUser","user","JSON","parse","updateUsername","firstname","surname","username","setItem","stringify","checkAuthenticity","alertError","title","message","notification","error","description","config","maxCount","loadingMessage","time","arguments","length","undefined","loading","successMessage","success","errorMessage","warningMessage","warning","destroyMessage","destroy","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","SIGNUP_REQUEST","SIGNUP_SUCCESS","SIGNUP_FAILURE","RESET_PASSWORD_REQUEST","RESET_PASSWORD_SUCCESS","RESET_PASSWORD_FAILURE","NEW_RESET_PASSWORD_REQUEST","NEW_RESET_PASSWORD_SUCCESS","NEW_RESET_PASSWORD_FAILURE","LOGOUT","AUTH_CHECK_TIMEOUT","REFRESH_TOKEN","FETCH_OPTIONS_REQUEST","FETCH_OPTIONS_SUCCESS","FETCH_OPTIONS_FAILURE","FETCH_ASSISTANTS_REQUEST","CHANGE_ASSISTANT_STATUS_REQUEST","ADD_ASSISTANT_REQUEST","UPDATE_ASSISTANT_REQUEST","DELETE_ASSISTANT_REQUEST","UPDATE_FLOW_REQUEST","GET_PROFILE_REQUEST","SAVE_PROFILE_DETAILS_REQUEST","SAVE_DATA_SETTINGS_REQUEST","CHANGE_PASS_REQUEST","FETCH_CHATBOT_SESSIONS_REQUEST","CLEAR_ALL_CHATBOT_SESSIONS_REQUEST","GET_DATABASES_LIST_REQUEST","UPLOAD_DATABASE_REQUEST","FETCH_DATABASE_REQUEST","GET_USERS_REQUEST","ADD_USER_REQUEST","EDIT_USER_REQUEST","DELETE_USER_REQUEST","updateObject","oldObject","updatedValues","Object","objectSpread","initialState","isAuthenticated","isSigningUp","isLoggingIn","errorMsg","assistantList","isLoading","profile","chatbotSessions","usersList","databasesList","fetchedDatabase","options","appReducer","combineReducers","auth","state","action","type","actionTypes","msg","assistant","assistants","isAdding","successMsg","isDeleting","toConsumableArray","filter","ID","assistantID","console","log","isStatusChanging","newAssistantStatus","map","Active","status","isUpdatingFlow","updateFlowSuccessMsg","updateFlowErrorMsg","newAssistantList","id","push","profileData","isClearingAll","usersManagement","usersData","database","isDeletingGroup","databaseToDeleteIndex","findIndex","db","databaseID","splice","updatedDatabaseList","newDatabase","rootReducer","keys","forEach","key","storage","removeItem","concat","authActions","login","email","password","loginSuccess","loginFailure","signup","signupDetails","signupSuccess","signupFailure","resetPassword","data","resetPasswordSuccess","resetPasswordFailure","newResetPassword","newResetPasswordSuccess","newResetPasswordFailure","logout","refreshToken","checkAuthTimeout","expirationTime","assistantActions","fetchAssistants","fetchAssistantsSuccess","fetchAssistantsFailure","addAssistant","newAssistant","addAssistantSuccess","addAssistantFailure","updateAssistant","_ref","updatedSettings","updateAssistantSuccess","updateAssistantFailure","deleteAssistant","deleteAssistantSuccess","deleteAssistantFailure","changeAssistantStatus","changeAssistantStatusSuccess","changeAssistantStatusFailure","updateFlow","updateFlowSuccess","updateFlowFailure","databaseActions","getDatabasesList","getDatabasesListSuccess","getDatabasesListFailure","uploadDatabase","uploadDatabaseSuccess","uploadDatabaseFailure","fetchDatabase","fetchDatabaseSuccess","fetchDatabaseFailure","resetFetchedDtabase","DeleteDatabase","DeleteDatabaseSuccess","DeleteDatabaseFailure","profileActions","getProfile","getProfileSuccess","getProfileFailure","saveProfileDetails","saveProfileDetailsSuccess","saveProfileDetailsFailure","saveDataSettings","dataSettings","saveDataSettingsSuccess","saveDataSettingsFailure","changePassword","oldPassword","newPassword","changePasswordSuccess","changePasswordFailure","chatbotSessionsActions","fetchChatbotSessions","fetchChatbotSessionsSuccess","fetchChatbotSessionsFailure","clearAllChatbotSessions","clearAllChatbotSessionsSuccess","clearAllChatbotSessionsFailure","usersManagementActions","getUsers","getUsersSuccess","getUsersFailure","addUser","params","addUserSuccess","addUserFailure","editUser","editUserSuccess","editUserFailure","deleteUser","deleteUserSuccess","deleteUserFailure","optionsActions","getOptions","getOptionsSuccess","getOptionsFailure","watchCheckAuthTimeout","watchLogin","watchSignup","forgetPassword","watchForgetPassword","watchNewResetPassword","watchLogout","watchRefreshToken","authSaga","regenerator_default","a","wrap","_context","prev","next","delay","put","stop","_marked","this","_context2","takeEvery","_marked2","_ref2","res","_ref3","expiresIn","secondsToExpire","_context3","axios","post","headers","Content-Type","sent","Date","getTime","t0","response","_marked3","_context4","takeLatest","_marked4","_ref4","_context5","_marked5","_context6","_marked6","_ref5","_context7","_marked7","_context8","_marked8","_ref6","_context9","_marked9","_context10","_marked10","_context11","clear","_marked11","_context12","_marked12","_ref7","_res$data$data","_context13","Error","_marked13","_context14","_marked14","_context15","all","_marked15","updateStatus","watchUpdateStatus","watchUpdateFlow","watchFetchAssistants","watchAddAssistant","watchUpdateAssistant","watchDeleteAssistant","assistantSaga","http","get","assistant_saga_marked","assistant_saga_marked2","assistant_saga_marked3","delete","assistant_saga_marked4","flow","Flow","assistant_saga_marked5","assistant_saga_marked6","assistant_saga_marked7","assistant_saga_marked8","assistant_saga_marked9","assistant_saga_marked10","assistant_saga_marked11","assistant_saga_marked12","assistant_saga_marked13","getProfileData","saveProfileData","watchProfileRequests","watchProfileUpdates","watchDataSettingsUpdates","watchChangePassword","profileSaga","Firstname","Surname","abrupt","profile_saga_marked","profile_saga_marked2","profile_saga_marked3","profile_saga_marked4","profile_saga_marked5","profile_saga_marked6","profile_saga_marked7","profile_saga_marked8","profile_saga_marked9","watchFetchChatbotSessions","watchClearAllChatbotSessions","chatbotSessions_marked","chatbotSessions_marked2","chatbotSessions_marked3","chatbotSessions_marked4","chatbotSessions_marked5","watchGetUsers","watchAddUser","watchEditUser","watchDeleteUser","usersManagementSaga","usersManagement_saga_marked","usersManagement_saga_marked2","usersManagement_saga_marked3","usersManagement_saga_marked4","usersManagement_saga_marked5","usersManagement_saga_marked6","usersManagement_saga_marked7","usersManagement_saga_marked8","usersManagement_saga_marked9","watchGetDatabaseList","watchFetchDatabase","watchAddDatabase","databaseSaga","database_saga_marked","database_saga_marked2","database_saga_marked3","database_saga_marked4","database_saga_marked5","database_saga_marked6","database_saga_marked7","fetchOptions","watchFetchOptions","optionsSaga","options_saga_marked","options_saga_marked2","options_saga_marked3","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","persistConfig","blacklist","persistedReducer","persistReducer","store","createStore","applyMiddleware","persistor","persistStore","run","create","baseURL","interceptors","request","use","header","Promise","reject","dispatch","hashids","Hashids","hasher","param","encode","PrivateRoute","Component","component","rest","objectWithoutProperties","react_default","createElement","Route","assign","render","props","Redirect","to","pathname","from","location","FormItem","Form","Item","AssistantSettingsModal","isPopupDisabled","_this","SecondsUntilPopup","isAlertsEnabled","MailEnabled","alertOptions","0","4","8","12","24","togglePopupSwitch","setState","toggleAlertsSwitch","handleSave","form","validateFields","err","values","secondsUntilPopup","inputValue","formItemLayout","labelCol","span","wrapperCol","alertsKeys","maxAlertsLength","parseInt","getFieldDecorator","modal","visible","width","destroyOnClose","onCancel","handleCancel","footer","es_button","onClick","handleDelete","es_form","layout","AssistantSettingsModal_FormItem","label","extra","initialValue","Name","rules","required","es_input","placeholder","Message","TopBarText","es_switch","checked","onChange","style","marginRight","input_number","disabled","min","className","MailPeriod","slider","max","marks","step","confirm","Modal","AssistantSettings","hideModal","deletedAssistant","content","onOk","AssistantSettings_AssistantSettingsModal_AssistantSettingsModal","connect","Meta","Card","menu","es_menu","Link","icon","Divider","covers","Assistant","showModal","onActiveChanged","activeHandler","_this$props","Fragment","card","margin","float","height","cover","alt","src","Math","floor","random","actions","dropdown","overlay","trigger","Assistant_AssistantSettings_AssistantSettings","Option","Select","NewAssistantModal","handleAdd","prevProps","handleOk","NewAssistantModal_FormItem","defaultChecked","es_select","value","Assistants","_this2","styles","i","Assistants_Assistant_Assistant","index","skeleton","active","Modals_NewAssistantModal","registerList","UploadDatabaseStep","readExcel","fileList","setStateHandler","resolve","isFileUploading","reader","FileReader","readAsBinaryString","onload","worker","postMessage","result","onmessage","event","_this$props2","listType","multiple","defaultFileList","accept","onRemove","file","indexOf","newFileList","slice","beforeUpload","thumbUrl","textAlign","protocol","hostname","port","upload","ConfigureDatabaseStep","databaseOptions","marginBottom","ConfigureDatabaseStep_FormItem","databaseConfiguration","databaseName","databaseType","types","ConfigureDatabaseStep_Option","ColumnSelectionStep","selectedColumns","handleChange","unique","handleRemove","removedColumn","setTimeout","selectedColumn","validate_and_construct","TSBcolumnOption","userColumns","userRecord","validatedData","isValid","column","join","userColumn","item","trim","includes","string_length","exec","nullable","Number","isNaN","date","year","getUTCFullYear","month","getMonth","day","getDate","originalColumns","parseForm","excelFile","errors","columns","ourColumn","excelColumn","validRecords","invalidRecords","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","user_record","record","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop","find","_iterator2","return","flatMap","filteredOptions","o","ColumnSelectionStep_FormItem","defaultValue","currencyCodes","currencyCode","ColumnSelectionStep_Option","mode","onDeselect","spin","Array","prototype","j","ConfirmStep","getRecordsData","records","x","counter","renderedRecord","_arr","_i","columnHeader","columnsOptions","c","dataIndex","backgroundColor","table","dataSource","size","pagination","pageSize","divider","Step","Steps","NewDatabaseModal","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","current","steps","NewDatabaseSteps_ConfigureDatabaseStep","ref","configureDatabaseStep","NewDatabaseSteps_UploadDatabaseStep_UploadDatabaseStep","uploadDatabaseStep","uploading","handleUpload","NewDatabaseSteps_ColumnSelectionStep","wrappedComponentRef","columnSelectionStep","NewDatabaseSteps_ConfirmStep","then","rejectedExcelFile","submitDatabase","_this$state","React","createRef","spinning","tip","marginLeft","showBackButton","button","display","context","router","goBack","shape","assistantName","text","contextTypes","PropTypes","object","DatabaseInfo","databaseInfo","Type","name","colHeaders","editor","react_handsontable","rowHeaders","Databases","showDatabaseInfo","_this$props$fetchedDa","_this$props$fetchedDa2","_this$props$fetchedDa3","_this$props$options","components_Header_Header","position","databaseContent","showDBInfo","deleteDB","padding","databases","Databases_DatabaseInfo_DatabaseInfo","isLoadingDatabase","marginTop","Databases_NewDatabaseModal_NewDatabaseModal","NewGroup","NewGroup_FormItem","EditGroup","handleUpdate","group","EditGroup_FormItem","Groups","newGroupModal","editGroupModal","selectedGroupToEdit","handleAddGroup","newGroup","addGroup","handleAddGroupCancel","showNewGroupModal","handleEditGroup","editedGroup","editGroup","handleEditGroupCancel","showEditGroupModal","handleDeleteGroup","deletedGroup","deleteGroup","nextProps","currentGroup","blocks","Groups_NewGroup_NewGroup","selectGroup","Groups_EditGroup_EditGroup","Collapse","Block","editBlock","block","deleteBlock","collapse","bordered","Content","es_row","es_col","validation","afterMessage","showTop","databaseTypes","storeInDB","es_checkbox","isSkippable","answers","answer","Block_Meta","keywords","keyword","es_tag","blockToGoID","handleNewBlock","handleEditBlock","initActionType","allGroups","handleSetState","showGoToBlock","showGoToGroup","getInitialVariables","flowOptions","modalState","blockOptions","blockTypes","blockType","CheckboxGroup","Checkbox","Group","QuestionFormItem","DataTypeFormItem","DataType","dataTypes","CardTypesFormItems_Option","SkippableFormItem","valuePropName","Skippable","StoreInDBFormItem","alwaysStoreInDB","AfterMessageFormItem","ActionFormItem","onSelect","onSelectAction","ShowGoToBlockFormItem","allBlocks","ShowGoToGroupFormItem","_ref8","currentBlock","selectedGroup","_currentBlock$Content","goToBlockID","ButtonsForm","handleDeleteBlock","onSubmit","FileTypesFormItem","_ref9","typesAllowed","fileTypes","checkedValues","onFileTypeChange","DatabaseTypeFormItem","_ref10","UserInput","StoreInDB","dataType","blockToGoIDGroup","_getInitialVariables2","buttons","CardTypesFormItems_QuestionFormItem","CardTypesFormItems_DataTypeFormItem","CardTypesFormItems_ActionFormItem","CardTypesFormItems_ShowGoToBlockFormItem","CardTypesFormItems_ShowGoToGroupFormItem","CardTypesFormItems_AfterMessageFormItem","CardTypesFormItems_SkippableFormItem","CardTypesFormItems_StoreInDBFormItem","Question","modalVisible","tags","inputVisible","groupName","formBlock","addAnswer","hideAddAnswer","showAddAnswer","removeAnswer","deletedAnswer","removeTag","removedTag","tag","showInput","input","focus","handleInputChange","e","target","saveInputRef","handleInputConfirm","Question_FormItem","popconfirm","placement","onConfirm","okText","cancelText","isLongTag","tagElem","closable","afterClose","tooltip","onBlur","onPressEnter","background","borderStyle","FileUpload","CardTypesFormItems_FileTypesFormItem","Solutions","Solutions_FormItem","CardTypesFormItems_DatabaseTypeFormItem","TabPane","Tabs","NewBlockModal","newBlock","handleAddBlock","closeModal","onChangeTab","currentTab","tabs","tab","CardTypes_UserInput","addNewDataCategory","showNewDataCategoryModal","CardTypes_Question","CardTypes_FileUpload","CardTypes_Solutions","EditBlockModal","edittedBlock","Blocks","addBlockVisible","editBlockVisible","deleteBlockVisible","deletedBlock","showAddBlockModal","closeAddBlockModal","addBlock","closeEditBlockModal","onDragEnd","bind","assertThisInitialized","destination","list","startIndex","endIndex","_result$splice","removed","slicedToArray","reorder","source","reorderBlocks","overflowY","react_beautiful_dnd_esm","droppableId","provided","innerRef","draggableId","draggableProps","dragHandleProps","draggableStyle","Blocks_Block_Block","Modals_NewBlockModal","EditBlockModal1","savedClicked","groups","isSaved","componentDidUpdate","onbeforeunload","getUpdatableState","_updatedAssistant$Flo","updatedAssistant","updatedGroup","shortid","generate","_this$getUpdatableSta2","_this$getUpdatableSta4","lastBlock","_this$getUpdatableSta5","nextBlock","b","_this$getUpdatableSta6","newBlocksOrder","_this$getUpdatableSta7","array","_array2","_array","saveFlow","nextContext","match","Flow_Groups_Groups","Flow_Blocks_Blocks","Prompt","when","ProfileDetails","companyName","handleSubmit","preventDefault","isEmpty","Email","company","ProfileDetails_FormItem","readOnly","htmlType","DataSettings","newsletters","statNotifications","trackData","techSupport","accountSpecialist","initialRender","defineProperty","DataSettings_FormItem","newProps","prevState","userSettings","UserInputNotifications","TrackingData","TechnicalSupport","AccountSpecialist","ChangePassword","confirmDirty","savePassword","resetFields","handleConfirmBlur","compareToFirstPassword","rule","callback","getFieldValue","validateToNextPassword","force","ChangePassword_FormItem","prefix","color","validator","pattern","Profile","defaultActiveKey","Profile_TabPane","profileComponents_ProfileDetails_ProfileDetails","profileComponents_DataSettings_DataSettings","profileComponents_ChangePassword_ChangePassword","Billing","href","OptGroup","UserModal","roles","formData","FormData","hasOwnProperty","append","UserModal_FormItem","changeTypeHandler","role","UserModal_Option","EditableContext","createContext","EditableFormRow","Provider","EditableCell","getInput","inputType","editing","restProps","Consumer","UsersDisplay_FormItem","children","UsersDisplay","_this3","isEditing","editingKey","cancel","showUserModal","handleUserCancel","editable","handleEdit","edit","users","_this4","row","newData","newRecord","_this5","components","body","cell","col","onCell","UsersDisplay_UserModal_UserModal","rowClassName","UsersManagement","UsersManagement_TabPane","UsersManagement_UsersDisplay_UsersDisplay","SubMenu","Menu","Documentation","currentKey","handleMenuChange","defaultSelectedKeys","defaultOpenKeys","activeKey","tabBarStyle","Documentation_TabPane","TextArea","Input","Integration","dataName","dataCircle","async","defer","hex","removeChatbot","oldBot","document","getElementById","remove","oldBotScript","copyScriptPaste","select","execCommand","testIntegration","script","setAttribute","appendChild","getWidgetSrc","colon","_window$location","generateDirectLink","_window$location2","open","getChatbotScript","data-name","data-id","data-circle","justify","lib","lineHeight","ReactDOMServer","renderToString","fontWeight","fileNames","sessions","session","Data","collectedData","downloadFilesBtns","isFiles","createDownloadFileBtn","fileBtn","hreftype","file-path-index","downloadFile","getAttribute","userTypes","UserType","Conversation","questionText","ViewsModal","data-index","downloadFileHandler","filenameIndex","fileName","url","method","responseType","saveAs","Blob","catch","FilePath","split","userType","closeViewModal","ViewsModal_TabPane","Sessions_Conversation_Conversation","Sessions_Profile_Profile","Sessions","filesCounter","filteredInfo","sortedInfo","selectedSession","viewModal","refreshSessions","handleFilter","filters","sorter","showConfirmForClearing","okType","expandedRowRender","indent","expanded","scroll","y","onFilter","QuestionsAnswered","SolutionsReturned","TimeSpent","moment","duration","asMinutes","toFixed","DateTime","valueOf","sessionsList","ViewModal_ViewsModal","filesPath","Home","visitData","beginDay","format","z","Analytics","chartDiv","clientHeight","theme","twoToneColor","Charts","NumberInfo_default","subTitle","total","subtitle","subTotal","Layout","Footer","Dashboard","collapsed","toggle","handleMenuClick","getInitials","initials","shift","pop","toUpperCase","userInfo","avatar","es_avatar","verticalAlign","userInfoMenu","overlayStyle","es_layout","collapsible","index_es","faCloud","selectedMenuKey","selectedKeys","Dashboard_SubMenu","fontSize","Dashboard_Header","UserInfo","react_transition_group","classNames","timeout","Switch","path","exact","zIndex","withRouter","Login","handleLogout","Login_FormItem","loginForm","selectBeforeURL","Signup_Option","Signup","Signup_FormItem","addonBefore","signupForm","ForgetPassword","ForgetPassword_FormItem","NewNewResetPassword","payload","NewResetPassword_FormItem","App","listen","NewResetPassword","PrivateRoute_PrivateRoute","alert","Boolean","app","es","integration_react","Router","src_App","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yEACAA,EAAAC,QAAA,CAAkBC,KAAA,0BAAAC,QAAA,6BAAAC,OAAA,4BAAAC,MAAA,2BAAAC,MAAA,2BAAAC,kBAAA,uCAAAC,aAAA,kCAAAC,yBAAA,8CAAAC,WAAA,gCAAAC,gBAAA,qCAAAC,oBAAA,+DCAlBZ,EAAAC,QAAA,CAAkBC,KAAA,4BAAAC,QAAA,+BAAAC,OAAA,8BAAAC,MAAA,6BAAAC,MAAA,6BAAAC,kBAAA,yCAAAC,aAAA,oCAAAC,yBAAA,gDAAAC,WAAA,kCAAAC,gBAAA,uCAAAC,oBAAA,iECAlBZ,EAAAC,QAAA,CAAkBY,cAAA,6BAAAC,gBAAA,+BAAAC,WAAA,0BAAAC,YAAA,2BAAAC,OAAA,sBAAAC,UAAA,6CCAlBlB,EAAAC,QAAA,CAAkBkB,yBAAA,mDAAAC,2BAAA,qDAAAC,sBAAA,gDAAAC,uBAAA,iDAAAL,OAAA,iCAAAC,UAAA,wDCAlBlB,EAAAC,QAAA,CAAkBC,KAAA,wBAAAC,QAAA,2BAAAC,OAAA,0BAAAC,MAAA,yBAAAC,MAAA,yBAAAC,kBAAA,qCAAAC,aAAA,gCAAAC,yBAAA,4CAAAC,WAAA,8BAAAC,gBAAA,mCAAAC,oBAAA,6DCAlBZ,EAAAC,QAAA,CAAkBC,KAAA,yBAAAC,QAAA,4BAAAC,OAAA,2BAAAC,MAAA,0BAAAC,MAAA,0BAAAC,kBAAA,sCAAAC,aAAA,iCAAAC,yBAAA,6CAAAC,WAAA,+BAAAC,gBAAA,oCAAAC,oBAAA,wCAAAW,eAAA,yDCAlBvB,EAAAC,QAAA,CAAkBC,KAAA,qBAAAC,QAAA,wBAAAC,OAAA,uBAAAC,MAAA,sBAAAC,MAAA,sBAAAC,kBAAA,kCAAAC,aAAA,6BAAAC,yBAAA,yCAAAC,WAAA,2BAAAC,gBAAA,gCAAAC,oBAAA,oCAAAY,WAAA,iDCAlBxB,EAAAC,QAAA,CAAkBC,KAAA,uBAAAC,QAAA,0BAAAC,OAAA,yBAAAC,MAAA,wBAAAC,MAAA,wBAAAC,kBAAA,oCAAAC,aAAA,+BAAAC,yBAAA,2CAAAC,WAAA,6BAAAC,gBAAA,kCAAAC,oBAAA,4DCAlBZ,EAAAC,QAAA,CAAkBwB,sBAAA,8CAAAC,wBAAA,gDAAAC,mBAAA,2CAAAC,oBAAA,4CAAAX,OAAA,+BAAAC,UAAA,sDCAlBlB,EAAAC,QAAA,CAAkBC,KAAA,qBAAAC,QAAA,wBAAAC,OAAA,uBAAAC,MAAA,sBAAAC,MAAA,sBAAAC,kBAAA,kCAAAC,aAAA,6BAAAC,yBAAA,yCAAAC,WAAA,2BAAAC,gBAAA,gCAAAC,oBAAA,0DCAlBZ,EAAAC,QAAA,CAAkBC,KAAA,qBAAAC,QAAA,wBAAAC,OAAA,uBAAAC,MAAA,sBAAAC,MAAA,sBAAAC,kBAAA,kCAAAC,aAAA,6BAAAC,yBAAA,yCAAAC,WAAA,2BAAAC,gBAAA,gCAAAC,oBAAA,0DCAlBZ,EAAAC,QAAA,CAAkBC,KAAA,sBAAAC,QAAA,yBAAAC,OAAA,wBAAAC,MAAA,uBAAAC,MAAA,uBAAAC,kBAAA,mCAAAC,aAAA,8BAAAC,yBAAA,0CAAAC,WAAA,4BAAAC,gBAAA,iCAAAC,oBAAA,2DCAlBZ,EAAAC,QAAA,CAAkBC,KAAA,sBAAAC,QAAA,yBAAAC,OAAA,wBAAAC,MAAA,uBAAAC,MAAA,uBAAAC,kBAAA,mCAAAC,aAAA,8BAAAC,yBAAA,0CAAAC,WAAA,4BAAAC,gBAAA,iCAAAC,oBAAA,2DCAlBZ,EAAAC,QAAA,CAAkBC,KAAA,8BAAAC,QAAA,iCAAAC,OAAA,gCAAAC,MAAA,+BAAAC,MAAA,+BAAAC,kBAAA,2CAAAC,aAAA,sCAAAC,yBAAA,kDAAAC,WAAA,oCAAAC,gBAAA,yCAAAC,oBAAA,mECAlBZ,EAAAC,QAAA,CAAkBC,KAAA,mBAAAC,QAAA,sBAAAC,OAAA,qBAAAC,MAAA,oBAAAC,MAAA,oBAAAC,kBAAA,gCAAAC,aAAA,2BAAAC,yBAAA,uCAAAC,WAAA,yBAAAC,gBAAA,8BAAAC,oBAAA,wDCAlBZ,EAAAC,QAAA,CAAkB4B,cAAA,wCAAAC,aAAA,+ICDlB9B,EAAAC,QAAA,WACA,WAAA8B,OAAoBC,EAAAC,EAAuB,wDCA3CjC,EAAAC,QAAA,CAAkBC,KAAA,mBAAAC,QAAA,sBAAAC,OAAA,qBAAAC,MAAA,oBAAAC,MAAA,oBAAAC,kBAAA,gCAAAC,aAAA,2BAAAC,yBAAA,uCAAAC,WAAA,yBAAAC,gBAAA,8BAAAC,oBAAA,+ICAlBZ,EAAAC,QAAA,CAAkBiC,SAAA,yBAAAC,eAAA,+BAAAC,iBAAA,iCAAAC,YAAA,4BAAAC,aAAA,6BAAArB,OAAA,uBAAAC,UAAA,6MCCLqB,EAAUC,cCDVC,EAAa,WAEtB,IAAIC,EAAQC,aAAaC,QAAQ,SAC7BC,EAAUF,aAAaC,QAAQ,WACnC,OAAKF,GAAUG,EACR,CAACC,cAAiB,UAAYJ,GADL,MAKvBK,EAAU,WAEnB,IAAIC,EAAOC,KAAKC,MAAMP,aAAaC,QAAQ,SAC3C,OAAII,GAAa,MAKRG,EAAiB,SAACC,EAAWC,GAEtC,IAAIL,EAAOC,KAAKC,MAAMP,aAAaC,QAAQ,SAC3C,IAAII,EAAM,OAAO,KAEjBA,EAAKM,SAAWF,EAAY,IAAMC,EAClCV,aAAaY,QAAQ,OAAQN,KAAKO,UAAUR,KAInCS,EAAoB,WAC7B,SAAUV,MAAcN,wBCffiB,EAAa,SAACC,EAAOC,GAC9BC,IAAaC,MAAM,CACfF,QAASD,EACTI,YAAaH,KAIrBA,IAAQI,OAAO,CACXC,SAAU,IAEP,IAAMC,EAAiB,SAACP,GAAD,IAAQQ,EAARC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAe,IAAf,OAAuBR,IAAQW,QAAQZ,EAAOQ,IAC/DK,EAAiB,SAACb,GAAD,IAAQQ,EAARC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAe,IAAf,OAAuBR,IAAQa,QAAQd,EAAOQ,IAC/DO,EAAe,SAACf,GAAD,IAAQQ,EAARC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAe,IAAf,OAAuBR,IAAQE,MAAMH,EAAOQ,IAC3DQ,EAAiB,SAAChB,GAAD,IAAQQ,EAARC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAe,IAAf,OAAuBR,IAAQgB,QAAQjB,EAAOQ,IAE/DU,EAAiB,WAC1BjB,IAAQkB,UACRjB,IAAaiB,yEC/BJC,EAAgB,gBAChBC,EAAgB,gBAChBC,EAAgB,gBAEhBC,EAAiB,iBACjBC,EAAiB,iBACjBC,EAAiB,iBAEjBC,EAAyB,yBACzBC,EAAyB,yBACzBC,EAAyB,yBAErBC,EAA6B,6BAC7BC,EAA6B,6BAC7BC,EAA6B,6BAGjCC,EAAS,SACTC,EAAqB,qBACrBC,EAAgB,gBAGhBC,EAAwB,wBACxBC,GAAwB,wBACxBC,GAAwB,wBAGxBC,GAA2B,2BAIvBC,GAAkC,kCAKlCC,GAAwB,yBAIxBC,GAA2B,2BAI3BC,GAA2B,2BAK/BC,GAAsB,sBAKtBC,GAAsB,sBAIlBC,GAA+B,+BAI/BC,GAA6B,6BAI7BC,GAAsB,sBAM1BC,GAAiC,iCAI7BC,GAAqC,qCAKzCC,GAA6B,6BAIzBC,GAA0B,0BAI1BC,GAAyB,yBAU7BC,GAAoB,oBAIhBC,GAAmB,mBAInBC,GAAoB,oBAIpBC,GAAsB,+BC/G1BC,GAAe,SAACC,EAAWC,GACpC,OAAOC,OAAAC,GAAA,EAAAD,CAAA,GACAF,EACAC,ICAPtE,GAAOC,KAAKC,MAAMP,aAAaC,QAAQ,SACrC6E,GAAezE,GAAO,CAAC0E,iBAAiB,EAAM1E,QAAO2E,aAAa,EAAOC,aAAa,EAAOC,SAAU,MACzG,CAACH,iBAAiB,EAAO1E,KAAM,KAAO2E,aAAa,EAAOC,aAAa,EAAOC,SAAU,eCFtFJ,GAAe,CAACK,cAAe,GAAIC,WAAW,EAAOF,SAAU,MCA/DJ,GAAe,CAACO,QAAS,GAAID,WAAW,EAAOF,SAAU,MCAzDJ,GAAe,CAACQ,gBAAiB,GAAIF,WAAW,EAAOF,SAAU,MCAjEJ,GAAe,CAACS,UAAW,GAAIH,WAAW,EAAOF,SAAU,MCA3DJ,GAAe,CAACM,WAAW,EAAOF,SAAU,KAAMM,cAAe,GAAIC,gBAAgB,ICArFX,GAAc,CAACY,QAAS,KAAMN,WAAW,EAAOF,SAAU,MCW1DS,GAAaC,YAAgB,CAC/BC,KPRgB,WAAkC,IAAjCC,EAAiCrE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBqD,GAAciB,EAAWtE,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAClD,OAAQoE,EAAOC,MACX,KAAKC,EACD,OAAOxB,GAAaqB,EAAO,CACvBZ,SAAU,KACVD,aAAa,IAErB,KAAKgB,EACD,OAAOxB,GAAaqB,EAAO,CACvBb,aAAa,EACbF,iBAAiB,EACjB1E,KAAM0F,EAAO1F,OAErB,KAAK4F,EACD,OAAOxB,GAAaqB,EAAO,CACvBb,aAAa,EACbF,iBAAiB,EACjB1E,KAAM,KACN6E,SAAUa,EAAO5E,MAAM+E,MAI/B,KAAKD,EACD,OAAOxB,GAAaqB,EAAO,CACvBd,aAAa,EACbE,SAAU,OAElB,KAAKe,EACD,OAAOxB,GAAaqB,EAAO,CACvBd,aAAa,IAErB,KAAKiB,EACD,OAAOxB,GAAaqB,EAAO,CACvBd,aAAa,EACbE,SAAUa,EAAO5E,MAAM+E,MAI/B,KAAKD,EAGL,KAAKA,EACD,OAAOxB,GAAaqB,EAAO,IAE/B,KAAKG,EACD,OAAOxB,GAAaqB,EAAO,CACvBZ,SAAUa,EAAO5E,MAAM+E,MAI/B,KAAKD,EAGL,KAAKA,EACD,OAAOxB,GAAaqB,EAAO,IAE/B,KAAKG,EACD,OAAOxB,GAAaqB,EAAO,CACvBZ,SAAUa,EAAO5E,MAAM+E,MAG/B,KAAKD,EACD,OAAOxB,GAAaqB,EAAO,CACvBb,aAAa,EACbF,iBAAiB,EACjB1E,KAAM,KACN6E,SAAU,OAElB,QACI,OAAOY,IO5DfK,UNXqB,WAAkC,IAAjCL,EAAiCrE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBqD,GAAciB,EAAWtE,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACvD,OAAQoE,EAAOC,MACX,KAAKC,GACD,OAAOxB,GAAaqB,EAAO,CACvBX,cAAe,GACfD,SAAU,KACVE,WAAW,IAEnB,IHegC,2BGd5B,OAAOX,GAAaqB,EAAO,CACvBX,cAAeY,EAAOZ,cAAciB,WACpChB,WAAW,IAEnB,IHWgC,2BGV5B,OAAOX,GAAaqB,EAAO,CACvBX,cAAe,GACfC,WAAW,EACXF,SAAUa,EAAO5E,MAAM+E,MAI/B,KAAKD,GACD,OAAOxB,GAAaqB,EAAO,CACvBZ,SAAU,KACVmB,UAAU,IAElB,IHMiC,wBGL7B,OAAO5B,GAAaqB,EAAO,CACvBQ,WAAYP,EAAOO,WACnBD,UAAU,IAElB,IHEiC,wBGD7B,OAAO5B,GAAaqB,EAAO,CACvBO,UAAU,EACVnB,SAAUa,EAAO5E,MAAM+E,MAI/B,KAAKD,GACD,OAAOxB,GAAaqB,EAAO,CACvBQ,WAAY,KACZpB,SAAU,KACVE,WAAW,IAEnB,IHRoC,2BGShC,OAAOX,GAAaqB,EAAO,CACvBQ,WAAYP,EAAOO,WACnBlB,WAAW,IAEnB,IHZoC,2BGahC,OAAOX,GAAaqB,EAAO,CACvBV,WAAW,EACXF,SAAUa,EAAO5E,MAAM+E,MAI/B,KAAKD,GACD,OAAOxB,GAAaqB,EAAO,CACvBZ,SAAU,KACVqB,YAAY,IAEpB,IHrBoC,2BGuBhC,IAAIpB,EAAgBP,OAAA4B,GAAA,EAAA5B,CAAIkB,EAAMX,eAAesB,OAAO,SAAAN,GAAS,OAAIA,EAAUO,KAAOX,EAAOY,cAEzF,OADAC,QAAQC,IAAI1B,GACLV,GAAaqB,EAAO,CACvBQ,WAAYP,EAAOO,WACnBC,YAAY,EACZpB,kBAER,IH7BoC,2BG8BhC,OAAOV,GAAaqB,EAAO,CACvBS,YAAY,EACZrB,SAAUa,EAAO5E,MAAM+E,MAI/B,KAAKD,GACD,OAAOxB,GAAaqB,EAAO,CACvBZ,SAAU,KACV4B,kBAAkB,IAE1B,IHvD2C,kCGwDvC,IAAIC,EAAqBnC,OAAA4B,GAAA,EAAA5B,CAAIkB,EAAMX,eAAe6B,IAAI,SAAAb,GAGlD,OAFGA,EAAUO,KAAOX,EAAOY,cACvBR,EAAUc,OAASlB,EAAOmB,QACvBf,IAGX,OAAO1B,GAAaqB,EAAO,CACvBQ,WAAYP,EAAOO,WACnBQ,kBAAkB,EAClB3B,cAAe4B,IAEvB,IHlE2C,kCGmEvC,OAAOtC,GAAaqB,EAAO,CACvBgB,kBAAkB,EAClB5B,SAAUa,EAAO5E,MAAM+E,MAG/B,KAAKD,GACD,OAAOxB,GAAaqB,EAAO,CACvBqB,gBAAgB,EAChBC,qBAAsB,KACtBC,mBAAoB,OAE5B,IH7D2B,sBG+DvB,IAAIC,EAAmBhH,KAAKC,MAAMD,KAAKO,UAAUiF,EAAMX,gBAIvD,OAHAmC,EAAoBA,EAAiBb,OAAO,SAAAN,GAAS,OAAIA,EAAUoB,KAAOxB,EAAOI,UAAUoB,MAC1EC,KAAKzB,EAAOI,WAEtB1B,GAAaqB,EAAO,CACvBqB,gBAAgB,EAChBC,qBAAsBrB,EAAOG,IAC7Bf,cAAemC,IAEvB,IHvE2B,qBGwEvB,OAAO7C,GAAaqB,EAAO,CACvBqB,gBAAgB,EAChBE,mBAAoBtB,EAAO5E,MAAM+E,MAGzC,QACI,OAAOJ,IMhHfT,QLZmB,WAAkC,IAAjCS,EAAiCrE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBqD,GAAciB,EAAWtE,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACrD,OAAQoE,EAAOC,MACX,KAAKC,GACD,OAAOxB,GAAaqB,EAAO,CACvBT,QAAS,GACTH,SAAU,KACVE,WAAW,IAEnB,IJ0C2B,sBIzCvB,OAAOX,GAAaqB,EAAO,CACvBT,QAASU,EAAO0B,YAChBrC,WAAW,IAEnB,IJsC2B,sBIrCvB,OAAOX,GAAaqB,EAAO,CACvBT,QAAS,GACTD,WAAW,EACXF,SAAUa,EAAO5E,MAAM+E,MAI/B,KAAKD,GACD,OAAOxB,GAAaqB,EAAO,CACvBQ,WAAY,KACZpB,SAAU,KACVE,WAAW,IAEnB,IJ2BwC,+BI1BpC,OAAOX,GAAaqB,EAAO,CACvBQ,WAAYP,EAAOO,WACnBlB,WAAW,IAEnB,IJuBwC,+BItBpC,OAAOX,GAAaqB,EAAO,CACvBV,WAAW,EACXF,SAAUa,EAAO5E,MAAM+E,MAI/B,KAAKD,GACD,OAAOxB,GAAaqB,EAAO,CACvBQ,WAAY,KACZpB,SAAU,KACVE,WAAW,IAEnB,IJasC,6BIZlC,OAAOX,GAAaqB,EAAO,CACvBQ,WAAYP,EAAOO,WACnBlB,WAAW,IAEnB,IJSsC,6BIRlC,OAAOX,GAAaqB,EAAO,CACvBV,WAAW,EACXF,SAAUa,EAAO5E,MAAM+E,MAE/B,QACI,OAAOJ,IK3CfR,gBJb2B,WAAkC,IAAjCQ,EAAiCrE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBqD,GAAciB,EAAWtE,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC7D,OAAQoE,EAAOC,MAEX,KAAKC,GACD,OAAOxB,GAAaqB,EAAO,CACvBZ,SAAU,KACVE,WAAW,IAEnB,IL4DsC,iCK3DlC,OAAOX,GAAaqB,EAAO,CACvBR,gBAAiBS,EAAOT,gBACxBF,WAAW,IAEnB,ILwDsC,iCKvDlC,OAAOX,GAAaqB,EAAO,CACvBR,gBAAiB,GACjBF,WAAW,EACXF,SAAUa,EAAO5E,MAAM+E,MAI/B,KAAKD,GACD,OAAOxB,GAAaqB,EAAO,CACvBZ,SAAU,KACVwC,eAAe,IAEvB,IL8C8C,qCK7C1C,OAAOjD,GAAaqB,EAAO,CACvB4B,eAAe,EACfpC,gBAAiB,GACjBJ,SAAU,OAElB,ILyC8C,qCKxC1C,OAAOT,GAAaqB,EAAO,CACvB4B,eAAe,EACfxC,SAAUa,EAAO5E,MAAM+E,MAE/B,QACI,OAAOJ,IIxBf6B,gBHd2B,WAAkC,IAAjC7B,EAAiCrE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBqD,GAAciB,EAAWtE,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EAC7D,OAAQoE,EAAOC,MACX,KAAKC,GACD,OAAOxB,GAAaqB,EAAO,CACvBP,UAAW,GACXL,SAAU,KACVE,WAAW,IAEnB,INuFyB,oBMtFrB,OAAOX,GAAaqB,EAAO,CACvBP,UAAWQ,EAAO6B,UAClBxC,WAAW,IAEnB,INmFyB,oBMlFrB,OAAOX,GAAaqB,EAAO,CACvBP,UAAW,GACXH,WAAW,EACXF,SAAUa,EAAO5E,MAAM+E,MAE/B,KAAKD,GACD,OAAOxB,GAAaqB,EAAO,CACvBZ,SAAU,KACVE,WAAW,IAEnB,IN2E4B,mBM1ExB,OAAOX,GAAaqB,EAAO,CACvBV,WAAW,IAEnB,INwE4B,mBMvExB,OAAOX,GAAaqB,EAAO,CACvBV,WAAW,EACXF,SAAUa,EAAO5E,MAAM+E,MAE/B,KAAKD,GACD,OAAOxB,GAAaqB,EAAO,CACvBZ,SAAU,KACVE,WAAW,IAEnB,INiE6B,oBMhEzB,OAAOX,GAAaqB,EAAO,CACvBV,WAAW,IAEnB,IN8D6B,oBM7DzB,OAAOX,GAAaqB,EAAO,CACvBV,WAAW,EACXF,SAAUa,EAAO5E,MAAM+E,MAE/B,KAAKD,GACD,OAAOxB,GAAaqB,EAAO,CACvBZ,SAAU,KACVE,WAAW,IAEnB,INuD+B,sBMtD3B,OAAOX,GAAaqB,EAAO,CACvBV,WAAW,IAEnB,INoD+B,sBMnD3B,OAAOX,GAAaqB,EAAO,CACvBV,WAAW,EACXF,SAAUa,EAAO5E,MAAM+E,MAG/B,QACI,OAAOJ,IGhDf+B,SFdoB,WAAkC,IAAjC/B,EAAiCrE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBqD,GAAciB,EAAWtE,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACtD,OAAQoE,EAAOC,MACX,KAAKC,GACD,OAAOxB,GAAaqB,EAAO,CACvBV,WAAW,IAEnB,IPsEkC,6BOrE9B,OAAOX,GAAaqB,EAAO,CACvBV,WAAW,EACXI,cAAeO,EAAOP,gBAE9B,IPkEkC,6BOjE9B,OAAOf,GAAaqB,EAAO,CACvBV,WAAW,EACXF,SAAUa,EAAO5E,MAAM+E,MAI/B,KAAKD,GACD,OAAOxB,GAAaqB,EAAO,CACvBV,WAAW,IAEnB,IP8DkC,yBO7D9B,OAAOX,GAAaqB,EAAO,CACvBV,WAAW,EACXK,gBAAiBM,EAAON,kBAEhC,IP0DkC,yBOzD9B,OAAOhB,GAAaqB,EAAO,CACvBV,WAAW,EACXF,SAAUa,EAAO5E,MAAM+E,MAE/B,IPsD0B,iBOrDtB,OAAOzB,GAAaqB,EAAO,CAACL,gBAAiB,KAGjD,IPoDmC,0BOnD/B,OAAOhB,GAAaqB,EAAO,CACvBgC,iBAAiB,IAEzB,IPiDmC,0BOhD/B,IAAItC,EAAaZ,OAAA4B,GAAA,EAAA5B,CAAOkB,EAAMN,eACxBuC,EAAyBvC,EAAcwC,UAAU,SAAAC,GAAE,OAAIA,EAAGvB,KAAOX,EAAOmC,aAE9E,OADA1C,EAAc2C,OAAOJ,EAAuB,GACrCtD,GAAaqB,EAAO,CACvBgC,iBAAiB,EACjBtC,cAAeO,EAAOP,gBAE9B,IP0CmC,0BOzC/B,OAAOf,GAAaqB,EAAO,CACvBgC,iBAAiB,EACjB5C,SAAUa,EAAO5E,MAAM+E,MAI/B,KAAKD,GACD,OAAOxB,GAAaqB,EAAO,CACvBV,WAAW,IAEnB,IPqBmC,0BOpB/B,IAAIgD,EAAmBxD,OAAA4B,GAAA,EAAA5B,CAAOkB,EAAMN,eAEpC,OADA4C,EAAoBZ,KAAKzB,EAAOsC,aACzB5D,GAAaqB,EAAO,CACvBV,WAAW,EACXI,cAAe4C,IAEvB,IPemC,0BOd/B,OAAO3D,GAAaqB,EAAO,CACvBV,WAAW,EACXF,SAAUa,EAAO5E,MAAM+E,MAG/B,QACI,OAAOJ,IE1DfJ,QDhBmB,WAAkC,IAAjCI,EAAiCrE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAzBqD,GAAciB,EAAWtE,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACrD,OAAQoE,EAAOC,MACX,KAAKC,EACD,OAAOxB,GAAaqB,EAAO,CACvBZ,SAAU,KACVE,WAAW,IAEnB,KAAKa,GACD,OAAOxB,GAAaqB,EAAO,CACvBV,WAAW,EACXM,QAASK,EAAOL,UAExB,KAAKO,GACD,OAAOxB,GAAaqB,EAAO,CACvBV,WAAW,EACXF,SAAUa,EAAO5E,MAAM+E,MAE/B,QACI,OAAOJ,MCWJwC,GAVK,SAACxC,EAAOC,GAOxB,OANIA,EAAOC,OAASC,IAChBrB,OAAO2D,KAAKzC,GAAO0C,QAAQ,SAAAC,GACvBC,IAAQC,WAAR,WAAAC,OAA8BH,MAElC3C,OAAQnE,GAELgE,GAAWG,EAAOC,iCCyD7B,IAoBa8C,GAAc,CACvBC,MA1GJ,SAAgBC,EAAOC,GACnB,MAAO,CACHhD,KAAMC,EACN8C,QACAC,aAuGJC,aAnGJ,SAAuB5I,GACnB,MAAO,CACH2F,KAAMC,EACN5F,SAiGJ6I,aA7FJ,SAAuB/H,GACnB,MAAO,CACH6E,KAAMC,EACN9E,UA4FJgI,OAxFJ,SAAiBC,GACb,MAAO,CACHpD,KAAMC,EACNmD,kBAsFJC,cAlFJ,WACI,MAAO,CACHrD,KAAMC,IAiFVqD,cA7EJ,SAAwBnI,GACpB,MAAO,CACH6E,KAAMC,EACN9E,UA4EJoI,cAvEJ,SAAwBC,GACpB,MAAO,CACHxD,KAAMC,EACNuD,SAqEJC,qBAjEJ,WACI,MAAO,CACHzD,KAAMC,IAgEVyD,qBA5DJ,SAA+BvI,GAC3B,MAAO,CACH6E,KAAMC,EACN9E,UA2DJwI,iBAtDJ,SAA2BH,GACvB,MAAO,CACHxD,KAAMC,EACNuD,SAoDJI,wBAhDJ,WACI,MAAO,CACH5D,KAAMC,IA+CV4D,wBA3CJ,SAAkC1I,GAC9B,MAAO,CACH6E,KAAMC,EACN9E,UA0CJ2I,OArCW,WACX,MAAO,CACH9D,KAAMC,IAoCV8D,aAzBiB,SAAC7J,GAClB,MAAO,CACH8F,KAAMC,EACN/F,YAuBJ8J,iBAjCqB,SAACC,EAAgB/J,GACtC,MAAO,CACH8F,KAAMC,EACNgE,iBAAgB/J,aC0CXgK,GAAmB,CAC5BC,gBAzIoB,WACpB,MAAO,CACHnE,KAAMC,KAwIVmE,uBApI2B,SAACjF,GAC5B,MAAO,CACHa,KXiBgC,2BWhBhCb,kBAkIJkF,uBA9H2B,SAAClJ,GAC5B,MAAO,CACH6E,KXWgC,2BWVhC7E,UA6HJmJ,aAxHiB,SAACC,GAClB,MAAO,CACHvE,KAAMC,GACNsE,iBAsHJC,oBAlHwB,SAAClE,GACzB,MAAO,CACHN,KXIiC,wBWHjCM,eAgHJmE,oBA5GwB,SAACtJ,GACzB,MAAO,CACH6E,KXFiC,wBWGjC7E,UA2GJuJ,gBAvGoB,SAAAC,GAAoC,IAAlChE,EAAkCgE,EAAlChE,YAAaiE,EAAqBD,EAArBC,gBACnC,MAAO,CACH5E,KAAMC,GACNU,cACAiE,oBAoGJC,uBAhG2B,SAACvE,GAC5B,MAAO,CACHN,KXdoC,2BWepCM,eA8FJwE,uBA1F2B,SAAC3J,GAC5B,MAAO,CACH6E,KXpBoC,2BWqBpC7E,UAyFJ4J,gBAnFoB,SAACpE,GACrB,MAAO,CACHX,KAAMC,GACNU,gBAiFJqE,uBA7E2B,SAACrE,EAAaL,GACzC,MAAO,CACHN,KXjCoC,2BWkCpCW,cACAL,eA0EJ2E,uBAtE2B,SAAC9J,GAC5B,MAAO,CACH6E,KXxCoC,2BWyCpC7E,UAqEJ+J,sBAhE0B,SAACvE,EAAaO,GACxC,MAAO,CACHlB,KAAMC,GACNU,cACAO,WA6DJiE,6BAzDiC,SAAC7E,EAAYY,EAAQP,GACtD,MAAO,CACHX,KXtE2C,kCWuE3CM,aACAY,SACAP,gBAqDJyE,6BAjDiC,SAACjK,GAClC,MAAO,CACH6E,KX9E2C,kCW+E3C7E,UAgDJkK,WA3Ce,SAAClF,GAChB,MAAO,CACHH,KAAMC,GACNE,cAyCJmF,kBArCsB,SAACnF,EAAWD,GAClC,MAAO,CACHF,KX5E2B,sBW6E3BG,YACAD,QAkCJqF,kBA9BsB,SAACpK,GACvB,MAAO,CACH6E,KXnF2B,qBWoF3B7E,WCrCKqK,GAAkB,CAC3BC,iBAjGqB,WACrB,MAAO,CACHzF,KAAMC,KAgGVyF,wBA5F4B,SAAClG,GAC7B,MAAO,CACHQ,KZwEkC,6BYvElCR,cAAeA,IA0FnBmG,wBAtF4B,SAACxK,GAC7B,MAAO,CACH6E,KZkEkC,6BYjElC7E,UAqFJyK,eA/EmB,SAACvD,GACpB,MAAO,CACHrC,KAAMC,GACNoC,gBA6EJwD,sBAxE0B,SAAChK,EAAgBwG,GAC3C,MAAO,CACHrC,KZoDmC,0BYnDnCnE,iBACAwG,gBAqEJyD,sBAjE0B,SAAC3K,GAC3B,MAAO,CACH6E,KZ6CmC,0BY5CnC7E,UAgEJ4K,cA1DkB,SAAC7D,GACnB,MAAO,CACHlC,KAAMC,GACNiC,eAwDJ8D,qBApDyB,SAACnK,EAAgB4D,GAC1C,MAAO,CACHO,KZgCkC,yBY/BlCnE,iBACA4D,oBAiDJwG,qBA7CyB,SAAC9K,GAC1B,MAAO,CACH6E,KZyBkC,yBYxBlC7E,UA2CJ+K,oBAxCwB,WACxB,MAAO,CACHlG,KZoB0B,mBYoB9BmG,eAnCmB,WACnB,MAAO,CACHnG,KZemC,4BYmBvCoG,sBA9B0B,SAACvK,EAAgBqG,GAC3C,MAAO,CACHlC,KZUmC,0BYTnCnE,iBACAqG,eA2BJmE,sBAvB0B,SAAClL,GAC3B,MAAO,CACH6E,KZGmC,0BYFnC7E,WCPKmL,GAAiB,CAC1BC,WAtFe,WACf,MAAO,CACHvG,KAAMC,KAqFVuG,kBAjFsB,SAACnH,GACvB,MAAO,CACHW,Kb6C2B,sBa5C3ByB,YAAapC,IA+EjBoH,kBA3EsB,SAACtL,GACvB,MAAO,CACH6E,KbuC2B,sBatC3B7E,UAyEJuL,mBArEuB,SAACjF,GACxB,MAAO,CACHzB,KAAMC,GACNwB,gBAmEJkF,0BA/D8B,SAACrG,GAC/B,MAAO,CACHN,Kb4BwC,+Ba3BxCM,eA6DJsG,0BAzD8B,SAACzL,GAC/B,MAAO,CACH6E,KbsBwC,+BarBxC7E,UAuDJ0L,iBAnDqB,SAACC,GACtB,MAAO,CACH9G,KAAMC,GACN6G,iBAiDJC,wBA7C4B,SAACzG,GAC7B,MAAO,CACHN,KbWsC,6BaVtCM,eA2CJ0G,wBAvC4B,SAAC7L,GAC7B,MAAO,CACH6E,KbKsC,6BaJtC7E,UAsCJ8L,eAjCmB,SAACC,EAAaC,GACjC,MAAO,CACHnH,KAAMC,GACNiH,cACAC,gBA8BJC,sBA1B0B,SAAC9G,GAC3B,MAAO,CACHN,KbR+B,sBaS/BM,eAwBJ+G,sBApB0B,SAAClM,GAC3B,MAAO,CACH6E,Kbd+B,sBae/B7E,WCrCKmM,GAAyB,CAClCC,qBA5CyB,SAAC5G,GAC1B,MAAO,CACHX,KAAMC,GACNU,gBA0CJ6G,4BAtCgC,SAAClI,GACjC,MAAO,CACHU,Kd6DsC,iCc5DtCV,oBAoCJmI,4BAhCgC,SAACtM,GACjC,MAAO,CACH6E,KduDsC,iCctDtC7E,UA+BJuM,wBA1B4B,SAAC/G,GAC7B,MAAO,CACHX,KAAMC,GACNU,gBAwBJgH,+BApBmC,WACnC,MAAO,CACH3H,Kd2C8C,uCcxBlD4H,+BAfmC,SAACzM,GACpC,MAAO,CACH6E,KdsC8C,qCcrC9C7E,WC6CK0M,GAAyB,CAClCC,SApFa,WACb,MAAO,CACH9H,KAAMC,KAmFV8H,gBA/EoB,SAACnG,GACrB,MAAO,CACH5B,KfyFyB,oBexFzB4B,cA6EJoG,gBAzEoB,SAAC7M,GACrB,MAAO,CACH6E,KfmFyB,oBelFzB7E,UAuEJ8M,QAnEY,SAACC,GACb,MAAO,CACHlI,KAAMC,GACNiI,WAiEJC,eA7DmB,SAAClN,GACpB,MAAO,CACH+E,KfwE4B,mBevE5B/E,YA2DJmN,eAvDmB,SAACjN,GACpB,MAAO,CACH6E,KfkE4B,mBejE5B7E,UAqDJkN,SAjDa,SAACH,GACd,MAAO,CACHlI,KAAMC,GACNiI,WA+CJI,gBA3CoB,SAACrN,GACrB,MAAO,CACH+E,KfuD6B,oBetD7B/E,YAyCJsN,gBArCoB,SAACpN,GACrB,MAAO,CACH6E,KfiD6B,oBehD7B7E,UAmCJqN,WA/Be,SAACN,GAChB,MAAO,CACHlI,KAAMC,GACNiI,WA6BJO,kBAzBsB,SAACxN,GACvB,MAAO,CACH+E,KfsC+B,sBerC/B/E,YAuBJyN,kBAnBsB,SAACvN,GACvB,MAAO,CACH6E,KfgC+B,sBe/B/B7E,WC1DD,IAAMwN,GAAiB,CAC1BC,WAtBJ,WACI,MAAO,CACH5I,KAAMC,IAqBV4I,kBAjBJ,SAA4BnJ,GACxB,MAAO,CACHM,KAAMC,GACNP,YAeJoJ,kBAXJ,SAA4B3N,GACxB,MAAO,CACH6E,KAAMC,GACN9E,wBCVE6I,iBAKA+E,iBAMAjG,iBA+BAkG,iBAKA7F,iBAqBA8F,iBAMAC,iBAgBAC,iBAIAxF,iBAkBAyF,iBAMAtF,iBAQAuF,iBAKAtF,iBAqBAuF,iBAIOC,IA5JjB,SAAUvF,GAAVW,GAAA,IAAAV,EAAA/J,EAAA,OAAAsP,GAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OACI,OADwB5F,EAA5BU,EAA4BV,eAAgB/J,EAA5CyK,EAA4CzK,QAA5CyP,EAAAE,KAAA,EACUC,YAAuB,IAAjB7F,GADhB,OAEI,OAFJ0F,EAAAE,KAAA,EAEUE,aAAIlH,GAAYkB,aAAa7J,IAFvC,wBAAAyP,EAAAK,SAAAC,GAAAC,MAKA,SAAUnB,KAAV,OAAAS,GAAAC,EAAAC,KAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAN,MAAA,OACI,OADJM,EAAAN,KAAA,EACUO,aAAUnK,EAAgC+D,IADpD,wBAAAmG,EAAAH,SAAAK,GAAAH,MAMA,SAAUpH,GAAVwH,GAAA,IAAAvH,EAAAC,EAAAuH,EAAAC,EAAAnQ,EAAAN,EAAAG,EAAAuQ,EAAAC,EAAA,OAAAlB,GAAAC,EAAAC,KAAA,SAAAiB,GAAA,cAAAA,EAAAf,KAAAe,EAAAd,MAAA,OAGoB,OAHH9G,EAAjBuH,EAAiBvH,MAAOC,EAAxBsH,EAAwBtH,SAAxB2H,EAAAf,KAAA,EAEQrO,EAAe,qBAFvBoP,EAAAd,KAAA,EAG0Be,IAAMC,KAAN,YAAwB,CAAC9H,QAAOC,YAAW,CACzD8H,QAAS,CAACC,eAAgB,sBAJtC,OAOkD,OAJpCR,EAHdI,EAAAK,KAAAL,EAAAd,KAAA,EAOwDU,EAAI/G,KAAKA,KAPjE,OAQQ,OARRgH,EAAAG,EAAAK,KAOe3Q,EAPfmQ,EAOenQ,KAAMN,EAPrByQ,EAOqBzQ,MAAOG,EAP5BsQ,EAO4BtQ,QAASuQ,EAPrCD,EAOqCC,UAPrCE,EAAAd,KAAA,GAQc7P,aAAaY,QAAQ,OAAQN,KAAKO,UAAUR,IAR1D,QASQ,OATRsQ,EAAAd,KAAA,GASc7P,aAAaY,QAAQ,QAASb,GAT5C,QAUQ,OAVR4Q,EAAAd,KAAA,GAUc7P,aAAaY,QAAQ,UAAWV,GAV9C,QAWQ,OAXRyQ,EAAAd,KAAA,GAWc7P,aAAaY,QAAQ,YAAa6P,GAXhD,QAagC,OAbhCE,EAAAd,KAAA,IAauC,IAAIoB,KAAKR,GAAWS,WAAY,IAAID,MAAOC,WAAa,IAb/F,QAeQ,OAFMR,EAbdC,EAAAK,KAAAL,EAAAd,KAAA,GAec3N,IAfd,QAgBQ,OAhBRyO,EAAAd,KAAA,GAgBcE,aAAIzD,GAAeC,cAhBjC,QAiBQ,OAjBRoE,EAAAd,KAAA,GAiBcE,aAAIlH,GAAYI,aAAa5I,IAjB3C,QAkBQ,OAlBRsQ,EAAAd,KAAA,GAkBcE,aAAIlH,GAAYmB,iBAAiB0G,EAAiBxQ,IAlBhE,QAoBQ,OApBRyQ,EAAAd,KAAA,GAoBcjQ,EAAQ4H,KAAK,cApB3B,QAAAmJ,EAAAd,KAAA,iBAwBQ,OAxBRc,EAAAf,KAAA,GAAAe,EAAAQ,GAAAR,EAAA,SAuBQ/J,QAAQC,IAAR8J,EAAAQ,IAvBRR,EAAAd,KAAA,GAwBcE,aAAIlH,GAAYK,aAAayH,EAAAQ,GAAMC,SAAS5H,OAxB1D,QAyBQ,OAzBRmH,EAAAd,KAAA,GAyBc9N,EAAa4O,EAAAQ,GAAMC,SAAS5H,KAAKtD,IAAK,GAzBpD,yBAAAyK,EAAAX,SAAAqB,GAAAnB,KAAA,UA+BA,SAAUlB,KAAV,OAAAQ,GAAAC,EAAAC,KAAA,SAAA4B,GAAA,cAAAA,EAAA1B,KAAA0B,EAAAzB,MAAA,OACI,OADJyB,EAAAzB,KAAA,EACU0B,aAAWtL,EAA2B6C,IADhD,wBAAAwI,EAAAtB,SAAAwB,GAAAtB,MAKA,SAAU/G,GAAVsI,GAAA,IAAArI,EAAAmH,EAAA,OAAAf,GAAAC,EAAAC,KAAA,SAAAgC,GAAA,cAAAA,EAAA9B,KAAA8B,EAAA7B,MAAA,OAIoB,OAJFzG,EAAlBqI,EAAkBrI,cAAlBsI,EAAA9B,KAAA,EAGQrO,EAAe,wBAAyB,GAHhDmQ,EAAA7B,KAAA,EAI0Be,IAAMC,KAAN,cAAAjM,OAAAC,GAAA,EAAAD,CAAA,GAA8BwE,GAAgB,CAC5D0H,QAAS,CAACC,eAAgB,sBALtC,OAQQ,OAJMR,EAJdmB,EAAAV,KAOQpK,QAAQC,IAAI0J,GAPpBmB,EAAA7B,KAAA,EAQchO,EAAe,mBAR7B,OASQ,OATR6P,EAAA7B,KAAA,GAScE,aAAIlH,GAAYQ,iBAT9B,QAWQ,OAXRqI,EAAA7B,KAAA,GAWcjQ,EAAQ4H,KAAK,UAX3B,QAYQ,OAZRkK,EAAA7B,KAAA,GAYc7N,EAAe,6BAA8B,GAZ3D,QAAA0P,EAAA7B,KAAA,iBAgBQ,OAhBR6B,EAAA9B,KAAA,GAAA8B,EAAAP,GAAAO,EAAA,SAeQ9K,QAAQC,IAAR6K,EAAAP,IAfRO,EAAA7B,KAAA,GAgBcE,aAAIlH,GAAYS,cAAcoI,EAAAP,GAAMC,SAAS5H,OAhB3D,QAiBQ,OAjBRkI,EAAA7B,KAAA,GAiBc9N,EAAa2P,EAAAP,GAAMC,SAAS5H,KAAKtD,IAAK,GAjBpD,yBAAAwL,EAAA1B,SAAA2B,GAAAzB,KAAA,UAqBA,SAAUjB,KAAV,OAAAO,GAAAC,EAAAC,KAAA,SAAAkC,GAAA,cAAAA,EAAAhC,KAAAgC,EAAA/B,MAAA,OACI,OADJ+B,EAAA/B,KAAA,EACU0B,aAAWtL,EAA4BkD,IADjD,wBAAAyI,EAAA5B,SAAA6B,GAAA3B,MAMA,SAAUhB,GAAV4C,GAAA,IAAAtI,EAAA,OAAAgG,GAAAC,EAAAC,KAAA,SAAAqC,GAAA,cAAAA,EAAAnC,KAAAmC,EAAAlC,MAAA,OAGQ,OAHkBrG,EAA1BsI,EAA0BtI,KAA1BuI,EAAAnC,KAAA,EAEQrO,EAAe,kCAAmC,GAF1DwQ,EAAAlC,KAAA,EAGce,IAAMC,KAAN,sBAAAjM,OAAAC,GAAA,EAAAD,CAAA,GAAsC4E,GAAO,CAC/CsH,QAAS,CAACC,eAAgB,sBAJtC,OAMQ,OANRgB,EAAAlC,KAAA,EAMchO,EAAe,8CAN7B,OAOQ,OAPRkQ,EAAAlC,KAAA,EAOcE,aAAIlH,GAAYY,wBAP9B,OAAAsI,EAAAlC,KAAA,iBAWQ,OAXRkC,EAAAnC,KAAA,GAAAmC,EAAAZ,GAAAY,EAAA,SAUQnL,QAAQC,IAARkL,EAAAZ,IAVRY,EAAAlC,KAAA,GAWc9N,EAAa,sCAAuC,GAXlE,QAYQ,OAZRgQ,EAAAlC,KAAA,GAYcE,aAAIlH,GAAYa,qBAAqBqI,EAAAZ,GAAMC,SAAS5H,OAZlE,yBAAAuI,EAAA/B,SAAAgC,GAAA9B,KAAA,UAgBA,SAAUf,KAAV,OAAAK,GAAAC,EAAAC,KAAA,SAAAuC,GAAA,cAAAA,EAAArC,KAAAqC,EAAApC,MAAA,OACI,OADJoC,EAAApC,KAAA,EACU0B,aAAWtL,EAAoCiJ,IADzD,wBAAA+C,EAAAjC,SAAAkC,GAAAhC,MAIA,SAAUvG,GAAVwI,GAAA,IAAA3I,EAAA,OAAAgG,GAAAC,EAAAC,KAAA,SAAA0C,GAAA,cAAAA,EAAAxC,KAAAwC,EAAAvC,MAAA,OAGQ,OAHoBrG,EAA5B2I,EAA4B3I,KAA5B4I,EAAAxC,KAAA,EAEQrO,EAAe,yBAA0B,GAFjD6Q,EAAAvC,KAAA,EAGce,IAAMC,KAAK,uBAAuBrH,EAAI,QAAtC5E,OAAAC,GAAA,EAAAD,CAAA,GAAuD4E,GAAO,CAChEsH,QAAS,CAACC,eAAgB,sBAJtC,OAMQ,OANRqB,EAAAvC,KAAA,EAMchO,EAAe,kDAN7B,OAOQ,OAPRuQ,EAAAvC,KAAA,EAOcE,aAAIlH,GAAYe,2BAP9B,OAQQ,OARRwI,EAAAvC,KAAA,GAQcjQ,EAAQ4H,KAAK,UAR3B,QASQ,OATR4K,EAAAvC,KAAA,GASchO,EAAe,gCAAiC,GAT9D,QAAAuQ,EAAAvC,KAAA,iBAaQ,OAbRuC,EAAAxC,KAAA,GAAAwC,EAAAjB,GAAAiB,EAAA,SAYQxL,QAAQC,IAARuL,EAAAjB,IAZRiB,EAAAvC,KAAA,GAac9N,EAAa,oCAAqC,GAbhE,QAcQ,OAdRqQ,EAAAvC,KAAA,GAccE,aAAIlH,GAAYgB,wBAAwBuI,EAAAjB,GAAMC,SAAS5H,OAdrE,yBAAA4I,EAAApC,SAAAqC,GAAAnC,KAAA,UAkBA,SAAUd,KAAV,OAAAI,GAAAC,EAAAC,KAAA,SAAA4C,GAAA,cAAAA,EAAA1C,KAAA0C,EAAAzC,MAAA,OACI,OADJyC,EAAAzC,KAAA,EACU0B,aAAWtL,EAAwC0D,IAD7D,wBAAA2I,EAAAtC,SAAAuC,GAAArC,MAMA,SAAUpG,KAAV,OAAA0F,GAAAC,EAAAC,KAAA,SAAA8C,GAAA,cAAAA,EAAA5C,KAAA4C,EAAA3C,MAAA,OAEI,OAFJ2C,EAAA3C,KAAA,EAEU7P,aAAayS,QAFvB,OAGI,OAHJD,EAAA3C,KAAA,EAGUjQ,EAAQ4H,KAAK,UAHvB,OAII,OAJJgL,EAAA3C,KAAA,EAIUhO,EAAe,4BAJzB,wBAAA2Q,EAAAxC,SAAA0C,GAAAxC,MAQA,SAAUb,KAAV,OAAAG,GAAAC,EAAAC,KAAA,SAAAiD,GAAA,cAAAA,EAAA/C,KAAA+C,EAAA9C,MAAA,OACI,OADJ8C,EAAA9C,KAAA,EACU0B,aAAWtL,EAAoB6D,IADzC,wBAAA6I,EAAA3C,SAAA4C,GAAA1C,MAKA,SAAUnG,GAAV8I,GAAA,IAAA3S,EAAAqQ,EAAAuC,EAAA/S,EAAA0Q,EAAAC,EAAA,OAAAlB,GAAAC,EAAAC,KAAA,SAAAqD,GAAA,cAAAA,EAAAnD,KAAAmD,EAAAlD,MAAA,UAAwB3P,EAAxB2S,EAAwB3S,QAAxB6S,EAAAnD,KAAA,EAEY9O,IAFZ,CAAAiS,EAAAlD,KAAA,cAEuC,IAAImD,MAAM,0BAFjD,OAGoB,OAHpBD,EAAAlD,KAAA,EAG0Be,IAAMC,KAAN,oBAAgC,KAAK,CACnDC,QAAS,CAAC3Q,cAAiB,UAAYD,KAJnD,OAQQ,OALMqQ,EAHdwC,EAAA/B,KAAA8B,EAOmCvC,EAAI/G,KAAKA,KAA7BzJ,EAPf+S,EAOe/S,MAAO0Q,EAPtBqC,EAOsBrC,UAPtBsC,EAAAlD,KAAA,GAQc7P,aAAaY,QAAQ,QAASb,GAR5C,QASQ,OATRgT,EAAAlD,KAAA,GASc7P,aAAaY,QAAQ,YAAa6P,GAThD,QAUgC,OAVhCsC,EAAAlD,KAAA,IAUuC,IAAIoB,KAAKR,GAAWS,WAAY,IAAID,MAAOC,WAAa,IAV/F,QAWQ,OADMR,EAVdqC,EAAA/B,KAAA+B,EAAAlD,KAAA,GAWcE,aAAIlH,GAAYmB,iBAAiB0G,EAAiBxQ,IAXhE,QAAA6S,EAAAlD,KAAA,iBAiBQ,OAjBRkD,EAAAnD,KAAA,GAAAmD,EAAA5B,GAAA4B,EAAA,SAeQnM,QAAQC,IAARkM,EAAA5B,IAfR4B,EAAAlD,KAAA,GAiBcE,aAAIlH,GAAYiB,UAjB9B,yBAAAiJ,EAAA/C,SAAAiD,GAAA/C,KAAA,UAqBA,SAAUZ,KAAV,OAAAE,GAAAC,EAAAC,KAAA,SAAAwD,GAAA,cAAAA,EAAAtD,KAAAsD,EAAArD,MAAA,OACI,OADJqD,EAAArD,KAAA,EACUO,aAAUnK,EAA2B8D,IAD/C,wBAAAmJ,EAAAlD,SAAAmD,GAAAjD,MAIO,SAAUX,KAAV,OAAAC,GAAAC,EAAAC,KAAA,SAAA0D,GAAA,cAAAA,EAAAxD,KAAAwD,EAAAvD,MAAA,OACH,OADGuD,EAAAvD,KAAA,EACGwD,aAAI,CACNrE,KACAC,KACAE,KACAE,KACAN,KACAO,KACAF,OARD,wBAAAgE,EAAApD,SAAAsD,GAAApD,uBC/JG/F,iBAYAG,iBAeAI,iBAeAK,iBAcAM,iBAcAkI,iBAiBAC,iBAIAC,iBAIAC,iBAIAC,iBAIAC,iBAIAC,iBAKOC,IAhHjB,SAAU3J,KAAV,IAAAoG,EAAA,OAAAf,GAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEoB,OAFpBF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAE0BkE,GAAKC,IAAL,eAF1B,OAGQ,OADMzD,EAFdZ,EAAAqB,KAAArB,EAAAE,KAAA,EAGcE,aAAI7F,GAAiBE,uBAAuBmG,EAAI/G,KAAKA,OAHnE,OAAAmG,EAAAE,KAAA,gBAMQ,OANRF,EAAAC,KAAA,EAAAD,EAAAwB,GAAAxB,EAAA,SAKQ/I,QAAQC,IAAR8I,EAAAwB,IALRxB,EAAAE,KAAA,GAMc9N,EAAa4N,EAAAwB,GAAMC,SAAS5H,KAAKtD,KAN/C,QAOQ,OAPRyJ,EAAAE,KAAA,GAOcE,aAAI7F,GAAiBG,uBAAuBsF,EAAAwB,GAAMC,SAAS5H,OAPzE,yBAAAmG,EAAAK,SAAAiE,GAAA/D,KAAA,SAYA,SAAU5F,GAAVK,GAAA,IAAAJ,EAAAgG,EAAA,OAAAf,GAAAC,EAAAC,KAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAN,MAAA,OAGoB,OAHpBlF,EAAwB3E,KAAMuE,EAA9BI,EAA8BJ,aAA9B4F,EAAAP,KAAA,EAEQrO,EAAe,2BAA4B,GAFnD4O,EAAAN,KAAA,EAG0BkE,GAAKlD,KAAL,cAAyBtG,GAHnD,OAIQ,OADMgG,EAHdJ,EAAAa,KAAAb,EAAAN,KAAA,EAIcE,aAAI7F,GAAiBM,oBAAoB+F,EAAI/G,KAAKtD,MAJhE,OAKQ,OALRiK,EAAAN,KAAA,GAKcE,aAAI7F,GAAiBC,mBALnC,QAMQ,OANRgG,EAAAN,KAAA,GAMchO,EAAe,oBAN7B,QAAAsO,EAAAN,KAAA,iBAUQ,OAVRM,EAAAP,KAAA,GAAAO,EAAAgB,GAAAhB,EAAA,SASQvJ,QAAQC,IAARsJ,EAAAgB,IATRhB,EAAAN,KAAA,GAUc9N,EAAaoO,EAAAgB,GAAMC,SAAS5H,KAAKtD,KAV/C,QAWQ,OAXRiK,EAAAN,KAAA,GAWcE,aAAI7F,GAAiBO,oBAAoB0F,EAAAgB,GAAMC,SAAS5H,OAXtE,yBAAA2G,EAAAH,SAAAkE,GAAAhE,KAAA,UAeA,SAAUxF,GAAV4F,GAAA,IAAA3J,EAAAiE,EAAA2F,EAAA,OAAAf,GAAAC,EAAAC,KAAA,SAAAiB,GAAA,cAAAA,EAAAf,KAAAe,EAAAd,MAAA,OAEoB,OAFOlJ,EAA3B2J,EAA2B3J,YAAaiE,EAAxC0F,EAAwC1F,gBAAxC+F,EAAAf,KAAA,EAAAe,EAAAd,KAAA,EAE0BkE,GAAKhE,IAAL,aAAAnH,OAAsBjC,GAAeiE,GAF/D,OAGQ,OADM2F,EAFdI,EAAAK,KAAAL,EAAAd,KAAA,EAGcE,aAAI7F,GAAiBW,uBAAuB0F,EAAI/G,KAAKtD,MAHnE,OAIQ,OAJRyK,EAAAd,KAAA,EAIcE,aAAI7F,GAAiBC,mBAJnC,OAKQ,OALRwG,EAAAd,KAAA,GAKchO,EAAe,sBAL7B,QAAA8O,EAAAd,KAAA,iBAQQ,OARRc,EAAAf,KAAA,GAAAe,EAAAQ,GAAAR,EAAA,SAOQ/J,QAAQC,IAAR8J,EAAAQ,IAPRR,EAAAd,KAAA,GAQc9N,EAAa4O,EAAAQ,GAAMC,SAAS5H,KAAKtD,KAR/C,QASQ,OATRyK,EAAAd,KAAA,GAScE,aAAI7F,GAAiBY,uBAAuB6F,EAAAQ,GAAMC,SAAS5H,OATzE,yBAAAmH,EAAAX,SAAAmE,GAAAjE,KAAA,UAeA,SAAUnF,GAAVyF,GAAA,IAAA7J,EAAA4J,EAAA,OAAAf,GAAAC,EAAAC,KAAA,SAAA4B,GAAA,cAAAA,EAAA1B,KAAA0B,EAAAzB,MAAA,OAGoB,OAHOlJ,EAA3B6J,EAA2B7J,YAA3B2K,EAAA1B,KAAA,EAEQrO,EAAe,wBAAyB,GAFhD+P,EAAAzB,KAAA,EAG0BkE,GAAKK,OAAL,cAAAxL,OAA0BjC,IAHpD,OAIQ,OADM4J,EAHde,EAAAN,KAAAM,EAAAzB,KAAA,EAIcE,aAAI7F,GAAiBc,uBAAuBrE,EAAa4J,EAAI/G,KAAKtD,MAJhF,OAKQ,OALRoL,EAAAzB,KAAA,GAKchO,EAAe,qBAL7B,QAAAyP,EAAAzB,KAAA,iBAQQ,OARRyB,EAAA1B,KAAA,GAAA0B,EAAAH,GAAAG,EAAA,SAOQ1K,QAAQC,IAARyK,EAAAH,IAPRG,EAAAzB,KAAA,GAQcE,aAAI7F,GAAiBe,uBAAuBqG,EAAAH,GAAMC,SAAS5H,OARzE,QASQ,OATR8H,EAAAzB,KAAA,GASc9N,EAAa,+BAT3B,yBAAAuP,EAAAtB,SAAAqE,GAAAnE,KAAA,UAcA,SAAU7E,GAAVoG,GAAA,IAAAtL,EAAAoK,EAAA,OAAAf,GAAAC,EAAAC,KAAA,SAAAgC,GAAA,cAAAA,EAAA9B,KAAA8B,EAAA7B,MAAA,OAIoB,OAJE1J,EAAtBsL,EAAsBtL,UAAtBuL,EAAA9B,KAAA,EAEQrO,EAAe,gBAAiB,GAFxCmQ,EAAA7B,KAAA,EAI0BkE,GAAKhE,IAAL,cAAAnH,OAAuBzC,EAAUO,GAAjC,SAA4C,CAAC4N,KAAMnO,EAAUoO,OAJvF,OAKQ,OADMhE,EAJdmB,EAAAV,KAAAU,EAAA7B,KAAA,EAKchO,EAAe,gBAL7B,OAMQ,OANR6P,EAAA7B,KAAA,GAMcE,aAAI7F,GAAiBoB,kBAAkBnF,EAAWoK,EAAI/G,KAAKtD,MANzE,QAAAwL,EAAA7B,KAAA,iBASQ,OATR6B,EAAA9B,KAAA,GAAA8B,EAAAP,GAAAO,EAAA,SAQQ9K,QAAQC,IAAR6K,EAAAP,IARRO,EAAA7B,KAAA,GAScE,aAAI7F,GAAiBqB,kBAAkBmG,EAAAP,GAAMC,SAAS5H,OATpE,QAUQ,OAVRkI,EAAA7B,KAAA,GAUc9N,EAAa,0BAV3B,yBAAA2P,EAAA1B,SAAAwE,GAAAtE,KAAA,UAcA,SAAUqD,GAAVzB,GAAA,IAAA5K,EAAAP,EAAA,OAAA6I,GAAAC,EAAAC,KAAA,SAAAkC,GAAA,cAAAA,EAAAhC,KAAAgC,EAAA/B,MAAA,OAGoB,OAHI3I,EAAxB4K,EAAwB5K,OAAQP,EAAhCmL,EAAgCnL,YAAhCiL,EAAAhC,KAAA,EAEQrO,EAAe,kBAAmB,GAF1CqQ,EAAA/B,KAAA,EAG0BkE,GAAKhE,IAAL,cAAAnH,OAAuBjC,EAAvB,WAA6C,CAACO,WAHxE,OAIQ,OAJR0K,EAAAZ,KAAAY,EAAA/B,KAAA,EAIc3N,IAJd,OAKQ,OALR0P,EAAA/B,KAAA,GAKchO,EAAe,kBAL7B,QAMQ,OANR+P,EAAA/B,KAAA,GAMcE,aAAI7F,GAAiBiB,6BAA6B,8BACYjE,EAAQP,IAPpF,QAAAiL,EAAA/B,KAAA,iBAUQ,OAVR+B,EAAAhC,KAAA,GAAAgC,EAAAT,GAAAS,EAAA,SASQhL,QAAQC,IAAR+K,EAAAT,IATRS,EAAA/B,KAAA,GAUcE,aAAI7F,GAAiBkB,6BAA6BwG,EAAAT,GAAMC,SAAS5H,OAV/E,QAWQ,OAXRoI,EAAA/B,KAAA,GAWc3N,IAXd,QAYQ,OAZR0P,EAAA/B,KAAA,GAYc9N,EAAa,sCAZ3B,yBAAA6P,EAAA5B,SAAAyE,GAAAvE,KAAA,UAiBA,SAAUsD,KAAV,OAAAhE,GAAAC,EAAAC,KAAA,SAAAqC,GAAA,cAAAA,EAAAnC,KAAAmC,EAAAlC,MAAA,OACI,OADJkC,EAAAlC,KAAA,EACU0B,aAAWtL,GAA6CsN,IADlE,wBAAAxB,EAAA/B,SAAA0E,GAAAxE,MAIA,SAAUuD,KAAV,OAAAjE,GAAAC,EAAAC,KAAA,SAAAuC,GAAA,cAAAA,EAAArC,KAAAqC,EAAApC,MAAA,OACI,OADJoC,EAAApC,KAAA,EACU0B,aAAWtL,GAAiCoF,IADtD,wBAAA4G,EAAAjC,SAAA2E,GAAAzE,MAIA,SAAUwD,KAAV,OAAAlE,GAAAC,EAAAC,KAAA,SAAA0C,GAAA,cAAAA,EAAAxC,KAAAwC,EAAAvC,MAAA,OACI,OADJuC,EAAAvC,KAAA,EACUO,aAAUnK,GAAsCkE,IAD1D,wBAAAiI,EAAApC,SAAA4E,GAAA1E,MAIA,SAAUyD,KAAV,OAAAnE,GAAAC,EAAAC,KAAA,SAAA4C,GAAA,cAAAA,EAAA1C,KAAA0C,EAAAzC,MAAA,OACI,OADJyC,EAAAzC,KAAA,EACUO,aAAUnK,GAAmCqE,IADvD,wBAAAgI,EAAAtC,SAAA6E,GAAA3E,MAIA,SAAU0D,KAAV,OAAApE,GAAAC,EAAAC,KAAA,SAAA8C,GAAA,cAAAA,EAAA5C,KAAA4C,EAAA3C,MAAA,OACI,OADJ2C,EAAA3C,KAAA,EACUO,aAAUnK,GAAsCyE,IAD1D,wBAAA8H,EAAAxC,SAAA8E,GAAA5E,MAIA,SAAU2D,KAAV,OAAArE,GAAAC,EAAAC,KAAA,SAAAiD,GAAA,cAAAA,EAAA/C,KAAA+C,EAAA9C,MAAA,OACI,OADJ8C,EAAA9C,KAAA,EACUO,aAAUnK,GAAsC8E,IAD1D,wBAAA4H,EAAA3C,SAAA+E,GAAA7E,MAKO,SAAU4D,KAAV,OAAAtE,GAAAC,EAAAC,KAAA,SAAAqD,GAAA,cAAAA,EAAAnD,KAAAmD,EAAAlD,MAAA,OACH,OADGkD,EAAAlD,KAAA,EACGwD,aAAI,CACNK,KACAC,KACAC,KACAC,KACAJ,KACAD,OAPD,wBAAAT,EAAA/C,SAAAgF,GAAA9E,uBC9GG+E,iBAeAC,iBAeArI,iBAcAI,iBAeAkI,iBAIAC,iBAIAC,iBAIAC,iBAIOC,IA3EjB,SAAUN,KAAV,IAAA1E,EAAAlL,EAAA,OAAAmK,GAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEoB,OAFpBF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAE0BkE,GAAKC,IAAL,YAF1B,OAKQ,OAHMzD,EAFdZ,EAAAqB,KAGc3L,EAAUkL,EAAI/G,KAAKA,KAHjCmG,EAAAE,KAAA,EAKcrP,EAAe6E,EAAQhF,KAAKmV,UAAWnQ,EAAQhF,KAAKoV,SALlE,OAMe,OANf9F,EAAAE,KAAA,EAMqBE,aAAIzD,GAAeE,kBAAkBnH,IAN1D,cAAAsK,EAAA+F,OAAA,SAAA/F,EAAAqB,MAAA,QAUe,OAVfrB,EAAAC,KAAA,GAAAD,EAAAwB,GAAAxB,EAAA,SASQ/I,QAAQC,IAAR8I,EAAAwB,IATRxB,EAAAE,KAAA,GAUqBE,aAAIzD,GAAeG,kBAAkBkD,EAAAwB,GAAMC,SAAS5H,OAVzE,eAAAmG,EAAA+F,OAAA,SAAA/F,EAAAqB,MAAA,yBAAArB,EAAAK,SAAA2F,GAAAzF,KAAA,UAeA,SAAUgF,GAAgBnP,GAA1B,IAAAwK,EAAA,OAAAf,GAAAC,EAAAC,KAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAN,MAAA,OAGoB,OAHpBM,EAAAP,KAAA,EAEQrO,EAAe,oBAAqB,GAF5C4O,EAAAN,KAAA,EAG0BkE,GAAKlD,KAAL,WAAsB9K,EAAO0B,aAHvD,OAIQ,OADM8I,EAHdJ,EAAAa,KAAAb,EAAAN,KAAA,EAIcE,aAAIzD,GAAeK,0BAA0B4D,EAAI/G,KAAKtD,MAJpE,OAKQ,OALRiK,EAAAN,KAAA,EAKchO,EAAe,iBAL7B,OAOe,OAPfsO,EAAAN,KAAA,GAOqBE,aAAIzD,GAAeC,cAPxC,eAAA4D,EAAAuF,OAAA,SAAAvF,EAAAa,MAAA,QAUQ,OAVRb,EAAAP,KAAA,GAAAO,EAAAgB,GAAAhB,EAAA,SASQvJ,QAAQC,IAARsJ,EAAAgB,IATRhB,EAAAN,KAAA,GAUcE,aAAIzD,GAAeM,0BAA0BuD,EAAAgB,GAAMC,SAAS5H,OAV1E,QAWQ,OAXR2G,EAAAN,KAAA,GAWc9N,EAAa,8BAX3B,yBAAAoO,EAAAH,SAAA4F,GAAA1F,KAAA,UAeA,SAAUrD,GAAiB9G,GAA3B,IAAAwK,EAAA,OAAAf,GAAAC,EAAAC,KAAA,SAAAiB,GAAA,cAAAA,EAAAf,KAAAe,EAAAd,MAAA,OAGoB,OAHpBc,EAAAf,KAAA,EAEQrO,EAAe,0BAA2B,GAFlDoP,EAAAd,KAAA,EAG0BkE,GAAKlD,KAAL,oBAA+B9K,EAAO+G,cAHhE,OAIQ,OADMyD,EAHdI,EAAAK,KAAAL,EAAAd,KAAA,EAIcE,aAAIzD,GAAeS,wBAAwBwD,EAAI/G,KAAKtD,MAJlE,OAKQ,OALRyK,EAAAd,KAAA,EAKchO,EAAe,uBAL7B,OAMe,OANf8O,EAAAd,KAAA,GAMqBE,aAAIzD,GAAeC,cANxC,eAAAoE,EAAA+E,OAAA,SAAA/E,EAAAK,MAAA,QASQ,OATRL,EAAAf,KAAA,GAAAe,EAAAQ,GAAAR,EAAA,SAQQ/J,QAAQC,IAAR8J,EAAAQ,IARRR,EAAAd,KAAA,GAScE,aAAIzD,GAAeU,wBAAwB2D,EAAAQ,GAAMC,SAAS5H,OATxE,QAUQ,OAVRmH,EAAAd,KAAA,GAUc9N,EAAa,0BAV3B,yBAAA4O,EAAAX,SAAA6F,GAAA3F,KAAA,UAcA,SAAUjD,GAAVtC,GAAA,IAAAwC,EAAAD,EAAAqD,EAAA,OAAAf,GAAAC,EAAAC,KAAA,SAAA4B,GAAA,cAAAA,EAAA1B,KAAA0B,EAAAzB,MAAA,OAGoB,OAHM1C,EAA1BxC,EAA0BwC,YAAaD,EAAvCvC,EAAuCuC,YAAvCoE,EAAA1B,KAAA,EAEQrO,EAAe,wBAAyB,GAFhD+P,EAAAzB,KAAA,EAG0BkE,GAAKlD,KAAL,oBAA+B,CAAC1D,cAAaD,gBAHvE,OAIQ,OADMqD,EAHde,EAAAN,KAAAM,EAAAzB,KAAA,EAIcE,aAAIzD,GAAec,sBAAsBmD,EAAI/G,KAAKtD,MAJhE,OAKQ,OALRoL,EAAAzB,KAAA,GAKchO,EAAe,oBAL7B,QAAAyP,EAAAzB,KAAA,iBASQ,OATRyB,EAAA1B,KAAA,GAAA0B,EAAAH,GAAAG,EAAA,SAQQ1K,QAAQC,IAARyK,EAAAH,IARRG,EAAAzB,KAAA,GAScE,aAAIzD,GAAee,sBAAsBiE,EAAAH,GAAMC,SAAS5H,OATtE,QAUQ,OAVR8H,EAAAzB,KAAA,GAUc9N,EAAauP,EAAAH,GAAMC,SAAS5H,KAAKtD,KAV/C,yBAAAoL,EAAAtB,SAAA8F,GAAA5F,KAAA,UAeA,SAAUiF,KAAV,OAAA3F,GAAAC,EAAAC,KAAA,SAAAgC,GAAA,cAAAA,EAAA9B,KAAA8B,EAAA7B,MAAA,OACI,OADJ6B,EAAA7B,KAAA,EACUO,aAAUnK,GAAiCgP,IADrD,wBAAAvD,EAAA1B,SAAA+F,GAAA7F,MAIA,SAAUkF,KAAV,OAAA5F,GAAAC,EAAAC,KAAA,SAAAkC,GAAA,cAAAA,EAAAhC,KAAAgC,EAAA/B,MAAA,OACI,OADJ+B,EAAA/B,KAAA,EACUO,aAAUnK,GAA0CiP,IAD9D,wBAAAtD,EAAA5B,SAAAgG,GAAA9F,MAIA,SAAUmF,KAAV,OAAA7F,GAAAC,EAAAC,KAAA,SAAAqC,GAAA,cAAAA,EAAAnC,KAAAmC,EAAAlC,MAAA,OACI,OADJkC,EAAAlC,KAAA,EACUO,aAAUnK,GAAwC4G,IAD5D,wBAAAkF,EAAA/B,SAAAiG,GAAA/F,MAIA,SAAUoF,KAAV,OAAA9F,GAAAC,EAAAC,KAAA,SAAAuC,GAAA,cAAAA,EAAArC,KAAAqC,EAAApC,MAAA,OACI,OADJoC,EAAApC,KAAA,EACUO,aAAUnK,GAAiCgH,IADrD,wBAAAgF,EAAAjC,SAAAkG,GAAAhG,MAIO,SAAUqF,KAAV,OAAA/F,GAAAC,EAAAC,KAAA,SAAA0C,GAAA,cAAAA,EAAAxC,KAAAwC,EAAAvC,MAAA,OACH,OADGuC,EAAAvC,KAAA,EACGwD,aAAI,CACN8B,KACAC,KACAC,KACAC,OALD,wBAAAlD,EAAApC,SAAAmG,GAAAjG,uBC9EG3C,iBAUA6I,iBAIA1I,iBAaA2I,iBAKO/Q,IAhCjB,SAAUiI,GAAV5C,GAAA,IAAAhE,EAAA4J,EAAA,OAAAf,GAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEoB,OAFYlJ,EAAhCgE,EAAgChE,YAAhCgJ,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAE0BkE,GAAKC,IAAL,cAAApL,OAAuBjC,EAAvB,qBAF1B,OAGe,OADD4J,EAFdZ,EAAAqB,KAAArB,EAAAE,KAAA,EAGqBE,aAAIzC,GAAuBE,4BAA4B+C,EAAI/G,KAAKA,OAHrF,cAAAmG,EAAA+F,OAAA,SAAA/F,EAAAqB,MAAA,QAMe,OANfrB,EAAAC,KAAA,GAAAD,EAAAwB,GAAAxB,EAAA,SAKQ/I,QAAQC,IAAR8I,EAAAwB,IALRxB,EAAAE,KAAA,GAMqBE,aAAIzC,GAAuBG,4BAAvBkC,EAAAwB,KANzB,eAAAxB,EAAA+F,OAAA,SAAA/F,EAAAqB,MAAA,yBAAArB,EAAAK,SAAAsG,GAAApG,KAAA,UAUA,SAAUkG,KAAV,OAAA5G,GAAAC,EAAAC,KAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAN,MAAA,OACI,OADJM,EAAAN,KAAA,EACUO,aAAUnK,GAA4CsH,IADhE,wBAAA4C,EAAAH,SAAAuG,GAAArG,MAIA,SAAUxC,GAAV4C,GAAA,IAAA3J,EAAA,OAAA6I,GAAAC,EAAAC,KAAA,SAAAiB,GAAA,cAAAA,EAAAf,KAAAe,EAAAd,MAAA,OAGoB,OAHelJ,EAAnC2J,EAAmC3J,YAAnCgK,EAAAf,KAAA,EAEQrO,EAAe,2BAA4B,GAFnDoP,EAAAd,KAAA,EAG0BkE,GAAKK,OAAL,cAAAxL,OAA0BjC,EAA1B,qBAH1B,OAIQ,OAJRgK,EAAAK,KAAAL,EAAAd,KAAA,EAIcE,aAAIzC,GAAuBK,kCAJzC,OAKQ,OALRgD,EAAAd,KAAA,GAKchO,EAAe,wBAL7B,QAAA8O,EAAAd,KAAA,iBAQQ,OARRc,EAAAf,KAAA,GAAAe,EAAAQ,GAAAR,EAAA,SAOQ/J,QAAQC,IAAR8J,EAAAQ,IAPRR,EAAAd,KAAA,GAQcE,aAAIzC,GAAuBM,+BAAvB+C,EAAAQ,KARlB,QASQ,OATRR,EAAAd,KAAA,GASc9N,EAAa4O,EAAAQ,GAAMC,SAAS5H,KAAKtD,KAT/C,yBAAAyK,EAAAX,SAAAwG,GAAAtG,KAAA,UAaA,SAAUmG,KAAV,OAAA7G,GAAAC,EAAAC,KAAA,SAAA4B,GAAA,cAAAA,EAAA1B,KAAA0B,EAAAzB,MAAA,OACI,OADJyB,EAAAzB,KAAA,EACUO,aAAUnK,GAAgDyH,IADpE,wBAAA4D,EAAAtB,SAAAyG,GAAAvG,MAKO,SAAU5K,KAAV,OAAAkK,GAAAC,EAAAC,KAAA,SAAAgC,GAAA,cAAAA,EAAA9B,KAAA8B,EAAA7B,MAAA,OACH,OADG6B,EAAA7B,KAAA,EACGwD,aAAI,CACN+C,KACAC,OAHD,wBAAA3E,EAAA1B,SAAA0G,GAAAxG,uBChCGpC,iBAUAG,iBAeAI,iBAeAG,iBAgBAmI,iBAIAC,iBAIAC,iBAIAC,iBAKOC,IAzEjB,SAAUjJ,KAAV,IAAAyC,EAAA,OAAAf,GAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEoB,OAFpBF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAE0BkE,GAAKC,IAAL,UAF1B,OAGe,OADDzD,EAFdZ,EAAAqB,KAAArB,EAAAE,KAAA,EAGqBE,aAAIlC,GAAuBE,gBAAgBwC,EAAI/G,KAAKA,OAHzE,cAAAmG,EAAA+F,OAAA,SAAA/F,EAAAqB,MAAA,OAMe,OANfrB,EAAAC,KAAA,EAAAD,EAAAwB,GAAAxB,EAAA,SAKQ/I,QAAQC,IAAR8I,EAAAwB,IALRxB,EAAAE,KAAA,GAMqBE,aAAIlC,GAAuBG,gBAAgB2B,EAAAwB,GAAMC,SAAS5H,OAN/E,eAAAmG,EAAA+F,OAAA,SAAA/F,EAAAqB,MAAA,yBAAArB,EAAAK,SAAAgH,GAAA9G,KAAA,SAUA,SAAUjC,GAAQlI,GAAlB,IAAAwK,EAAA,OAAAf,GAAAC,EAAAC,KAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAN,MAAA,OAGoB,OAHpBM,EAAAP,KAAA,EAEQrO,EAAe,sBAFvB4O,EAAAN,KAAA,EAG0BkE,GAAKhE,IAAL,QAAkBhK,EAAOmI,OAAO7N,MAH1D,OAKQ,OAFMkQ,EAHdJ,EAAAa,KAAAb,EAAAN,KAAA,EAKchO,EAAe,cAL7B,OAMQ,OANRsO,EAAAN,KAAA,EAMcE,aAAIlC,GAAuBM,eAAeoC,EAAItP,UAN5D,OAOQ,OAPRkP,EAAAN,KAAA,GAOcE,aAAIlC,GAAuBC,YAPzC,QAAAqC,EAAAN,KAAA,iBAUQ,OAVRM,EAAAP,KAAA,GAAAO,EAAAgB,GAAAhB,EAAA,SASQvJ,QAAQC,IAAIsJ,EAAAgB,GAAMC,UAT1BjB,EAAAN,KAAA,GAUc9N,EAAa,wBAV3B,QAWQ,OAXRoO,EAAAN,KAAA,GAWcE,aAAIlC,GAAuBO,eAAe+B,EAAAgB,GAAMC,SAAS5H,OAXvE,yBAAA2G,EAAAH,SAAAiH,GAAA/G,KAAA,UAeA,SAAU7B,GAAStI,GAAnB,IAAAwK,EAAA,OAAAf,GAAAC,EAAAC,KAAA,SAAAiB,GAAA,cAAAA,EAAAf,KAAAe,EAAAd,MAAA,OAGoB,OAHpBc,EAAAf,KAAA,EAEQrO,EAAe,mBAFvBoP,EAAAd,KAAA,EAG0BkE,GAAKlD,KAAL,QAAmB9K,EAAOmI,OAAO7N,MAH3D,OAKQ,OAFMkQ,EAHdI,EAAAK,KAAAL,EAAAd,KAAA,EAKchO,EAAe,eAL7B,OAMQ,OANR8O,EAAAd,KAAA,EAMcE,aAAIlC,GAAuBS,gBAAgBiC,EAAItP,UAN7D,OAOQ,OAPR0P,EAAAd,KAAA,GAOcE,aAAIlC,GAAuBC,YAPzC,QAAA6C,EAAAd,KAAA,iBAUQ,OAVRc,EAAAf,KAAA,GAAAe,EAAAQ,GAAAR,EAAA,SASQ/J,QAAQC,IAAI8J,EAAAQ,GAAMC,UAT1BT,EAAAd,KAAA,GAUc9N,EAAa,yBAV3B,QAWQ,OAXR4O,EAAAd,KAAA,GAWcE,aAAIlC,GAAuBU,gBAAgBoC,EAAAQ,GAAMC,SAAS5H,OAXxE,yBAAAmH,EAAAX,SAAAkH,GAAAhH,KAAA,UAeA,SAAU1B,GAAWzI,GAArB,IAAAwK,EAAA,OAAAf,GAAAC,EAAAC,KAAA,SAAA4B,GAAA,cAAAA,EAAA1B,KAAA0B,EAAAzB,MAAA,OAGoB,OAHpByB,EAAA1B,KAAA,EAEQrO,EAAe,oBAFvB+P,EAAAzB,KAAA,EAG0BkE,GAAKlD,KAAL,eAA0B9K,EAAOmI,OAAO7N,MAHlE,OAKQ,OAFMkQ,EAHde,EAAAN,KAAAM,EAAAzB,KAAA,EAKchO,EAAe,gBAL7B,OAMQ,OANRyP,EAAAzB,KAAA,EAMcE,aAAIlC,GAAuBY,kBAAkB8B,EAAItP,UAN/D,OAOQ,OAPRqQ,EAAAzB,KAAA,GAOcE,aAAIlC,GAAuBC,YAPzC,QAAAwD,EAAAzB,KAAA,iBAUQ,OAVRyB,EAAA1B,KAAA,GAAA0B,EAAAH,GAAAG,EAAA,SASQ1K,QAAQC,IAAIyK,EAAAH,GAAMC,UAT1BE,EAAAzB,KAAA,GAUc9N,EAAa,0BAV3B,QAWQ,OAXRuP,EAAAzB,KAAA,GAWcE,aAAIlC,GAAuBa,kBAAkB4C,EAAAH,GAAMC,SAAS5H,OAX1E,yBAAA8H,EAAAtB,SAAAmH,GAAAjH,KAAA,UAgBA,SAAUyG,KAAV,OAAAnH,GAAAC,EAAAC,KAAA,SAAAgC,GAAA,cAAAA,EAAA9B,KAAA8B,EAAA7B,MAAA,OACI,OADJ6B,EAAA7B,KAAA,EACUO,aAAUnK,GAA+B6H,IADnD,wBAAA4D,EAAA1B,SAAAoH,GAAAlH,MAIA,SAAU0G,KAAV,OAAApH,GAAAC,EAAAC,KAAA,SAAAkC,GAAA,cAAAA,EAAAhC,KAAAgC,EAAA/B,MAAA,OACI,OADJ+B,EAAA/B,KAAA,EACUO,aAAUnK,GAA8BgI,IADlD,wBAAA2D,EAAA5B,SAAAqH,GAAAnH,MAIA,SAAU2G,KAAV,OAAArH,GAAAC,EAAAC,KAAA,SAAAqC,GAAA,cAAAA,EAAAnC,KAAAmC,EAAAlC,MAAA,OACI,OADJkC,EAAAlC,KAAA,EACUO,aAAUnK,GAA+BoI,IADnD,wBAAA0D,EAAA/B,SAAAsH,GAAApH,MAIA,SAAU4G,KAAV,OAAAtH,GAAAC,EAAAC,KAAA,SAAAuC,GAAA,cAAAA,EAAArC,KAAAqC,EAAApC,MAAA,OACI,OADJoC,EAAApC,KAAA,EACUO,aAAUnK,GAAiCuI,IADrD,wBAAAyD,EAAAjC,SAAAuH,GAAArH,MAKO,SAAU6G,KAAV,OAAAvH,GAAAC,EAAAC,KAAA,SAAA0C,GAAA,cAAAA,EAAAxC,KAAAwC,EAAAvC,MAAA,OACH,OADGuC,EAAAvC,KAAA,EACGwD,aAAI,CACNsD,KACAC,KACAC,KACAC,OALD,wBAAA1E,EAAApC,SAAAwH,GAAAtH,uBCxEGzE,iBAcAgM,iBAIA1L,iBAaA2L,iBAIA9L,iBAeA+L,iBAIOC,IAtDjB,SAAUnM,KAAV,IAAA8E,EAAA,OAAAf,GAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAGoB,OAHpBF,EAAAC,KAAA,EAEQrO,EAAe,0BAFvBoO,EAAAE,KAAA,EAG0BkE,GAAKC,IAAL,cAH1B,OAIQ,OADMzD,EAHdZ,EAAAqB,KAAArB,EAAAE,KAAA,EAIcE,aAAIvE,GAAgBE,wBAAwB6E,EAAI/G,KAAKA,OAJnE,OAKQ3H,EAAe,oBALvB8N,EAAAE,KAAA,iBAQQ,OARRF,EAAAC,KAAA,GAAAD,EAAAwB,GAAAxB,EAAA,SAOQ/I,QAAQC,IAAR8I,EAAAwB,IAPRxB,EAAAE,KAAA,GAQcE,aAAIvE,GAAgBG,wBAAwBgE,EAAAwB,GAAMC,SAAS5H,OARzE,QASQ,OATRmG,EAAAE,KAAA,GASc9N,EAAa,gCAT3B,yBAAA4N,EAAAK,SAAA6H,GAAA3H,KAAA,UAcA,SAAUuH,KAAV,OAAAjI,GAAAC,EAAAC,KAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAN,MAAA,OACI,OADJM,EAAAN,KAAA,EACU0B,aAAWtL,GAAwCwF,IAD7D,wBAAA0E,EAAAH,SAAA8H,GAAA5H,MAIA,SAAUnE,GAAVpB,GAAA,IAAAzC,EAAAqI,EAAA,OAAAf,GAAAC,EAAAC,KAAA,SAAAiB,GAAA,cAAAA,EAAAf,KAAAe,EAAAd,MAAA,OAGoB,OAHK3H,EAAzByC,EAAyBzC,WAAzByI,EAAAf,KAAA,EAEQrO,EAAe,sBAAuB,GAF9CoP,EAAAd,KAAA,EAG0BkE,GAAKC,IAAL,cAAApL,OAAuBV,IAHjD,OAIQ,OADMqI,EAHdI,EAAAK,KAAAL,EAAAd,KAAA,EAIcE,aAAIvE,GAAgBQ,qBAAqBuE,EAAI/G,KAAKtD,IAAKqK,EAAI/G,KAAKA,OAJ9E,OAKQ,OALRmH,EAAAd,KAAA,GAKchO,EAAe,mBAL7B,QAAA8O,EAAAd,KAAA,iBAQQ,OARRc,EAAAf,KAAA,GAAAe,EAAAQ,GAAAR,EAAA,SAOQ/J,QAAQC,IAAR8J,EAAAQ,IAPRR,EAAAd,KAAA,GAQc9N,EAAa,0BAR3B,QASQ,OATR4O,EAAAd,KAAA,GAScE,aAAIvE,GAAgBS,qBAAqB0E,EAAAQ,GAAMC,SAAS5H,OATtE,yBAAAmH,EAAAX,SAAA+H,GAAA7H,KAAA,UAaA,SAAUwH,KAAV,OAAAlI,GAAAC,EAAAC,KAAA,SAAA4B,GAAA,cAAAA,EAAA1B,KAAA0B,EAAAzB,MAAA,OACI,OADJyB,EAAAzB,KAAA,EACU0B,aAAWtL,GAAoC8F,IADzD,wBAAAuF,EAAAtB,SAAAgI,GAAA9H,MAIA,SAAUtE,GAAV0E,GAAA,IAAAjI,EAAAkI,EAAA,OAAAf,GAAAC,EAAAC,KAAA,SAAAgC,GAAA,cAAAA,EAAA9B,KAAA8B,EAAA7B,MAAA,OAEQ,OAFkBxH,EAA1BiI,EAA0BjI,YAA1BqJ,EAAA9B,KAAA,EAAA8B,EAAA7B,KAAA,EAEctO,EAAe,wBAAyB,GAFtD,OAGoB,OAHpBmQ,EAAA7B,KAAA,EAG0BkE,GAAKlD,KAAL,aAAwBxI,GAHlD,OAKQ,OAFMkI,EAHdmB,EAAAV,KAAAU,EAAA7B,KAAA,EAKchO,EAAe,qBAL7B,OAMQ,OANR6P,EAAA7B,KAAA,GAMcE,aAAIvE,GAAgBK,sBAAsB0E,EAAI/G,KAAKtD,IAAKqK,EAAI/G,KAAKA,OAN/E,QAAAkI,EAAA7B,KAAA,iBAUQ,OAVR6B,EAAA9B,KAAA,GAAA8B,EAAAP,GAAAO,EAAA,SASQ9K,QAAQC,IAAR6K,EAAAP,IATRO,EAAA7B,KAAA,GAUcE,aAAIvE,GAAgBM,sBAAsB4F,EAAAP,GAAMC,SAAS5H,OAVvE,QAWQ,OAXRkI,EAAA7B,KAAA,GAWc9N,EAAa,4BAX3B,yBAAA2P,EAAA1B,SAAAiI,GAAA/H,KAAA,UAeA,SAAUyH,KAAV,OAAAnI,GAAAC,EAAAC,KAAA,SAAAkC,GAAA,cAAAA,EAAAhC,KAAAgC,EAAA/B,MAAA,OACI,OADJ+B,EAAA/B,KAAA,EACU0B,aAAWtL,GAAqC2F,IAD1D,wBAAAgG,EAAA5B,SAAAkI,GAAAhI,MAIO,SAAU0H,KAAV,OAAApI,GAAAC,EAAAC,KAAA,SAAAqC,GAAA,cAAAA,EAAAnC,KAAAmC,EAAAlC,MAAA,OACH,OADGkC,EAAAlC,KAAA,EACGwD,aAAI,CACNoE,KACAC,KACAC,OAJD,wBAAA5F,EAAA/B,SAAAmI,GAAAjI,uBCtDGkI,iBAWAC,iBAKOC,IAhBjB,SAAUF,KAAV,IAAA7H,EAAA,OAAAf,GAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEoB,OAFpBF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAE0BkE,GAAKC,IAAL,YAF1B,OAGQ,OADMzD,EAFdZ,EAAAqB,KAAArB,EAAAE,KAAA,EAGcE,aAAIpB,GAAeE,kBAAkB0B,EAAI/G,KAAKA,OAH5D,OAAAmG,EAAAE,KAAA,gBAMe,OANfF,EAAAC,KAAA,EAAAD,EAAAwB,GAAAxB,EAAA,SAKQ/I,QAAQC,IAAR8I,EAAAwB,IALRxB,EAAAE,KAAA,GAMqBE,aAAIpB,GAAeG,kBAAkBa,EAAAwB,GAAMC,SAAS5H,OANzE,eAAAmG,EAAA+F,OAAA,SAAA/F,EAAAqB,MAAA,yBAAArB,EAAAK,SAAAuI,GAAArI,KAAA,SAWA,SAAUmI,KAAV,OAAA7I,GAAAC,EAAAC,KAAA,SAAAS,GAAA,cAAAA,EAAAP,KAAAO,EAAAN,MAAA,OACI,OADJM,EAAAN,KAAA,EACUO,aAAUnK,EAAmCmS,IADvD,wBAAAjI,EAAAH,SAAAwI,GAAAtI,MAKO,SAAUoI,KAAV,OAAA9I,GAAAC,EAAAC,KAAA,SAAAiB,GAAA,cAAAA,EAAAf,KAAAe,EAAAd,MAAA,OACH,OADGc,EAAAd,KAAA,EACGwD,aAAI,CACNgF,OAFD,wBAAA1H,EAAAX,SAAAyI,GAAAvI,MCPP,IAAMwI,GAAmBC,OAAOC,sCAAwCC,IAClEC,GAAiBC,cACjBC,GAAgB,CAClBvQ,IAAK,OACLC,YACAuQ,UAAW,CAAC,OAAQ,aAElBC,GAAmBC,YAAeH,GAAe1Q,IAGjD8Q,GAAQC,YACVH,GACAR,GAAiBY,YAAgBR,MAE/BS,GAAYC,YAAaJ,IAG/BN,GAAeW,IAAI3F,IACnBgF,GAAeW,IAAIlK,IACnBuJ,GAAeW,IAAIlE,IACnBuD,GAAeW,IAAInU,IACnBwT,GAAeW,IAAI1C,IACnB+B,GAAeW,IAAI7B,IACnBkB,GAAeW,IAAInB,ICjCZ,IAAMvE,GAAOnD,IAAM8I,OAAO,CAC7BC,QAAS,OACT7I,QAAS,CAACC,eAAgB,sBAG9BgD,GAAK6F,aAAaC,QAAQC,IACtB,SAAUzY,GACN,IAAM0Y,EAASja,IACf,IAAKia,EAAQ,MAAM,IAAI/G,MAAM,mBAE7B,OADA3R,EAAOyP,QAAUiJ,EACV1Y,GAEX,SAAUF,GAEN,OADAyF,QAAQC,IAAI1F,GACL6Y,QAAQC,OAAO9Y,KAI9B4S,GAAK6F,aAAaxI,SAAS0I,IAAI,SAAA1I,GAC3B,OAAOA,GACR,SAAAjQ,GAKC,OAJ8B,MAA1BA,EAAMiQ,SAASlK,SACfN,QAAQC,IAAI,sBACZuS,GAAMc,SAASrR,GAAYiB,WAExBkQ,QAAQC,OAAO9Y,mBC5BpBgZ,GAAU,YAAIC,GAAQ,WAAY,GAW3BC,GATE,SAACC,GACZ,OAAOH,GAAQI,OAAOD,cCDbE,GAAe,SAAA7P,GAAuC,IAAzB8P,EAAyB9P,EAApC+P,UAAyBC,EAAW/V,OAAAgW,GAAA,EAAAhW,CAAA+F,EAAA,eAE/D,OADA/D,QAAQC,IAAI,qBAAsB/F,KAE9B+Z,EAAApL,EAAAqL,cAACC,EAAA,EAADnW,OAAAoW,OAAA,GAAWL,EAAX,CAAiBM,OAAQ,SAAAC,GAAK,OAC1Bpa,IACM+Z,EAAApL,EAAAqL,cAACL,EAAcS,GACfL,EAAApL,EAAAqL,cAACK,EAAA,EAAD,CAAUC,GAAI,CAACC,SAAU,SAAUvV,MAAO,CAACwV,KAAMJ,EAAMK,mOCPnEC,GAAWC,KAAKC,KAGhBC,8MACF7V,MAAQ,CACJ8V,gBAAiBC,EAAKX,MAAM/U,UAAU2V,mBAAqB,EAC3DC,gBAAiBF,EAAKX,MAAM/U,UAAU6V,YACtCC,aAAc,CAACC,EAAG,cAAeC,EAAG,UAAWC,EAAG,UAAWC,GAAI,WAAYC,GAAI,eAGrFC,kBAAoB,WAChBV,EAAKW,SAAS,CAACZ,iBAAkBC,EAAK/V,MAAM8V,qBAGhDa,mBAAqB,WACjBZ,EAAKW,SAAS,CAACT,iBAAkBF,EAAK/V,MAAMiW,qBAUhDW,WAAa,WACTb,EAAKX,MAAMyB,KAAKC,eAAe,SAACC,EAAKC,GAC5BD,IACGhB,EAAK/V,MAAM8V,kBACXkB,EAAOC,kBAAoB,GAE/BD,EAAM,cAAoBjB,EAAK/V,MAAMiW,gBAErCF,EAAKX,MAAMwB,WAAWI,0FAb9B5M,KAAKsM,SAAS,CACVQ,WAAY9M,KAAKgL,MAAM/U,UAAU2V,qDAkBrC,IAAMmB,EAAiB,CACnBC,SAAU,CAACC,KAAM,GACjBC,WAAY,CAACD,KAAM,KAGjBE,EAAazY,OAAO2D,KAAK2H,KAAKpK,MAAMmW,cACpCqB,EAAkBC,SAASF,EAAWA,EAAW3b,OAAS,IAEzD8b,EAAqBtN,KAAKgL,MAAMyB,KAAhCa,kBACArX,EAAa+J,KAAKgL,MAAlB/U,UAEc+J,KAAKpK,MAAnBkX,WAEP,OACInC,EAAApL,EAAAqL,cAAC2C,GAAA,EAAD,CACIzc,MAAM,iBACN0c,QAASxN,KAAKgL,MAAMwC,QACpBC,MAAO,IACPC,gBAAgB,EAChBC,SAAU3N,KAAKgL,MAAM4C,aACrBC,OAAQ,CACJlD,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQvV,IAAI,SAASzC,KAAK,SAASiY,QAAS/N,KAAKgL,MAAMgD,cAAvD,UAGArD,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQvV,IAAI,SAASwV,QAAS/N,KAAKgL,MAAM4C,cAAzC,UACAjD,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQvV,IAAI,SAASzC,KAAK,UAAUiY,QAAS/N,KAAKwM,YAAlD,UAKJ7B,EAAApL,EAAAqL,cAACqD,GAAA,EAAD,CAAMC,OAAO,cACTvD,EAAApL,EAAAqL,cAACuD,GAADzZ,OAAAoW,OAAA,CACIsD,MAAM,iBACNC,MAAM,0EACFtB,GAEAO,EAAkB,gBAAiB,CAC/BgB,aAAcrY,EAAUsY,KACxBC,MAAO,CAAC,CACJC,UAAU,EACV1d,QAAS,sCAJjBuc,CAOC3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOC,YAAY,8CAI5BhE,EAAApL,EAAAqL,cAACuD,GAADzZ,OAAAoW,OAAA,CACIsD,MAAM,kBACNC,MAAM,sCACFtB,GAGAO,EAAkB,iBAAkB,CAChCgB,aAAcrY,EAAU2Y,QACxBJ,MAAO,CAAC,CACJC,UAAU,EACV1d,QAAS,uCAJjBuc,CAOI3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOC,YAAY,qCAK/BhE,EAAApL,EAAAqL,cAACuD,GAADzZ,OAAAoW,OAAA,CACIsD,MAAM,eACNC,MAAM,0CACFtB,GAEAO,EAAkB,cAAe,CAC7BgB,aAAcrY,EAAU4Y,WACxBL,MAAO,CAAC,CACJC,UAAU,EACV1d,QAAS,oCAJjBuc,CAOI3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOC,YAAY,wBAK/BhE,EAAApL,EAAAqL,cAACuD,GAADzZ,OAAAoW,OAAA,GACQiC,EADR,CAEIqB,MAAM,gBACNC,MAAM,uEAEN1D,EAAApL,EAAAqL,cAACkE,GAAA,EAAD,CAAQC,SAAU/O,KAAKpK,MAAM8V,gBAAiBsD,SAAUhP,KAAKqM,kBACrD4C,MAAO,CAACC,YAAa,SAC5B5B,EAAkB,oBAAqB,CAACgB,aAA8C,IAAhCrY,EAAU2V,kBAA0B,EAAI3V,EAAU2V,mBAAxG0B,CACG3C,EAAApL,EAAAqL,cAACuE,GAAA,EAAD,CAAaC,SAAUpP,KAAKpK,MAAM8V,gBAAiB2D,IAAK,KAE5D1E,EAAApL,EAAAqL,cAAA,QAAM0E,UAAU,iBAAhB,aAGJ3E,EAAApL,EAAAqL,cAACuD,GAADzZ,OAAAoW,OAAA,GACQiC,EADR,CAEIqB,MAAM,mBACNC,MAAM,4EAEN1D,EAAApL,EAAAqL,cAACkE,GAAA,EAAD,CAAQC,QAAS/O,KAAKpK,MAAMiW,gBAAiBmD,SAAUhP,KAAKuM,mBACpD0C,MAAO,CAACC,YAAa,UAGjCvE,EAAApL,EAAAqL,cAACuD,GAADzZ,OAAAoW,OAAA,GACQiC,EADR,CAEIqB,MAAM,gBACNC,MAAM,4JAELf,EAAkB,aAAc,CAC7BgB,aAActO,KAAKgL,MAAM/U,UAAUsZ,YADtCjC,CAGG3C,EAAApL,EAAAqL,cAAC4E,GAAA,EAAD,CACIC,IAAKrC,EACLgC,UAAWpP,KAAKpK,MAAMiW,gBACtB6D,MAAO1P,KAAKpK,MAAMmW,aAAc4D,KAAM,kBAvJjCpF,aAiKtBgB,QAAK/B,QAAL+B,CAAcE,ICjKvBmE,GAAUC,KAAMD,QAGhBE,8MAEFtD,WAAa,SAAC9R,GACViR,EAAKX,MAAM+E,YAEXpE,EAAKX,MAAMhB,SAAShQ,GAAiBQ,gBAAgB,CACjD/D,YAAakV,EAAKX,MAAM/U,UAAUO,GAClCkE,gBAAiBA,QAKzBsT,aAAe,SAACgC,GACZJ,GAAQ,CACJ9e,MAAK,gCACLmf,QAAO,mFACPC,KAAM,WACFvE,EAAKX,MAAMhB,SAAShQ,GAAiBa,gBAAgB8Q,EAAKX,MAAM/U,UAAUO,KAC1EmV,EAAKX,MAAM+E,wFAMnB,OACIpF,EAAApL,EAAAqL,cAACuF,GAAD,CAAwBla,UAAW+J,KAAKgL,MAAM/U,UAAWuX,QAASxN,KAAKgL,MAAMwC,QACrDhB,WAAYxM,KAAKwM,WAAYoB,aAAc5N,KAAKgL,MAAM+E,UACtD/B,aAAchO,KAAKgO,sBA3BvBzD,aAoCjB6F,gBAHS,SAACxa,GAAD,MAAY,CAChCV,UAAWU,EAAMK,UAAUf,YAEhBkb,CAAyBN,ICvCjCO,GAAQC,KAARD,KAEDE,GAAO,SAACta,GAAD,OACT0U,EAAApL,EAAAqL,cAAC4F,GAAA,EAAD,KACI7F,EAAApL,EAAAqL,cAAC4F,GAAA,EAAKhF,KAAN,CAAWjT,IAAI,KACXoS,EAAApL,EAAAqL,cAAC6F,GAAA,EAAD,CAAMvF,GAAI,CACAC,SAAQ,cAAAzS,OAAgBzC,EAAUO,GAA1B,aACRZ,MAAO,CAACK,UAAWA,KAEzB0U,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,SAJf,mBAOJ6U,EAAApL,EAAAqL,cAAC4F,GAAA,EAAKhF,KAAN,CAAWjT,IAAI,KACXoS,EAAApL,EAAAqL,cAAC6F,GAAA,EAAD,CAAMvF,GAAI,CACAC,SAAQ,cAAAzS,OAAgBzC,EAAUO,GAA1B,cACRZ,MAAO,CAACK,UAAWA,KAEzB0U,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,eAJf,eAOJ6U,EAAApL,EAAAqL,cAAC4F,GAAA,EAAKG,QAAN,MACAhG,EAAApL,EAAAqL,cAAC4F,GAAA,EAAKhF,KAAN,CAAWjT,IAAI,KACXoS,EAAApL,EAAAqL,cAAC6F,GAAA,EAAD,CAAMvF,GAAI,CACAC,SAAQ,cAAAzS,OAAgBzC,EAAUO,GAA1B,gBACRZ,MAAO,CAACK,UAAWA,KAEzB0U,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,SAJf,mBAUN8a,GAAS,CAIX,sHAoEWC,8MA9DXjb,MAAQ,CAAC4X,SAAS,KAElBsD,UAAY,WACRnF,EAAKW,SAAS,CACVkB,SAAS,OAIjBuC,UAAY,WACRpE,EAAKW,SAAS,CACVkB,SAAS,OAIjBuD,gBAAkB,SAAChC,GAAD,OAAapD,EAAKX,MAAMgG,cAAcjC,EAASpD,EAAKX,MAAM/U,UAAUO,6EAE7E,IAAAya,EACiCjR,KAAKgL,MAApC/U,EADFgb,EACEhb,UAAWW,EADbqa,EACara,iBAClB,OACI+T,EAAApL,EAAAqL,cAAAD,EAAApL,EAAA2R,SAAA,KACIvG,EAAApL,EAAAqL,cAACuG,GAAA,EAAD,CAAMzf,QAASsO,KAAKgL,MAAM9V,UAAW+Z,MAAO,CAACxB,MAAO,IAAK2D,OAAQ,GAAIC,MAAO,OAAQC,OAAQ,KACtFC,MACI5G,EAAApL,EAAAqL,cAAA,OAAK4G,IAAI,UACJF,OAAQ,IACR7D,MAAM,OACNgE,IAAKb,GAAOc,KAAKC,MAAMD,KAAKE,SAAWhB,GAAOpf,WAEvDV,MAAOmF,EAAUsY,KACjBF,MAAO1D,EAAApL,EAAAqL,cAACkE,GAAA,EAAD,CAAQpd,QAASkF,EAAkBmY,QAAS9Y,EAAUc,OAAQiY,SAAUhP,KAAK+Q,kBACpFc,QAAS,CACLlH,EAAApL,EAAAqL,cAAA,OAAKmD,QAAS/N,KAAK8Q,WACfnG,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,YACX6U,EAAApL,EAAAqL,cAAA,0BAGJD,EAAApL,EAAAqL,cAAA,WACID,EAAApL,EAAAqL,cAAC6F,GAAA,EAAD,CAAMvF,GAAI,CACFC,SAAQ,cAAAzS,OAAgBzC,EAAUO,GAA1B,SACRZ,MAAO,CAACK,UAAWA,KAEvB0U,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,UACX6U,EAAApL,EAAAqL,cAAA,uBAIRD,EAAApL,EAAAqL,cAACkH,GAAA,EAAD,CAAUC,QAASxB,GAAKta,GAAY+b,QAAS,CAAC,UAC1CrH,EAAApL,EAAAqL,cAAA,KAAG0E,UAAU,qBAAb,UAIV3E,EAAApL,EAAAqL,cAACyF,GAAD,CAAMnf,YAAa+E,EAAU4Y,cAGjClE,EAAApL,EAAAqL,cAACqH,GAAD,CAAmBhc,UAAWA,EACX8Z,UAAW/P,KAAK+P,UAChBvC,QAASxN,KAAKpK,MAAM4X,kBAzD/BjD,uBCxClBe,GAAWC,KAAKC,KAChB0G,GAASC,KAAOD,OAGhBxgB,GAAU,WACZX,IAAQW,QAAQ,mBAAoB,IAGlC0gB,8MAEFxc,MAAQ,CACJ8V,iBAAiB,EACjBG,iBAAiB,EACjBE,aAAc,CAACC,EAAG,cAAeC,EAAG,UAAWC,EAAG,UAAWC,GAAI,WAAYC,GAAI,eAGrFC,kBAAoB,WAChBV,EAAKW,SAAS,CAACZ,iBAAkBC,EAAK/V,MAAM8V,qBAGhDa,mBAAqB,WACjBZ,EAAKW,SAAS,CAACT,iBAAkBF,EAAK/V,MAAMiW,qBAGhDwG,UAAY,WACR1G,EAAKX,MAAMyB,KAAKC,eAAe,SAACC,EAAKC,GAC5BD,IACEhB,EAAK/V,MAAM8V,kBAAkBkB,EAAOC,kBAAoB,GAC3DD,EAAM,cAAoBjB,EAAK/V,MAAMiW,gBACrCnV,QAAQC,IAAIiW,GAEZjB,EAAKX,MAAMhB,SAAShQ,GAAiBI,aAAawS,IAClDlb,2FAKO4gB,GACVtS,KAAKgL,MAAM7U,UAAY6J,KAAKgL,MAAM7U,WAAamc,EAAUnc,WAC1D6J,KAAKgL,MAAM+E,YACXhf,IAAQkB,UACRlB,IAAQa,QAAQoO,KAAKgL,MAAM5U,8CAM/B,IAAM2W,EAAiB,CACnBC,SAAU,CAACC,KAAM,GACjBC,WAAY,CAACD,KAAM,KAGjBE,EAAazY,OAAO2D,KAAK2H,KAAKpK,MAAMmW,cACpCqB,EAAkBC,SAASF,EAAWA,EAAW3b,OAAS,IAEzD8b,EAAqBtN,KAAKgL,MAAMyB,KAAhCa,kBAEP,OACI3C,EAAApL,EAAAqL,cAAC2C,GAAA,EAAD,CACIE,MAAO,IACP3c,MAAM,uBACN0c,QAASxN,KAAKgL,MAAMwC,QACpB0C,KAAMlQ,KAAKuS,SACX5E,SAAU3N,KAAK4N,aACfF,gBAAgB,EAChBG,OAAQ,CACJlD,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQvV,IAAI,SAASwV,QAAS/N,KAAKgL,MAAM+E,WAAzC,UACApF,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQvV,IAAI,SAASzC,KAAK,UAAUiY,QAAS/N,KAAKqS,WAAlD,SAIJ1H,EAAApL,EAAAqL,cAACqD,GAAA,EAAD,CAAMC,OAAO,cACTvD,EAAApL,EAAAqL,cAAC4H,GAAD9d,OAAAoW,OAAA,CACIsD,MAAM,iBACNC,MAAM,0EACFtB,GACHO,EAAkB,gBAAiB,CAChCkB,MAAO,CAAC,CACJC,UAAU,EACV1d,QAAS,sCAHhBuc,CAMG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOC,YAAY,8CAI3BhE,EAAApL,EAAAqL,cAAC4H,GAAD9d,OAAAoW,OAAA,CACIsD,MAAM,kBACNC,MAAM,sCACFtB,GACHO,EAAkB,iBAAkB,CACjCkB,MAAO,CAAC,CACJC,UAAU,EACV1d,QAAS,uCAHhBuc,CAMG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOC,YAAY,qCAI3BhE,EAAApL,EAAAqL,cAAC4H,GAAD9d,OAAAoW,OAAA,CACIsD,MAAM,eACNC,MAAM,0CACFtB,GACHO,EAAkB,cAAe,CAC9BkB,MAAO,CAAC,CACJC,UAAU,EACV1d,QAAS,oCAHhBuc,CAMG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOC,YAAY,wBAI3BhE,EAAApL,EAAAqL,cAAC4H,GAAD9d,OAAAoW,OAAA,GACIiC,EADJ,CAEAqB,MAAM,gBACNC,MAAM,uEAEN1D,EAAApL,EAAAqL,cAACkE,GAAA,EAAD,CAAQ2D,gBAAgB,EAAOzD,SAAUhP,KAAKqM,kBAAmB4C,MAAO,CAACC,YAAa,SACrF5B,EAAkB,oBAAqB,CAAEgB,aAAc,GAAvDhB,CACG3C,EAAApL,EAAAqL,cAACuE,GAAA,EAAD,CAAaC,SAAUpP,KAAKpK,MAAM8V,gBAAiB2D,IAAK,KAE5D1E,EAAApL,EAAAqL,cAAA,QAAM0E,UAAU,iBAAhB,aAGA3E,EAAApL,EAAAqL,cAAC4H,GAAD9d,OAAAoW,OAAA,GACQiC,EADR,CAEIqB,MAAM,mBACNC,MAAM,4EAEN1D,EAAApL,EAAAqL,cAACkE,GAAA,EAAD,CAAQC,QAAS/O,KAAKpK,MAAMiW,gBAAiBmD,SAAUhP,KAAKuM,mBACpD0C,MAAO,CAACC,YAAa,UAGjCvE,EAAApL,EAAAqL,cAAC4H,GAAD9d,OAAAoW,OAAA,GACQiC,EADR,CAEIqB,MAAM,gBACNC,MAAM,4JAELf,EAAkB,aAAc,CAC7BgB,aAAcjB,SAASF,EAAWA,EAAW3b,OAAS,KADzD8b,CAGG3C,EAAApL,EAAAqL,cAAC4E,GAAA,EAAD,CACIC,IAAKrC,EACLgC,UAAWpP,KAAKpK,MAAMiW,gBACtB6D,MAAO1P,KAAKpK,MAAMmW,aAAc4D,KAAM,SAIlDhF,EAAApL,EAAAqL,cAAC4H,GAAD9d,OAAAoW,OAAA,GAAciC,EAAd,CACUqB,MAAM,uBAGRd,EAAkB,WAAlBA,CACI3C,EAAApL,EAAAqL,cAAC8H,GAAA,EAAD,CAAQ/D,YAAY,0BAChBhE,EAAApL,EAAAqL,cAACsH,GAAD,CAAQS,MAAM,eAAd,eACAhI,EAAApL,EAAAqL,cAACsH,GAAD,CAAQS,MAAM,YAAd,YACAhI,EAAApL,EAAAqL,cAACsH,GAAD,CAAQS,MAAM,SAAd,qBAtJJpI,aAwKjB6F,mBAPf,SAAyBxa,GACrB,MAAO,CACHQ,WAAYR,EAAMK,UAAUG,WAC5BD,SAAUP,EAAMK,UAAUE,WAInBia,CAAyB7E,KAAK/B,QAAL+B,CAAc6G,KC7KhDxC,GAAUC,KAAMD,QAEhBgD,8MACFhd,MAAQ,CACJ4X,SAAS,KASbsD,UAAY,kBAAMnF,EAAKW,SAAS,CAACkB,SAAS,OAC1CuC,UAAY,kBAAMpE,EAAKW,SAAS,CAACkB,SAAS,OAC1CwD,cAAgB,SAACjC,EAAStY,GAClBsY,EAUJpD,EAAKX,MAAMhB,SAAShQ,GAAiBgB,sBAAsBvE,EAAasY,IATpEa,GAAQ,CACJ9e,MAAK,uBACLmf,QAAStF,EAAApL,EAAAqL,cAAA,+DACTsF,KAAM,WACFvE,EAAKX,MAAMhB,SAAShQ,GAAiBgB,sBAAsBvE,EAAasY,2FAZpF/O,KAAKgL,MAAMhB,SAAShQ,GAAiBC,oDAoBhC,IAAA4Y,EAAA7S,KACL,OACI2K,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACqC,OAAQ,SACjB3G,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOrlB,OACnBkd,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOnlB,cACnBgd,EAAApL,EAAAqL,cAAA,WACID,EAAApL,EAAAqL,cAAA,6BACAD,EAAApL,EAAAqL,cAAA,4DAEJD,EAAApL,EAAAqL,cAAA,WACID,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQwB,UAAWwD,KAAO/kB,oBAAqB+H,KAAK,UAAU4a,KAAK,OAC3D3C,QAAS/N,KAAK8Q,WADtB,mBAQRnG,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOjlB,YACnB8c,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOpkB,gBAEfsR,KAAKgL,MAAM/V,cAAc,GAEjB+K,KAAKgL,MAAM/V,cAAc6B,IAAI,SAACb,EAAW8c,GAAZ,OAAkBpI,EAAApL,EAAAqL,cAACoI,GAAD,CAAW/c,UAAWA,EACXsC,IAAKwa,EACLE,MAAOF,EACPnc,iBAAkBic,EAAK7H,MAAMpU,iBAC7Boa,cAAe6B,EAAK7B,cACpB9b,UAAW2d,EAAK7H,MAAM9V,cAGlFyV,EAAApL,EAAAqL,cAACsI,GAAA,EAAD,CAAUC,QAAM,OAOtCxI,EAAApL,EAAAqL,cAACwI,GAAD,CAAmB5F,QAASxN,KAAKpK,MAAM4X,QACpBuC,UAAW/P,KAAK+P,oBAlE1BxF,aAkFV6F,mBATf,SAAyBxa,GACrB,MAAO,CACHX,cAAeW,EAAMK,UAAUhB,cAC/Boe,aAAczd,EAAMK,UAAUod,aAC9Bne,UAAWU,EAAMK,UAAUf,UAC3B0B,iBAAkBhB,EAAMK,UAAUW,mBAI3BwZ,CAAyBwC,0GCHzBU,8MAnFXC,UAAY,WAAM,IAAAtC,EACsBtF,EAAKX,MAAlCwI,EADOvC,EACPuC,SAAUC,EADHxC,EACGwC,gBAGjB,OAAO,IAAI3J,QAAQ,SAAC4J,EAAS3J,GACzB,IAAIyJ,EAAS,GAsBT,OADAziB,IAAQE,MAAM,wCACP8Y,EAAO,CACVnJ,aAASnP,EACT6H,UAAM7H,IAvBVgiB,EAAgB,CAACE,iBAAiB,IAClC,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,mBAAmBN,EAAS,IACnCI,EAAOG,OAAS,WACZ,IAAMC,EAAS,IAAI9kB,KACnB8kB,EAAOC,YAAYL,EAAOM,QAC1BF,EAAOG,UAAY,SAACC,GAEhB,OADAX,EAAgB,CAACE,iBAAiB,IAC9BS,EAAM9a,KAAKsH,QACJ8S,EAAQU,EAAM9a,OAErBvI,IAAQE,MAAM,gCACP8Y,EAAO,CACVnJ,aAASnP,EACT6H,UAAM7H,kFAezB,IAAA4iB,EAC+BrU,KAAKgL,MAAlCwI,EADFa,EACEb,SAAUC,EADZY,EACYZ,gBACXzI,EAAQ,CACVsJ,SAAU,UACVC,UAAU,EACVC,gBAAgB9f,OAAA4B,GAAA,EAAA5B,CAAK8e,GACrBiB,OAAO,oGACPC,SAAU,SAAAC,GACNlB,EAAgB,SAAC7d,GACb,IAAMqd,EAAQrd,EAAM4d,SAASoB,QAAQD,GAC/BE,EAAcjf,EAAM4d,SAASsB,QAEnC,OADAD,EAAY5c,OAAOgb,EAAO,GACnB,CACHO,SAAUqB,MAItBE,aAAc,SAAAJ,GAGV,OAFAA,EAAKK,SAAW,kHAChBvB,EAAgB,iBAAO,CAACD,SAAU,CAACmB,OAC5B,GAEXnB,YAIJ,OACI7I,EAAApL,EAAAqL,cAAA,WACID,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACgG,UAAW,WACpBtK,EAAApL,EAAAqL,cAAA,OAEI6G,IAAG,GAAA/Y,OAAK+P,OAAO4C,SAAS6J,SAArB,MAAAxc,OAAkC+P,OAAO4C,SAAS8J,UAAlDzc,OAA6D+P,OAAO4C,SAAS+J,KAAO,IAAM3M,OAAO4C,SAAS+J,KAAO,GAAjH,kCACH5D,IAAI,oBACJvC,MAAO,CAACxB,MAAO,OACnB9C,EAAApL,EAAAqL,cAAA,qEAEJD,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACgG,UAAW,WACpBtK,EAAApL,EAAAqL,cAACyK,GAAA,EAAWrK,EACRL,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,KACInD,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,WADf,qBA3ESyU,aCF3Be,GAAWC,KAAKC,KAChB0G,GAASC,KAAOD,OAEhBoD,oLAEE,IAAMvI,EAAiB,CACnBC,SAAU,CAACC,KAAM,GACjBC,WAAY,CAACD,KAAM,KAEhBK,EAAqBtN,KAAKgL,MAAMyB,KAAhCa,kBACAiI,EAAmBvV,KAAKgL,MAAxBuK,gBAEP,OACI5K,EAAApL,EAAAqL,cAAA,WACID,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACgG,UAAW,WACpBtK,EAAApL,EAAAqL,cAAA,OACI6G,IAAI,wHACJD,IAAI,oBACJvC,MAAO,CAACqC,OAAQ,IAAKkE,aAAc,OAE3C7K,EAAApL,EAAAqL,cAACqD,GAAA,EAAD,CAAMC,OAAO,cACTvD,EAAApL,EAAAqL,cAAC6K,GAAD/gB,OAAAoW,OAAA,CAAUsD,MAAM,gBACNC,MAAM,uCACFtB,GACTO,EAAkB,eAAgB,CAC/BgB,aAActO,KAAKgL,MAAM0K,sBAAsBC,aAC/CnH,MAAO,CAAC,CACJC,UAAU,EACV1d,QAAS,sCAJhBuc,CAOG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOC,YAAY,mDAI3BhE,EAAApL,EAAAqL,cAAC6K,GAAD/gB,OAAAoW,OAAA,CAAUsD,MAAM,gBACNC,MAAM,qCACFtB,GACTO,EAAkB,eAAgB,CAC/BgB,aAActO,KAAKgL,MAAM0K,sBAAsBE,aAC/CpH,MAAO,CAAC,CACJC,UAAU,EACV1d,QAAS,sCAJhBuc,CAOG3C,EAAApL,EAAAqL,cAAC8H,GAAA,EAAD,CAAQ/D,YAAY,qBAAqBjd,SAAa6jB,GAE9CA,EACIA,EAAgBM,MAAM/e,IAAI,SAAChB,EAAMyC,GAAP,OACtBoS,EAAApL,EAAAqL,cAACkL,GAAD,CAAQvd,IAAKA,EAAKoa,MAAO7c,GAAOA,KAClC,iBA/CNyU,aA0DrBgB,QAAK/B,QAAL+B,CAAc+J,IC3DvBhK,WAAWC,KAAKC,MAChB0G,GAASC,KAAOD,OA8ChB6D,8MACFngB,MAAQ,CACJogB,gBAAiB,MAGrBC,aAAe,SAAAD,GAAe,OAAIrK,EAAKW,SAAS,CAAC0J,gBAAiBthB,OAAA4B,GAAA,EAAA5B,CAAIiX,EAAK/V,MAAMogB,iBAAiBtd,OAAOsd,GAAiBE,cAC1HC,aAAe,SAAAC,GAAa,OAAIC,WAAW,kBAAM1K,EAAKW,SAAS,CAAC0J,gBAAiBrK,EAAK/V,MAAMogB,gBAAgBzf,OAAO,SAAA+f,GAAc,OAAIA,IAAmBF,OAAkB,QAS1KG,uBAAyB,SAACC,EAAiBC,EAAaC,GAOpD,IAMIC,EANAC,GAAU,EAGV7lB,EAAU,KAYd,GALI4lB,EAD2B,aAA3BH,EAAgBK,OACAJ,EAAYK,KAAK,IAEjBL,EAAY3f,IAAI,SAAAigB,GAAU,OAAIL,EAAWK,KAAaxgB,OAAO,SAAAygB,GAAI,OAAIA,IAAMF,KAAK,KAAKG,OAGrGT,EAAgB1gB,KAAKohB,SAAS,WAAY,CAE1C,IAAMC,EAAgB,cAAcC,KAAKZ,EAAgB1gB,MAAM,GAE3D6gB,EACIA,EAAcnlB,OAAS2lB,IACvBP,GAAU,EACV7lB,EAAO,GAAA2H,OAAMie,EAAN,oCAAAje,OAAsDye,IAEzDR,GAAkBH,EAAgBa,WAC1CT,GAAU,EACV7lB,EAAO,GAAA2H,OAAM+d,EAAN,sBAAA/d,OAAsCtI,KAAKO,UAAU+lB,KAiBpE,GAb6B,UAAzBF,EAAgB1gB,MACZ6gB,IACAA,EAAgBW,OAAOX,GACnBY,MAAMZ,IACNC,GAAU,EACV7lB,EAAO,GAAA2H,OAAMie,EAAN,4BACCA,GAAkBH,EAAgBa,WAC1CT,GAAU,EACV7lB,EAAO,GAAA2H,OAAM+d,EAAN,sBAAA/d,OAAsCtI,KAAKO,UAAU+lB,MAK3C,aAAzBF,EAAgB1gB,KAAqB,CACrC,IAAM0hB,EAAO,IAAIzW,KAAK4V,IAEtBA,EAAgB,CACZc,KAAMD,EAAKE,iBACXC,MAAOH,EAAKI,WAAa,EACzBC,IAAKL,EAAKM,YAGKL,MAASd,EAAcgB,OAAUhB,EAAckB,MAC9DjB,GAAU,EACV7lB,EAAO,GAAA2H,OAAMtI,KAAKO,UAAUgmB,GAArB,gCAIf,MAAO,CACHrd,KAAMqd,EACN5lB,QAASA,EACT6lB,QAASA,EACTmB,gBAAiBtB,MAOzBuB,UAAY,kBAAM,IAAIlO,QAAQ,SAAC4J,EAAS3J,GAAW,IAAAkH,EAC4BtF,EAAKX,MAAlE0B,EADiCuE,EACxCxE,KAAOC,eAAiBuL,EADgBhH,EAChBgH,UAAW1C,EADKtE,EACLsE,gBAAiBK,EADZ3E,EACY2E,aAC3DlJ,EAAe,SAACwL,EAAQC,GACpB,GAAID,EAEA,OADAnnB,IAAQE,MAAM,0CACP8Y,EAAO,YAGlB,IAAKkO,EAAU3e,KAEX,OADAvI,IAAQE,MAAM,qEACP8Y,EAAO,YASlB,IAAMiM,GALNmC,EAAUzjB,OAAO2D,KAAK8f,GAASrhB,IAAI,SAAAyB,GAC/B,MAAO,CAAC6f,UAAW7f,EAAK8f,YAAaF,EAAQ5f,OAIjBhC,OAAO,SAAAsgB,GAAM,QAAMA,EAAOwB,cAAa9hB,OAAO,SAAAsgB,GAAM,QAAMA,EAAOwB,YAAY,KAGzGC,EAAe,GAGfC,EAAiB,GAvBWC,GAAA,EAAAC,GAAA,EAAAC,OAAAjnB,EAAA,IAyBhC,QAAAknB,EAAAC,EAA0BX,EAAU3e,KAApCuf,OAAAC,cAAAN,GAAAG,EAAAC,EAAAjZ,QAAAoZ,MAAAP,GAAA,EAA0C,KAA/BQ,EAA+BL,EAAAhG,MAElCsG,EAAS,GAFyBC,GAAA,EAAAC,GAAA,EAAAC,OAAA3nB,EAAA,IAItC,IAJsC,IAItC4nB,EAJsCC,EAAA,eAI3BhD,EAJ2B+C,EAAA1G,MAK3ByF,EAA0B9B,EAA1B8B,UAAWC,EAAe/B,EAAf+B,YAGZ7B,EAAkBjB,EAAgBK,GAAc2D,KAAK,SAAAhE,GAAe,OAAIA,EAAgBsB,SAAWuB,IAGzGa,EAAOb,GAAazM,EAAK4K,uBAAuBC,EAA5B9hB,OAAA4B,GAAA,EAAA5B,CAAiD2jB,GAAcW,IAPvFQ,EAA6BxD,EAA7B6C,OAAAC,cAAAI,GAAAG,EAAAG,EAAA7Z,QAAAoZ,MAAAG,GAAA,EAA8CI,IAJR,MAAA3M,GAAAwM,GAAA,EAAAC,EAAAzM,EAAA,YAAAuM,GAAA,MAAAM,EAAAC,QAAAD,EAAAC,SAAA,WAAAN,EAAA,MAAAC,GAclC1kB,OAAOkY,OAAOqM,GAAQS,QAAQ,SAAA/G,GAAK,OAAIA,EAAMiE,UAAShC,SAAQ,IAAU,EACxE2D,EAAejhB,KAAK2hB,GAEpBX,EAAahhB,KAAK2hB,IA1CM,MAAAtM,GAAA8L,GAAA,EAAAC,EAAA/L,EAAA,YAAA6L,GAAA,MAAAI,EAAAa,QAAAb,EAAAa,SAAA,WAAAhB,EAAA,MAAAC,GA6ChC,OAAI1C,EAAgB,GACTtC,EAAQ,CACX4E,aAAcA,EACdC,eAAgBA,KAGpBxnB,IAAQE,MAAM,8BACP8Y,EAAO,0FAMjB,IAAA8I,EAAA7S,KACC+M,EAAiB,CACnBC,SAAU,CAACC,KAAM,GACjBC,WAAY,CAACD,KAAM,KAGhBK,EAAqBtN,KAAKgL,MAAMyB,KAAhCa,kBANF+G,EAOmCrU,KAAKgL,MAAtCuK,EAPFlB,EAOEkB,gBAAiBK,EAPnBvB,EAOmBuB,aACjBI,EAAmBhW,KAAKpK,MAAxBogB,gBACD2D,EAAkB3Z,KAAKgL,MAAMiN,UAAUrX,QAAQrK,OAAO,SAAAqjB,GAAC,OAAK5D,EAAgBkB,SAAS0C,KAE3F,OACIjP,EAAApL,EAAAqL,cAAA,WACO2K,EACC5K,EAAApL,EAAAqL,cAACqD,GAAA,EAAD,CAAMC,OAAO,cACRqH,EAAgBK,GAAc9e,IAAI,SAAChB,EAAMmd,GACtC,MAAoB,aAAhBnd,EAAK+gB,OACLlM,EAAApL,EAAAqL,cAACiP,GAADnlB,OAAAoW,OAAA,CAAUsD,MAAOtY,EAAK+gB,QAAY9J,EAAlC,CAAkDxU,IAAK0a,IAClD3F,EAAkBxX,EAAK+gB,OAAQ,CAC5BiD,aAAc9D,EACdxH,MAAO,CAAC,CAACC,UAAW3Y,EAAKuhB,SAAUtmB,QAAS,4BAF/Cuc,CAKG3C,EAAApL,EAAAqL,cAAC8H,GAAA,EAAD,CAAQna,IAAK0a,EAAOtE,YAAY,0BAC3B4G,EAAgBwE,cAAcjjB,IAC3B,SAACkjB,EAAc/G,GAAf,OACItI,EAAApL,EAAAqL,cAACqP,GAAD,CAAQ1hB,IAAK0a,EAAON,MAAOqH,GAAeA,QAyC9DrP,EAAApL,EAAAqL,cAACiP,GAADnlB,OAAAoW,OAAA,CAAUsD,MAAOtY,EAAK+gB,QAAY9J,EAAlC,CAAkDxU,IAAK0a,IAClD3F,EAAkBxX,EAAK+gB,OAAQ,CAC5BiD,aAAc9D,EACdxH,MAAO,CAAC,CAACC,UAAW3Y,EAAKuhB,SAAUtmB,QAAS,4BAF/Cuc,CAKG3C,EAAApL,EAAAqL,cAAC8H,GAAA,EAAD,CAAQwH,KAAK,WAAWvL,YAAY,2BAC5BwL,WAAYtH,EAAKsD,aACjBnH,SAAU6D,EAAKoD,cAClB0D,EAAgB7iB,IAAI,SAAAkgB,GAAI,OACrBrM,EAAApL,EAAAqL,cAAC8H,GAAA,EAAOR,OAAR,CAAe3Z,IAAKye,EAAMrE,MAAOqE,GAAOA,WAQlErM,EAAApL,EAAAqL,cAACwP,GAAA,EAAD,cA5OY7P,aAmPnBgB,QAAK/B,QAAL+B,CAAcwK,IAE7BsE,MAAMC,UAAUpE,OAAS,WAErB,IADA,IAAI3W,EAAIS,KAAKtH,SACJqa,EAAI,EAAGA,EAAIxT,EAAE/N,SAAUuhB,EAC5B,IAAK,IAAIwH,EAAIxH,EAAI,EAAGwH,EAAIhb,EAAE/N,SAAU+oB,EAC5Bhb,EAAEwT,KAAOxT,EAAEgb,IACXhb,EAAEtH,OAAOsiB,IAAK,GAG1B,OAAOhb,iBCtQIib,8MArCXC,eAAiB,SAAAC,GACb,IAAIC,EAAI,GACJC,EAAU,EAFUpC,GAAA,EAAAC,GAAA,EAAAC,OAAAjnB,EAAA,IAGxB,QAAAknB,EAAAC,EAAqB8B,EAArB7B,OAAAC,cAAAN,GAAAG,EAAAC,EAAAjZ,QAAAoZ,MAAAP,GAAA,EAA8B,KAAnBS,EAAmBN,EAAAhG,MACtBkI,EAAiB,GACrBA,EAAetiB,IAAMqiB,IACrB,IAH0B,IAAAE,EAGRpmB,OAAO2D,KAAK4gB,GAA9B8B,EAAA,EAAAA,EAAAD,EAAAtpB,OAAAupB,IAAA,CAAK,IAAMxiB,EAAGuiB,EAAAC,GACVF,EAAetiB,GAAO0gB,EAAO1gB,GACjCoiB,EAAErjB,KAAKujB,IARa,MAAAlO,GAAA8L,GAAA,EAAAC,EAAA/L,EAAA,YAAA6L,GAAA,MAAAI,EAAAa,QAAAb,EAAAa,SAAA,WAAAhB,EAAA,MAAAC,GAUxB,OAAOiC,2EAGF,ICjBkBK,EDiBlB/J,EAEkCjR,KAAKgL,MAArCsN,EAFFrH,EAEEqH,aAAcC,EAFhBtH,EAEgBsH,eACf0C,GCpBiBD,EDoBe1C,EAAa,IAAMC,EAAe,GCnB5E7jB,OAAO2D,KAAK2iB,GAAclkB,IAAI,SAACokB,EAAGjI,GAC9B,MAAO,CACHniB,MAAOoqB,EACPC,UAAWD,EACX3iB,IAAK0a,EACLxF,MAAO,IACP1C,OAAQ,SAAAiM,GAAI,OAAIrM,EAAApL,EAAAqL,cAAA,YACZoM,EAAKJ,QAEGI,EAAK1d,KAAKue,IACN,CAACb,EAAK1d,KAAKme,KAAMT,EAAK1d,KAAKqe,MAAOX,EAAK1d,KAAKue,KAAKf,KAAK,KAEtDE,EAAK1d,KAITqR,EAAApL,EAAAqL,cAAA,KAAGqE,MAAO,CAACmM,gBAAiB,YAA5B,IAA0CpE,EAAKjmB,eDI/D,OACI4Z,EAAApL,EAAAqL,cAAA,WACID,EAAApL,EAAAqL,cAAA,yBACAD,EAAApL,EAAAqL,cAACyQ,GAAA,EAAD,CAAOlD,QAAS8C,EACTK,WAAYtb,KAAKya,eAAenC,GAChCiD,KAAK,QACLC,WAAY,CAACC,SAAU,KAE9B9Q,EAAApL,EAAAqL,cAAC8Q,GAAA,EAAD,MAEA/Q,EAAApL,EAAAqL,cAAA,oEACAD,EAAApL,EAAAqL,cAACyQ,GAAA,EAAD,CAAOlD,QAAS8C,EACTK,WAAYtb,KAAKya,eAAelC,GAChCgD,KAAK,QACLC,WAAY,CAACC,SAAU,aAjCpBlR,aEOpBoR,GAAOC,KAAMD,KAmLJE,eA/KX,SAAAA,EAAY7Q,GAAO,IAAAW,EAAA,OAAAjX,OAAAonB,EAAA,EAAApnB,CAAAsL,KAAA6b,IACflQ,EAAAjX,OAAAqnB,EAAA,EAAArnB,CAAAsL,KAAAtL,OAAAsnB,EAAA,EAAAtnB,CAAAmnB,GAAAI,KAAAjc,KAAMgL,KAMVpV,MAAQ,CACJsmB,QAAS,EACT1I,SAAU,GAEVkC,sBAAuB,CACnBC,kBAAclkB,EACdmkB,kBAAcnkB,GAGlBkiB,iBAAiB,EAEjBsE,UAAW,CACPrX,aAASnP,EACT6H,UAAM7H,GAGV6mB,aAAc,GACdC,eAAgB,IAxBD5M,EA2BnBwQ,MAAQ,CACJ,CACIrrB,MAAO,qBACPmf,QAAS,kBAAMtE,EAAKX,MAAMuK,gBACtB5K,EAAApL,EAAAqL,cAACwR,GAAD,CAAuBC,IAAK1Q,EAAK2Q,sBACV/G,gBAAiB5J,EAAKX,MAAMuK,gBAC5BG,sBAAuB/J,EAAK/V,MAAM8f,wBACvD/K,EAAApL,EAAAqL,cAACwP,GAAA,EAAD,QAEV,CACItpB,MAAO,cACPmf,QAAS,kBAAMtF,EAAApL,EAAAqL,cAAC2R,GAAD,CAAoBF,IAAK1Q,EAAK6Q,mBACVC,UAAW9Q,EAAK/V,MAAM6mB,UACtBC,aAAc/Q,EAAK+Q,aACnBjJ,gBAAiB,SAAA7d,GAAK,OAAI+V,EAAKW,SAAS1W,IACxC4d,SAAU7H,EAAK/V,MAAM4d,aAE5D,CACI1iB,MAAO,mBACPmf,QAAS,kBAAMtE,EAAKX,MAAMuK,gBACtB5K,EAAApL,EAAAqL,cAAC+R,GAAD,CAAqBC,oBAAqB,SAAAnQ,GAAI,OAAId,EAAKkR,oBAAsBpQ,GACxD8I,gBAAiB5J,EAAKX,MAAMuK,gBAC5BK,aAAcjK,EAAK/V,MAAM8f,sBAAsBE,aAC/CqC,UAAWtM,EAAK/V,MAAMqiB,YACzCtN,EAAApL,EAAAqL,cAACwP,GAAA,EAAD,QAEV,CACItpB,MAAO,WACPmf,QAAS,kBAAMtE,EAAKX,MAAMuK,gBACtB5K,EAAApL,EAAAqL,cAACkS,GAAD,CAAaxE,aAAc3M,EAAK/V,MAAM0iB,aACzBH,QAASxM,EAAKX,MAAMuK,gBAAgB5J,EAAK/V,MAAM8f,sBAAsBE,cACrE2C,eAAgB5M,EAAK/V,MAAM2iB,iBACtC5N,EAAApL,EAAAqL,cAACwP,GAAA,EAAD,SA3DKzO,EA8DnBhM,KAAO,WACH,OAAQgM,EAAK/V,MAAMsmB,QAAU,GACzB,KAAK,EACDvQ,EAAK2Q,sBAAsBJ,QAAQxP,eAC/B,SAACC,EAAKC,GAAN,OAAiBD,EAAM,KAAOhB,EAAKW,SAAS,CACxCoJ,sBAAuB,CACnBC,aAAc/I,EAAO+I,aACrBC,aAAchJ,EAAOgJ,cAEzBsG,QAASvQ,EAAK/V,MAAMsmB,QAAU,MAGtC,MAEJ,KAAK,EACDvQ,EAAK6Q,mBAAmBN,QAAQ3I,YAAYwJ,KACxC,SAAA9E,GACIvhB,QAAQC,IAAIvG,KAAKO,UAAUsnB,IAC3BtM,EAAKW,SAAS,CAAC2L,YAAWiE,QAASvQ,EAAK/V,MAAMsmB,QAAU,KAE5D,SAAAc,GAAiB,OAAIrR,EAAKW,SAAS,CAAC2L,UAAW+E,MAEnD,MAEJ,KAAK,EACDrR,EAAKkR,oBAAoB7E,YAAY+E,KACjC,SAAArC,GAAO,OAAI/O,EAAKW,SAAS,CACrBgM,aAAcoC,EAAQpC,aACtBC,eAAgBmC,EAAQnC,eACxB2D,QAASvQ,EAAK/V,MAAMsmB,QAAU,KAElC,SAACjrB,GAAD,OAAWyF,QAAQzF,MAAMA,KAE7B,MAEJ,QACI0a,EAAKW,SAAS,CAAC4P,QAASvQ,EAAK/V,MAAMsmB,QAAU,MAlGtCvQ,EAuGnBjM,KAAO,kBAAMiM,EAAKW,SAAS,CAAC4P,QAASvQ,EAAK/V,MAAMsmB,QAAU,KAvGvCvQ,EAyGnBsR,eAAiB,WACbtR,EAAKX,MAAM+E,YADQ,IAAAmN,EAE2BvR,EAAK/V,MAA5C0iB,EAFY4E,EAEZ5E,aAAc5C,EAFFwH,EAEExH,sBACjB4C,GACA3M,EAAKX,MAAMtP,eAAXhH,OAAAC,GAAA,EAAAD,CAAA,GAA8BghB,EAA9B,CAAqDgF,QAASpC,KAE9D3M,EAAKW,SAAS,CACV4P,QAAS,EACT1I,SAAU,GAEVkC,sBAAuB,CACnBC,kBAAclkB,EACdmkB,kBAAcnkB,GAElBkiB,iBAAiB,EACjBsE,UAAW,CACPrX,aAASnP,EACT6H,UAAM7H,GAEV6mB,aAAc,GACdC,eAAgB,MAIpBxnB,IAAQE,MAAM,gCA/HlB0a,EAAK2Q,sBAAwBa,IAAMC,YACnCzR,EAAK6Q,mBAAqBW,IAAMC,YAChCzR,EAAKkR,oBAAsBM,IAAMC,YAJlBzR,wEAoIV,IAAAkH,EAAA7S,KACEkc,EAAWlc,KAAKpK,MAAhBsmB,QAEP,OACIvR,EAAApL,EAAAqL,cAAC2C,GAAA,EAAD,CAAOE,MAAO,MACP3c,MAAM,sBACN0c,QAASxN,KAAKgL,MAAMwC,QACpBG,SAAU3N,KAAKgL,MAAM+E,UACrBrC,gBAAgB,EAChBG,OAAQ,MACXlD,EAAApL,EAAAqL,cAACwP,GAAA,EAAD,CAAMiD,SAAUrd,KAAKpK,MAAM+d,gBAAiB2J,IAAI,sBAC5C3S,EAAApL,EAAAqL,cAACuR,GAAA,EAAD,CAAOD,QAASA,GACXlc,KAAKmc,MAAMrlB,IAAI,SAAAkgB,GAAI,OAAIrM,EAAApL,EAAAqL,cAAC+Q,GAAD,CAAMpjB,IAAKye,EAAKlmB,MAAOA,MAAOkmB,EAAKlmB,WAG/D6Z,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAO9jB,eAAgBgR,KAAKmc,MAAMD,GAASjM,WAE3DtF,EAAApL,EAAAqL,cAAC8Q,GAAA,EAAD,MAEA/Q,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAO7jB,cAEfitB,EAAU,GAENvR,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQmB,MAAO,CAACsO,WAAY,GAAIxP,QAAS,kBAAM8E,EAAKnT,SAApD,YAMJwc,EAAUlc,KAAKmc,MAAM3qB,OAAS,GAC3BmZ,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQhY,KAAK,UAAUiY,QAAS,kBAAM8E,EAAKlT,SAA3C,QAGHuc,IAAYlc,KAAKmc,MAAM3qB,OAAS,GAC7BmZ,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQhY,KAAK,UAAUiY,QAAS/N,KAAKid,gBAArC,kBAxKA1S,sDCNzBhd,oLAME,IAAIiwB,GAAiB,EACjBC,EAASzd,KAAKgL,MAAMyS,OAKxB,OAJkC,IAA9Bzd,KAAKgL,MAAMwS,iBACXA,GAAiB,GAIjB7S,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACqC,OAAQ,GAAIkE,aAAc,KACnC7K,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOrlB,OACnBkd,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOnlB,cAEnBgd,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACyO,QAAS,uBAEdF,EACI7S,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQC,QAAS/N,KAAK2d,QAAQC,OAAOluB,QAAQmuB,OACrC/nB,KAAK,UAAU4a,KAAK,OAAOoN,MAAM,SACjCvC,KAAM,UACZ,KAEV5Q,EAAApL,EAAAqL,cAAA,UAAK5K,KAAKgL,MAAM+S,eAAiB/d,KAAKgL,MAAM0S,UAEhD/S,EAAApL,EAAAqL,cAAA,WAEQ6S,EACI9S,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQwB,UAAWwD,KAAO/kB,oBAClB+H,KAAK,UACL4a,KAAM1Q,KAAKgL,MAAMyS,OAAO/M,KACxBtB,SAAUpP,KAAKgL,MAAMyS,OAAOrO,SAC5B1d,QAASsO,KAAKgL,MAAMyS,OAAO/rB,QAC3Bqc,QAAS/N,KAAKgL,MAAMyS,OAAO1P,SAC9B/N,KAAKgL,MAAMyS,OAAOO,MAErB,gBAtCjBzT,aAAfhd,GACK0wB,aAAe,CAClBL,OAAQM,KAAUC,QA8CX5wB,oBC7BA6wB,4LAlBP,IAAI9kB,EAAO0G,KAAKgL,MAAM1R,KAEhB6e,EAAUnY,KAAKgL,MAAMuK,gBAAgBvV,KAAKgL,MAAMqT,aAAaC,KAAKC,MAAMznB,IAAI,SAAA6jB,GAAC,OAAIA,EAAE9D,SACnF2H,EAAaxe,KAAKgL,MAAMuK,gBAAgBvV,KAAKgL,MAAMqT,aAAaC,KAAKC,MAAMznB,IAAI,SAAA6jB,GAAC,OAAIA,EAAE9D,SAAQ/f,IAAI,SAAA6jB,GACpG,MAAO,CACHrhB,KAAMqhB,EACN8D,QAAQ,KAGhB,OACI9T,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACqC,OAAQ,SACjB3G,EAAApL,EAAAqL,cAAC8T,GAAA,SAAD,CAAUrnB,GAAG,MAAMiC,KAAMA,EAAMklB,WAAYrG,EAASA,QAASqG,EAAYG,YAAY,YAf1EpU,cCQrBqU,8MAEFhpB,MAAQ,CACJ4X,SAAS,KASbsD,UAAY,kBAAMnF,EAAKW,SAAS,CAACkB,SAAS,OAC1CuC,UAAY,kBAAMpE,EAAKW,SAAS,CAACkB,SAAS,OAG1C9R,eAAiB,SAAAvD,GAAW,OAAIwT,EAAKX,MAAMhB,SAAS1O,GAAgBI,eAAe,CAACvD,YAAaA,QACjG0mB,iBAAmB,SAAC7mB,GAAD,OAAgB2T,EAAKX,MAAMhB,SAAS1O,GAAgBO,cAAc7D,OAOrFyiB,eAAiB,SAAAC,GACb,IAAIC,EAAI,GAER,GAAID,EAAS,KAAAlC,GAAA,EAAAC,GAAA,EAAAC,OAAAjnB,EAAA,IACT,QAAAknB,EAAAC,EAAqB8B,EAArB7B,OAAAC,cAAAN,GAAAG,EAAAC,EAAAjZ,QAAAoZ,MAAAP,GAAA,EAA8B,CAE1B,IAF0B,IAAnBS,EAAmBN,EAAAhG,MACtBkI,EAAiB,GADKC,EAERpmB,OAAO2D,KAAK4gB,GAA9B8B,EAAA,EAAAA,EAAAD,EAAAtpB,OAAAupB,IAAA,CAAK,IAAMxiB,EAAGuiB,EAAAC,GACE,eAARxiB,IACAsiB,EAAetiB,GAAO0gB,EAAO1gB,IAErCoiB,EAAErjB,KAAKujB,IAPF,MAAAlO,GAAA8L,GAAA,EAAAC,EAAA/L,EAAA,YAAA6L,GAAA,MAAAI,EAAAa,QAAAb,EAAAa,SAAA,WAAAhB,EAAA,MAAAC,IAUb,OAAOiC,uFA7BP3a,KAAKgL,MAAMhB,SAAS1O,GAAgBC,mEAapCyE,KAAKgL,MAAMhB,SAAS1O,GAAgBU,wDAqB/B,IAAA8iB,EAAAC,EAAAC,EAAAC,EAAApM,EAAA7S,KACL,OACI2K,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACqC,OAAQ,SACjB3G,EAAApL,EAAAqL,cAACsU,GAAD,CAAQxB,QAAS,YAAaF,gBAAgB,EACtCC,OAAQ,CAAC/M,KAAM,OAAQ3C,QAAS/N,KAAK8Q,UAAWkN,KAAM,kBAE9DrT,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOhlB,iBACnB6c,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACmC,OAAQ,YAAa3D,MAAO,QACrC9C,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOrlB,OAEnBkd,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOnlB,aAAcshB,MAAO,CAACkQ,SAAU,YACnDxU,EAAApL,EAAAqL,cAAA,6BAEJD,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOjlB,YACnB8c,EAAApL,EAAAqL,cAAC4F,GAAA,EAAD,CAAM0J,KAAK,UAEHla,KAAKgL,MAAM1V,cAAcwB,IAAI,SAACa,EAAUsb,GAAX,OACzBtI,EAAApL,EAAAqL,cAAC4F,GAAA,EAAKhF,KAAN,CAAWjT,IAAK0a,EACLlF,QAAS,kBAAM8E,EAAKgM,iBAAiBlnB,EAASnB,MAAMmB,EAAS4W,YAQhG5D,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACmC,OAAQ,YAAa3D,MAAO,QACrC9C,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOrlB,OACnBkd,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOllB,0BACnB+c,EAAApL,EAAAqL,cAAA,WACID,EAAApL,EAAAqL,cAAA,oCAEJD,EAAApL,EAAAqL,cAAA,WACID,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQwB,UAAWwD,KAAO/kB,oBAClBqhB,WAAa,QAAA0P,EAAC9e,KAAKgL,MAAMzV,gBAAgB6pB,uBAA5B,IAAAN,OAAA,EAACA,EAA4CttB,QAC1DsE,KAAK,UAAU4a,KAAK,OACpB3C,QAAS/N,KAAKqf,YAHtB,QAMA1U,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQwB,UAAWwD,KAAO/kB,oBAAqB+H,KAAK,SAAS4a,KAAK,SAC1DtB,WAAa,QAAA2P,EAAC/e,KAAKgL,MAAMzV,gBAAgB6pB,uBAA5B,IAAAL,OAAA,EAACA,EAA4CvtB,QAC1Duc,QAAS/N,KAAKsf,UAFtB,qBASR3U,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOjlB,WAAYohB,MAAO,CAACsQ,QAAS,KAGtC,QAAAP,EAAChf,KAAKgL,MAAMzV,gBAAgB6pB,uBAA5B,IAAAJ,OAAA,EAACA,EAA4CxtB,SAE5CwO,KAAKgL,MAAMxV,QAAQgqB,UAEtB7U,EAAApL,EAAAqL,cAAC6U,GAAD,CAAclK,gBAAiBvV,KAAKgL,MAAMxV,QAAQgqB,UACpCnB,aAAcre,KAAKgL,MAAMzV,gBAAgB8oB,aACzC/kB,KAAM0G,KAAKya,eAAeza,KAAKgL,MAAMzV,gBAAgB6pB,mBAEnEzU,EAAApL,EAAAqL,cAACwP,GAAA,EAAD,CAAMiD,SAAUrd,KAAKgL,MAAM0U,mBACvB/U,EAAApL,EAAAqL,cAAA,WACID,EAAApL,EAAAqL,cAAA,OACI6G,IAAI,qHACJhE,MAAO,MACPwB,MAAO,CACHyO,QAAS,QACTiC,UAAU,GACVpC,WAAY,OACZrO,YAAa,UAGrBvE,EAAApL,EAAAqL,cAAA,KAAGqE,MAAO,CAACgG,UAAW,SAAU0K,UAAW,IAA3C,4CAWhChV,EAAApL,EAAAqL,cAACgV,GAAD,CAAkBpS,QAASxN,KAAKpK,MAAM4X,QACnB+H,gBAAe,QAAA0J,EAAEjf,KAAKgL,MAAMxV,eAAb,IAAAypB,OAAA,EAAEA,EAAoBO,UACrC9jB,eAAgBsE,KAAKtE,eACrBqU,UAAW/P,KAAK+P,oBA/H3BxF,aAgJT6F,mBAVf,SAAyBxa,GACrB,MAAO,CACHN,cAAeM,EAAM+B,SAASrC,cAC9BC,gBAAiBK,EAAM+B,SAASpC,gBAChCmqB,kBAAmB9pB,EAAM+B,SAASzC,UAElCM,QAASI,EAAMJ,QAAQA,UAIhB4a,CAAyBwO,yBCzJlCtT,GAAWC,KAAKC,KAEhBqU,8MAEFjqB,MAAQ,KAER4W,WAAa,kBAAMb,EAAKX,MAAMyB,KAAKC,eAAe,SAACC,EAAKC,GAC/CD,GACDhB,EAAKX,MAAMwB,WAAWI,8EAI1B,IAAMG,EAAiB,CACnBC,SAAU,CAACC,KAAM,GACjBC,WAAY,CAACD,KAAM,KAEhBK,EAAqBtN,KAAKgL,MAAMyB,KAAhCa,kBACP,OACI3C,EAAApL,EAAAqL,cAAC2C,GAAA,EAAD,CACIE,MAAO,IACP3c,MAAM,mBACN4c,gBAAgB,EAChBF,QAASxN,KAAKgL,MAAMwC,QACpB0C,KAAMlQ,KAAKgL,MAAMwB,WACjBmB,SAAU3N,KAAKgL,MAAM4C,aACrBC,OAAQ,CACJlD,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQvV,IAAI,SAASwV,QAAS/N,KAAKgL,MAAM4C,cAAzC,UACAjD,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQvV,IAAI,SAASzC,KAAK,UAAUiY,QAAS/N,KAAKwM,YAAlD,SAIJ7B,EAAApL,EAAAqL,cAACqD,GAAA,EAAD,CAAMC,OAAO,cACTvD,EAAApL,EAAAqL,cAACkV,GAADprB,OAAAoW,OAAA,CACIsD,MAAM,aACNC,MAAM,uEACFtB,GACHO,EAAkB,OAAQ,CACvBkB,MAAO,CAAC,CACJC,UAAU,EACV1d,QAAS,kCAHhBuc,CAMG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOC,YAAY,uCAI3BhE,EAAApL,EAAAqL,cAACkV,GAADprB,OAAAoW,OAAA,CACIsD,MAAM,oBACNC,MAAM,8BACFtB,GACHO,EAAkB,cAAe,CAC9BkB,MAAO,CAAC,CACJC,UAAU,EACV1d,QAAS,+CAHhBuc,CAMG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOC,YAAY,2EAtDxBpE,aAiERgB,QAAK/B,QAAL+B,CAAcsU,ICnEvBvU,GAAWC,KAAKC,KAEhBuU,8MAEFnqB,MAAQ,KAERoqB,aAAe,kBAAMrU,EAAKX,MAAMyB,KAAKC,eAAe,SAACC,EAAKC,GACjDD,GACDhB,EAAKX,MAAMgV,aAAapT,8EAIvB,IAAAiG,EAAA7S,KACC+M,EAAiB,CACnBC,SAAU,CAACC,KAAM,GACjBC,WAAY,CAACD,KAAM,KAEhBK,EAAqBtN,KAAKgL,MAAMyB,KAAhCa,kBACP,OACI3C,EAAApL,EAAAqL,cAAC2C,GAAA,EAAD,CACIE,MAAO,IACP3c,MAAM,aACN0c,QAASxN,KAAKgL,MAAMwC,QACpB0C,KAAMlQ,KAAKgL,MAAMgV,aACjBrS,SAAU3N,KAAKgL,MAAM4C,aACrBC,OAAQ,CACJlD,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQvV,IAAI,SAASzC,KAAK,SAASiY,QAAS,kBAAM8E,EAAK7H,MAAMgD,aAAa6E,EAAK7H,MAAMiV,SAArF,UAGAtV,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQvV,IAAI,SAASwV,QAAS/N,KAAKgL,MAAM4C,cAAzC,UACAjD,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQvV,IAAI,SAASzC,KAAK,UAAUiY,QAAS/N,KAAKggB,cAAlD,YAIJrV,EAAApL,EAAAqL,cAACqD,GAAA,EAAD,CAAMC,OAAO,cACTvD,EAAApL,EAAAqL,cAACsV,GAADxrB,OAAAoW,OAAA,CACIsD,MAAM,aACNC,MAAM,uEACFtB,GACHO,EAAkB,OAAQ,CACvBgB,aAActO,KAAKgL,MAAMiV,MAAM1B,KAC/B/P,MAAO,CAAC,CACJC,UAAU,EACV1d,QAAS,kCAJhBuc,CAOG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOC,YAAY,uCAI3BhE,EAAApL,EAAAqL,cAACsV,GAADxrB,OAAAoW,OAAA,CACIsD,MAAM,oBACNC,MAAM,8BACFtB,GACHO,EAAkB,cAAe,CAC9BgB,aAActO,KAAKgL,MAAMiV,MAAM/uB,YAC/Bsd,MAAO,CAAC,CACJC,UAAU,EACV1d,QAAS,2CAJhBuc,CAOG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOC,YAAY,2EA3DvBpE,aAsETgB,QAAK/B,QAAL+B,CAAcwU,ICrEvBnQ,GAAUC,KAAMD,QAqHPuQ,IAlHXxV,EAAApL,EAAAqL,cAAA,WACID,EAAApL,EAAAqL,cAAA,oBACAD,EAAApL,EAAAqL,cAAA,gOAMJhV,MAAQ,CACJwqB,eAAe,EACfC,gBAAgB,EAChBC,oBAAqB,MAWzBC,eAAiB,SAACC,GACd7U,EAAKX,MAAMyV,SAASD,GACpB7U,EAAKW,SAAS,CAAC8T,eAAe,OAGlCM,qBAAuB,kBAAM/U,EAAKW,SAAS,CAAC8T,eAAe,OAE3DO,kBAAoB,kBAAMhV,EAAKW,SAAS,CAAC8T,eAAe,OAIxDQ,gBAAkB,SAACC,GACflV,EAAKX,MAAM8V,UAAUD,GACrBlV,EAAKW,SAAS,CAAC+T,gBAAgB,OAGnCU,sBAAwB,kBAAMpV,EAAKW,SAAS,CAAC+T,gBAAgB,OAE7DW,mBAAqB,kBAAMrV,EAAKW,SAAS,CAAC+T,gBAAgB,OAG1DY,kBAAoB,SAACC,GACjBtR,GAAQ,CACJ9e,MAAK,4BACLmf,QAAO,iFACPC,KAAM,WACFvE,EAAKX,MAAMmW,YAAYD,GACvBvV,EAAKW,SAAS,CAAC+T,gBAAgB,EAAOC,oBAAqB,kGAnC7Cc,GAElBA,EAAUC,eAAiBrhB,KAAKpK,MAAMyrB,cAAgBD,EAAUC,cAChErhB,KAAKsM,SAAS,CAACgU,oBAAqBc,EAAUC,aAAaC,0CAsC1D,IAAAzO,EAAA7S,KACErR,EAAcqR,KAAKgL,MAAnBrc,WACP,OACIgc,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOrlB,OACnBkd,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOllB,0BACnB+c,EAAApL,EAAAqL,cAAA,WACID,EAAApL,EAAAqL,cAAA,qBAEJD,EAAApL,EAAAqL,cAAA,WACID,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQwB,UAAWwD,KAAO/kB,oBAClB+H,KAAK,UACLylB,KAAM,QACN7K,KAAK,OACL3C,QAAS/N,KAAK2gB,mBAJtB,OAQAhW,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQwB,UAAWwD,KAAO/kB,oBAClB+H,KAAK,UACLylB,KAAM,QACN7K,KAAK,OACLtB,UAAcpP,KAAKgL,MAAMqW,aAAa9C,KACtCxQ,QAAS,kBAAM8E,EAAKmO,uBAL5B,QASArW,EAAApL,EAAAqL,cAAC2W,GAAD,CAAU/T,QAASxN,KAAKpK,MAAMwqB,cACpBxS,aAAc5N,KAAK0gB,qBACnBlU,WAAYxM,KAAKugB,mBAKnC5V,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOjlB,YAGnB8c,EAAApL,EAAAqL,cAAC4F,GAAA,EAAD,CAAM0J,KAAK,UAEHvrB,EACAqR,KAAKgL,MAAMrc,WAAWmI,IAAI,SAACmpB,EAAOhN,GAAR,OACtBtI,EAAApL,EAAAqL,cAAC4F,GAAA,EAAKhF,KAAN,CAAWuC,QAAS,kBAAM8E,EAAK7H,MAAMwW,YAAYvB,IAAQ1nB,IAAK0a,GACzDgN,EAAM1B,QAEX,OAMhB5T,EAAApL,EAAAqL,cAAC6W,GAAD,CAAWxB,MAAOjgB,KAAKgL,MAAMqW,aAClB7T,QAASxN,KAAKpK,MAAMyqB,eACpBzS,aAAc5N,KAAK+gB,sBACnBf,aAAchgB,KAAK4gB,gBACnB5S,aAAchO,KAAKihB,4BAtGzB1W,yGCZf9c,GAAQi0B,KAASj0B,MAChB4iB,GAAQC,KAARD,KA4IQsR,8MAxIXC,UAAY,SAACC,GAAD,OAAWlW,EAAKX,MAAM4W,UAAUC,MAC5CC,YAAc,SAACD,GAAD,OAAWlW,EAAKX,MAAM8W,YAAYD,4EAEvC,IAAAhP,EAAA7S,KAAAiR,EACoBjR,KAAKgL,MAAvB6W,EADF5Q,EACE4Q,MACArC,EAFFvO,EACSzb,QACPgqB,UAEP,OACI7U,EAAApL,EAAAqL,cAACmX,GAAA,EAAD,CAAUC,UAAU,GAChBrX,EAAApL,EAAAqL,cAACnd,GAAD,CAAOoc,OACHc,EAAApL,EAAAqL,cAAAD,EAAApL,EAAA2R,SAAA,KACK2Q,EAAMvD,KADX,IACiB3T,EAAApL,EAAAqL,cAAC8Q,GAAA,EAAD,CAAS5lB,KAAK,aAC1B+rB,EAAMI,QAAQjE,KAFnB,IAEyBrT,EAAApL,EAAAqL,cAAC8Q,GAAA,EAAD,CAAS5lB,KAAK,aAEnC6U,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQ4C,KAAM,OAAQ6K,KAAM,QAASxN,QAAS,kBAAM8E,EAAK+O,UAAUC,MACnElX,EAAApL,EAAAqL,cAAC8Q,GAAA,EAAD,CAAS5lB,KAAK,aACd6U,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQ4C,KAAM,SAAU6K,KAAM,QAASzlB,KAAM,SACrCiY,QAAS,kBAAM8E,EAAKiP,YAAYD,OAGzCtpB,IAAKyH,KAAKgL,MAAMzS,KAElBspB,EAAMI,QAAQjE,KACXrT,EAAApL,EAAAqL,cAACsX,GAAA,EAAD,KACIvX,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,CAAKlV,KAAM,GAAGtC,EAAApL,EAAAqL,cAAA,wBACdD,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,CAAKlV,KAAM,IAAK4U,EAAMI,QAAQjE,MAC9BrT,EAAApL,EAAAqL,cAAC8Q,GAAA,EAAD,OAEF,KAILmG,EAAMI,QAAQG,WACXzX,EAAApL,EAAAqL,cAACsX,GAAA,EAAD,KACIvX,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,CAAKlV,KAAM,GAAGtC,EAAApL,EAAAqL,cAAA,yBACdD,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,CAAKlV,KAAM,IAAK4U,EAAMI,QAAQG,YAC9BzX,EAAApL,EAAAqL,cAAC8Q,GAAA,EAAD,OAEF,KAGLmG,EAAMI,QAAQpsB,OACX8U,EAAApL,EAAAqL,cAACsX,GAAA,EAAD,KACIvX,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,CAAKlV,KAAM,GAAGtC,EAAApL,EAAAqL,cAAA,qBACdD,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,CAAKlV,KAAM,IAAK4U,EAAMI,QAAQpsB,QAC9B8U,EAAApL,EAAAqL,cAAC8Q,GAAA,EAAD,OAEF,KAGLmG,EAAMI,QAAQI,aACX1X,EAAApL,EAAAqL,cAACsX,GAAA,EAAD,KACIvX,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,CAAKlV,KAAM,GAAGtC,EAAApL,EAAAqL,cAAA,4BACdD,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,CAAKlV,KAAM,IAAK4U,EAAMI,QAAQI,cAC9B1X,EAAApL,EAAAqL,cAAC8Q,GAAA,EAAD,OAEF,KAGLmG,EAAMI,QAAQK,QACX3X,EAAApL,EAAAqL,cAACsX,GAAA,EAAD,KACIvX,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,CAAKlV,KAAM,GAAGtC,EAAApL,EAAAqL,cAAA,uBACdD,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,CAAKlV,KAAM,IAAK4U,EAAMI,QAAQK,SAC9B3X,EAAApL,EAAAqL,cAAC8Q,GAAA,EAAD,OAEF,KAGLmG,EAAMI,QAAQjqB,WACX2S,EAAApL,EAAAqL,cAACsX,GAAA,EAAD,KACIvX,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,CAAKlV,KAAM,GAAGtC,EAAApL,EAAAqL,cAAA,uBACdD,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,CACIlV,KAAM,IAAKuS,EAAU+C,cAAc/C,EAAU+C,cAC5ChJ,KAAK,SAAA3D,GAAY,OAAIA,IAAiBiM,EAAMI,QAAQrM,eAAc,MACvEjL,EAAApL,EAAAqL,cAAC8Q,GAAA,EAAD,OAEF,KAGLmG,EAAMI,QAAQO,UACX7X,EAAApL,EAAAqL,cAACsX,GAAA,EAAD,KACIvX,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,CAAKlV,KAAM,GAAGtC,EAAApL,EAAAqL,cAAA,0BACdD,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,CAAKlV,KAAM,GAAGtC,EAAApL,EAAAqL,cAAC6X,GAAA,EAAD,CAAU1T,QAAS8S,EAAMI,QAAQO,aAE/C7X,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,CAAKlV,KAAM,GAAGtC,EAAApL,EAAAqL,cAAA,wBACdD,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,CAAKlV,KAAM,GAAGtC,EAAApL,EAAAqL,cAAC6X,GAAA,EAAD,CAAU1T,QAAS8S,EAAM5R,QAAQyS,eAC/C/X,EAAApL,EAAAqL,cAAC8Q,GAAA,EAAD,OAEF,KAGLmG,EAAMI,QAAQU,QACXhY,EAAApL,EAAAqL,cAAA,WACID,EAAApL,EAAAqL,cAAA,qBAEIiX,EAAMI,QAAQU,QAAQ7rB,IAAI,SAAC8rB,EAAQ7P,GAAT,OACtBpI,EAAApL,EAAAqL,cAACuG,GAAA,EAAD,CAAM5Y,IAAKwa,EAAG9D,MAAO,CAACmC,OAAQ,EAAG3D,MAAO,MACpC9C,EAAApL,EAAAqL,cAACiY,GAAD,CACI/xB,MAAO8xB,EAAO5E,KACd9sB,YACKyZ,EAAApL,EAAAqL,cAAAD,EAAApL,EAAA2R,SAAA,kBAAa0R,EAAOE,SAAShsB,IAAI,SAACisB,EAAShQ,GAAV,OAC9BpI,EAAApL,EAAAqL,cAACoY,GAAA,EAAD,CAAKzqB,IAAKwa,GAAIgQ,QAG1BpY,EAAApL,EAAAqL,cAACsX,GAAA,EAAD,KACIvX,EAAApL,EAAAqL,cAAC8Q,GAAA,EAAD,MACA/Q,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,CAAKlV,KAAM,GAAX,WACAtC,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,CAAKlV,KAAM,IAAK2V,EAAO/sB,SAG3B8U,EAAApL,EAAAqL,cAACsX,GAAA,EAAD,KACIvX,EAAApL,EAAAqL,cAAC8Q,GAAA,EAAD,MACA/Q,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,CAAKlV,KAAM,GAAX,iBACAtC,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,CAAKlV,KAAM,IAAK2V,EAAOP,mBAOzC,KAGN1X,EAAApL,EAAAqL,cAACsX,GAAA,EAAD,KACIvX,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,CAAKlV,KAAM,GAAGtC,EAAApL,EAAAqL,cAAA,6BACdD,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,CAAKlV,KAAM,IAAK4U,EAAMI,QAAQgB,aAAd,QAChBtY,EAAApL,EAAAqL,cAAC8Q,GAAA,EAAD,gBAhIJnR,iCCDPoD,GAAW,SAACuV,EAAgBC,GAAjB,OAAqCD,EAAiBA,GAAe,GAASC,GAAgB,IAGzGC,GAAiB,SAACvB,EAAOwB,EAAWC,GAC7C,GAA6B,yBAAzBzB,EAAMI,QAAQpsB,OACd,MAAO,CAAC0tB,eAAe,EAAMC,eAAe,GAC3C,GAA6B,gBAAzB3B,EAAMI,QAAQpsB,OAQnB,MAAO,CAAC0tB,eAAe,EAAOC,eAAe,GARA,IAGtCP,EAAepB,EAAMI,QAArBgB,YAHsCzK,GAAA,EAAAC,GAAA,EAAAC,OAAAjnB,EAAA,IAI7C,QAAAknB,EAAAC,EAAoByK,EAApBxK,OAAAC,cAAAN,GAAAG,EAAAC,EAAAjZ,QAAAoZ,MAAAP,GAAA,GACI,GADJG,EAAAhG,MACc2O,OAAO,GAAG9qB,KAAOysB,EACvB,MAAO,CAACM,eAAe,EAAOC,eAAe,IANR,MAAA7W,GAAA8L,GAAA,EAAAC,EAAA/L,EAAA,YAAA6L,GAAA,MAAAI,EAAAa,QAAAb,EAAAa,SAAA,WAAAhB,EAAA,MAAAC,KAwFxC+K,GAAsB,SAACC,EAAaC,EAAY7tB,GACzD,IAAI+rB,EAAQ8B,EAAW9B,MAAQ8B,EAAW9B,MAAQ,CAACI,QAAS,IACxD2B,EAAe,GAF+C1K,GAAA,EAAAC,GAAA,EAAAC,OAAA3nB,EAAA,IAIlE,QAAA4nB,EAAAG,EAAwBkK,EAAYG,WAApChL,OAAAC,cAAAI,GAAAG,EAAAG,EAAA7Z,QAAAoZ,MAAAG,GAAA,OAAW4K,EAAXzK,EAAA1G,MACI,GAAImR,EAAUvF,QAAUsD,EAAMvD,MAAQxoB,GAAO,CACzC8tB,EAAeE,EACf,QAP0D,MAAAnX,GAAAwM,GAAA,EAAAC,EAAAzM,EAAA,YAAAuM,GAAA,MAAAM,EAAAC,QAAAD,EAAAC,SAAA,WAAAN,EAAA,MAAAC,GASlE,MAAO,CAACwK,eAAc/B,UCxGpB3P,GAASC,KAAOD,OAChB6R,GAAgBC,KAASC,MAIlBC,GAAmB,SAAAzpB,GAA+D,IAA7D6Q,EAA6D7Q,EAA7D6Q,SAAU4C,EAAmDzT,EAAnDyT,OAAQZ,EAA2C7S,EAA3C6S,kBAAmBuU,EAAwBpnB,EAAxBonB,MAAOlT,EAAiBlU,EAAjBkU,YAC1E,OACIhE,EAAApL,EAAAqL,cAACU,EAAD5W,OAAAoW,OAAA,CAAUsD,MAAM,WACNC,MAAM,4DACFH,GACTZ,EAAkB,OAAQ,CACvBgB,aAAcuT,EAAMI,QAAQjE,KAC5BxP,MAAO,CAAC,CACJC,UAAU,EACV1d,QAAS,6BAJhBuc,CAOG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOC,YAAaA,OAMvBwV,GAAmB,SAAA/jB,GAAA,IAAEkL,EAAFlL,EAAEkL,SAAU4C,EAAZ9N,EAAY8N,OAAQZ,EAApBlN,EAAoBkN,kBAAmB9X,EAAvC4K,EAAuC5K,QAASqsB,EAAhDzhB,EAAgDyhB,MAAhD,OAC5BlX,EAAApL,EAAAqL,cAACU,EAAD5W,OAAAoW,OAAA,CAAUsD,MAAM,aAAgBF,EAAhC,CACUG,MAAM,8FAERf,EAAkB,WAAY,CAC1BgB,aAAcuT,EAAMuC,SAAWvC,EAAMuC,SAAS7F,UAAO9sB,EACrD+c,MAAO,CAAC,CACJC,UAAU,EACV1d,QAAS,kCAJjBuc,CAOI3C,EAAApL,EAAAqL,cAAC8H,GAAA,EAAD,CAAQ/D,YAAY,sDAEZnZ,EAAQ4O,KAAKigB,UAAUvtB,IAAI,SAAChB,EAAMid,GAAP,OACvBpI,EAAApL,EAAAqL,cAAC0Z,GAAD,CAAQ/rB,IAAKwa,EAAGJ,MAAO7c,EAAKyoB,MAAOzoB,EAAKyoB,YAQvDgG,GAAoB,SAAAjkB,GAAA,IAAEgL,EAAFhL,EAAEgL,SAAU4C,EAAZ5N,EAAY4N,OAAQZ,EAApBhN,EAAoBgN,kBAAmBuU,EAAvCvhB,EAAuCuhB,MAAvC,OAC7BlX,EAAApL,EAAAqL,cAACU,EAAD5W,OAAAoW,OAAA,CAAUsD,MAAM,cAAiBF,GAC5BZ,EAAkB,cAAe,CAC9BkX,cAAe,UACflW,eAAcuT,EAAM4C,WAAY5C,EAAM4C,WAFzCnX,CAIG3C,EAAApL,EAAAqL,cAAC6X,GAAA,EAAD,kDAMCiC,GAAoB,SAAAnjB,GAAA,IAAE+J,EAAF/J,EAAE+J,SAAU4C,EAAZ3M,EAAY2M,OAAQZ,EAApB/L,EAAoB+L,kBAAmBuU,EAAvCtgB,EAAuCsgB,MAAO+B,EAA9CriB,EAA8CqiB,aAA9C,OAC7BjZ,EAAApL,EAAAqL,cAACU,EAAD5W,OAAAoW,OAAA,CAAUsD,MAAM,oBAAuBF,GAClCZ,EAAkB,YAAa,CAC5BkX,cAAe,UACflW,aAAcuT,EAAM8C,gBAAkB9C,EAAM8C,gBAAkBf,EAAae,iBAF9ErX,CAIG3C,EAAApL,EAAAqL,cAAC6X,GAAA,EAAD,CAAUrT,SAAUwU,EAAae,iBAAjC,0CAMCC,GAAuB,SAAAhjB,GAAA,IAAE0J,EAAF1J,EAAE0J,SAAU4C,EAAZtM,EAAYsM,OAAQZ,EAApB1L,EAAoB0L,kBAAmBuU,EAAvCjgB,EAAuCigB,MAAvC,OAChClX,EAAApL,EAAAqL,cAACU,EAAD5W,OAAAoW,OAAA,CAAUsD,MAAM,gBACNC,MAAM,gEACFH,GACTZ,EAAkB,eAAgB,CAC/BgB,aAAcuT,EAAMI,QAAQI,aAAeR,EAAMI,QAAQI,kBAAe5wB,EACxE+c,MAAO,CAAC,CACJC,UAAU,EACV1d,QAAS,iCAJhBuc,CAOG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOC,YAAY,kCAKlBkW,GAAiB,SAAA5iB,GAAA,IAAEqJ,EAAFrJ,EAAEqJ,SAAU4C,EAAZjM,EAAYiM,OAAQZ,EAApBrL,EAAoBqL,kBAAmBmG,EAAvCxR,EAAuCwR,gBAAiBmQ,EAAxD3hB,EAAwD2hB,aAAc/B,EAAtE5f,EAAsE4f,MAAtE,OAC1BlX,EAAApL,EAAAqL,cAACU,EAAD5W,OAAAoW,OAAA,CAAUsD,MAAM,UAAaF,GAErB0V,EAAa/R,QACTvE,EAAkB,SAAU,CACxBgB,aAAcuT,EAAMI,QAAQpsB,OAASgsB,EAAMI,QAAQpsB,YAASpE,EAC5D+c,MAAO,CAAC,CACJC,UAAU,EACV1d,QAAS,6BAJjBuc,CAOI3C,EAAApL,EAAAqL,cAAC8H,GAAA,EAAD,CAAQoS,SAAU,SAACjvB,GAAD,OAAY4d,ED9EpB,SAAC5d,GAC3B,MAAe,yBAAXA,EACO,CAAC0tB,eAAe,EAAMC,eAAe,GAC5B,gBAAX3tB,EACE,CAAC0tB,eAAe,EAAOC,eAAe,GAEtC,CAACD,eAAe,EAAOC,eAAe,GCwEauB,CAAelvB,KACrD8Y,YAAY,kCAChBiV,EAAa/R,QAAQ/a,IAAI,SAACjB,EAAQkd,GAAT,OACrBpI,EAAApL,EAAAqL,cAAC0Z,GAAD,CAAQ/rB,IAAKwa,EAAGJ,MAAO9c,GAASA,OAG1C8U,EAAApL,EAAAqL,cAACwP,GAAA,EAAD,KAAMzP,EAAApL,EAAAqL,cAAC8H,GAAA,EAAD,CAAQ/D,YAAY,sCAK/BqW,GAAwB,SAAAriB,GAA4E,IAA1E2I,EAA0E3I,EAA1E2I,SAAU4C,EAAgEvL,EAAhEuL,OAAQZ,EAAwD3K,EAAxD2K,kBAAmB2X,EAAqCtiB,EAArCsiB,UAAW1B,EAA0B5gB,EAA1B4gB,cAAe1B,EAAWlf,EAAXkf,MAClG,OACI0B,EAEQ5Y,EAAApL,EAAAqL,cAACU,EAAD5W,OAAAoW,OAAA,CAAUsD,MAAM,wBAA2BF,GAEnCZ,EAAkB,cACd,CACIgB,aAAcuT,EAAMI,QAAQgB,YAAcpB,EAAMI,QAAQgB,iBAAcxxB,EACtE+c,MAAO,CAAC,CAACC,UAAU,EAAM1d,QAAS,mCAH1Cuc,CAMI3C,EAAApL,EAAAqL,cAAC8H,GAAA,EAAD,CAAQ/D,YAAY,2BAChBsW,EAAUnuB,IAAI,SAAC+qB,EAAO9O,GAAR,OACVpI,EAAApL,EAAAqL,cAAC0Z,GAAD,CAAQ/rB,IAAKwa,EAAGJ,MAAOkP,EAAMrrB,IAA7B,GAAAkC,OACQmpB,EAAMrrB,GADd,OAAAkC,OACsBmpB,EAAMvD,KAD5B,MAAA5lB,OACqCmpB,EAAMI,QAAQjE,KAAO6D,EAAMI,QAAQjE,KAAO,UAOnG,MAIHkH,GAAwB,SAAAC,GAAiG,IAA/F7Z,EAA+F6Z,EAA/F7Z,SAAU4C,EAAqFiX,EAArFjX,OAAQZ,EAA6E6X,EAA7E7X,kBAAmB8X,EAA0DD,EAA1DC,aAAc/D,EAA4C8D,EAA5C9D,aAAcgC,EAA8B8B,EAA9B9B,UAAWG,EAAmB2B,EAAnB3B,cAGzG6B,GADNhC,EAAYA,EAAU9sB,OAAO,SAAA0pB,GAAK,OAAIA,EAAM5oB,KAAOgqB,EAAahqB,MAChCkiB,KAAK,SAAA0G,GAAK,QAAMA,EAAMqB,OAAO/H,KAAK,SAAAsI,GAAK,IAAAyD,EAAA,OAAIzD,EAAMxqB,MAAN,OAAa+tB,QAAb,IAAaA,OAAb,UAAAE,EAAaF,EAAcnD,eAA3B,IAAAqD,OAAA,EAAaA,EAAuBC,iBAE/G,OACI/B,EAEQ7Y,EAAApL,EAAAqL,cAACU,EAAD5W,OAAAoW,OAAA,CAAUsD,MAAM,uBACNC,MAAM,sDACFH,GAENZ,EAAkB,mBACd,CACIgB,aAAc8W,GAAgBC,EAAgBA,EAAc/D,OAAO,GAAG9qB,QAAK/E,EAC3E+c,MAAO,CAAC,CAACC,UAAU,EAAM1d,QAAS,mCAH1Cuc,CAMI3C,EAAApL,EAAAqL,cAAC8H,GAAA,EAAD,CAAQ/D,YAAY,mCAChB0U,EAAUvsB,IAAI,SAACmpB,EAAOlN,GAClB,OAAIkN,EAAMqB,OAAO,GACN3W,EAAApL,EAAAqL,cAAC0Z,GAAD,CAAQ/rB,IAAKwa,EAAGJ,MAAOsN,EAAMqB,OAAO,GAAG9qB,IAAvC,GAAAkC,OACKunB,EAAM1B,OAGX5T,EAAApL,EAAAqL,cAAC0Z,GAAD,CAAQlV,UAAQ,EAAC7W,IAAKwa,EAAGJ,MAAOsN,EAAM1B,MAAtC,GAAA7lB,OACKunB,EAAM1B,YAQ1C,MAMHiH,GAAc,SAACtC,EAAgBC,EAAiBsC,EAAmBC,EAAU7D,GACtF,OAAOqB,EAAiB,CACpBvY,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQvV,IAAI,SAASwV,QAAS,kBAAMJ,GAASuV,EAAgBC,KAA7D,UACAxY,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQvV,IAAI,SAASzC,KAAK,UAAUiY,QAAS,kBAAM2X,EAAS,cAA5D,QACA,CACA/a,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQvV,IAAI,SAASzC,KAAK,SAClBiY,QAAS,kBDvLA1W,ECuLewqB,EAAMrrB,GDvLjBV,ECuLqB+rB,EAAMvD,KAAMmH,EDvLP,CACnDpuB,GAAIA,EACJvB,KAAMA,IAFc,IAACuB,EAAIvB,ICsLrB,UAIA6U,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQvV,IAAI,SAASwV,QAAS,kBAAMJ,GAASuV,EAAgBC,KAA7D,UACAxY,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQvV,IAAI,SAASzC,KAAK,UAAUiY,QAAS,kBAAM2X,EAAS7D,KAA5D,YAKK8D,GAAoB,SAAAC,GAAA,IAAEta,EAAFsa,EAAEta,SAAUuW,EAAZ+D,EAAY/D,MAAO3T,EAAnB0X,EAAmB1X,OAAQZ,EAA3BsY,EAA2BtY,kBAAmBuY,EAA9CD,EAA8CC,aAAcpS,EAA5DmS,EAA4DnS,gBAA5D,OAC7B9I,EAAApL,EAAAqL,cAACU,EAAD5W,OAAAoW,OAAA,CAAUsD,MAAM,cAAiBF,GAEzB2X,EACIvY,EAAkB,YAAa,CAC3BgB,aAAcuT,EAAMI,QAAQ6D,UAC5BtX,MAAO,CAAC,CACJC,UAAU,EACV1d,QAAS,0CAJjBuc,CAOI3C,EAAApL,EAAAqL,cAACmZ,GAAD,CAAevuB,QAASqwB,EACT7W,SAAU,SAAC+W,GAAD,OAAmBtS,ED7KhC,SAACsS,GAC7B,MAAO,CAACD,UAAWC,GC4KyDC,CAAiBD,QAE/Epb,EAAApL,EAAAqL,cAACwP,GAAA,EAAD,QAKL6L,GAAuB,SAAAC,GAAA,IAAE5a,EAAF4a,EAAE5a,SAAUuW,EAAZqE,EAAYrE,MAAOvU,EAAnB4Y,EAAmB5Y,kBAAmBY,EAAtCgY,EAAsChY,OAAQ1Y,EAA9C0wB,EAA8C1wB,QAA9C,OAChCmV,EAAApL,EAAAqL,cAACU,EAAD5W,OAAAoW,OAAA,CAAUsD,MAAM,YAAeF,EAA/B,CACUG,MAAM,kEAERf,EAAkB,eAAgB,CAC9BgB,aAAcuT,EAAMI,QAAQrM,aACxBpgB,EAAQgqB,UAAU3J,MAAM0D,KAAK,SAAAzjB,GAAI,OAAIA,IAAS+rB,EAAMI,QAAQrM,oBAC1DnkB,EACN+c,MAAO,CAAC,CACJC,UAAU,EACV1d,QAAS,wNANjBuc,CAWI3C,EAAApL,EAAAqL,cAAC8H,GAAA,EAAD,CAAQ/D,YAAY,qBAAqBnZ,EAAQgqB,UAAU3J,MAAM/e,IAAI,SAAChB,EAAMid,GAAP,OACjEpI,EAAApL,EAAAqL,cAAC0Z,GAAD,CAAQ/rB,IAAKwa,EAAGJ,MAAO7c,GAAOA,SCpN5CwV,GAAWC,KAAKC,KAEhB2a,8MAEFvwB,MAAQ,CACJ2tB,eAAe,EACfC,eAAe,KASnBkC,SAAW,kBAAM/Z,EAAKX,MAAMyB,KAAKC,eAAe,SAACC,EAAKC,GAClD,IAAKD,EAAK,CACN,IAAM+W,EAAc/X,EAAKX,MAAMxV,QAAQ4O,KACnC5O,EAAU,CACV8oB,KAAM,aACN8H,UAAWxZ,EAAO4V,UAClBiC,UAAW7X,EAAO8V,cAAe,EACjC0B,SAAUV,EAAYW,UAAU9K,KAAK,SAAC8M,GAAD,OAAcA,EAAS9H,OAAS3R,EAAOyZ,WAC5EpE,QAAS,CACLjE,KAAMpR,EAAOoR,KACbiF,YAAarW,EAAOqW,aAAerW,EAAO0Z,kBAAoB,KAC9DzwB,OAAQ+W,EAAO/W,OACfwsB,aAAczV,EAAOyV,cAAgB,KAIzC1W,EAAKX,MAAMkY,eACXvX,EAAKX,MAAMkY,eAAe1tB,IAG1BA,EAAQgB,GAAKmV,EAAKX,MAAM2Y,WAAW9B,MAAMrrB,GACzCmV,EAAKX,MAAMmY,gBAAgB3tB,2FA3BnB,IAAAyb,EACcjR,KAAKgL,MAA5B2Y,EADS1S,EACT0S,WAAYnuB,EADHyb,EACGzb,QACZqsB,EAAS4B,GAAoBjuB,EAAQ4O,KAAMuf,GAA3C9B,MACP7hB,KAAKsM,SAAS8W,GAAevB,EAAO7hB,KAAKgL,MAAM2Y,WAAWN,6CA+BrD,IAAAxQ,EAAA7S,KAAAqU,EACmFrU,KAAKgL,MAAtF2Y,EADFtP,EACEsP,WAAYnuB,EADd6e,EACc7e,QAASiX,EADvB4H,EACuB5H,KAAMyW,EAD7B7O,EAC6B6O,eAAgBC,EAD7C9O,EAC6C8O,gBAAiBsC,EAD9DpR,EAC8DoR,kBAD9Dc,EAEyB9C,GAAoBjuB,EAAQ4O,KAAMuf,EAAY,cAArEC,EAFF2C,EAEE3C,aAAc/B,EAFhB0E,EAEgB1E,MACdwB,EAA8CM,EAA9CN,UAAW4B,EAAmCtB,EAAnCsB,UAAW5D,EAAwBsC,EAAxBtC,aAAcnT,EAAUyV,EAAVzV,OACpCZ,EAAqBb,EAArBa,kBAGDkZ,EAAUhB,GAAYtC,EAAgBC,EAAiBsC,EAAmBzlB,KAAK0lB,SAAU7D,GAE/F,OACIlX,EAAApL,EAAAqL,cAACuG,GAAA,EAAD,CAAMlC,MAAO,CAACxB,MAAO,QAASoE,QAAS2U,GACnC7b,EAAApL,EAAAqL,cAACqD,GAAA,EAAD,CAAMC,OAAO,cACTvD,EAAApL,EAAAqL,cAAC6b,GAAD,CAAkBnb,SAAUA,GAAUuW,MAAOA,EAC3BvU,kBAAmBA,EACnBY,OAAQA,EACRS,YAAY,4BAE9BhE,EAAApL,EAAAqL,cAAC8b,GAAD,CAAkBpb,SAAUA,GAAUuW,MAAOA,EAC3BvU,kBAAmBA,EACnB9X,QAASwK,KAAKgL,MAAMxV,QACpB0Y,OAAQA,IAE1BvD,EAAApL,EAAAqL,cAAC+b,GAAD,CAAgBrb,SAAUA,GAAUsY,aAAcA,EAAc/B,MAAOA,EACvDpO,gBAAiB,SAAC7d,GAAD,OAAWid,EAAKvG,SAAS1W,IAC1C0X,kBAAmBA,EACnBY,OAAQA,IAExBvD,EAAApL,EAAAqL,cAACgc,GAAD,CAAuBtb,SAAUA,GAAU2Z,UAAWA,EAAWpD,MAAOA,EACjD0B,cAAevjB,KAAKpK,MAAM2tB,cAC1BjW,kBAAmBA,EACnBY,OAAQA,IAE/BvD,EAAApL,EAAAqL,cAACic,GAAD,CAAuBvb,SAAUA,GACV8Z,aAAcvD,EACdwB,UAAWA,EACXhC,aAAcA,EACdmC,cAAexjB,KAAKpK,MAAM4tB,cAC1BlW,kBAAmBA,EACnBY,OAAQA,IAE/BvD,EAAApL,EAAAqL,cAACkc,GAAD,CAAsBxb,SAAUA,GAAUuW,MAAOA,EAC3BvU,kBAAmBA,EACnBY,OAAQA,IAE9BvD,EAAApL,EAAAqL,cAACmc,GAAD,CAAmBzb,SAAUA,GAAUuW,MAAOA,EAC3BvU,kBAAmBA,EACnBY,OAAQA,IAE3BvD,EAAApL,EAAAqL,cAACoc,GAAD,CAAmB1b,SAAUA,GAAUuW,MAAOA,EAAO+B,aAAcA,EAChDtW,kBAAmBA,EACnBY,OAAQA,aA3FvB3D,aAmGTgB,QAAK/B,QAAL+B,CAAc4a,wBCpGvB7a,GAAWC,KAAKC,KAEhByb,8MAEFrxB,MAAQ,CACJ2tB,eAAe,EACfC,eAAe,EACf0D,cAAc,EAEdC,KAAM,GACNC,cAAc,EACdta,WAAY,GACZ6V,QAAS,GAET0E,UAAW,MAIf3B,SAAW,SAAC4B,GAAD,OAAe3b,EAAKX,MAAMyB,KAAKC,eAAe,CAAC,OAAQ,cAAe,YAAa,YAC1F,SAACC,EAAKC,GACF,IAAKD,EAAK,CACN,IAAM+W,EAAc/X,EAAKX,MAAMxV,QAAQ4O,KACnC5O,EAAU,CACV8oB,KAAM,WACN8H,UAAWxZ,EAAO4V,UAClBiC,UAAW7X,EAAO8V,cAAe,EACjC0B,SAAUV,EAAYW,UAAU9K,KAAK,SAAC8M,GAAD,OAAcA,EAAS9H,OAAS3R,EAAOyZ,WAC5EpE,QAAS,CACLjE,KAAMpR,EAAOoR,KACb2E,QAAShX,EAAK/V,MAAM+sB,UAIxBhX,EAAKX,MAAMkY,eACXvX,EAAKX,MAAMkY,eAAe1tB,IAG1BA,EAAQgB,GAAKmV,EAAKX,MAAM2Y,WAAW9B,MAAMrrB,GACzCmV,EAAKX,MAAMmY,gBAAgB3tB,UAM3C+xB,UAAY,kBAAM5b,EAAKX,MAAMyB,KAAKC,eAAe,CAAC,SAAU,SAAU,cAAe,mBAAoB,gBACrG,SAACC,EAAKC,GACF,IAAKD,EAAK,CACN,IAOIgW,EAAU,CAPC,CACX3E,KAAMpR,EAAOgW,OACbE,SAAUnX,EAAK/V,MAAMuxB,KACrBlE,YAAarW,EAAOqW,aAAerW,EAAO0Z,kBAAoB,KAC9DzwB,OAA0B,gBAAlB+W,EAAO/W,OAA2B,uBAAyB+W,EAAO/W,OAC1EwsB,aAAczV,EAAOyV,cAAgB,KAElB3pB,OAAOiT,EAAK/V,MAAM+sB,SACzChX,EAAKW,SAAS,CAACqW,UAASwE,KAAM,KAC9Bxb,EAAK6b,sBAGjBC,cAAgB,kBAAM9b,EAAKW,SAAS,CAAC4a,cAAc,OACnDM,cAAgB,kBAAM7b,EAAKW,SAAS,CAAC4a,cAAc,OACnDQ,aAAe,SAAAC,GAAa,OAAIhc,EAAKW,SAAS,CAC1CqW,QAASjuB,OAAA4B,GAAA,EAAA5B,CAAIiX,EAAK/V,MAAM+sB,SAASpsB,OAAO,SAAAqsB,GAAM,OAAKA,EAAOP,eAAiBsF,EAActF,cAAkBO,EAAO5E,OAAS2J,EAAc3J,YAI7I4J,UAAY,SAACC,GAAD,OAAgBlc,EAAKW,SAAS,CAAC6a,KAAMxb,EAAK/V,MAAMuxB,KAAK5wB,OAAO,SAAAuxB,GAAG,OAAIA,IAAQD,SACvFE,UAAY,kBAAMpc,EAAKW,SAAS,CAAC8a,cAAc,GAAO,kBAAMzb,EAAKqc,MAAMC,aACvEC,kBAAoB,SAAAC,GAAC,OAAIxc,EAAKW,SAAS,CAACQ,WAAYqb,EAAEC,OAAOzV,WAC7D0V,aAAe,SAAAL,GAAK,OAAIrc,EAAKqc,MAAQA,KACrCM,mBAAqB,WACjB,IAAMxb,EAAanB,EAAK/V,MAAMkX,WAC1Bqa,EAAOxb,EAAK/V,MAAMuxB,KAClBra,IAA4C,IAA9Bqa,EAAKvS,QAAQ9H,KAC3Bqa,EAAI,GAAAzuB,OAAAhE,OAAA4B,GAAA,EAAA5B,CAAOyyB,GAAP,CAAara,KACrBnB,EAAKW,SAAS,CAAC6a,OAAMC,cAAc,EAAOta,WAAY,0FAIrC,IAAAmE,EACajR,KAAKgL,MAA5B2Y,EADU1S,EACV0S,WAAYnuB,EADFyb,EACEzb,QACZqsB,EAAS4B,GAAoBjuB,EAAQ4O,KAAMuf,GAA3C9B,MACP7hB,KAAKsM,SAAS8W,GAAevB,EAAO7hB,KAAKgL,MAAM2Y,WAAWN,YAC1DrjB,KAAKsM,SAAS,CAACqW,QAASd,EAAMI,QAAQU,SAAW,sCAI5C,IAAA9P,EAAA7S,KAAAqU,EACmFrU,KAAKgL,MAAtF2Y,EADFtP,EACEsP,WAAYnuB,EADd6e,EACc7e,QAASiX,EADvB4H,EACuB5H,KAAMyW,EAD7B7O,EAC6B6O,eAAgBC,EAD7C9O,EAC6C8O,gBAAiBsC,EAD9DpR,EAC8DoR,kBAD9Dc,EAEyB9C,GAAoBjuB,EAAQ4O,KAAMuf,EAAY,YAArEC,EAFF2C,EAEE3C,aAAc/B,EAFhB0E,EAEgB1E,MACdwB,EAA8CM,EAA9CN,UAAW4B,EAAmCtB,EAAnCsB,UAAW5D,EAAwBsC,EAAxBtC,aAAcnT,EAAUyV,EAAVzV,OACpCZ,EAAqBb,EAArBa,kBAJF4P,EAMoCld,KAAKpK,MAAvCuxB,EANFjK,EAMEiK,KAAMC,EANRlK,EAMQkK,aAActa,EANtBoQ,EAMsBpQ,WAErB0Z,EAAUhB,GAAYtC,EAAgBC,EAAiBsC,EAAmBzlB,KAAK0lB,SAAU7D,GAE/F,OACIlX,EAAApL,EAAAqL,cAACuG,GAAA,EAAD,CAAMlC,MAAO,CAACxB,MAAO,QAASoE,QAAS2U,GACnC7b,EAAApL,EAAAqL,cAACqD,GAAA,EAAD,CAAMC,OAAO,cACTvD,EAAApL,EAAAqL,cAAC6b,GAAD,CAAkBnb,SAAUA,GAAUuW,MAAOA,EAC3BvU,kBAAmBA,EACnBY,OAAQA,EACRS,YAAY,iCAE9BhE,EAAApL,EAAAqL,cAAC8b,GAAD,CAAkBpb,SAAUA,GAAUuW,MAAOA,EAC3BvU,kBAAmBA,EACnB9X,QAASwK,KAAKgL,MAAMxV,QACpB0Y,OAAQA,IAE1BvD,EAAApL,EAAAqL,cAAC2d,GAAD7zB,OAAAoW,OAAA,CAAUsD,MAAM,WACFF,GACVvD,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQC,QAAS/N,KAAKynB,cACd3xB,KAAK,UAAU4a,KAAK,OAAOoN,MAAM,SAASvC,KAAM,UAEpDvb,KAAKpK,MAAM+sB,QAAQ7rB,IAAI,SAAC8rB,EAAQ7P,GAAT,OAEnBpI,EAAApL,EAAAqL,cAACuG,GAAA,EAAD,CAAMrgB,MAAO8xB,EAAO5E,KAAMzlB,IAAKwa,EACzB1E,MACI1D,EAAApL,EAAAqL,cAAC4d,GAAA,EAAD,CAAYC,UAAU,WAAW33B,MAAM,mCAC3B43B,UAAW,kBAAM7V,EAAK6U,aAAa9E,IACnC+F,OAAO,MAAMC,WAAW,MAChCje,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQhY,KAAK,SAAS4a,KAAK,SAASoN,MAAM,SAClCvC,KAAM,WAGtBtM,MAAO,CAACxB,MAAO,IAAK2D,OAAQ,KAC9BzG,EAAApL,EAAAqL,cAAA,oBAAYgY,EAAO/sB,QAVvB,SAWU8U,EAAApL,EAAAqL,cAAA,WACLgY,EAAOE,SAAShsB,IAAI,SAACisB,EAAShQ,GAAV,OAAgBpI,EAAApL,EAAAqL,cAACoY,GAAA,EAAD,CAAKzqB,IAAKwa,GAAIgQ,SAOnEpY,EAAApL,EAAAqL,cAACmc,GAAD,CAAmBzb,SAAUA,GAAUuW,MAAOA,EAC3BvU,kBAAmBA,EACnBY,OAAQA,IAE3BvD,EAAApL,EAAAqL,cAACoc,GAAD,CAAmB1b,SAAUA,GAAUuW,MAAOA,EAAO+B,aAAcA,EAChDtW,kBAAmBA,EACnBY,OAAQA,KAM/BvD,EAAApL,EAAAqL,cAAC2C,GAAA,EAAD,CAAOzc,MAAM,aAAa2c,MAAO,IAAKC,gBAAgB,EAAMF,QAASxN,KAAKpK,MAAMsxB,aACzEhX,KAAMlQ,KAAKunB,UAAW5Z,SAAU3N,KAAKwnB,eACxC7c,EAAApL,EAAAqL,cAACqD,GAAA,EAAD,KACItD,EAAApL,EAAAqL,cAAC2d,GAAD7zB,OAAAoW,OAAA,CAAUsD,MAAM,SACNC,MAAM,2CACFH,GACTZ,EAAkB,SAAU,CACzBkB,MAAO,CAAC,CACJC,UAAU,EACV1d,QAAS,+BAHhBuc,CAMG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOC,YAAY,2BAI3BhE,EAAApL,EAAAqL,cAAC2d,GAAD7zB,OAAAoW,OAAA,CAAUsD,MAAM,YAAeF,EAA/B,CACUG,MAAM,qGAEZ1D,EAAApL,EAAAqL,cAAA,WACKuc,EAAKrwB,IAAI,SAACgxB,GACP,IAAMe,EAAYf,EAAIt2B,OAAS,GACzBs3B,EACFne,EAAApL,EAAAqL,cAACoY,GAAA,EAAD,CAAKzqB,IAAKuvB,EAAKiB,UAAU,EAAMC,WAAY,kBAAMnW,EAAK+U,UAAUE,KAC3De,EAAS,GAAAnwB,OAAMovB,EAAIhT,MAAM,EAAG,IAAnB,OAA8BgT,GAGhD,OAAOe,EAAYle,EAAApL,EAAAqL,cAACqe,GAAA,EAAD,CAASn4B,MAAOg3B,EAAKvvB,IAAKuvB,GAAMgB,GAAqBA,IAE3E1B,GACGzc,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CACI2N,IAAKrc,KAAKqoB,aACVvyB,KAAK,OACLylB,KAAK,QACLtM,MAAO,CAACxB,MAAO,IACfkF,MAAO7F,EACPkC,SAAUhP,KAAKkoB,kBACfgB,OAAQlpB,KAAKsoB,mBACba,aAAcnpB,KAAKsoB,sBAGzBlB,GACEzc,EAAApL,EAAAqL,cAACoY,GAAA,EAAD,CACIjV,QAAS/N,KAAK+nB,UACd9Y,MAAO,CAACma,WAAY,OAAQC,YAAa,WACzC1e,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,SAHf,kBASZ6U,EAAApL,EAAAqL,cAAC+b,GAAD,CAAgBrb,SAAUA,GAAUsY,aAAcA,EAClC/B,MAAOA,EACPpO,gBAAiB,SAAC7d,GAAD,OAAWid,EAAKvG,SAAS1W,IAC1C0X,kBAAmBA,EACnBY,OAAQA,IAExBvD,EAAApL,EAAAqL,cAACgc,GAAD,CAAuBtb,SAAUA,GACVuW,MAAOA,EACPoD,UAAWA,EACX1B,cAAevjB,KAAKpK,MAAM2tB,cAC1BjW,kBAAmBA,EACnBY,OAAQA,IAE/BvD,EAAApL,EAAAqL,cAACic,GAAD,CAAuBvb,SAAUA,GACVuW,MAAOA,EACPwB,UAAWA,EACXhC,aAAcA,EACdmC,cAAexjB,KAAKpK,MAAM4tB,cAC1BlW,kBAAmBA,EACnBY,OAAQA,IAE/BvD,EAAApL,EAAAqL,cAACkc,GAAD,CAAsBxb,SAAUA,GAAUuW,MAAOA,EAC3BvU,kBAAmBA,EACnBY,OAAQA,cA5N/B3D,aAuORgB,QAAK/B,QAAL+B,CAAc0b,ICzOvB3b,GAAWC,KAAKC,KAEhB8d,8MAEF1zB,MAAQ,CACJ2tB,eAAe,EACfC,eAAe,EACfsC,UAAW,MAGfJ,SAAW,kBAAM/Z,EAAKX,MAAMyB,KAAKC,eAAe,SAACC,EAAKC,GAClD,IAAKD,EAAK,CACN,IAAM+W,EAAc/X,EAAKX,MAAMxV,QAAQ4O,KACnC5O,EAAU,CACV8oB,KAAM,cACN8H,WAAW,EACX3B,UAAW7X,EAAO8V,cAAe,EACjC0B,SAAUV,EAAYW,UAAU9K,KAAK,SAAC8M,GAAD,MAAgC,YAAlBA,EAAS9H,OAC5D0D,QAAS,CACLjE,KAAMpR,EAAOoR,KACbnoB,OAAQ+W,EAAO/W,OACfiwB,UAAWna,EAAK/V,MAAMkwB,UACtB7C,YAAarW,EAAOqW,aAAerW,EAAO0Z,kBAAoB,KAC9DjE,aAAczV,EAAOyV,cAAgB,KAIzC1W,EAAKX,MAAMkY,eACXvX,EAAKX,MAAMkY,eAAe1tB,IAG1BA,EAAQgB,GAAKmV,EAAKX,MAAM2Y,WAAW9B,MAAMrrB,GACzCmV,EAAKX,MAAMmY,gBAAgB3tB,4FAKlB,IAAAyb,EACajR,KAAKgL,MAA5B2Y,EADU1S,EACV0S,WAAYnuB,EADFyb,EACEzb,QACZqsB,EAAS4B,GAAoBjuB,EAAQ4O,KAAMuf,GAA3C9B,MACP7hB,KAAKsM,SAAS8W,GAAevB,EAAO7hB,KAAKgL,MAAM2Y,WAAWN,6CAIrD,IAAAxQ,EAAA7S,KAAAqU,EACmFrU,KAAKgL,MAAtF2Y,EADFtP,EACEsP,WAAYnuB,EADd6e,EACc7e,QAASiX,EADvB4H,EACuB5H,KAAMyW,EAD7B7O,EAC6B6O,eAAgBC,EAD7C9O,EAC6C8O,gBAAiBsC,EAD9DpR,EAC8DoR,kBAD9Dc,EAEyB9C,GAAoBjuB,EAAQ4O,KAAOuf,EAAY,eAAtEC,EAFF2C,EAEE3C,aAAc/B,EAFhB0E,EAEgB1E,MACdwB,EAA8CM,EAA9CN,UAAW4B,EAAmCtB,EAAnCsB,UAAW5D,EAAwBsC,EAAxBtC,aAAcnT,EAAUyV,EAAVzV,OACpCZ,EAAqBb,EAArBa,kBACAuY,EAAgBjC,EAAhBiC,aAEDW,EAAUhB,GAAYtC,EAAgBC,EAAiBsC,EAAmBzlB,KAAK0lB,SAAU7D,GAE/F,OACIlX,EAAApL,EAAAqL,cAACuG,GAAA,EAAD,CAAMlC,MAAO,CAACxB,MAAO,QAASoE,QAAS2U,GACnC7b,EAAApL,EAAAqL,cAACqD,GAAA,EAAD,CAAMC,OAAO,cACTvD,EAAApL,EAAAqL,cAAC6b,GAAD,CAAkBnb,SAAUA,GAAUuW,MAAOA,EAC3BvU,kBAAmBA,EACnBY,OAAQA,EACRS,YAAY,8BAE9BhE,EAAApL,EAAAqL,cAAC8b,GAAD,CAAkBpb,SAAUA,GAAUuW,MAAOA,EAC3BvU,kBAAmBA,EACnB9X,QAASwK,KAAKgL,MAAMxV,QACpB0Y,OAAQA,IAE1BvD,EAAApL,EAAAqL,cAAC2e,GAAD,CAAmBje,SAAUA,GAAUua,aAAcA,EAAchE,MAAOA,EACvDpO,gBAAiB,SAAC7d,GAAD,OAAWid,EAAKvG,SAAS1W,IAC1C0X,kBAAmBA,EACnBY,OAAQA,IAE3BvD,EAAApL,EAAAqL,cAAC+b,GAAD,CAAgBrb,SAAUA,GAAUsY,aAAcA,EAAc/B,MAAOA,EACvDpO,gBAAiB,SAAC7d,GAAD,OAAWid,EAAKvG,SAAS1W,IAC1C0X,kBAAmBA,EACnBY,OAAQA,IAExBvD,EAAApL,EAAAqL,cAACgc,GAAD,CAAuBtb,SAAUA,GAAU2Z,UAAWA,EAAWpD,MAAOA,EACjD0B,cAAevjB,KAAKpK,MAAM2tB,cAC1BjW,kBAAmBA,EACnBY,OAAQA,IAE/BvD,EAAApL,EAAAqL,cAACic,GAAD,CAAuBvb,SAAUA,GACVuW,MAAOA,EACPwB,UAAWA,EACXhC,aAAcA,EACdmC,cAAexjB,KAAKpK,MAAM4tB,cAC1BlW,kBAAmBA,EACnBY,OAAQA,IAE/BvD,EAAApL,EAAAqL,cAACkc,GAAD,CAAsBxb,SAAUA,GAAUuW,MAAOA,EAC3BvU,kBAAmBA,EACnBY,OAAQA,IAE9BvD,EAAApL,EAAAqL,cAACmc,GAAD,CAAmBzb,SAAUA,GAAUuW,MAAOA,EAC3BvU,kBAAmBA,EACnBY,OAAQA,aA7FtB3D,aAoGVgB,QAAK/B,QAAL+B,CAAc+d,IC1GvBhe,GAAWC,KAAKC,KAEhBge,8MAEF5zB,MAAQ,CACJ2tB,eAAe,EACfC,eAAe,KASnBkC,SAAW,SAAC4B,GAAD,OAAe3b,EAAKX,MAAMyB,KAAKC,eAAe,SAACC,EAAKC,GAC3D,IAAKD,EAAK,CACN,IACInX,EAAU,CACN8oB,KAAM,YACN8H,WAAW,EACX3B,WAAW,EACXL,SALYzY,EAAKX,MAAMxV,QAAQ4O,KAKTigB,UAAU9K,KAAK,SAAC8M,GAAD,MAAgC,YAAlBA,EAAS9H,OAC5D0D,QAAS,CACLK,QAAShL,OAAO1K,EAAO0V,SACvBzsB,OAAQ+W,EAAO/W,OACfotB,YAAarW,EAAOqW,aAAerW,EAAO0Z,kBAAoB,KAC9DjE,aAAczV,EAAOyV,cAAgB,GACrCzM,aAAchJ,EAAOgJ,eAI7BjK,EAAKX,MAAMkY,eACXvX,EAAKX,MAAMkY,eAAe1tB,IAG1BA,EAAQgB,GAAKmV,EAAKX,MAAM2Y,WAAW9B,MAAMrrB,GACzCmV,EAAKX,MAAMmY,gBAAgB3tB,4FA5BlB,IAAAyb,EACajR,KAAKgL,MAA5B2Y,EADU1S,EACV0S,WAAYnuB,EADFyb,EACEzb,QACZqsB,EAAS4B,GAAoBjuB,EAAQ4O,KAAMuf,GAA3C9B,MACP7hB,KAAKsM,SAAS8W,GAAevB,EAAO7hB,KAAKgL,MAAM2Y,WAAWN,6CA+BrD,IAAAxQ,EAAA7S,KAAAqU,EACmFrU,KAAKgL,MAAtF2Y,EADFtP,EACEsP,WAAYnuB,EADd6e,EACc7e,QAASiX,EADvB4H,EACuB5H,KAAMyW,EAD7B7O,EAC6B6O,eAAgBC,EAD7C9O,EAC6C8O,gBAAiBsC,EAD9DpR,EAC8DoR,kBAD9Dc,EAEyB9C,GAAoBjuB,EAAQ4O,KAAMuf,EAAY,aAArEC,EAFF2C,EAEE3C,aAAc/B,EAFhB0E,EAEgB1E,MACdwB,EAA8CM,EAA9CN,UAAW4B,EAAmCtB,EAAnCsB,UAAW5D,EAAwBsC,EAAxBtC,aAAcnT,EAAUyV,EAAVzV,OACpCZ,EAAqBb,EAArBa,kBAEDkZ,EAAUhB,GAAYtC,EAAgBC,EAAiBsC,EAAmBzlB,KAAK0lB,SAAU7D,GAE/F,OACIlX,EAAApL,EAAAqL,cAACuG,GAAA,EAAD,CAAMlC,MAAO,CAACxB,MAAO,QAASoE,QAAS2U,GACnC7b,EAAApL,EAAAqL,cAACqD,GAAA,EAAD,CAAMC,OAAO,cAETvD,EAAApL,EAAAqL,cAAC6e,GAAD/0B,OAAAoW,OAAA,CAAUsD,MAAM,mBACNC,MAAM,sFACFH,GACTZ,EAAkB,UAAW,CAC1BgB,aAAcuT,EAAMI,QAAQK,QAC5B9T,MAAO,CAAC,CACJC,UAAU,EACV1d,QAAS,6CAJhBuc,CAOG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOW,IAAI,IAAIvZ,KAAK,SAAS6Y,YAAY,YAIjDhE,EAAApL,EAAAqL,cAAC8e,GAAD,CAAsBpe,SAAUA,GAAUuW,MAAOA,EAC3BvU,kBAAmBA,EACnBY,OAAQA,EACR1Y,QAASwK,KAAKgL,MAAMxV,UAE1CmV,EAAApL,EAAAqL,cAAC+b,GAAD,CAAgBrb,SAAUA,GAAUsY,aAAcA,EAAc/B,MAAOA,EACvDpO,gBAAiB,SAAC7d,GAAD,OAAWid,EAAKvG,SAAS1W,IAC1C0X,kBAAmBA,EACnBY,OAAQA,IAExBvD,EAAApL,EAAAqL,cAACgc,GAAD,CAAuBtb,SAAUA,GAAU2Z,UAAWA,EAAWpD,MAAOA,EACjD0B,cAAevjB,KAAKpK,MAAM2tB,cAC1BjW,kBAAmBA,EACnBY,OAAQA,IAE/BvD,EAAApL,EAAAqL,cAACic,GAAD,CAAuBvb,SAAUA,GACVuW,MAAOA,EACPwB,UAAWA,EACXhC,aAAcA,EACdmC,cAAexjB,KAAKpK,MAAM4tB,cAC1BlW,kBAAmBA,EACnBY,OAAQA,IAE/BvD,EAAApL,EAAAqL,cAACkc,GAAD,CAAsBxb,SAAUA,GAAUuW,MAAOA,EAC3BvU,kBAAmBA,EACnBY,OAAQA,aA5F1B3D,aAoGTgB,QAAK/B,QAAL+B,CAAcie,ICvGvBG,GAAUC,KAAKD,QAyFNE,8MArFXj0B,MAAQ,CACJsY,OAAQ,CACJlB,SAAU,CAACC,KAAM,GACjBC,WAAY,CAACD,KAAM,KAEvBgY,UAAW,GACX5B,UAAW,GACXhC,aAAc,KACdQ,MAAO,QAgBXqB,eAAiB,SAAC4G,GACVA,GACAne,EAAKX,MAAM+e,eAAeD,GAC9Bne,EAAKX,MAAMgf,gBAGfC,YAAc,SAACC,GAAD,OAAgBve,EAAKW,SAAS,CAAC4d,yGAdnB9I,GACtBphB,KAAKsM,SAAS,CACV2Y,UAAW7D,EAAU6D,UACrB5B,UAAWjC,EAAUiC,UACrBhC,aAAcD,EAAUC,gDAa5B,OACI1W,EAAApL,EAAAqL,cAAA,WACID,EAAApL,EAAAqL,cAAC2C,GAAA,EAAD,CAAOE,MAAO,IACP3c,MAAM,gBACN0c,QAASxN,KAAKgL,MAAMwC,QACpBG,SAAU3N,KAAKgL,MAAMgf,WACrBtc,gBAAgB,EAChBG,OAAQ,MAEXlD,EAAApL,EAAAqL,cAACuf,GAAA,EAAD,CAAMr0B,KAAK,OAAOkZ,SAAUhP,KAAKiqB,aAC7Btf,EAAApL,EAAAqL,cAAC+e,GAAD,CAASS,IAAKzf,EAAApL,EAAAqL,cAAA,YAAMD,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,SAAjB,cACLyC,IAAI,aACToS,EAAApL,EAAAqL,cAACyf,GAAD,CAAW1G,WAAY3jB,KAAKpK,MACjB00B,mBAAoBtqB,KAAKuqB,yBACzBrH,eAAgBljB,KAAKkjB,eACrB1tB,QAASwK,KAAKgL,MAAMxV,WAGnCmV,EAAApL,EAAAqL,cAAC+e,GAAD,CAASS,IAAKzf,EAAApL,EAAAqL,cAAA,YAAMD,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,oBAAjB,YACLyC,IAAI,YACToS,EAAApL,EAAAqL,cAAC4f,GAAD,CAAU7G,WAAY3jB,KAAKpK,MACjBstB,eAAgBljB,KAAKkjB,eACrB1tB,QAASwK,KAAKgL,MAAMxV,WAGlCmV,EAAApL,EAAAqL,cAAC+e,GAAD,CAASS,IAAKzf,EAAApL,EAAAqL,cAAA,YAAMD,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,aAAjB,eACLyC,IAAI,cACToS,EAAApL,EAAAqL,cAAC6f,GAAD,CAAY9G,WAAY3jB,KAAKpK,MACjBstB,eAAgBljB,KAAKkjB,eACrB1tB,QAASwK,KAAKgL,MAAMxV,WAGpCmV,EAAApL,EAAAqL,cAAC+e,GAAD,CAASS,IAAKzf,EAAApL,EAAAqL,cAAA,YAAMD,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,QAAjB,aACLyC,IAAI,aACToS,EAAApL,EAAAqL,cAAC8f,GAAD,CAAW/G,WAAY3jB,KAAKpK,MACjBstB,eAAgBljB,KAAKkjB,eACrB1tB,QAASwK,KAAKgL,MAAMxV,qBAvE/B+U,aC4DbogB,8MAhEX/0B,MAAQ,CACJsY,OAAQ,CACJlB,SAAU,CAACC,KAAM,GACjBC,WAAY,CAACD,KAAM,KAEvBgY,UAAW,GACX5B,UAAW,GACXhC,aAAc,KACdQ,MAAO,QAiBXsB,gBAAkB,SAACyH,GACXA,GACAjf,EAAKX,MAAMmY,gBAAgByH,GAC/Bjf,EAAKX,MAAMgf,uGAZW5I,GACtBphB,KAAKsM,SAAS,CACVuV,MAAOT,EAAUS,MACjBoD,UAAW7D,EAAU6D,UACrB5B,UAAWjC,EAAUiC,UACrBhC,aAAcD,EAAUC,gDAW5B,OACI1W,EAAApL,EAAAqL,cAAC2C,GAAA,EAAD,CAAOE,MAAO,IACP3c,MAAM,aACN0c,QAASxN,KAAKgL,MAAMwC,QACpBG,SAAU3N,KAAKgL,MAAMgf,WACrBtc,gBAAgB,EAChBG,OAAQ,MAEgB,eAA1B7N,KAAKgL,MAAM6W,MAAMvD,KACd3T,EAAApL,EAAAqL,cAACyf,GAAD,CAAW1G,WAAY3jB,KAAKpK,MACjButB,gBAAiBnjB,KAAKmjB,gBACtBsC,kBAAmBzlB,KAAKgL,MAAMya,kBAC9BjwB,QAASwK,KAAKgL,MAAMxV,UAAa,KACrB,aAA1BwK,KAAKgL,MAAM6W,MAAMvD,KACd3T,EAAApL,EAAAqL,cAAC4f,GAAD,CAAU7G,WAAY3jB,KAAKpK,MAAOutB,gBAAiBnjB,KAAKmjB,gBAC9CsC,kBAAmBzlB,KAAKgL,MAAMya,kBAC9BjwB,QAASwK,KAAKgL,MAAMxV,UAAa,KACpB,gBAA1BwK,KAAKgL,MAAM6W,MAAMvD,KACd3T,EAAApL,EAAAqL,cAAC6f,GAAD,CAAY9G,WAAY3jB,KAAKpK,MAAOutB,gBAAiBnjB,KAAKmjB,gBAC9CsC,kBAAmBzlB,KAAKgL,MAAMya,kBAC9BjwB,QAASwK,KAAKgL,MAAMxV,UAAa,KACtB,cAA1BwK,KAAKgL,MAAM6W,MAAMvD,KACd3T,EAAApL,EAAAqL,cAAC8f,GAAD,CAAW/G,WAAY3jB,KAAKpK,MAAOutB,gBAAiBnjB,KAAKmjB,gBAC9CsC,kBAAmBzlB,KAAKgL,MAAMya,kBAC9BjwB,QAASwK,KAAKgL,MAAMxV,UAAa,aA1DnC+U,aCevBsgB,IAFUhb,KAAMD,oBAalB,SAAAib,EAAY7f,GAAO,IAAAW,EAAA,OAAAjX,OAAAonB,EAAA,EAAApnB,CAAAsL,KAAA6qB,IACflf,EAAAjX,OAAAqnB,EAAA,EAAArnB,CAAAsL,KAAAtL,OAAAsnB,EAAA,EAAAtnB,CAAAm2B,GAAA5O,KAAAjc,KAAMgL,KAVVpV,MAAQ,CACJk1B,iBAAiB,EACjBC,kBAAkB,EAClBC,oBAAoB,EACpB1J,OAAQ,GACRsJ,aAAc,GACdK,aAAc,CAAChb,QAAS,KAGTtE,EA0BnBuf,kBAAoB,kBAAMvf,EAAKW,SAAS,CAACwe,iBAAiB,KA1BvCnf,EA2BnBwf,mBAAqB,kBAAMxf,EAAKW,SAAS,CAACwe,iBAAiB,KA3BxCnf,EA4BnBoe,eAAiB,SAACD,GAAD,OAAcne,EAAKX,MAAMogB,SAAStB,EAAUne,EAAKX,MAAMqW,aAAahqB,KA5BlEsU,EAiCnBiW,UAAY,SAACgJ,GAAD,OAAkBjf,EAAKW,SAAS,CAACse,eAAcG,kBAAkB,KAjC1Dpf,EAkCnB0f,oBAAsB,kBAAM1f,EAAKW,SAAS,CAACse,aAAc,GAAIG,kBAAkB,KAlC5Dpf,EAmCnBwX,gBAAkB,SAACyH,GAAD,OAAkBjf,EAAKX,MAAM4W,UAAUgJ,IAnCtCjf,EAuCnB8Z,kBAAoB,SAAAwF,GAAY,OAAItf,EAAKX,MAAM8W,YAAYmJ,IArCvDtf,EAAK2f,UAAY3f,EAAK2f,UAAUC,KAAf72B,OAAA82B,GAAA,EAAA92B,QAAA82B,GAAA,EAAA92B,CAAAiX,KAFFA,yEAKTuI,GAEN,GAAKA,EAAOuX,YAAZ,CAEA,IAAInK,EA/BI,SAACoK,EAAMC,EAAYC,GAC/B,IAAM1X,EAASmG,MAAMjP,KAAKsgB,GADkBG,EAE1B3X,EAAOjc,OAAO0zB,EAAY,GAArCG,EAFqCp3B,OAAAq3B,GAAA,EAAAr3B,CAAAm3B,EAAA,MAK5C,OAFA3X,EAAOjc,OAAO2zB,EAAU,EAAGE,GAEpB5X,EA0BU8X,CAAQhsB,KAAKpK,MAAM0rB,OAAQpN,EAAO+X,OAAOhZ,MAAOiB,EAAOuX,YAAYxY,OAChFjT,KAAKsM,SAAS,CAACgV,WAEfthB,KAAKgL,MAAMkhB,cAAc5K,sDAGHF,GAElBA,EAAUC,eAAiBrhB,KAAKpK,MAAMyrB,cAAgBD,EAAUC,aAAaC,QAC7EthB,KAAKsM,SAAS,CAACgV,OAAQF,EAAUC,aAAaC,0CAwB7C,IAAAzO,EAAA7S,KACL,OACI2K,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOrlB,OACnBkd,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOllB,0BACnB+c,EAAApL,EAAAqL,cAAA,WACID,EAAApL,EAAAqL,cAAA,UAAK5K,KAAKgL,MAAMqW,aAAa9C,KAA7B,YAEJ5T,EAAApL,EAAAqL,cAAA,WACID,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQwB,UAAWwD,KAAO/kB,oBAAqB+H,KAAK,UAAU4a,KAAK,OAC3D3C,QAAS/N,KAAKkrB,kBAAmB9b,UAAWpP,KAAKgL,MAAMqW,aAAahqB,IAD5E,eAORsT,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOjlB,YACnB8c,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACqC,OAAQ,OAAQ7D,MAAO,OAAQ0e,UAAW,SACnDxhB,EAAApL,EAAAqL,cAACwhB,GAAA,EAAD,CAAiBd,UAAWtrB,KAAKsrB,WAC7B3gB,EAAApL,EAAAqL,cAACwhB,GAAA,EAAD,CAAWC,YAAY,aAClB,SAACC,GAAD,OACG3hB,EAAApL,EAAAqL,cAAA,OAAKyR,IAAKiQ,EAASC,UAEX1Z,EAAKjd,MAAM0rB,OAAOxqB,IAAI,SAAC+qB,EAAO5O,GAAR,OAClBtI,EAAApL,EAAAqL,cAACwhB,GAAA,EAAD,CAAW7zB,IAAKspB,EAAMrrB,GAAIg2B,YAAa3K,EAAMrrB,GAAIyc,MAAOA,GACnD,SAACqZ,GAAD,OACG3hB,EAAApL,EAAAqL,cAAA,MAAAlW,OAAAoW,OAAA,CAAKuR,IAAKiQ,EAASC,UAAcD,EAASG,eACjCH,EAASI,gBADlB,CAEKzd,OAnFxC0d,EAmF4DL,EAASG,eAAexd,MAnFtEva,OAAAC,GAAA,EAAAD,CAAA,CAAM0c,OAAM,aAAkBub,MAoFLhiB,EAAApL,EAAAqL,cAACgiB,GAAD,CAAO/K,MAAOA,EACPD,UAAW/O,EAAK+O,UAChBE,YAAajP,EAAK4S,kBAClBjwB,QAASqd,EAAK7H,MAAMxV,WAvFlE,IAAAm3B,MA6FoBL,EAAS3d,kBAQlChE,EAAApL,EAAAqL,cAACiiB,GAAD,CAAerf,QAASxN,KAAKpK,MAAMk1B,gBACpBf,eAAgB/pB,KAAK+pB,eACrBC,WAAYhqB,KAAKmrB,mBAEjB9J,aAAcrhB,KAAKgL,MAAMqW,aACzB4D,UAAWjlB,KAAKpK,MAAM0rB,OACtB+B,UAAWrjB,KAAKgL,MAAMqY,UACtB7tB,QAASwK,KAAKgL,MAAMxV,UAEnCmV,EAAApL,EAAAqL,cAACkiB,GAAD,CAAgBtf,QAASxN,KAAKpK,MAAMm1B,iBACpB5H,gBAAiBnjB,KAAKmjB,gBACtBsC,kBAAmBzlB,KAAKylB,kBACxBuE,WAAYhqB,KAAKqrB,oBAEjBxJ,MAAO7hB,KAAKpK,MAAMg1B,aAClBvJ,aAAcrhB,KAAKgL,MAAMqW,aACzB4D,UAAWjlB,KAAKpK,MAAM0rB,OACtB+B,UAAWrjB,KAAKgL,MAAMqY,UACtB7tB,QAASwK,KAAKgL,MAAMxV,kBApH/B+U,cA0HNgB,QAAK/B,QAAL+B,CAAcsf,wDCnIvBjb,GAAUC,KAAMD,QAEhBvL,8MAEF0oB,cAAe,IAEfn3B,MAAQ,CACJyrB,aAAc,CAACC,OAAQ,IACvBrrB,UAAW,CAACoO,KAAM,CAAC2oB,OAAO,KAC1BC,SAAS,KAUbC,mBAAqB,WACZvhB,EAAK/V,MAAMq3B,QAIZxkB,OAAO0kB,oBAAiB17B,GAHxBiF,QAAQC,IAAI,WACZ8R,OAAO0kB,eAAiB,kBAAM,OAetCC,kBAAoB,WAAM,IAAAC,EAAAnQ,EACYvR,EAAK/V,MAAhCK,EADeinB,EACfjnB,UAAWorB,EADInE,EACJmE,aACdiM,EAAmBl9B,KAAKC,MAAMD,KAAKO,UAAUsF,IAC7Cs3B,EAAY,QAAAF,EAAGC,EAAiBjpB,YAApB,IAAAgpB,OAAA,EAAGA,EAAuBL,OAAOM,EAAiBjpB,KAAK2oB,OAAOl1B,UAAU,SAAAmoB,GAAK,OAAIA,EAAM5oB,KAAOgqB,EAAahqB,MAC3H,MAAO,CAACi2B,mBAAkBC,mBAG9B/L,YAAc,SAAAH,GAAY,OAAI1V,EAAKW,SAAS,CAAC+U,oBAI7CZ,SAAW,SAAAD,GAAY,IACZ8M,EAAoB3hB,EAAKyhB,oBAAzBE,iBACHA,EAAiBjpB,OACjBipB,EAAiBjpB,KAAO,CAAC2oB,OAAQ,KACrCM,EAAiBjpB,KAAK2oB,OAAO11B,KAAK,CAC9BD,GAAIm2B,KAAQC,WACZlP,KAAMiC,EAASjC,KACfrtB,YAAasvB,EAAStvB,YACtBowB,OAAQ,KAGZ3V,EAAKW,SAAS,CACVrW,UAAWq3B,EACXL,SAAS,IAEbj7B,IACAL,EAAe,mBAGnBmvB,UAAY,SAAAD,GAAe,IAAA6M,EACkB/hB,EAAKyhB,oBAAvCE,EADgBI,EAChBJ,iBAAkBC,EADFG,EACEH,aAEzBA,EAAahP,KAAOsC,EAAYtC,KAChCgP,EAAar8B,YAAc2vB,EAAY3vB,YACvCya,EAAK6V,YAAY+L,GAEjB5hB,EAAKW,SAAS,CACVrW,UAAWq3B,EACXL,SAAS,IAEbj7B,IACAL,EAAe,qBAGnBwvB,YAAc,SAAAD,GAAgB,IACnBoM,EAAoB3hB,EAAKyhB,oBAAzBE,iBACPA,EAAiBjpB,KAAK2oB,OAASM,EAAiBjpB,KAAK2oB,OAAOz2B,OAAO,SAAA0pB,GAAK,OAAIA,EAAM5oB,KAAO6pB,EAAa7pB,KACtGsU,EAAKW,SAAS,CACVrW,UAAWq3B,EACXjM,aAAc,CAACC,OAAQ,IACvB2L,SAAS,IAEbj7B,IACAL,EAAe,qBAMnBy5B,SAAW,SAACtB,GAAa,IAAA6D,EACoBhiB,EAAKyhB,oBAAvCE,EADcK,EACdL,iBAAkBC,EADJI,EACIJ,aAEnB/2B,EAAKg3B,KAAQC,WAGnB,GAFA3D,EAAStzB,GAAKA,EAEV+2B,EAAajM,OAAO9vB,OAAS,EAAG,CAChC,IAAMo8B,EAAYL,EAAajM,OAAOiM,EAAajM,OAAO9vB,OAAS,GAClC,qBAA7Bo8B,EAAU3L,QAAQpsB,SAClB+3B,EAAU3L,QAAQgB,YAAczsB,GAGxC+2B,EAAajM,OAAOhqB,KAAKwyB,GAEzBne,EAAKW,SAAS,CACVrW,UAAWq3B,EACXjM,aAAckM,EACdN,SAAS,IAEbj7B,IACAL,EAAe,mBAGnBiwB,UAAY,SAACgJ,GAAiB,IAAAiD,EACeliB,EAAKyhB,oBAAvCE,EADmBO,EACnBP,iBAAkBC,EADCM,EACDN,aACnBO,EAAYP,EAAajM,OAAOiM,EAAajM,OAAOxpB,UAAU,SAAAi2B,GAAC,OAAIA,EAAEv3B,KAAOo0B,EAAap0B,KAAM,GAEjE,qBAAhCo0B,EAAa3I,QAAQpsB,UACrB,OAAIi4B,QAAJ,IAAIA,OAAJ,EAAIA,EAAWt3B,IACXo0B,EAAa3I,QAAQgB,YAAc6K,EAAUt3B,GAE7Co0B,EAAa3I,QAAQgB,YAAc,MAE3CsK,EAAajM,OAAOiM,EAAajM,OAAOxpB,UAAU,SAAAi2B,GAAC,OAAIA,EAAEv3B,KAAOo0B,EAAap0B,MAAOo0B,EAEpFjf,EAAKW,SAAS,CACVrW,UAAWq3B,EACXjM,aAAckM,EACdN,SAAS,IAEbj7B,IACAL,EAAe,qBAGnBmwB,YAAc,SAACmJ,GAAiB,IAAA+C,EACariB,EAAKyhB,oBAAvCE,EADqBU,EACrBV,iBAAkBC,EADGS,EACHT,aACrB3S,EAAU,EACd0S,EAAiBjpB,KAAK2oB,OAAO10B,QAAQ,SAAC2nB,GAClCA,EAAMqB,OAAOxqB,IAAI,SAAC+qB,GAKd,OAJIA,EAAMI,QAAQgB,cAAgBgI,EAAaz0B,KAC3CqrB,EAAMI,QAAQgB,YAAc,KAC5BrI,KAEGiH,MAIfjS,GAAQ,CACJ9e,MAAK,2BAAA4H,OAA6BuyB,EAAa3M,MAC/CrO,QAAStF,EAAApL,EAAAqL,cAAA,gFAAuED,EAAApL,EAAAqL,cAAA,SAAIgQ,GAA3E,WACT1K,KAAM,WACFqd,EAAajM,OAASiM,EAAajM,OAAO/qB,OAAO,SAACsrB,GAAD,OAAWA,EAAMrrB,KAAOy0B,EAAaz0B,KAEtFmV,EAAKW,SAAS,CACVrW,UAAWq3B,EACXjM,aAAckM,EACdN,SAAS,IAEbj7B,IACAL,EAAe,wBAK3Bu6B,cAAgB,SAAC+B,GAAmB,IAAAC,EACSviB,EAAKyhB,oBAAvCE,EADyBY,EACzBZ,iBAAkBC,EADOW,EACPX,aACzBU,EAAen3B,IAAI,SAAC+qB,EAAO5O,EAAOkb,GAUvB,IAAAC,EATY,aAAfvM,EAAMvD,KACNuD,EAAMI,QAAQU,QAAQ7rB,IAAI,SAAC8rB,GAAW,IAAAyL,EAMlC,MALsB,qBAAlBzL,EAAO/sB,UACP,QAAAw4B,EAAIF,EAAMlb,EAAQ,UAAlB,IAAAob,OAAA,EAAIA,EAAkB73B,IAClBosB,EAAOK,YAAckL,EAAMlb,EAAQ,GAAGzc,GAEtCosB,EAAOK,YAAc,MACtBL,IAGkB,qBAAzBf,EAAMI,QAAQpsB,UACd,QAAAu4B,EAAID,EAAMlb,EAAQ,UAAlB,IAAAmb,OAAA,EAAIA,EAAkB53B,IAClBqrB,EAAMI,QAAQgB,YAAckL,EAAMlb,EAAQ,GAAGzc,GAE7CqrB,EAAMI,QAAQgB,YAAc,MAGxC,OAAOpB,IAGX0L,EAAajM,OAAS2M,EAEtBtiB,EAAKW,SAAS,CACVrW,UAAWq3B,EACXjM,aAAckM,EACdN,SAAS,OAIjBqB,SAAW,WACP3iB,EAAKohB,cAAe,EACpBphB,EAAKX,MAAMhB,SAAShQ,GAAiBmB,WAAWwQ,EAAK/V,MAAMK,YAC3D0V,EAAKX,MAAMK,SAASzV,MAAMK,UAAY0V,EAAK/V,MAAMK,oGAlM3BmrB,EAAWmN,GAC7BnN,EAAUhrB,YAAc4J,KAAK+sB,eAC7B/sB,KAAK+sB,cAAe,EACpB/sB,KAAKsM,SAAS,CAAC2gB,SAAS,iDAcZ,IAAApa,EAAA7S,KAChBtJ,QAAQC,IAAI,qBADI,IAAAsa,EAEejR,KAAKgL,MAA7B/V,EAFSgc,EAEThc,cAAeu5B,EAFNvd,EAEMud,MACtBxuB,KAAKsM,SAAS,CAACrW,UAAWhB,EAAcskB,KAAK,SAAAtjB,GAAS,OAAIA,EAAUO,MAAQg4B,EAAMxwB,OAAO3G,MACrF,kBAAMX,QAAQC,IAAIkc,EAAKjd,MAAMK,8CAgL5B,IACEA,EAAa+J,KAAKpK,MAAlBK,UACAoO,EAAQpO,EAARoO,KAEP,OACIsG,EAAApL,EAAAqL,cAACwP,GAAA,EAAD,CAAMiD,UAAcpnB,EAAYgZ,MAAO,CAACqC,OAAQ,SAE5C3G,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACqC,OAAQ,SACjB3G,EAAApL,EAAAqL,cAACsU,GAAD,CAAQxB,QAASznB,EAAUsY,KACnBkP,OAAQ,CACJ/M,KAAM,OACN3C,QAAS/N,KAAKsuB,SACdtQ,KAAM,YACN5O,SAAUpP,KAAKpK,MAAMq3B,QACrBv7B,QAASsO,KAAKgL,MAAM/T,kBAGhC0T,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOhlB,iBACnB6c,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACmC,OAAQ,YAAa3D,MAAO,QAEjCxX,GAAa0U,EAAApL,EAAAqL,cAAC6jB,GAAD,CAAQjN,YAAaxhB,KAAKwhB,YACvBtsB,UAAW8K,KAAKgL,MAAM9V,UACtBvG,WAAU,OAAE0V,QAAF,IAAEA,OAAF,EAAEA,EAAM2oB,OAClB3L,aAAcrhB,KAAKpK,MAAMyrB,aACzBZ,SAAUzgB,KAAKygB,SACfK,UAAW9gB,KAAK8gB,UAChBK,YAAanhB,KAAKmhB,eAI1CxW,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACmC,OAAQ,YAAa3D,MAAO,QAEjCxX,GAAa0U,EAAApL,EAAAqL,cAAC8jB,GAAD,CAAQtD,SAAUprB,KAAKorB,SACpBxJ,UAAW5hB,KAAK4hB,UAChBE,YAAa9hB,KAAK8hB,YAClBoK,cAAelsB,KAAKksB,cACpB7K,aAAcrhB,KAAKpK,MAAMyrB,aACzBgC,UAAS,OAAEhf,QAAF,IAAEA,OAAF,EAAEA,EAAM2oB,OACjBx3B,QAASwK,KAAKgL,MAAMxV,aAOpDmV,EAAApL,EAAAqL,cAAC+jB,GAAA,EAAD,CACIC,MAAO5uB,KAAKpK,MAAMq3B,QAClBl8B,QAAS,SAAAsa,GAAQ,yFA9PlBd,aAqRJ6F,oBAVf,SAAyBxa,GACrB,MAAO,CACHJ,QAASI,EAAMJ,QAAQA,QACvBP,cAAeW,EAAMK,UAAUhB,cAC/BmB,WAAYR,EAAMK,UAAUiB,qBAC5BD,eAAgBrB,EAAMK,UAAUgB,iBAKzBmZ,CAAyB/L,mCChSlCiH,GAAWC,KAAKC,KAEhBqjB,8MAEFj5B,MAAO,CACH2oB,KAAM,GACN1lB,MAAO,GACPi2B,YAAa,MAGjBC,aAAe,SAAC5G,GACZA,EAAE6G,iBACFrjB,EAAKX,MAAMyB,KAAKC,eAAe,SAACC,EAAKC,GAC5BD,GACDhB,EAAKX,MAAMxO,mBAAmBoQ,+FAKhBwU,GACtB,IAAM9nB,EAAO8nB,EAAU7pB,YACnB03B,mBAAQ31B,IACLA,EAAKnJ,MAAQmJ,EAAKnJ,KAAK0I,QAAUmH,KAAKpK,MAAMiD,OAC3CmH,KAAKsM,SAAS,CACViS,KAAMjlB,EAAKnJ,KAAKmV,UAAY,IAAMhM,EAAKnJ,KAAKoV,QAC5C1M,MAAOS,EAAKnJ,KAAK++B,MACjBJ,YAAax1B,EAAK61B,QAAQ5gB,wCAMjC,IACEjB,EAAqBtN,KAAKgL,MAAMyB,KAAhCa,kBAEDP,EAAiB,CACnBC,SAAU,CAACC,KAAM,GACjBC,WAAY,CAACD,KAAM,KAGvB,OACItC,EAAApL,EAAAqL,cAACqD,GAAA,EAAD,CAAMyX,SAAU1lB,KAAK+uB,cACjBpkB,EAAApL,EAAAqL,cAACwkB,GAAD16B,OAAAoW,OAAA,CACIsD,MAAO,QACPC,MAAO,wBACHtB,GACHO,EAAkB,OAAQ,CACvBgB,aAActO,KAAKpK,MAAM2oB,KACzB/P,MAAO,CAAC,CACJC,UAAU,EACV1d,QAAS,gDAJhBuc,CAOG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,QAIR/D,EAAApL,EAAAqL,cAACwkB,GAAD16B,OAAAoW,OAAA,CACIsD,MAAO,SACPC,MAAO,mFACHtB,GACHO,EAAkB,QAAS,CACxBgB,aAActO,KAAKpK,MAAMiD,MACzB2V,MAAO,CAAC,CACJC,UAAU,EACV1d,QAAS,gCAJhBuc,CAOG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOU,UAAU,EAAMigB,UAAU,MAIzC1kB,EAAApL,EAAAqL,cAACwkB,GAAD16B,OAAAoW,OAAA,CACIsD,MAAO,gBACPC,MAAO,gCACHtB,GACHO,EAAkB,cAAe,CAC9BgB,aAActO,KAAKpK,MAAMk5B,YACzBtgB,MAAO,CAAC,CACJC,UAAU,EACV1d,QAAS,oCAJhBuc,CAOG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,QAIR/D,EAAApL,EAAAqL,cAAA,WAEAD,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACgG,UAAW,SAAUO,aAAc,SAAS7K,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQwhB,SAAU,SAChChgB,UAAW,mBADG,mBAvF5C6N,IAAM5S,WA+FpBgB,QAAK/B,QAAL+B,CAAcsjB,cCjGvBvjB,GAAWC,KAAKC,KAEhB+jB,8MACF35B,MAAQ,CACJ45B,aAAa,EACbC,mBAAmB,EACnBC,WAAW,EACXC,aAAa,EACbC,mBAAmB,EACnBC,eAAe,KAwCnBd,aAAe,SAAC5G,GACZA,EAAE6G,iBACFrjB,EAAKX,MAAMyB,KAAKC,eAAe,SAACC,EAAKC,GACrClW,QAAQC,IAAI,WAAYiW,GACfD,GACDhB,EAAKX,MAAMrO,iBAAiBiQ,QAKxCqJ,aAAe,SAACkS,GACZ,IAAI5J,EAAO4J,EAAEC,OAAO7J,KAChBxP,EAAUoZ,EAAEC,OAAOrZ,QACvBpD,EAAKW,SAAL5X,OAAAo7B,GAAA,EAAAp7B,CAAA,GAAgB6pB,EAAOxP,6EAGlB,IACEzB,EAAqBtN,KAAKgL,MAAMyB,KAAhCa,kBACDP,EAAiB,CACnBC,SAAU,CAACC,KAAM,GACjBC,WAAY,CAACD,KAAM,KAGvB,OACItC,EAAApL,EAAAqL,cAACqD,GAAA,EAAD,CAAMyX,SAAU1lB,KAAK+uB,cACjBpkB,EAAApL,EAAAqL,cAAA,mCACAD,EAAApL,EAAAqL,cAAA,2NAKAD,EAAApL,EAAAqL,cAAA,kGAGAD,EAAApL,EAAAqL,cAAA,WAEAD,EAAApL,EAAAqL,cAACmlB,GAADr7B,OAAAoW,OAAA,CACIsD,MAAO,eACPC,MAAO,2LAEHtB,GACHO,EAAkB,cAAe,CAC9BgB,aAActO,KAAKpK,MAAM45B,aAD5BliB,CAGG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAO5Y,KAAM,WAAYyoB,KAAM,cAAevP,SAAUhP,KAAKiW,aAAclH,QAAS/O,KAAKpK,MAAM45B,gBAIvG7kB,EAAApL,EAAAqL,cAAA,WAEAD,EAAApL,EAAAqL,cAACmlB,GAADr7B,OAAAoW,OAAA,CACIsD,MAAO,qBACPC,MAAO,wHAEHtB,GACHO,EAAkB,oBAAqB,CACpCgB,aAActO,KAAKpK,MAAM65B,mBAD5BniB,CAGG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAO5Y,KAAM,WAAYyoB,KAAM,oBAAqBvP,SAAUhP,KAAKiW,aAAclH,QAAS/O,KAAKpK,MAAM65B,sBAI7G9kB,EAAApL,EAAAqL,cAAA,WAEAD,EAAApL,EAAAqL,cAAA,8BACAD,EAAApL,EAAAqL,cAAA,yHAGAD,EAAApL,EAAAqL,cAAA,WAEAD,EAAApL,EAAAqL,cAACmlB,GAADr7B,OAAAoW,OAAA,CACIsD,MAAO,iBACPC,MAAO,6MAEHtB,GACHO,EAAkB,YAAa,CAC5BgB,aAActO,KAAKpK,MAAM85B,WAD5BpiB,CAGG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAO5Y,KAAM,WAAYyoB,KAAM,YAAavP,SAAUhP,KAAKiW,aAAclH,QAAS/O,KAAKpK,MAAM85B,cAIrG/kB,EAAApL,EAAAqL,cAAA,WAEAD,EAAApL,EAAAqL,cAACmlB,GAADr7B,OAAAoW,OAAA,CACIsD,MAAO,qBACPC,MAAO,oFACHtB,GACHO,EAAkB,cAAe,CAC9BgB,aAActO,KAAKpK,MAAM+5B,aAD5BriB,CAGG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAO5Y,KAAM,WAAYyoB,KAAM,cAAevP,SAAUhP,KAAKiW,aAAclH,QAAS/O,KAAKpK,MAAM+5B,gBAIvGhlB,EAAApL,EAAAqL,cAAA,WAEAD,EAAApL,EAAAqL,cAACmlB,GAADr7B,OAAAoW,OAAA,CACIsD,MAAO,sBACPC,MAAO,uQAGHtB,GACHO,EAAkB,oBAAqB,CACpCgB,aAActO,KAAKpK,MAAMg6B,mBAD5BtiB,CAGG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAO5Y,KAAM,WAAYyoB,KAAM,oBAAqBvP,SAAUhP,KAAKiW,aAAclH,QAAS/O,KAAKpK,MAAMg6B,sBAI7GjlB,EAAApL,EAAAqL,cAAA,WAEAD,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACgG,UAAW,SAAUO,aAAc,SAAS7K,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQwhB,SAAU,SAChChgB,UAAW,mBADG,+DArJrC0gB,EAAUC,GACtC,GAAGA,EAAUJ,cACT,OAAOG,EAGX,IAAM12B,EAAO02B,EAASz4B,YACtB,OAAI03B,mBAAQ31B,GAqBJ,CACJk2B,aAAa,EACbC,mBAAmB,EACnBC,WAAW,EACXC,aAAa,EACbC,mBAAmB,EACnBC,eAAe,GA1BZv2B,EAAK42B,aACI,CACJV,YAAal2B,EAAKk2B,YAClBC,kBAAmBn2B,EAAK42B,aAAaC,uBACrCT,UAAWp2B,EAAK42B,aAAaE,aAC7BT,YAAar2B,EAAK42B,aAAaG,iBAC/BT,kBAAmBt2B,EAAK42B,aAAaI,kBACrCT,eAAe,GAGX,CACJL,YAAal2B,EAAKk2B,YAClBC,mBAAmB,EACnBC,WAAW,EACXC,aAAa,EACbC,mBAAmB,EACnBC,eAAe,UAjCR1S,IAAM5S,WAuKlBgB,QAAK/B,QAAL+B,CAAcgkB,IC1KvBjkB,GAAWC,KAAKC,KAEhB+kB,8MAEF36B,MAAQ,CACJ46B,cAAc,KAIlBzB,aAAe,SAAC5G,GACZA,EAAE6G,iBACFrjB,EAAKX,MAAMyB,KAAKC,eAAe,SAACC,EAAKC,GAC5BD,IACDjW,QAAQC,IAAI,4BAA6BiW,GACzCjB,EAAKX,MAAMylB,aAAa7jB,GACxBjB,EAAKX,MAAMyB,KAAKikB,oBAK5BC,kBAAoB,SAACxI,GACjB,IAAMxV,EAAQwV,EAAEC,OAAOzV,MACvBhH,EAAKW,SAAS,CAAEkkB,aAAc7kB,EAAK/V,MAAM46B,gBAAkB7d,OAG/Die,uBAAyB,SAACC,EAAMle,EAAOme,GACnC,IAAMrkB,EAAOd,EAAKX,MAAMyB,KACpBkG,GAASA,IAAUlG,EAAKskB,cAAc,eACtCD,EAAS,4DAETA,OAIRE,uBAAyB,SAACH,EAAMle,EAAOme,GACnC,IAAMrkB,EAAOd,EAAKX,MAAMyB,KACpBkG,GAAShH,EAAK/V,MAAM46B,cACpB/jB,EAAKC,eAAe,CAAC,sBAAuB,CAAEukB,OAAO,IAEzDH,6EAGK,IACExjB,EAAqBtN,KAAKgL,MAAMyB,KAAhCa,kBAEDP,EAAiB,CACnBC,SAAU,CAACC,KAAM,GACjBC,WAAY,CAACD,KAAM,KAGvB,OACItC,EAAApL,EAAAqL,cAACqD,GAAA,EAAD,CAAMyX,SAAU1lB,KAAK+uB,cAEjBpkB,EAAApL,EAAAqL,cAACsmB,GAADx8B,OAAAoW,OAAA,CACIsD,MAAO,iBACHrB,GACHO,EAAkB,cAAe,CAC9BkB,MAAO,CAAC,CAACC,UAAU,EAAM1d,QAAS,qCADrCuc,CAGG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOyiB,OAAQxmB,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,OAAOmZ,MAAO,CAACmiB,MAAO,qBACzCt7B,KAAK,WACL6Y,YAAY,OAI3BhE,EAAApL,EAAAqL,cAACsmB,GAADx8B,OAAAoW,OAAA,CACIsD,MAAO,iBACHrB,GACHO,EAAkB,cAAe,CAC9BkB,MAAO,CACH,CAACC,UAAU,EAAM1d,QAAS,mCAC1B,CAACsgC,UAAWrxB,KAAKgxB,wBACjB,CAACM,QAAS,UAAWvgC,QAAS,6BAJrCuc,CAOG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOyiB,OAAQxmB,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,OAAOmZ,MAAO,CAACmiB,MAAO,qBACzCt7B,KAAK,WACL6Y,YAAY,OAI3BhE,EAAApL,EAAAqL,cAACsmB,GAADx8B,OAAAoW,OAAA,CACIsD,MAAO,qBACHrB,GACHO,EAAkB,qBAAsB,CACrCkB,MAAO,CACH,CAACC,UAAU,EAAM1d,QAAS,qCAC1B,CAACsgC,UAAWrxB,KAAK4wB,0BAHxBtjB,CAMG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOyiB,OAAQxmB,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,OAAOmZ,MAAO,CAACmiB,MAAO,qBACzCt7B,KAAK,WACL6Y,YAAY,GACZua,OAAQlpB,KAAK2wB,sBAG5BhmB,EAAApL,EAAAqL,cAAA,WAEAD,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACgG,UAAW,SAAUO,aAAc,SAAS7K,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQwhB,SAAU,SAChChgB,UAAW,mBADG,mBAhG5C6N,IAAM5S,WAwGpBgB,QAAK/B,QAAL+B,CAAcglB,ICnGvB5G,GAAUC,KAAKD,QAEf4H,8MAEF/0B,mBAAqB,SAACoQ,GAClBjB,EAAKX,MAAMhB,SAAS5N,GAAeI,mBAAmBoQ,OAG1DjQ,iBAAmB,SAACiQ,GAChBjB,EAAKX,MAAMhB,SAAS5N,GAAeO,iBAAiBiQ,OAGxD6jB,aAAe,SAAC7jB,GACZjB,EAAKX,MAAMhB,SAAS5N,GAAeW,eAAe6P,EAAO5P,YAAa4P,EAAO3P,kGAK7E+C,KAAKgL,MAAMhB,SAAS5N,GAAeC,+CAKnC,OACIsO,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACqC,OAAQ,SACjB3G,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOrlB,OACnBkd,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOnlB,cACnBgd,EAAApL,EAAAqL,cAAA,WACID,EAAApL,EAAAqL,cAAA,0BACAD,EAAApL,EAAAqL,cAAA,0EAIRD,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOjlB,WAAYohB,MAAO,CAACkd,UAAW,SAClDxhB,EAAApL,EAAAqL,cAACuf,GAAA,EAAD,CAAMqH,iBAAkB,KACpB7mB,EAAApL,EAAAqL,cAAC6mB,GAAD,CAASrH,IAAK,uBAAwB7xB,IAAK,KACvCoS,EAAApL,EAAAqL,cAAC8mB,GAAD,CAAgBn6B,YAAayI,KAAKgL,MAAMzT,YAAaiF,mBAAoBwD,KAAKxD,sBAGlFmO,EAAApL,EAAAqL,cAAC6mB,GAAD,CAASrH,IAAK,gBAAiB7xB,IAAK,KAChCoS,EAAApL,EAAAqL,cAAC+mB,GAAD,CAAcp6B,YAAayI,KAAKgL,MAAMzT,YAAaoF,iBAAkBqD,KAAKrD,oBAG9EgO,EAAApL,EAAAqL,cAAC6mB,GAAD,CAASrH,IAAK,kBAAmB7xB,IAAK,KAClCoS,EAAApL,EAAAqL,cAACgnB,GAAD,CAAgBnB,aAAczwB,KAAKywB,2BA1C7CtT,IAAM5S,WA0Db6F,mBANf,SAAyBxa,GACrB,MAAO,CACH2B,YAAa3B,EAAMT,QAAQA,UAIpBib,CAAyBmhB,yBC3DlCM,WAFUjI,KAAKD,sOAUb,OACIhf,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACqC,OAAQ,SACjB3G,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOrlB,OACnBkd,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOnlB,cACnBgd,EAAApL,EAAAqL,cAAA,WACID,EAAApL,EAAAqL,cAAA,qBACAD,EAAApL,EAAAqL,cAAA,iFAIRD,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOjlB,WAAYohB,MAAO,CAACkd,UAAW,SAClDxhB,EAAApL,EAAAqL,cAAA,OAAKvT,GAAG,uBACJsT,EAAApL,EAAAqL,cAAA,eACID,EAAApL,EAAAqL,cAAA,OAAK0E,UAAU,YAAYL,MAAO,CAACgG,UAAW,WAG1CtK,EAAApL,EAAAqL,cAAA,OAAK0E,UAAU,OAEX3E,EAAApL,EAAAqL,cAAA,OAAK0E,UAAU,4BAGX3E,EAAApL,EAAAqL,cAAA,OAAK0E,UAAU,mCAGX3E,EAAApL,EAAAqL,cAAA,OAAK0E,UAAU,+BAGX3E,EAAApL,EAAAqL,cAAA,OAAK0E,UAAU,iCAGX3E,EAAApL,EAAAqL,cAAA,OAAK0E,UAAU,YACf3E,EAAApL,EAAAqL,cAAA,OAAK0E,UAAU,QACX3E,EAAApL,EAAAqL,cAAA,0BAQRD,EAAApL,EAAAqL,cAAA,OAAK0E,UAAU,8BACX3E,EAAApL,EAAAqL,cAAA,QAAM0E,UAAU,SACZ3E,EAAApL,EAAAqL,cAAA,QAAM0E,UAAU,QAAhB,QACA3E,EAAApL,EAAAqL,cAAA,QAAM0E,UAAU,YAAhB,MACA3E,EAAApL,EAAAqL,cAAA,QAAM0E,UAAU,QAAhB,OACA3E,EAAApL,EAAAqL,cAAA,QAAM0E,UAAU,SAAhB,eASZ3E,EAAApL,EAAAqL,cAAA,OAAK0E,UAAU,wBACX3E,EAAApL,EAAAqL,cAAA,UAEID,EAAApL,EAAAqL,cAAA,UAAID,EAAApL,EAAAqL,cAAA,sBAAJ,kBACAD,EAAApL,EAAAqL,cAAA,UAAID,EAAApL,EAAAqL,cAAA,kBAAJ,YACAD,EAAApL,EAAAqL,cAAA,UAAID,EAAApL,EAAAqL,cAAA,mBAAJ,gBACAD,EAAApL,EAAAqL,cAAA,UAAID,EAAApL,EAAAqL,cAAA,sBAAJ,aACAD,EAAApL,EAAAqL,cAAA,UAAID,EAAApL,EAAAqL,cAAA,qBAAJ,cAMRD,EAAApL,EAAAqL,cAAA,OAAK0E,UAAU,8BACX3E,EAAApL,EAAAqL,cAAA,KAAG0E,UAAU,GAAGwiB,KAAK,2GAArB,cAQZnnB,EAAApL,EAAAqL,cAAA,OAAK0E,UAAU,4BAGX3E,EAAApL,EAAAqL,cAAA,OAAK0E,UAAU,4BAGX3E,EAAApL,EAAAqL,cAAA,OAAK0E,UAAU,+BAGX3E,EAAApL,EAAAqL,cAAA,OAAK0E,UAAU,iCAGX3E,EAAApL,EAAAqL,cAAA,OAAK0E,UAAU,YACf3E,EAAApL,EAAAqL,cAAA,OAAK0E,UAAU,QACX3E,EAAApL,EAAAqL,cAAA,8BAQRD,EAAApL,EAAAqL,cAAA,OAAK0E,UAAU,8BACX3E,EAAApL,EAAAqL,cAAA,QAAM0E,UAAU,SACZ3E,EAAApL,EAAAqL,cAAA,QAAM0E,UAAU,QAAhB,QACA3E,EAAApL,EAAAqL,cAAA,QAAM0E,UAAU,YAAhB,OACA3E,EAAApL,EAAAqL,cAAA,QAAM0E,UAAU,QAAhB,OACA3E,EAAApL,EAAAqL,cAAA,QAAM0E,UAAU,SAAhB,gBASZ3E,EAAApL,EAAAqL,cAAA,OAAK0E,UAAU,wBACX3E,EAAApL,EAAAqL,cAAA,UACID,EAAApL,EAAAqL,cAAA,UAAID,EAAApL,EAAAqL,cAAA,sBAAJ,oBACAD,EAAApL,EAAAqL,cAAA,UAAID,EAAApL,EAAAqL,cAAA,sBAAJ,kBACAD,EAAApL,EAAAqL,cAAA,UAAID,EAAApL,EAAAqL,cAAA,kBAAJ,YACAD,EAAApL,EAAAqL,cAAA,UAAID,EAAApL,EAAAqL,cAAA,mBAAJ,gBACAD,EAAApL,EAAAqL,cAAA,UAAID,EAAApL,EAAAqL,cAAA,sBAAJ,aACAD,EAAApL,EAAAqL,cAAA,UAAID,EAAApL,EAAAqL,cAAA,qBAAJ,cAMRD,EAAApL,EAAAqL,cAAA,OAAK0E,UAAU,8BACX3E,EAAApL,EAAAqL,cAAA,KAAG0E,UAAU,GAAGwiB,KAAK,mHAArB,cASZnnB,EAAApL,EAAAqL,cAAA,OAAK0E,UAAU,4BAGX3E,EAAApL,EAAAqL,cAAA,OAAK0E,UAAU,4BAGX3E,EAAApL,EAAAqL,cAAA,OAAK0E,UAAU,+BAGX3E,EAAApL,EAAAqL,cAAA,OAAK0E,UAAU,iCAGX3E,EAAApL,EAAAqL,cAAA,OAAK0E,UAAU,YACf3E,EAAApL,EAAAqL,cAAA,OAAK0E,UAAU,QACX3E,EAAApL,EAAAqL,cAAA,4BAQRD,EAAApL,EAAAqL,cAAA,OAAK0E,UAAU,8BACX3E,EAAApL,EAAAqL,cAAA,QAAM0E,UAAU,SACZ3E,EAAApL,EAAAqL,cAAA,QAAM0E,UAAU,SAChB3E,EAAApL,EAAAqL,cAAA,QAAM0E,UAAU,aAChB3E,EAAApL,EAAAqL,cAAA,QAAM0E,UAAU,QAAhB,sBACA3E,EAAApL,EAAAqL,cAAA,QAAM0E,UAAU,aAS5B3E,EAAApL,EAAAqL,cAAA,OAAK0E,UAAU,wBACX3E,EAAApL,EAAAqL,cAAA,UACID,EAAApL,EAAAqL,cAAA,UAAID,EAAApL,EAAAqL,cAAA,sBAAJ,0BACAD,EAAApL,EAAAqL,cAAA,UAAID,EAAApL,EAAAqL,cAAA,sBAAJ,oBACAD,EAAApL,EAAAqL,cAAA,UAAID,EAAApL,EAAAqL,cAAA,sBAAJ,kBACAD,EAAApL,EAAAqL,cAAA,UAAID,EAAApL,EAAAqL,cAAA,kBAAJ,YACAD,EAAApL,EAAAqL,cAAA,UAAID,EAAApL,EAAAqL,cAAA,mBAAJ,gBACAD,EAAApL,EAAAqL,cAAA,UAAID,EAAApL,EAAAqL,cAAA,sBAAJ,aACAD,EAAApL,EAAAqL,cAAA,UAAID,EAAApL,EAAAqL,cAAA,qBAAJ,cAMRD,EAAApL,EAAAqL,cAAA,OAAK0E,UAAU,8BACX3E,EAAApL,EAAAqL,cAAA,KAAG0E,UAAU,GAAGwiB,KAAK,+GAArB,kCAlM9B3U,IAAM5S,YA6Nb6F,mBANf,SAAyBxa,GACrB,MAAO,IAKIwa,CAAyB7E,KAAK/B,QAAL+B,CAAcsmB,0BCpOhDvmB,GAAWC,KAAKC,KAGhB0G,IAFU0X,KAAKD,QACJxX,KAAO4f,SACT5f,KAAOD,QAEhB8f,8MAEFp8B,MAAQ,CACJq8B,MAAO,CAAC,QAAS,WAGrBzlB,WAAa,kBAAMb,EAAKX,MAAMyB,KAAKC,eAAe,SAACC,EAAKC,GACpD,IAAMslB,EAAW,IAAIC,SACrB,IAAK,IAAI55B,KAAOqU,EAEPA,EAAOwlB,eAAe75B,IAE3B25B,EAASG,OAAO95B,EAAKqU,EAAOrU,IAEhCoT,EAAKX,MAAMwB,WAAW0lB,QAG1BlI,WAAa,WACTre,EAAKX,MAAM4C,wFAIX,IAAMb,EAAiB,CACnBC,SAAU,CAACC,KAAM,GACjBC,WAAY,CAACD,KAAM,KAEhBK,EAAqBtN,KAAKgL,MAAMyB,KAAhCa,kBAEP,OACI3C,EAAApL,EAAAqL,cAAC2C,GAAA,EAAD,CACIE,MAAO,IACP3c,MAAM,eACN4c,gBAAgB,EAChBF,QAASxN,KAAKgL,MAAMwC,QACpB0C,KAAMlQ,KAAKgL,MAAMwB,WACjBmB,SAAU3N,KAAKgL,MAAM4C,aACrBC,OAAQ,CACJlD,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQvV,IAAI,SAASwV,QAAS/N,KAAKgqB,YAAnC,UACArf,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQvV,IAAI,SAASzC,KAAK,UAAUiY,QAAS/N,KAAKwM,YAAa,SAEnE7B,EAAApL,EAAAqL,cAACqD,GAAA,EAAD,CAAMC,OAAO,cACTvD,EAAApL,EAAAqL,cAAC0nB,GAAD59B,OAAAoW,OAAA,CACIsD,MAAM,YACNC,MAAM,8BACFtB,GACHO,EAAkB,OAAQ,CACvBkB,MAAO,CAAC,CACJC,UAAU,EACV1d,QAAS,2CAHhBuc,CAMG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOC,YAAY,oCAI3BhE,EAAApL,EAAAqL,cAAC0nB,GAAD59B,OAAAoW,OAAA,CACIsD,MAAM,aACNC,MAAM,+GACFtB,GACHO,EAAkB,QAAS,CACxBkB,MAAO,CAAC,CACJC,UAAU,EACV1d,QAAS,mCAHhBuc,CAMG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOC,YAAY,mCAI3BhE,EAAApL,EAAAqL,cAAC0nB,GAAD59B,OAAAoW,OAAA,CACIsD,MAAM,YACNC,MAAM,wDACFtB,GACHO,EAAkB,OAAQ,CACvBgB,aAAc,OACdE,MAAO,CAAC,CACJC,UAAU,EACV1d,QAAS,4CAJhBuc,CAOG3C,EAAApL,EAAAqL,cAAC8H,GAAA,EAAD,CAAQ1D,SAAUhP,KAAKuyB,mBAEfvyB,KAAKpK,MAAMq8B,MAAMn7B,IAAI,SAAA07B,GAAI,OACjB7nB,EAAApL,EAAAqL,cAAC6nB,GAAD,CAAQl6B,IAAKi6B,EAAM7f,MAAO6f,GAAOA,iBAnFrDrV,IAAM5S,WAgGfgB,QAAK/B,QAAL+B,CAAcymB,yBCjGvB14B,GAAO,GACPgS,GAAWC,KAAKC,KAChBknB,GAAkBvV,IAAMwV,gBAQxBC,GAAkBrnB,KAAK/B,QAAL+B,CANJ,SAAA9Q,GAAA,IAAEgS,EAAFhS,EAAEgS,KAAgBzB,GAAlBvQ,EAAQwY,MAARve,OAAAgW,GAAA,EAAAhW,CAAA+F,EAAA,0BAChBkQ,EAAApL,EAAAqL,cAAC8nB,GAAgBG,SAAjB,CAA0BlgB,MAAOlG,GAC7B9B,EAAApL,EAAAqL,cAAA,KAAQI,MAMV8nB,8MACFC,SAAW,WACP,MAA6B,WAAzBpnB,EAAKX,MAAMgoB,UACJroB,EAAApL,EAAAqL,cAACuE,GAAA,EAAD,MAEJxE,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,+EAGF,IAAAmE,EAAA7S,KAAAiR,EASDjR,KAAKgL,MAPLioB,EAFChiB,EAEDgiB,QACA9X,EAHClK,EAGDkK,UACArqB,EAJCmgB,EAIDngB,MAEAmoB,GANChI,EAKD+hB,UALC/hB,EAMDgI,QAEGia,GARFjiB,EAODgC,MAPCve,OAAAgW,GAAA,EAAAhW,CAAAuc,EAAA,+DAUL,OACItG,EAAApL,EAAAqL,cAAC8nB,GAAgBS,SAAjB,KACK,SAAC1mB,GAAS,IACAa,EAAqBb,EAArBa,kBACP,OACI3C,EAAApL,EAAAqL,cAAA,KAAQsoB,EACHD,EACGtoB,EAAApL,EAAAqL,cAACwoB,GAAD,CAAUnkB,MAAO,CAACmC,OAAQ,IACrB9D,EAAkB6N,EAAW,CAC1B3M,MAAO,CAAC,CACJC,UAAU,EACV1d,QAAO,gBAAA2H,OAAkB5H,EAAlB,OAEXwd,aAAc2K,EAAOkC,IALxB7N,CAMEuF,EAAKkgB,aAEZG,EAAUG,mBAlCflW,IAAM5S,WA0OlB+oB,eA9LX,SAAAA,EAAYtoB,GAAO,IAAAuoB,EAAA,OAAA7+B,OAAAonB,EAAA,EAAApnB,CAAAsL,KAAAszB,IACfC,EAAA7+B,OAAAqnB,EAAA,EAAArnB,CAAAsL,KAAAtL,OAAAsnB,EAAA,EAAAtnB,CAAA4+B,GAAArX,KAAAjc,KAAMgL,KA2FVwoB,UAAY,SAAAva,GAAM,OAAIA,EAAO1gB,MAAQg7B,EAAK39B,MAAM69B,YA5F7BF,EA8FnBG,OAAS,WACLH,EAAKjnB,SAAS,CAACmnB,WAAY,MA/FZF,EAkGnBlhB,UAAY,SAAC5F,GACT8mB,EAAKvoB,MAAMjN,QAAQ0O,GACnB8mB,EAAKjnB,SAAS,CAAC0lB,WAAW,KApGXuB,EAoInBrvB,OAAS,SAAC3L,GACNg7B,EAAKvoB,MAAM1M,WAAWi1B,EAAK39B,MAAM0D,KAAK/C,OAAO,SAAA0iB,GAAM,OAAIA,EAAM,MAAY1gB,IAAK,KArI/Dg7B,EAwInBI,cAAgB,kBAAMJ,EAAKjnB,SAAS,CAAC0lB,WAAW,KAxI7BuB,EA0InBK,iBAAmB,kBAAML,EAAKjnB,SAAS,CAAC0lB,WAAW,KAxI/CuB,EAAK39B,MAAQ,CAAC0D,QAAMm6B,WAAY,GAAIzB,WAAW,GAC/CuB,EAAKpb,QAAU,CACX,CACIrnB,MAAO,OACPqqB,UAAW,WACX1N,MAAO,MACPomB,UAAU,GAEd,CACI/iC,MAAO,QACPqqB,UAAW,QACX1N,MAAO,MACPomB,UAAU,GAEd,CACI/iC,MAAO,OACPqqB,UAAW,WACX1N,MAAO,MACPomB,UAAU,GAEd,CACI/iC,MAAO,SACPqqB,UAAW,YACXpQ,OAAQ,SAACiT,EAAM/E,GACX,IAAM4a,EAAWN,EAAKC,UAAUva,GAChC,OACItO,EAAApL,EAAAqL,cAAA,WACKipB,EACGlpB,EAAApL,EAAAqL,cAAA,YACdD,EAAApL,EAAAqL,cAAC8nB,GAAgBS,SAAjB,KACG,SAAA1mB,GAAI,OACD9B,EAAApL,EAAAqL,cAAA,KACIknB,KAAK,eACL/jB,QAAS,kBAAMwlB,EAAKO,WAAWrnB,EAAMwM,EAAO1gB,MAC5C0W,MAAO,CAACC,YAAa,IAHzB,UASNvE,EAAApL,EAAAqL,cAAC4d,GAAA,EAAD,CACI13B,MAAM,kBACN43B,UAAW,kBAAM6K,EAAKG,OAAOza,EAAO1gB,OAEtCoS,EAAApL,EAAAqL,cAAA,qBAIYD,EAAApL,EAAAqL,cAAAD,EAAApL,EAAA2R,SAAA,KACIvG,EAAApL,EAAAqL,cAAA,KAAGqE,MAAO,CAACC,YAAY,OAAQnB,QAAS,kBAAMwlB,EAAKQ,KAAK9a,EAAO1gB,OAA/D,QACAoS,EAAApL,EAAAqL,cAAA,KAAGmD,QAAS,kBAAMwlB,EAAKrvB,OAAO+U,EAAO1gB,OAArC,eApDbg7B,yFA8DOnS,GACtB,IAAI9nB,EAAO8nB,EAAU4S,MAChB/E,mBAAQ31B,IACLA,IAAS0G,KAAKpK,MAAM0D,OAepBA,GANAA,GANAA,EAAOA,EAAKxC,IAAI,SAACmiB,EAAQhG,GAErB,OADA3Z,EAAK2Z,GAAL,IAAqB3Z,EAAK2Z,GAAL,GACdgG,KAICniB,IAAI,SAACmiB,EAAQhG,GAErB,OADA3Z,EAAK2Z,GAAL,SAA0B3Z,EAAK2Z,GAAL,UAA2B,IAAM3Z,EAAK2Z,GAAL,QACpDgG,KAICniB,IAAI,SAACmiB,EAAQhG,GAErB,OADA3Z,EAAK2Z,GAAL,SAA0B3Z,EAAK2Z,GAAL,UACnBgG,IAGXjZ,KAAKsM,SAAS,CACVhT,KAAMA,wCAiBXmT,EAAMlU,GAAK,IAAA07B,EAAAj0B,KAClByM,EAAKC,eAAe,SAACzb,EAAOijC,GACxB,IAAIjjC,EAAJ,CAGAyF,QAAQC,IAAI,MAAOu9B,GACnB,IAAMC,EAAOz/B,OAAA4B,GAAA,EAAA5B,CAAOu/B,EAAKr+B,MAAM0D,MACzB2Z,EAAQkhB,EAAQr8B,UAAU,SAAAkf,GAAI,OAAIze,IAAQye,EAAKze,MACrD,GAAI0a,GAAS,EAAG,CACZ,IAAM+D,EAAOmd,EAAQlhB,GACfmhB,EAAS1/B,OAAAC,GAAA,EAAAD,CAAA,GAAOsiB,EAASkd,GAE/Bx9B,QAAQC,IAAI,OAAQqgB,GACpBtgB,QAAQC,IAAI,YAAay9B,GACzBH,EAAKjpB,MAAM7M,SAASi2B,GAEpBD,EAAQl8B,OAAOgb,EAAO,EAAGmhB,GACzBH,EAAK3nB,SAAS,CAAChT,KAAM66B,EAASV,WAAY,UAE1CU,EAAQ78B,KAAK48B,GACbD,EAAK3nB,SAAS,CAAChT,KAAM66B,EAASV,WAAY,qCAKjDl7B,GACDyH,KAAKsM,SAAS,CAACmnB,WAAYl7B,qCAWtB,IAAA87B,EAAAr0B,KACCs0B,EAAa,CACfC,KAAM,CACFL,IAAKtB,GACL4B,KAAM1B,KAIR3a,EAAUnY,KAAKmY,QAAQrhB,IAAI,SAAC29B,GAC9B,OAAKA,EAAIZ,SAGFn/B,OAAAC,GAAA,EAAAD,CAAA,GACA+/B,EADP,CAEIC,OAAQ,SAAAzb,GAAM,MAAK,CACfA,SACA+Z,UAA6B,QAAlByB,EAAItZ,UAAsB,SAAW,OAChDA,UAAWsZ,EAAItZ,UACfrqB,MAAO2jC,EAAI3jC,MACXmiC,QAASoB,EAAKb,UAAUva,OATrBwb,IAcf,OACI9pB,EAAApL,EAAAqL,cAAAD,EAAApL,EAAA2R,SAAA,KACIvG,EAAApL,EAAAqL,cAAC+pB,GAAD,CACInnB,QAASxN,KAAKpK,MAAMo8B,UACpBpkB,aAAc5N,KAAK4zB,iBACnBpnB,WAAYxM,KAAKqS,YAErB1H,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACgG,UAAW,UACpBtK,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQwB,UAAWwD,KAAO/kB,oBAAqBkhB,MAAO,CAACuG,aAAc,QAAS1f,KAAK,UAC3E4a,KAAK,OACL3C,QAAS/N,KAAK2zB,eAFtB,aAMJhpB,EAAApL,EAAAqL,cAACyQ,GAAA,EAAD,CACIiZ,WAAYA,EACZtS,UAAQ,EACR1G,WAAYtb,KAAKpK,MAAM0D,KACvB6e,QAASA,EACTyc,aAAa,yBAxLNzX,IAAM5S,WCxD3Bof,GAAUC,KAAKD,QACf/Z,GAAUC,KAAMD,QAGhBilB,8MAMF92B,QAAU,SAAC5N,GACPwb,EAAKX,MAAMhB,SAASrM,GAAuBI,QAAQ,CAAC5N,KAAKA,QAG7DgO,SAAW,SAAChO,GACRwb,EAAKX,MAAMhB,SAASrM,GAAuBQ,SAAS,CAAChO,KAAKA,QAG9DmO,WAAa,SAACnO,GACVyf,GAAQ,CACJ9e,MAAK,2BACLmf,QAAO,gFACPC,KAAM,WACFvE,EAAKX,MAAMhB,SAASrM,GAAuBW,WAAW,CAACnO,KAAKA,4FAhBpE6P,KAAKgL,MAAMhB,SAASrM,GAAuBC,6CAsB3C,OACI+M,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACqC,OAAQ,SACjB3G,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOrlB,OACnBkd,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOnlB,cACnBgd,EAAApL,EAAAqL,cAAA,WACID,EAAApL,EAAAqL,cAAA,8BACAD,EAAApL,EAAAqL,cAAA,+FAIRD,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOjlB,WAAYohB,MAAO,CAACkd,UAAW,SAClDxhB,EAAApL,EAAAqL,cAACuf,GAAA,EAAD,CAAMqH,iBAAkB,KACpB7mB,EAAApL,EAAAqL,cAACkqB,GAAD,CAAS1K,IAAK,QAAS7xB,IAAK,KACxBoS,EAAApL,EAAAqL,cAACmqB,GAAD,CACIf,MAAOh0B,KAAKgL,MAAMtT,UAAUs8B,MAC5Bj2B,QAASiC,KAAKjC,QACdI,SAAU6B,KAAK7B,SACfG,WAAY0B,KAAK1B,cAIzBqM,EAAApL,EAAAqL,cAACkqB,GAAD,CAAS1K,IAAK,cAAe7xB,IAAK,KAAlC,6BA9CE4kB,IAAM5S,WCCpC,ID8De6F,oBANf,SAAyBxa,GACrB,MAAO,CACH8B,UAAW9B,EAAM6B,gBAAgBpC,YAI1B+a,CAAyBykB,yBErElCG,GAAUC,KAAKD,QACfrL,GAAUC,KAAKD,QAgMNuL,8MA5LXt/B,MAAQ,CACJu/B,WAAY,OAGhBC,iBAAmB,SAACpe,GAChBrL,EAAKW,SAAS,CAAC6oB,WAAYne,EAAKze,+EAMhC,OACIoS,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACqC,OAAQ,SACjB3G,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACqC,OAAQ,oBAAqB7D,MAAO,OAAQiQ,QAAS,SAC9D/S,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACmC,OAAQ,EAAG3D,MAAO,QAC3B9C,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOrlB,OACnBkd,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOnlB,cACnBgd,EAAApL,EAAAqL,cAAA,WACID,EAAApL,EAAAqL,cAAA,0BAGRD,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOjlB,YACnB8c,EAAApL,EAAAqL,cAAC4F,GAAA,EAAD,CACI0J,KAAK,SACLjL,MAAO,CAAExB,MAAO,QAChBM,QAAS/N,KAAKo1B,iBACdC,oBAAqB,CAAC,KACtBC,gBAAiB,CAAC,SAElB3qB,EAAApL,EAAAqL,cAACoqB,GAAD,CAASz8B,IAAI,OAAOzH,MAAO6Z,EAAApL,EAAAqL,cAAA,YAAMD,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,SAAS6U,EAAApL,EAAAqL,cAAA,qCACnDD,EAAApL,EAAAqL,cAAC4F,GAAA,EAAKhF,KAAN,CAAWjT,IAAI,KAAf,qBACAoS,EAAApL,EAAAqL,cAAC4F,GAAA,EAAKhF,KAAN,CAAWjT,IAAI,KAAf,eACAoS,EAAApL,EAAAqL,cAAC4F,GAAA,EAAKhF,KAAN,CAAWjT,IAAI,KAAf,aACAoS,EAAApL,EAAAqL,cAAC4F,GAAA,EAAKhF,KAAN,CAAWjT,IAAI,KAAf,UACAoS,EAAApL,EAAAqL,cAAC4F,GAAA,EAAKhF,KAAN,CAAWjT,IAAI,KAAf,SAGFoS,EAAApL,EAAAqL,cAACoqB,GAAD,CAASz8B,IAAI,OAAOzH,MAAO6Z,EAAApL,EAAAqL,cAAA,YAAMD,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,SAAS6U,EAAApL,EAAAqL,cAAA,0BACnDD,EAAApL,EAAAqL,cAAC4F,GAAA,EAAKhF,KAAN,CAAWjT,IAAI,KAAf,yBACAoS,EAAApL,EAAAqL,cAAC4F,GAAA,EAAKhF,KAAN,CAAWjT,IAAI,KAAf,QACAoS,EAAApL,EAAAqL,cAAC4F,GAAA,EAAKhF,KAAN,CAAWjT,IAAI,KAAf,2BACAoS,EAAApL,EAAAqL,cAAC4F,GAAA,EAAKhF,KAAN,CAAWjT,IAAI,KAAf,wBACAoS,EAAApL,EAAAqL,cAAC4F,GAAA,EAAKhF,KAAN,CAAWjT,IAAI,MAAf,kBAQlBoS,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACmC,OAAQ,EAAG3D,MAAO,QAC3B9C,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOrlB,OACnBkd,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOnlB,cACnBgd,EAAApL,EAAAqL,cAAA,WACID,EAAApL,EAAAqL,cAAA,2BAGRD,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOjlB,YAEnB8c,EAAApL,EAAAqL,cAACuf,GAAA,EAAD,CAAMqH,iBAAiB,IAAI+D,UAAWv1B,KAAKpK,MAAMu/B,WAAYK,YAAa,CAAC9X,QAAQ,SAC/E/S,EAAApL,EAAAqL,cAAC6qB,GAAD,CAASl9B,IAAI,KACToS,EAAApL,EAAAqL,cAAA,8HAEID,EAAApL,EAAAqL,cAAA,UACID,EAAApL,EAAAqL,cAAA,uBACAD,EAAApL,EAAAqL,cAAA,wBACAD,EAAApL,EAAAqL,cAAA,sBALR,8IAO+ID,EAAApL,EAAAqL,cAAA,WAAMD,EAAApL,EAAAqL,cAAA,WAPrJ,yHAQ0HD,EAAApL,EAAAqL,cAAA,WAAMD,EAAApL,EAAAqL,cAAA,WARhI,sGAaJD,EAAApL,EAAAqL,cAAC6qB,GAAD,CAASl9B,IAAI,KACToS,EAAApL,EAAAqL,cAAA,gOAKJD,EAAApL,EAAAqL,cAAC6qB,GAAD,CAASl9B,IAAI,KACToS,EAAApL,EAAAqL,cAAA,yXAKJD,EAAApL,EAAAqL,cAAC6qB,GAAD,CAASl9B,IAAI,KACToS,EAAApL,EAAAqL,cAAA,2MAKJD,EAAApL,EAAAqL,cAAC6qB,GAAD,CAASl9B,IAAI,KACToS,EAAApL,EAAAqL,cAAA,6KAKJD,EAAApL,EAAAqL,cAAC6qB,GAAD,CAASl9B,IAAI,KACToS,EAAApL,EAAAqL,cAAA,+PACuPD,EAAApL,EAAAqL,cAAA,WACnPD,EAAApL,EAAAqL,cAAA,WAFJ,mBAGoBD,EAAApL,EAAAqL,cAAA,WAChBD,EAAApL,EAAAqL,cAAA,UACID,EAAApL,EAAAqL,cAAA,wCACAD,EAAApL,EAAAqL,cAAA,+BACAD,EAAApL,EAAAqL,cAAA,kEACAD,EAAApL,EAAAqL,cAAA,8GACAD,EAAApL,EAAAqL,cAAA,oEATR,uHAWwHD,EAAApL,EAAAqL,cAAA,WAXxH,4UAY6UD,EAAApL,EAAAqL,cAAA,aAIjVD,EAAApL,EAAAqL,cAAC6qB,GAAD,CAASl9B,IAAI,KAAb,2MAC4MoS,EAAApL,EAAAqL,cAAA,WAAMD,EAAApL,EAAAqL,cAAA,WADlN,kSAEmSD,EAAApL,EAAAqL,cAAA,WAFnS,yFAG0FD,EAAApL,EAAAqL,cAAA,WACtFD,EAAApL,EAAAqL,cAAA,UACID,EAAApL,EAAAqL,cAAA,sBACAD,EAAApL,EAAAqL,cAAA,sBANR,uDAQwDD,EAAApL,EAAAqL,cAAA,WACpDD,EAAApL,EAAAqL,cAAA,UACID,EAAApL,EAAAqL,cAAA,wCACAD,EAAApL,EAAAqL,cAAA,yBACAD,EAAApL,EAAAqL,cAAA,sBACAD,EAAApL,EAAAqL,cAAA,sBAbR,uKAewKD,EAAApL,EAAAqL,cAAA,YAGxKD,EAAApL,EAAAqL,cAAC6qB,GAAD,CAASl9B,IAAI,KACToS,EAAApL,EAAAqL,cAAA,yNACiND,EAAApL,EAAAqL,cAAA,WAC7MD,EAAApL,EAAAqL,cAAA,WACAD,EAAApL,EAAAqL,cAAA,qCAHJ,4RAI6RD,EAAApL,EAAAqL,cAAA,WACzRD,EAAApL,EAAAqL,cAAA,kBALJ,iNAMkND,EAAApL,EAAAqL,cAAA,aAItND,EAAApL,EAAAqL,cAAC6qB,GAAD,CAASl9B,IAAI,KACToS,EAAApL,EAAAqL,cAAA,+JACuJD,EAAApL,EAAAqL,cAAA,WACnJD,EAAApL,EAAAqL,cAAA,WACAD,EAAApL,EAAAqL,cAAA,kCAHJ,iRAIkRD,EAAApL,EAAAqL,cAAA,aAItRD,EAAApL,EAAAqL,cAAC6qB,GAAD,CAASl9B,IAAI,MACToS,EAAApL,EAAAqL,cAAA,mLAC2KD,EAAApL,EAAAqL,cAAA,WACvKD,EAAApL,EAAAqL,cAAA,WACAD,EAAApL,EAAAqL,cAAA,8BAHJ,kFAKID,EAAApL,EAAAqL,cAAA,UACID,EAAApL,EAAAqL,cAAA,mCACAD,EAAApL,EAAAqL,cAAA,oCACAD,EAAApL,EAAAqL,cAAA,wBACAD,EAAApL,EAAAqL,cAAA,uCACAD,EAAApL,EAAAqL,cAAA,kCACAD,EAAApL,EAAAqL,cAAA,wCACAD,EAAApL,EAAAqL,cAAA,sCAEJD,EAAApL,EAAAqL,cAAA,WACAD,EAAApL,EAAAqL,cAAA,oCAfJ,mMAgBoMD,EAAApL,EAAAqL,cAAA,WAChMD,EAAApL,EAAAqL,cAAA,WACAD,EAAApL,EAAAqL,cAAA,iCAlBJ,sKAmBuKD,EAAApL,EAAAqL,cAAA,WAnBvK,0PAoB2PD,EAAApL,EAAAqL,cAAA,0BAhLvQuS,IAAM5S,+DCG3BmrB,GAAYC,KAAZD,SAgKSE,8MA3JZhgC,MAAQ,CACJq2B,OAAQ,GACR4J,SAAU,aACVp/B,YAAa,cAEbq/B,WAAY,UACZC,OAAO,EACPC,OAAO,KAcX/f,aAAe,SAACmb,GAAD,OAAWzlB,EAAKW,SAAS,CAACwpB,WAAY1E,EAAM6E,KAAO7E,EAAMhJ,OAAOzV,WAE/EujB,cAAgB,WACZ,IAAIC,EAASC,SAASC,eAAe,yBACjCF,GAAQA,EAAOG,SACnB,IAAIC,EAAeH,SAASC,eAAe,gBACvCE,GAAcA,EAAaD,YAGnCE,gBAAkB,WACIJ,SAASC,eAAe,aAChCI,SACVL,SAASM,YAAY,WAGzBC,gBAAkB,WACdhrB,EAAKuqB,gBACL,IAAMU,EAASR,SAASxrB,cAAc,UAEtCgsB,EAAOnlB,IAAM9F,EAAK/V,MAAMq2B,OACxB2K,EAAOb,MAAQpqB,EAAK/V,MAAMmgC,MAC1Ba,EAAOZ,MAAQrqB,EAAK/V,MAAMogC,MAC1BY,EAAOC,aAAa,YAAalrB,EAAK/V,MAAMigC,UAC5Ce,EAAOC,aAAa,UAAWlrB,EAAK/V,MAAMa,aAE1CmgC,EAAOC,aAAa,cAAelrB,EAAK/V,MAAMkgC,YAC9Cc,EAAOC,aAAa,KAAM,gBAE1BT,SAAS7B,KAAKuC,YAAYF,MAI9BG,aAAe,WAEX,IAAIC,EAAQ,GACiB,KAAzBvuB,OAAO4C,SAAS+J,OAAc4hB,EAAQ,KAHzB,IAAAC,EAIkBxuB,OAAO4C,SAAnC6J,EAJU+hB,EAIV/hB,SAAUE,EAJA6hB,EAIA7hB,KACjB,OAAOF,EAAW,KALD+hB,EAIM9hB,SACa6hB,EAAQ5hB,EAAO,6BAGvD8hB,mBAAqB,WAAM,IAAAC,EACY1uB,OAAO4C,SAAnC6J,EADgBiiB,EAChBjiB,SAAUE,EADM+hB,EACN/hB,KAAMD,EADAgiB,EACAhiB,SACnB6hB,EAAQ,GACiB,KAAzBvuB,OAAO4C,SAAS+J,OAAa4hB,EAAQ,KAC5B,SAAT5hB,EACA3M,OAAO2uB,KAAP,GAAA1+B,OAAewc,EAAf,MAAAxc,OAA4Byc,GAA5Bzc,OAAuCs+B,EAAvC,uBAAAt+B,OAAkEiT,EAAK/V,MAAMa,YAA7E,yBAEAgS,OAAO2uB,KAAP,GAAA1+B,OAAewc,EAAf,MAAAxc,OAA4Byc,GAA5Bzc,OAAuCs+B,GAAvCt+B,OAA+C0c,EAA/C,mBAAA1c,OAAqEiT,EAAK/V,MAAMa,YAAhF,4BAIR4gC,iBAAmB,WACf,OAAO1sB,EAAApL,EAAAqL,cAAA,UAAQ6G,IAAK9F,EAAKorB,eACVO,YAAW3rB,EAAK/V,MAAMigC,SACtB0B,UAAS5rB,EAAK/V,MAAMa,YAEpB+gC,cAAa7rB,EAAK/V,MAAMkgC,WACxBC,MAAOpqB,EAAK/V,MAAMmgC,MAClBC,MAAOrqB,EAAK/V,MAAMogC,4FApEjCh2B,KAAKsM,SAAS,CACV7V,YAAa0T,GAAcnK,KAAKgL,MAAMwjB,MAAMxwB,OAAO3G,IACnD40B,OAAQjsB,KAAK+2B,gEAKjB/2B,KAAKk2B,iDAiEL,OACIvrB,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACqC,OAAQ,SACjB3G,EAAApL,EAAAqL,cAACsU,GAAD,CAAQxB,QAAO,gBAEf/S,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOhlB,iBACnB6c,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACC,YAAa,EAAGzB,MAAO,OAAQ6B,UAAWwD,KAAOrlB,OAE1Dkd,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOnlB,aAAcshB,MAAO,CAACkQ,SAAU,YACnDxU,EAAApL,EAAAqL,cAAA,8CAGJD,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOjlB,YACnB8c,EAAApL,EAAAqL,cAACsX,GAAA,EAAD,CAAKpsB,KAAK,OAAO2hC,QAAQ,UACrB9sB,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,KACIxX,EAAApL,EAAAqL,cAAA,4HAKRD,EAAApL,EAAAqL,cAAA,WAEAD,EAAApL,EAAAqL,cAACsX,GAAA,EAAD,CAAKpsB,KAAK,OAAO2hC,QAAQ,SAASxoB,MAAO,CAACuG,aAAc,KACpD7K,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,KACIxX,EAAApL,EAAAqL,cAAC8sB,GAAA,eAAD,CAAgBtG,MAAOpxB,KAAKpK,MAAMkgC,WAAY9mB,SAAUhP,KAAKiW,iBAIrEtL,EAAApL,EAAAqL,cAACsX,GAAA,EAAD,CAAKpsB,KAAK,OAAO2hC,QAAQ,UACrB9sB,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,KACIxX,EAAApL,EAAAqL,cAAA,KAAGqE,MAAO,CAAC0oB,WAAY,OAAQzoB,YAAa,IAA5C,oBAEJvE,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,KACIxX,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOO,MAAO,CAACsQ,QAAS,MAAO9R,MAAO,QAAS3X,KAAK,QAAQyoB,KAAK,aAC1D5L,MAAO3S,KAAKpK,MAAMkgC,WAAY9mB,SAAUhP,KAAKiW,mBAQpEtL,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACsO,WAAY,EAAG9P,MAAO,OAAQ6B,UAAWwD,KAAOrlB,OAEzDkd,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOnlB,aAAcshB,MAAO,CAACkQ,SAAU,YACnDxU,EAAApL,EAAAqL,cAAA,wCAGJD,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOjlB,WAAYohB,MAAO,CAACgG,UAAW,WAClDtK,EAAApL,EAAAqL,cAAA,KAAGqE,MAAO,CAACgG,UAAW,SAAtB,yGAMAtK,EAAApL,EAAAqL,cAAC8qB,GAAD,CAAU/iB,MAAOilB,KAAeC,eAAe73B,KAAKq3B,oBAC1ChgC,GAAI,YACJ4X,MAAO,CAACxB,MAAO,OAAQ6D,OAAQ,QAASwmB,WAAY,MAAO1mB,OAAQ,UACnEie,UAAQ,IAClB1kB,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQC,QAAS/N,KAAKw2B,gBAAiBlnB,UAAW,mBAAlD,QACA3E,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQmB,MAAO,CAACsO,WAAY,OAAQxP,QAAS/N,KAAK22B,gBAC1CrnB,UAAW,mBADnB,QAEA3E,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQmB,MAAO,CAACsO,WAAY,OAAQxP,QAAS/N,KAAKk3B,mBAC1C5nB,UAAW,mBADnB,mCAlJF6N,IAAM5S,qDCiFjBgnB,8MAxFX3W,SAAW,IACXhlB,MAAQ,CACJmiC,UAAW,MAGf5f,QAAU,CAAC,CACPrnB,MAAO,YACPyH,IAAK,WACLwS,OAAQ,SAACiT,EAAMqI,EAAUpT,GACrB,OAAOtI,EAAApL,EAAAqL,cAAA,SAAIyb,EAAS9H,QAEzB,CACCztB,MAAO,QACPyH,IAAK,QACLwS,OAAQ,SAACiT,EAAMqI,EAAUpT,GAGrB,IAAI+kB,EAAWrsB,EAAKX,MAAMitB,QAAQC,KAAKC,cAClC5hC,OAAO,SAAC+C,GAAD,OAASA,EAAK+sB,WAAaA,EAAS9H,OAChD,GAAIyZ,EAASxmC,OAAS,EAAG,OAAO,KAGhC,IAAIw2B,EAAQ,GACRoQ,EAAoB,GACpBC,GAAU,EA4Bd,OAzBIL,EAASxmC,OAAS,EAClBwmC,EAAS1/B,QAAQ,SAAA2/B,GACbvhC,QAAQC,IAAIshC,GAES,kBAAlBA,EAAQjQ,OACPrc,EAAKiP,SAAW,EAChBwd,EAAkB9gC,KAAKqU,EAAK2sB,sBAAsB3sB,EAAKiP,UACvDlkB,QAAQC,IAAIyhC,GACZC,GAAU,GAEVrQ,GAASiQ,EAAQjQ,MAAQ,QAMR,kBAAtBgQ,EAAS,GAAGhQ,OACXrc,EAAKiP,SAAW,EAChBoN,EAAQrc,EAAK2sB,sBAAsB3sB,EAAKiP,UAExCoN,EAAQgQ,EAAS,GAAGhQ,MAKxBqQ,EAEI1tB,EAAApL,EAAAqL,cAACD,EAAApL,EAAM2R,SAAP,KACKknB,EAAkBthC,IAAI,SAACyhC,GAAD,OAAaA,IADxC,KAEOvQ,GAMPrd,EAAApL,EAAAqL,cAAA,SAAIod,QAKpBsQ,sBAAwB,SAACrlB,GACrB,OAAQtI,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQvV,IAAK0a,EAAOulB,SAAS,UAAUC,kBAAiBxlB,EAAOvC,KAAK,WAC5D6K,KAAK,QAAQtM,MAAO,CAACmC,OAAQ,eAC7BrD,QAAS,SAACoa,GAAOxc,EAAKX,MAAM0tB,aAAavQ,EAAEC,OAAOuQ,aAAa,sBAFvE,0FAOH,IAAA1nB,EACwBjR,KAAKgL,MAA3BitB,EADFhnB,EACEgnB,QAAS5T,EADXpT,EACWoT,UAEhB,OADA3tB,QAAQC,IAAIqJ,KAAKpK,OAEb+U,EAAApL,EAAAqL,cAACyQ,GAAA,EAAD,CAAOlD,QAASnY,KAAKmY,QACdmD,WAAY+I,EAAU9tB,OAAO,SAACT,GAAD,OAAUA,EAAK8iC,UAAU1hB,SAAS+gB,EAAQY,YACvEtd,KAAK,SACLC,YAAY,WApFTjR,aCgDPuuB,8MA/CXle,SAAW,IACXhlB,MAAQ,CACJmiC,UAAW,MAGf5f,QAAU,CAAC,CACPrnB,MAAO,WACPyH,IAAK,eACLwS,OAAQ,SAACiT,EAAM/E,EAAQhG,GAAf,OAA0BtI,EAAApL,EAAAqL,cAAA,SAAIqO,EAAO8f,gBAC9C,CACCjoC,MAAO,QACPyH,IAAK,QACLwS,OAAQ,SAACiT,EAAM/E,EAAQhG,GAEnB,MAAqB,kBAAjBgG,EAAO+O,OACPrc,EAAKiP,SAAS,EACNjQ,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQ0qB,SAAS,UAAUC,kBAAiB9sB,EAAKiP,QAASlK,KAAK,WAAW6K,KAAK,QACvExN,QAAS,SAACoa,GAAOxc,EAAKX,MAAM0tB,aAAavQ,EAAEC,OAAOuQ,aAAa,sBADvE,kBAODhuB,EAAApL,EAAAqL,cAAA,SACHqO,EAAO+O,SAIrB,CACEl3B,MAAO,YACPyH,IAAK,WACLwS,OAAQ,SAACiT,EAAM/E,EAAQhG,GAAf,OAA0BtI,EAAApL,EAAAqL,cAACoY,GAAA,EAAD,CAAKzqB,IAAK0gB,EAAO4f,UAAW5f,EAAOoN,qFAIhE,IACE4R,EAAWj4B,KAAKgL,MAAhBitB,QACP,OACIttB,EAAApL,EAAAqL,cAACyQ,GAAA,EAAD,CAAOlD,QAASnY,KAAKmY,QACdmD,WAAY2c,EAAQC,KAAKC,cACzB5c,KAAK,SACLC,YAAY,WA3CJjR,aCGrBof,GAAUC,KAAKD,QA+FNqP,8MA1FXpe,SAAW,IACXhlB,MAAQ,CACJmiC,UAAW,MAGf5f,QAAU,CAAC,CACPrnB,MAAO,WACPyH,IAAK,eACLwS,OAAQ,SAACiT,EAAM/E,EAAQhG,GAAf,OAA0BtI,EAAApL,EAAAqL,cAAA,SAAIqO,EAAO8f,gBAC9C,CACCjoC,MAAO,QACPyH,IAAK,QACLwS,OAAQ,SAACiT,EAAM/E,EAAQhG,GAEnB,MAAqB,kBAAjBgG,EAAO+O,OACPrc,EAAKiP,SAAS,EACNjQ,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQ0qB,SAAS,UAAUS,aAAYttB,EAAKiP,QAASlK,KAAK,WAAW6K,KAAK,QAClExN,QAAS,SAACoa,GAAOxc,EAAK+sB,aAAavQ,KAD3C,kBAODxd,EAAApL,EAAAqL,cAAA,SACHqO,EAAO+O,YAYvBkR,oBAAsB,SAACC,GACnBziC,QAAQC,IAAIwiC,GAEZ,IAAMC,EAAWztB,EAAK/V,MAAMmiC,UAAUoB,GACjCC,EAKLv1B,GAAK,CACDw1B,IAAG,cAAA3gC,OAAgBiT,EAAKX,MAAM/U,UAAUO,GAArC,qBAAAkC,OAA2D0gC,GAC9DE,OAAQ,MACRC,aAAc,SACfxc,KAAK,SAAC7b,GACLs4B,KAAO,IAAIC,KAAK,CAACv4B,EAAS5H,OAAQ8/B,KACnCM,MAAM,SAAAzoC,GACLJ,EAAW,aAAc,uCAXzBA,EAAW,aAAc,4HAXPuwB,EAAWmN,GAC9BnN,EAAU6W,SAAW7W,EAAU6W,QAAQ0B,UACtC35B,KAAKsM,SAAS,CAACyrB,UAAW3W,EAAU6W,QAAQ0B,SAASC,MAAM,wCAyB1D,IAAA3oB,EACwBjR,KAAKgL,MAA3BitB,EADFhnB,EACEgnB,QAAS5T,EADXpT,EACWoT,UACVwV,EAAW5B,EAAUA,EAAQY,SAAW,UAE9C,OACIluB,EAAApL,EAAAqL,cAAC2C,GAAA,EAAD,CACIE,MAAO,IACP3c,MAAM,kBACN4c,gBAAgB,EAChBF,QAASxN,KAAKgL,MAAMwC,QACpBG,SAAU3N,KAAKgL,MAAM8uB,eACrB5pB,KAAMlQ,KAAKgL,MAAM8uB,eACjBjsB,OAAQ,CACJlD,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQvV,IAAI,SAASwV,QAAS/N,KAAKgL,MAAM8uB,gBAAzC,QAEJnvB,EAAApL,EAAAqL,cAACuf,GAAA,EAAD,CAAMqH,iBAAkB,KAEpB7mB,EAAApL,EAAAqL,cAACmvB,GAAD,CAAS3P,IAAK,eAAgB7xB,IAAK,KAC/BoS,EAAApL,EAAAqL,cAACovB,GAAD,CAAc/B,QAASA,EACTS,aAAc14B,KAAKk5B,uBAGrCvuB,EAAApL,EAAAqL,cAACmvB,GAAD,CAAS3P,IAAG,YAAA1xB,OAAcmhC,EAAd,KAA2BthC,IAAK,KACxCoS,EAAApL,EAAAqL,cAACqvB,GAAD,CAAShC,QAASA,EAASS,aAAc14B,KAAKk5B,oBACrC7U,UAAWA,cAnFnB9Z,kCCDnBqF,GAAUC,KAAMD,QAGhBsqB,8MAEFC,cAAc,IACdvkC,MAAQ,CACJwkC,aAAc,KACdC,WAAY,KACZC,gBAAiB,KACjBC,WAAW,KASfC,gBAAkB,WAAM,IACbvkC,EAAa0V,EAAKX,MAAMK,SAASzV,MAAjCK,UACP0V,EAAKX,MAAMhB,SAAS5M,GAAuBC,qBAAqBpH,EAAUO,QAG9EgH,wBAA0B,WAAM,IACrBvH,EAAa0V,EAAKX,MAAMK,SAASzV,MAAjCK,UACP0V,EAAKX,MAAMhB,SAAS5M,GAAuBI,wBAAwBvH,EAAUO,QAIjFikC,aAAe,SAACjf,EAAYkf,EAASC,GACjCjkC,QAAQC,IAAI,qBAAsB6kB,EAAYkf,EAASC,GACvDhvB,EAAKW,SAAS,CACV8tB,aAAcM,EACdL,WAAYM,OAKpBb,eAAiB,WACbnuB,EAAKW,SAAS,CAACiuB,WAAW,EAAOD,gBAAiB,UAItDM,uBAAyB,WACrB,IAAMr4B,EAAQoJ,EAAKnO,wBACnBoS,GAAQ,CACJ9e,MAAO,qCACPmf,QAAS,kEACT4qB,OAAQ,SACR3qB,KAJI,WAII3N,KACRoL,SALI,kBAYZmtB,kBAAoB,SAAC7hB,EAAQhG,EAAO8nB,EAAQC,GACxC,IAAM7iB,EAAU,CACZ,CACIrnB,MAAO,WACPyH,IAAK,eACLwS,OAAQ,SAACiT,EAAM/E,EAAQhG,GAAf,OAA0BtI,EAAApL,EAAAqL,cAAA,SAAIqO,EAAO8f,gBAEjD,CACIjoC,MAAO,QACPyH,IAAK,QACLwS,OAAQ,SAACiT,EAAM/E,EAAQhG,GAEnB,MAAqB,kBAAjBgG,EAAO+O,OACPrc,EAAKwuB,cAAc,EACXxvB,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQ0qB,SAAS,UAAUS,aAAYttB,EAAKwuB,aAAczpB,KAAK,WAAW6K,KAAK,QACvExN,QAAS,SAACoa,GAAOxc,EAAK+sB,aAAavQ,KAD3C,kBAOAxd,EAAApL,EAAAqL,cAAA,SACHqO,EAAO+O,UAQ5B,OACIrd,EAAApL,EAAAqL,cAACyQ,GAAA,EAAD,CACIlD,QAASA,EACTmD,WAAYrC,EAAOif,KAAKC,cACxB3c,YAAY,EACZyf,OAAQ,CAAEC,EAAG,2FA/EL,IACTjlC,EAAa+J,KAAKgL,MAAMK,SAASzV,MAAjCK,UACP+J,KAAKgL,MAAMhB,SAAS5M,GAAuBC,qBAAqBpH,EAAUO,sCAmFrE,IAAAqc,EAAA7S,KACE/J,EAAa+J,KAAKgL,MAAMK,SAASzV,MAAjCK,UACA+hC,EAAYh4B,KAAKgL,MAAjBgtB,SAFF9a,EAG8Bld,KAAKpK,MAAlCykC,EAHDnd,EAGCmd,WAAYD,EAHbld,EAGakd,aAClBC,EAAaA,GAAc,GAC3BD,EAAeA,GAAgB,GAE/B,IAAMjiB,EAAU,CAAC,CACbrnB,MAAO,IACPqqB,UAAW,IACX5iB,IAAK,IACLwS,OAAQ,SAACiT,EAAM/E,EAAQhG,GAAf,OAA0BtI,EAAApL,EAAAqL,cAAA,SAAIqI,EAAM,KAE9C,CACEniB,MAAO,KACPqqB,UAAW,KACX5iB,IAAK,KACLoiC,OAAQ,SAACp7B,EAAGwuB,GAAJ,OAAUxuB,EAAE/I,GAAKu3B,EAAEv3B,IAC3BuU,OAAQ,SAACiT,EAAM/E,GAAP,OAAmBtO,EAAApL,EAAAqL,cAAA,SAAIqO,EAAOziB,MAExC,CACE1F,MAAO,YACPqqB,UAAW,WACX5iB,IAAK,WACLmiC,QAAS,CACL,CAAE1c,KAAM,YAAarL,MAAO,aAC5B,CAAEqL,KAAM,SAAUrL,MAAO,WAE7BwoB,SAAU,SAACxoB,EAAOsG,GACdviB,QAAQC,IAAIgc,GACZsG,EAAO4f,SAAS3hB,SAASvE,IAC7B5H,OAAQ,SAACiT,EAAM/E,GAAP,OAAmBtO,EAAApL,EAAAqL,cAACoY,GAAA,EAAD,CAAKzqB,IAAK0gB,EAAO4f,UAAW5f,EAAO4f,YAEhE,CACE/nC,MAAO,qBACPqqB,UAAW,oBACX5iB,IAAK,oBACLoiC,OAAQ,SAACp7B,EAAGwuB,GAAJ,OAAUxuB,EAAE67B,kBAAoBrN,EAAEqN,mBAC1CrwB,OAAQ,SAACiT,EAAM/E,GAAP,OACJtO,EAAApL,EAAAqL,cAAA,KAAGqE,MAAO,CAACgG,UAAU,KAAM+I,KAEhC,CACCltB,MAAO,qBACPqqB,UAAW,oBACXwf,OAAQ,SAACp7B,EAAGwuB,GAAJ,OAAUxuB,EAAE87B,kBAAoBtN,EAAEsN,mBAC1CtwB,OAAQ,SAACiT,EAAM/E,GAAP,OACJtO,EAAApL,EAAAqL,cAAA,KAAGqE,MAAO,CAACgG,UAAU,KAAM+I,KAEhC,CACCltB,MAAO,aACPqqB,UAAW,YACX5iB,IAAK,YACLoiC,OAAQ,SAACp7B,EAAGwuB,GAAJ,OAAUxuB,EAAE+7B,UAAYvN,EAAEuN,WAClCvwB,OAAQ,SAACiT,EAAM/E,GAAP,OAAmBtO,EAAApL,EAAAqL,cAAA,KAAGqE,MAAO,CAACgG,UAAU,WAC5CsmB,KAAOC,SAASnuB,SAAS4L,EAAOqiB,WAAY,WAAWG,YAAYC,QAAQ,GAAK,gBAItF,CACE5qC,MAAO,cACPqqB,UAAW,WACX5iB,IAAK,WACLoiC,OAAQ,SAACp7B,EAAGwuB,GAAJ,OAAU,IAAIhtB,KAAKxB,EAAEo8B,UAAUC,UAAY,IAAI76B,KAAKgtB,EAAE4N,UAAUC,WACxE7wB,OAAQ,SAACiT,EAAM/E,GAAP,OAAmBtO,EAAApL,EAAAqL,cAAA,SAAIqO,EAAO0iB,YAEvC,CACC7qC,MAAO,SACPyH,IAAK,SACLwS,OAAQ,SAACiT,EAAM/E,EAAQhG,GAAf,OACJtI,EAAApL,EAAAqL,cAAA,YACFD,EAAApL,EAAAqL,cAAA,KAAGmD,QAAS,WACR8E,EAAKvG,SAAS,CAACiuB,WAAW,EAAMD,gBAAiBrhB,MADrD,aAYN,OACItO,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACqC,OAAQ,SACjB3G,EAAApL,EAAAqL,cAACsU,GAAD,CAAQxB,QAASznB,EAAUsY,OAC3B5D,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOrlB,OACnBkd,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOnlB,cACnBgd,EAAApL,EAAAqL,cAAA,WACID,EAAApL,EAAAqL,cAAA,UAAK3U,EAAUsY,KAAf,mBACA5D,EAAApL,EAAAqL,cAAA,iEAGJD,EAAApL,EAAAqL,cAAA,WACID,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQwB,UAAWwD,KAAO/kB,oBAAqB+H,KAAK,UAAU4a,KAAK,OAC3D3C,QAAS/N,KAAKw6B,gBAAiB9oC,QAASsO,KAAKgL,MAAM9V,WAD3D,WAMAyV,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQwB,UAAWwD,KAAO/kB,oBAAqB+H,KAAK,UAAU4a,KAAK,SAC3D3C,QAAS/N,KAAK46B,uBAAwBlpC,QAASsO,KAAKgL,MAAMxT,eADlE,eAORmT,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOjlB,YAEnB8c,EAAApL,EAAAqL,cAACyQ,GAAA,EAAD,CAAOlD,QAASA,EACTmD,WAAY0c,EAAS6D,aAAe7D,EAAS6D,aAAe,KAC5D7sB,SAAUhP,KAAKy6B,aACf/oC,QAASsO,KAAKgL,MAAM9V,UAEpBqmB,KAAK,WAGZ5Q,EAAApL,EAAAqL,cAACkxB,GAAD,CAAYtuB,QAASxN,KAAKpK,MAAM2kC,UACpBT,eAAgB95B,KAAK85B,eACrBiC,UAAW/D,EAAS+D,UACpB1X,UAAW2T,EAAS3T,UACpB4T,QAASj4B,KAAKpK,MAAM0kC,gBACpBrkC,UAAWA,cAzNxBknB,IAAM5S,WA4Od6F,gBAVS,SAAAxa,GAAU,IACvBR,EAAmBQ,EAAnBR,gBACP,MAAO,CACH4iC,SAAU5iC,EAAgBA,gBAC1BF,UAAWE,EAAgBF,UAC3BF,SAAUI,EAAgBJ,SAE1BwC,cAAepC,EAAgBoC,gBAGxB4Y,CAAyB8pB,yBCtNzB8B,8MA7BXpmC,MAAQ,2EAKJ,OAEI+U,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACqC,OAAQ,SACjB3G,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOrlB,OACnBkd,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOnlB,cACnBgd,EAAApL,EAAAqL,cAAA,uCAGJD,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOjlB,YACnB8c,EAAApL,EAAAqL,cAAA,sBACAD,EAAApL,EAAAqL,cAAA,OACI6G,IAAI,iHACJD,IAAI,gBACJ/D,MAAO,MACX9C,EAAApL,EAAAqL,cAAA,2EACAD,EAAApL,EAAAqL,cAAA,6EAtBLuS,IAAM5S,8DPOnB0xB,GAAY,GACZC,IAAW,IAAIn7B,MAAOC,UACnB+R,GAAI,EAAGA,GAAI,GAAIA,IAAK,EACzBkpB,GAAU3kC,KAAK,CACXqjB,EAAG4gB,KAAO,IAAIx6B,KAAKm7B,GAAY,MAAsBnpB,KAAKopB,OAAO,UACjEjB,EAAGxpB,KAAKC,MAAsB,IAAhBD,KAAKE,UAAkB,GACrCwqB,EAAG,YA0FIC,8MArFXzmC,MAAQ,CACJ0b,OAAQ,wFAKR,IAAMA,EAAStR,KAAKs8B,SAASC,aAC7Bv8B,KAAKsM,SAAS,CAACgF,4CAGV,IAAAuB,EAAA7S,KACL,OACI2K,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACqC,OAAQ,SACjB3G,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACsQ,QAAS,UAClB5U,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACxB,MAAO,OAAQ6D,OAAQ,GAAIkE,aAAc,KAClD7K,EAAApL,EAAAqL,cAACsU,GAAD,CAAQxB,QAAS,qBAIzB/S,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACqC,OAAQ,oBAAqB7D,MAAO,OAAQiQ,QAAS,SAC9D/S,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACmC,OAAQ,EAAG3D,MAAO,QAC3B9C,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOrlB,OACnBkd,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOnlB,cACnBgd,EAAApL,EAAAqL,cAAA,UACID,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,OAAO0mC,MAAM,UAAUC,aAAc,YADpD,qBAKJ9xB,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOjlB,WAClBwuB,IAAK,SAAAigB,GAAQ,OAAIzpB,EAAKypB,SAAWA,IAClC3xB,EAAApL,EAAAqL,cAAC8xB,GAAA,IAAD,CACItL,MAAO,UACP9f,OAAQtR,KAAKpK,MAAM0b,OAAS,GAC5BxgB,MAAM,kBACNwI,KAAM2iC,QAMtBtxB,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACqC,OAAQ,OAAQ7D,MAAO,MAAO2D,OAAQ,IAC/CzG,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACqC,OAAQ,kBAAmBkE,aAAc,IAClD7K,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOrlB,OACnBkd,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOnlB,cACnBgd,EAAApL,EAAAqL,cAAA,UACID,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,OAAOmZ,MAAO,CAACmiB,MAAO,aADrC,iBAKJzmB,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOjlB,YACnB8c,EAAApL,EAAAqL,cAAC+xB,GAAAp9B,EAAD,CACIq9B,SAAUjyB,EAAApL,EAAAqL,cAAA,yBACViyB,MAAO,IACPC,SAAUnyB,EAAApL,EAAAqL,cAAA,+DAM1BD,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACqC,OAAQ,qBACjB3G,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOrlB,OACnBkd,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOnlB,cACnBgd,EAAApL,EAAAqL,cAAA,UACID,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,MAAM0mC,MAAM,UAAUC,aAAa,YADlD,kBAKJ9xB,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOjlB,YACnB8c,EAAApL,EAAAqL,cAAC+xB,GAAAp9B,EAAD,CACIq9B,SAAUjyB,EAAApL,EAAAqL,cAAA,gCACViyB,MAAO,MACP7lC,OAAO,KACP+lC,SAAU,oBAzE1B5f,IAAM5S,yCQOvByqB,GAAWC,KAAXD,QACArkB,GAAWskB,KAAXtkB,QACApjB,GAAkCyvC,KAAlCzvC,OAAQ00B,GAA0B+a,KAA1B/a,QAASgb,GAAiBD,KAAjBC,OAAQzvC,GAASwvC,KAATxvC,MAG1B0vC,8MACFtnC,MAAQ,CACJunC,WAAW,EACX5f,WAAY,OAQhB6f,OAAS,WACLzxB,EAAKW,SAAS,CACV6wB,WAAYxxB,EAAK/V,MAAMunC,WACxB,kBAAMxxB,EAAKW,SAAS,CAACiR,WAAY5R,EAAK/V,MAAMunC,UAAY,GAAK,WAGpEE,gBAAkB,SAAClV,GACD,WAAVA,EAAE5vB,KAAkBoT,EAAK/R,SACnB,cAAVuuB,EAAE5vB,IAAsB7I,EAAQ4H,KAAR,cAA6B5H,EAAQ4H,KAAR,cAAAoB,OAA2ByvB,EAAE5vB,SAGtFqB,OAAS,WACLsP,GAAMc,SAASrR,GAAYiB,aAG/B0jC,YAAc,SAAC7sC,GACX,IAAM8sC,EAAW9sC,EAAS+9B,MAAM,UAAY,GAC5C,QAAS+O,EAASC,SAAW,KAAOD,EAASE,OAAS,KAAKC,mGArB3D19B,KAAKgL,MAAMhB,SAASvL,GAAeC,+CAwB9B,IAAAuS,EAEqBjR,KAAKgL,MAAxBwjB,EAFFvd,EAEEud,MAAOnjB,EAFT4F,EAES5F,SACRlb,EAAOD,IACTytC,EAAW,KAEf,GAAKxtC,EAEE,CAEH,IAAIytC,EACAjzB,EAAApL,EAAAqL,cAACizB,GAAA,EAAD,CAAQtiB,KAAK,QAAQtM,MAAO,CAAEmM,gBAAiB,UAAW0iB,cAAe,WACpE99B,KAAKs9B,YAAYntC,EAAKM,UAAY,KAGvCstC,EACApzB,EAAApL,EAAAqL,cAAC4F,GAAA,EAAD,CAAMzC,QAAS/N,KAAKq9B,iBAChB1yB,EAAApL,EAAAqL,cAAC4F,GAAA,EAAKhF,KAAN,CAAWjT,IAAI,WACXoS,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACyO,QAAQ,OAAQiC,UAAU,SAClCie,EACDjzB,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACsO,WAAW,SACpB5S,EAAApL,EAAAqL,cAAA,UAAKza,EAAKM,UACVka,EAAApL,EAAAqL,cAAA,SAAIza,EAAK0I,UAIrB8R,EAAApL,EAAAqL,cAAC4F,GAAA,EAAKG,QAAN,MACAhG,EAAApL,EAAAqL,cAAC4F,GAAA,EAAKhF,KAAN,CAAWjT,IAAI,UACXoS,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,WACX6U,EAAApL,EAAAqL,cAAA,wBAKZ+yB,EACIhzB,EAAApL,EAAAqL,cAACkH,GAAA,EAAD,CAAUC,QAASgsB,EAAcC,aAAc,CAACvwB,MAAM,UACjDmwB,QA7BT59B,KAAKpG,SAoCT,OACI+Q,EAAApL,EAAAqL,cAACqzB,GAAA,EAAD,CAAQhvB,MAAO,CAACqC,OAAQ,SACpB3G,EAAApL,EAAAqL,cAACpd,GAAD,CACIwkB,QAAS,KACTksB,aAAW,EACXf,UAAWn9B,KAAKpK,MAAMunC,UACtB7tB,UAAWwD,KAAOtlB,OAElBmd,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOzlB,MAEf2S,KAAKpK,MAAMunC,UACPxyB,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACyO,QAAS,SAClB/S,EAAApL,EAAAqL,cAACuzB,GAAA,EAAD,CAAiB5iB,KAAK,KAAK7K,KAAM0tB,KAChBnvB,MAAO,CAACmiB,MAAO,UAAW7T,WAAY,MAG3D5S,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAACyO,QAAS,SAClB/S,EAAApL,EAAAqL,cAACuzB,GAAA,EAAD,CAAiB5iB,KAAK,KAAK7K,KAAM0tB,KAASnvB,MAAO,CAACmiB,MAAO,aACzDzmB,EAAApL,EAAAqL,cAAA,OAAKqE,MAAO,CAAC0oB,WAAY,OAAQpa,WAAY,KAA7C,mBAMhB5S,EAAApL,EAAAqL,cAAC4F,GAAA,EAAD,CAAMgsB,MAAM,QAAQnH,oBAAqBr1B,KAAKpK,MAAMyoC,gBAC9CC,aAAcjzB,EAASF,SAASyuB,MAAM,KAAK,GAAK,CAACvuB,EAASF,SAASyuB,MAAM,KAAK,IAAM,CAACvuB,EAASF,SAASyuB,MAAM,KAAK,IAClH1f,KAAK,SAASnM,QAAS/N,KAAKq9B,iBAC9B1yB,EAAApL,EAAAqL,cAAC4F,GAAA,EAAKhF,KAAN,CAAWjT,IAAI,aACXoS,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,SACX6U,EAAApL,EAAAqL,cAAA,qBAGJD,EAAApL,EAAAqL,cAAC4F,GAAA,EAAKhF,KAAN,CAAWjT,IAAI,cACXoS,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,UACX6U,EAAApL,EAAAqL,cAAA,2BAGJD,EAAApL,EAAAqL,cAAC4F,GAAA,EAAKhF,KAAN,CAAWjT,IAAI,aACXoS,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,aACX6U,EAAApL,EAAAqL,cAAA,0BAGJD,EAAApL,EAAAqL,cAAC+F,GAAD,MAEAhG,EAAApL,EAAAqL,cAAC2zB,GAAD,CAAShmC,IAAI,OAAOzH,MAAO6Z,EAAApL,EAAAqL,cAAA,YAAMD,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,SAAQ6U,EAAApL,EAAAqL,cAAA,iCAChDD,EAAApL,EAAAqL,cAAC4F,GAAA,EAAKhF,KAAN,CAAWjT,IAAI,WACXoS,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,YADf,WAIA6U,EAAApL,EAAAqL,cAAC4F,GAAA,EAAKhF,KAAN,CAAWjT,IAAI,WACXoS,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,UADf,WAIA6U,EAAApL,EAAAqL,cAAC4F,GAAA,EAAKhF,KAAN,CAAWjT,IAAI,mBAAmB0W,MAAO,CAACuvB,SAAU,QAChD7zB,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,kBADf,qBAMJ6U,EAAApL,EAAAqL,cAAC4F,GAAA,EAAKhF,KAAN,CAAWjT,IAAI,iBACXoS,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,oBACX6U,EAAApL,EAAAqL,cAAA,gCAKZD,EAAApL,EAAAqL,cAACqzB,GAAA,EAAD,CAAQhvB,MAAO,CAACsO,WAAYvd,KAAKpK,MAAM2nB,WAAYjM,OAAQ,SAEvD3G,EAAApL,EAAAqL,cAAC6zB,GAAD,CAAQnvB,UAAWwD,KAAOvlB,QACtBod,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CACIpB,UAAWwD,KAAOxlB,QAClBwI,KAAMkK,KAAKpK,MAAMunC,UAAY,cAAgB,YAC7CpvB,QAAS/N,KAAKo9B,SAElBzyB,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAO4rB,UAClBf,IAKThzB,EAAApL,EAAAqL,cAACqX,GAAD,CAAShT,MAAO,CAACmC,OAAQ,GAAIuO,UAAW,GAAInK,aAAc,EAAGlE,OAAQ,SACjE3G,EAAApL,EAAAqL,cAACC,EAAA,EAAD,CAAOE,OAAQ,kBACXJ,EAAApL,EAAAqL,cAAC+zB,GAAA,gBAAD,CAAiB1vB,MAAO,CAACqC,OAAQ,SAC7B3G,EAAApL,EAAAqL,cAAC+zB,GAAA,cAAD,CAAepmC,IAAK8S,EAAS9S,IAAKqmC,WAAW,OAAOC,QAAS,KACzDl0B,EAAApL,EAAAqL,cAACk0B,EAAA,EAAD,CAAQzzB,SAAUA,EAAU4D,MAAO,CAACqC,OAAQ,SACxC3G,EAAApL,EAAAqL,cAACC,EAAA,EAAD,CAAOk0B,KAAI,GAAArmC,OAAK81B,EAAMuQ,KAAX,wBAAuCv0B,UAAWnG,KAC7DsG,EAAApL,EAAAqL,cAACC,EAAA,EAAD,CAAOk0B,KAAI,GAAArmC,OAAK81B,EAAMuQ,KAAX,+BAA8Cv0B,UAAWorB,KACpEjrB,EAAApL,EAAAqL,cAACC,EAAA,EAAD,CAAOk0B,KAAI,GAAArmC,OAAK81B,EAAMuQ,KAAX,4BAA2Cv0B,UAAW0vB,KACjEvvB,EAAApL,EAAAqL,cAACC,EAAA,EAAD,CAAOk0B,KAAI,GAAArmC,OAAK81B,EAAMuQ,KAAX,6BAA4Cv0B,UAAW6xB,KAClE1xB,EAAApL,EAAAqL,cAACC,EAAA,EAAD,CAAOk0B,KAAI,GAAArmC,OAAK81B,EAAMuQ,KAAX,eAA8Bv0B,UAAWoI,GAAYosB,OAAK,IACrEr0B,EAAApL,EAAAqL,cAACC,EAAA,EAAD,CAAOk0B,KAAI,GAAArmC,OAAK81B,EAAMuQ,KAAX,cAA6Bv0B,UAAWoU,GAAWogB,OAAK,IACnEr0B,EAAApL,EAAAqL,cAACC,EAAA,EAAD,CAAOk0B,KAAI,GAAArmC,OAAK81B,EAAMuQ,KAAX,YAA2Bv0B,UAAW+mB,GAASyN,OAAK,IAC/Dr0B,EAAApL,EAAAqL,cAACC,EAAA,EAAD,CAAOk0B,KAAI,GAAArmC,OAAK81B,EAAMuQ,KAAX,YAA2Bv0B,UAAWqnB,GAASmN,OAAK,IAC/Dr0B,EAAApL,EAAAqL,cAACC,EAAA,EAAD,CAAOk0B,KAAI,GAAArmC,OAAK81B,EAAMuQ,KAAX,qBAAoCv0B,UAAWqqB,GAAiBmK,OAAK,IAChFr0B,EAAApL,EAAAqL,cAACC,EAAA,EAAD,CAAOk0B,KAAI,GAAArmC,OAAK81B,EAAMuQ,KAAX,kBAAiCv0B,UAAW0qB,GAAe8J,OAAK,IAC3Er0B,EAAApL,EAAAqL,cAACC,EAAA,EAAD,CAAOk0B,KAAK,aAAav0B,UAAWwxB,YAQxDrxB,EAAApL,EAAAqL,cAACqyB,GAAD,CAAQhuB,MAAO,CAACgG,UAAW,SAAUsK,QAAS,GAAI0f,OAAO,IAAzD,uEAjLI10B,aAgMT20B,mBAAW9uB,YAN1B,SAAyBxa,GACrB,MAAO,CACHT,QAASS,EAAMT,QAAQA,UAILib,CAAyB8sB,0BCvN7C5xB,GAAWC,KAAKC,KAChB2zB,8MAEFpQ,aAAe,SAAC5G,GACZA,EAAE6G,iBACFrjB,EAAKX,MAAMyB,KAAKC,eAAe,SAACC,EAAKC,GAC5BD,IAEDjW,QAAQC,IAAI,4BAA6BiW,GACzCjB,EAAKX,MAAMhB,SAASrR,GAAYC,MAAMgU,EAAO/T,MAAO+T,EAAO9T,iBAKvEsmC,aAAe,WACXzzB,EAAKX,MAAMhB,SAASrR,GAAYiB,mFAG3B,IACE0T,EAAqBtN,KAAKgL,MAAMyB,KAAhCa,kBACP,OACI3C,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAO7kB,iBACnB0c,EAAApL,EAAAqL,cAAA,OAAK0E,UAAW,CAACwD,KAAO5kB,WAAY4kB,KAAO1kB,QAAQ0oB,KAAK,MACpDnM,EAAApL,EAAAqL,cAACwP,GAAA,EAAD,CAAMiD,SAAUrd,KAAKgL,MAAMjW,aACvB4V,EAAApL,EAAAqL,cAACsX,GAAA,EAAD,CAAKpsB,KAAK,OAAO2hC,QAAQ,UACrB9sB,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,KACIxX,EAAApL,EAAAqL,cAAA,qBAIRD,EAAApL,EAAAqL,cAAA,WAEAD,EAAApL,EAAAqL,cAACsX,GAAA,EAAD,CAAKpsB,KAAK,OAAO2hC,QAAQ,UACrB9sB,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,KACIxX,EAAApL,EAAAqL,cAACqD,GAAA,EAAD,CAAMyX,SAAU1lB,KAAK+uB,aAAc7gB,OAAQ,cACvCvD,EAAApL,EAAAqL,cAACy0B,GAAD,CAAU/vB,UAAWwD,KAAO9kB,eACvBsf,EAAkB,QAAS,CACxBkB,MAAO,CAAC,CAACC,UAAU,EAAM1d,QAAS,8BADrCuc,CAGG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOyiB,OAAQxmB,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,OAAOmZ,MAAO,CAACmiB,MAAO,qBACzCziB,YAAY,YAG3BhE,EAAApL,EAAAqL,cAACy0B,GAAD,CAAU/vB,UAAWwD,KAAO9kB,eACvBsf,EAAkB,WAAY,CAC3BkB,MAAO,CAAC,CAACC,UAAU,EAAM1d,QAAS,iCADrCuc,CAGG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOyiB,OAAQxmB,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,OAAOmZ,MAAO,CAACmiB,MAAO,qBACzCt7B,KAAK,WACL6Y,YAAY,kBAOvChE,EAAApL,EAAAqL,cAACsX,GAAA,EAAD,CAAKpsB,KAAK,OAAO2hC,QAAQ,SAASnoB,UAAWwD,KAAO3kB,aAChDwc,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,CAAKlV,KAAM,IACPtC,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQhY,KAAK,UAAUw5B,SAAS,SACxBrgB,MAAO,CAACxB,MAAO,QACfM,QAAS/N,KAAK+uB,cAFtB,YAORpkB,EAAApL,EAAAqL,cAAA,WAEAD,EAAApL,EAAAqL,cAACsX,GAAA,EAAD,CAAKpsB,KAAK,OAAO2hC,QAAQ,UACrB9sB,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,KACIxX,EAAApL,EAAAqL,cAAC6F,GAAA,EAAD,CAAMxB,MAAO,CAACmiB,MAAO,WAAYlmB,GAAG,oBAApC,sBAIRP,EAAApL,EAAAqL,cAACsX,GAAA,EAAD,CAAKpsB,KAAK,OAAO2hC,QAAQ,UACrB9sB,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,KACIxX,EAAApL,EAAAqL,cAAC6F,GAAA,EAAD,CAAMxB,MAAO,CAACmiB,MAAO,WAAYlmB,GAAG,WAApC,4BAGRP,EAAApL,EAAAqL,cAAA,qBA7EJuS,IAAM5S,WA6F1B,IAAM+0B,GAAY/zB,KAAK/B,QAAL+B,CAAc4zB,IACjB/uB,eAPf,SAAyBxa,GACrB,MAAO,CACHb,YAAaa,EAAMD,KAAKZ,cAKjBqb,CAAyBkvB,wBChGlCh0B,GAAWC,KAAKC,KACd0G,GAAWC,KAAXD,OAGFqtB,GACF50B,EAAApL,EAAAqL,cAAC8H,GAAA,EAAD,CAAQoH,aAAa,UAAU7K,MAAO,CAAExB,MAAO,KAC3C9C,EAAApL,EAAAqL,cAAC40B,GAAD,CAAQ7sB,MAAM,WAAd,WACAhI,EAAApL,EAAAqL,cAAC40B,GAAD,CAAQ7sB,MAAM,YAAd,aAKF8sB,8MAEF7pC,MAAQ,CACJ46B,cAAc,KAGlBzB,aAAe,SAAC5G,GACZA,EAAE6G,iBACFrjB,EAAKX,MAAMyB,KAAKC,eAAe,SAACC,EAAKC,GAC5BD,IACDjW,QAAQC,IAAI,4BAA6BiW,GACzCjB,EAAKX,MAAMhB,SAASrR,GAAYM,OAAO2T,UAKnD+jB,kBAAoB,SAACxI,GACjB,IAAMxV,EAAQwV,EAAEC,OAAOzV,MACvBhH,EAAKW,SAAS,CAAEkkB,aAAc7kB,EAAK/V,MAAM46B,gBAAkB7d,OAG/Die,uBAAyB,SAACC,EAAMle,EAAOme,GACnC,IAAMrkB,EAAOd,EAAKX,MAAMyB,KACpBkG,GAASA,IAAUlG,EAAKskB,cAAc,YACtCD,EAAS,wDAETA,OAIRE,uBAAyB,SAACH,EAAMle,EAAOme,GACnC,IAAMrkB,EAAOd,EAAKX,MAAMyB,KACpBkG,GAAShH,EAAK/V,MAAM46B,cACpB/jB,EAAKC,eAAe,CAAC,WAAY,CAAEukB,OAAO,IAE9CH,6EAIK,IACExjB,EAAqBtN,KAAKgL,MAAMyB,KAAhCa,kBACP,OACI3C,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOvjB,kBACnBob,EAAApL,EAAAqL,cAAA,OAAK0E,UAAW,CAACwD,KAAOtjB,YAAasjB,KAAO1kB,QAAQ0oB,KAAK,MACrDnM,EAAApL,EAAAqL,cAACwP,GAAA,EAAD,CAAMiD,UAAU,GACZ1S,EAAApL,EAAAqL,cAACsX,GAAA,EAAD,CAAKpsB,KAAK,OAAO2hC,QAAQ,UACrB9sB,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,KACIxX,EAAApL,EAAAqL,cAAA,2BAIRD,EAAApL,EAAAqL,cAAA,WAGAD,EAAApL,EAAAqL,cAACsX,GAAA,EAAD,CAAKpsB,KAAK,OAAO2hC,QAAQ,UACrB9sB,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,KACIxX,EAAApL,EAAAqL,cAACqD,GAAA,EAAD,CAAMyX,SAAU1lB,KAAK+uB,aAAc7gB,OAAQ,cAEvCvD,EAAApL,EAAAqL,cAAC80B,GAAD,CAAUpwB,UAAWwD,KAAOxjB,gBACvBge,EAAkB,cAAe,CAC9BkB,MAAO,CAAC,CAACC,UAAU,EAAM1d,QAAS,qCADrCuc,CAGG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOyiB,OAAQxmB,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,OAAOmZ,MAAO,CAACmiB,MAAO,qBACzCziB,YAAY,mBAM3BhE,EAAApL,EAAAqL,cAAC80B,GAAD,CAAUpwB,UAAWwD,KAAOxjB,gBACvBge,EAAkB,aAAc,CAC7BkB,MAAO,CAAC,CAACC,UAAU,EAAM1d,QAAS,qCAC9B,CAACugC,QAAS,sFACNvgC,QAAS,8BAHpBuc,CAKG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOyiB,OAAQxmB,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,SAASmZ,MAAO,CAACmiB,MAAO,qBAC3CziB,YAAY,cAAcgxB,YAAaJ,OAItD50B,EAAApL,EAAAqL,cAAC80B,GAAD,CAAUpwB,UAAWwD,KAAOxjB,gBACvBge,EAAkB,YAAa,CAC5BkB,MAAO,CAAC,CAACC,UAAU,EAAM1d,QAAS,mCADrCuc,CAGG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOyiB,OAAQxmB,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,SAASmZ,MAAO,CAACmiB,MAAO,qBAC3CziB,YAAY,kBAI3BhE,EAAApL,EAAAqL,cAAC80B,GAAD,CAAUpwB,UAAWwD,KAAOxjB,gBACvBge,EAAkB,WAAY,CAC3BkB,MAAO,CAAC,CAACC,UAAU,EAAM1d,QAAS,kCADrCuc,CAGG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOyiB,OAAQxmB,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,SAASmZ,MAAO,CAACmiB,MAAO,qBAC3CziB,YAAY,iBAI3BhE,EAAApL,EAAAqL,cAAC80B,GAAD,CAAUpwB,UAAWwD,KAAOxjB,gBACvBge,EAAkB,YAAa,CAC5BkB,MAAO,CACH,CAAC8iB,QAAS,gHACNvgC,QAAS,+BAHpBuc,CAMG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOyiB,OAAQxmB,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,QAAQmZ,MAAO,CAACmiB,MAAO,qBAC1CziB,YAAY,gBAK3BhE,EAAApL,EAAAqL,cAAC80B,GAAD,CAAUpwB,UAAWwD,KAAOxjB,gBACvBge,EAAkB,QAAS,CACxBkB,MAAO,CACH,CAACC,UAAU,EAAM1d,QAAS,4BAC1B,CAACugC,QAAS,gDACNvgC,QAAS,8BAJpBuc,CAOG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOyiB,OAAQxmB,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,OAAOmZ,MAAO,CAACmiB,MAAO,qBACzCziB,YAAY,YAK3BhE,EAAApL,EAAAqL,cAAC80B,GAAD,CAAUpwB,UAAWwD,KAAOxjB,gBACvBge,EAAkB,WAAY,CAC3BkB,MAAO,CACH,CAACC,UAAU,EAAM1d,QAAS,+BAC1B,CAACsgC,UAAWrxB,KAAKgxB,wBACjB,CAACM,QAAS,UAAWvgC,QAAS,6BAJrCuc,CAOG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOyiB,OAAQxmB,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,OAAOmZ,MAAO,CAACmiB,MAAO,qBACzCt7B,KAAK,WACL6Y,YAAY,eAI3BhE,EAAApL,EAAAqL,cAAC80B,GAAD,CAAUpwB,UAAWwD,KAAOxjB,gBACvBge,EAAkB,UAAW,CAC1BkB,MAAO,CACH,CAACC,UAAU,EAAM1d,QAAS,iCAC1B,CAACsgC,UAAWrxB,KAAK4wB,0BAHxBtjB,CAMG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOyiB,OAAQxmB,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,OAAOmZ,MAAO,CAACmiB,MAAO,qBACzCt7B,KAAK,WACL6Y,YAAY,WACZua,OAAQlpB,KAAK2wB,sBAI5BhmB,EAAApL,EAAAqL,cAACqD,GAAA,EAAKzC,KAAN,KACK8B,EAAkB,YAAa,CAC5BkB,MAAO,CAAC,CAACC,UAAU,EAAM1d,QAAS,+CADrCuc,CAGG3C,EAAApL,EAAAqL,cAAC6X,GAAA,EAAD,wBAA0B9X,EAAApL,EAAAqL,cAAA,KAAGknB,KAAK,YAAR,gCAS9CnnB,EAAApL,EAAAqL,cAACsX,GAAA,EAAD,CAAKpsB,KAAK,OAAO2hC,QAAQ,SAASnoB,UAAWwD,KAAOrjB,cAChDkb,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,CAAKlV,KAAM,IACPtC,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQhY,KAAK,UAAUw5B,SAAS,SACxBrgB,MAAO,CAACxB,MAAO,QACfM,QAAS/N,KAAK+uB,cAFtB,oBAORpkB,EAAApL,EAAAqL,cAAA,WAEAD,EAAApL,EAAAqL,cAACsX,GAAA,EAAD,CAAKpsB,KAAK,OAAO2hC,QAAQ,UACrB9sB,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,KACIxX,EAAApL,EAAAqL,cAAC6F,GAAA,EAAD,CAAMxB,MAAO,CAACmiB,MAAO,WAAYlmB,GAAG,UAApC,8BAKRP,EAAApL,EAAAqL,cAAA,qBAxLHuS,IAAM5S,WAwM3B,IAAMq1B,GAAar0B,KAAK/B,QAAL+B,CAAck0B,IAClBrvB,eAPf,SAAyBxa,GACrB,MAAO,CACHd,YAAac,EAAMD,KAAKb,cAKjBsb,CAAyBwvB,yBCpNlCt0B,GAAWC,KAAKC,KAEhBq0B,8MAEF9Q,aAAe,SAAC5G,GACZA,EAAE6G,iBACFrjB,EAAKX,MAAMyB,KAAKC,eAAe,SAACC,EAAKC,GAC5BD,IACDjW,QAAQC,IAAI,4BAA6BiW,GACzCjB,EAAKX,MAAMhB,SAASrR,GAAYU,cAAc,CAACR,MAAS+T,EAAO/T,qFAKlE,IACEyU,EAAqBtN,KAAKgL,MAAMyB,KAAhCa,kBACP,OACI3C,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOjkB,yBACnB8b,EAAApL,EAAAqL,cAAA,OAAK0E,UAAW,CAACwD,KAAOhkB,mBAAoBgkB,KAAO1kB,QAAQ0oB,KAAK,MAC5DnM,EAAApL,EAAAqL,cAACsX,GAAA,EAAD,CAAKpsB,KAAK,OAAO2hC,QAAQ,UACrB9sB,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,KACIxX,EAAApL,EAAAqL,cAAA,mCAIRD,EAAApL,EAAAqL,cAAA,WAEAD,EAAApL,EAAAqL,cAACsX,GAAA,EAAD,CAAKpsB,KAAK,OAAO2hC,QAAQ,UACrB9sB,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,KACIxX,EAAApL,EAAAqL,cAACqD,GAAA,EAAD,CAAMyX,SAAU1lB,KAAK+uB,aAAc7gB,OAAQ,cACvCvD,EAAApL,EAAAqL,cAACk1B,GAAD,CAAUxwB,UAAWwD,KAAOlkB,uBACvB0e,EAAkB,QAAS,CACxBkB,MAAO,CAAC,CAACC,UAAU,EAAM1d,QAAS,8BADrCuc,CAGG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOyiB,OAAQxmB,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,OAAOmZ,MAAO,CAACmiB,MAAO,qBACzCziB,YAAY,eAOvChE,EAAApL,EAAAqL,cAACsX,GAAA,EAAD,CAAKpsB,KAAK,OAAO2hC,QAAQ,SAASnoB,UAAWwD,KAAO/jB,qBAChD4b,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,CAAKlV,KAAM,IACPtC,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQhY,KAAK,UAAUw5B,SAAS,SACxBrgB,MAAO,CAACxB,MAAO,QACfM,QAAS/N,KAAK+uB,cAFtB,YAORpkB,EAAApL,EAAAqL,cAAA,WAEAD,EAAApL,EAAAqL,cAACsX,GAAA,EAAD,CAAKpsB,KAAK,OAAO2hC,QAAQ,UACrB9sB,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,KACIxX,EAAApL,EAAAqL,cAAC6F,GAAA,EAAD,CAAMxB,MAAO,CAACmiB,MAAO,WAAYlmB,GAAG,UAApC,oBAIRP,EAAApL,EAAAqL,cAAA,oBAzDSuS,IAAM5S,WAsEpB6F,mBAJf,SAAyBxa,GACrB,MAAO,IAGIwa,CAAyB7E,KAAK/B,QAAL+B,CAAcs0B,0BCxEhDv0B,GAAWC,KAAKC,KAEhBu0B,8MAEFnqC,MAAQ,CACJ46B,cAAc,KAGlBzB,aAAe,SAAC5G,GACZA,EAAE6G,iBACFrjB,EAAKX,MAAMyB,KAAKC,eAAe,SAACC,EAAKC,GAC5BD,IACDjW,QAAQC,IAAI,4BAA6BiW,GACzCjB,EAAKX,MAAMhB,SAASrR,GAAYc,iBAC5B,CACIX,SAAY8T,EAAO9T,SACnBknC,QAAWv3B,OAAO4C,SAASymB,KAAK8H,MAAM,KAAK6D,eAM/D9M,kBAAoB,SAACxI,GACjB,IAAMxV,EAAQwV,EAAEC,OAAOzV,MACvBhH,EAAKW,SAAS,CAAEkkB,aAAc7kB,EAAK/V,MAAM46B,gBAAkB7d,OAG/Die,uBAAyB,SAACC,EAAMle,EAAOme,GACnC,IAAMrkB,EAAOd,EAAKX,MAAMyB,KACpBkG,GAASA,IAAUlG,EAAKskB,cAAc,YACtCD,EAAS,yBAETA,OAIRE,uBAAyB,SAACH,EAAMle,EAAOme,GACnC,IAAMrkB,EAAOd,EAAKX,MAAMyB,KACpBkG,GAAShH,EAAK/V,MAAM46B,cACpB/jB,EAAKC,eAAe,CAAC,WAAY,CAAEukB,OAAO,IAE9CH,6EAGK,IACExjB,EAAqBtN,KAAKgL,MAAMyB,KAAhCa,kBAEP,OACI3C,EAAApL,EAAAqL,cAAA,OAAK0E,UAAWwD,KAAOvkB,4BACnBoc,EAAApL,EAAAqL,cAAA,OAAK0E,UAAW,CAACwD,KAAOtkB,sBAAuBskB,KAAO1kB,QAAQ0oB,KAAK,MAC/DnM,EAAApL,EAAAqL,cAACsX,GAAA,EAAD,CAAKpsB,KAAK,OAAO2hC,QAAQ,UACrB9sB,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,KACIxX,EAAApL,EAAAqL,cAAA,mCAIRD,EAAApL,EAAAqL,cAAA,WAEAD,EAAApL,EAAAqL,cAACsX,GAAA,EAAD,CAAKpsB,KAAK,OAAO2hC,QAAQ,UACrB9sB,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,KACIxX,EAAApL,EAAAqL,cAACqD,GAAA,EAAD,CAAMyX,SAAU1lB,KAAK+uB,aAAc7gB,OAAQ,cACvCvD,EAAApL,EAAAqL,cAACq1B,GAAD,CAAU3wB,UAAWwD,KAAOxkB,0BACvBgf,EAAkB,WAAY,CAC3BkB,MAAO,CACH,CAACC,UAAU,EAAM1d,QAAS,+BAC1B,CAACsgC,UAAWrxB,KAAKgxB,wBACjB,CAACM,QAAS,UAAWvgC,QAAS,6BAJrCuc,CAOG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOyiB,OAAQxmB,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,OAAOmZ,MAAO,CAACmiB,MAAO,qBACzCt7B,KAAK,WACL6Y,YAAY,mBAI3BhE,EAAApL,EAAAqL,cAACq1B,GAAD,CAAU3wB,UAAWwD,KAAOxkB,0BACvBgf,EAAkB,UAAW,CAC1BkB,MAAO,CACH,CAACC,UAAU,EAAM1d,QAAS,iCAC1B,CAACsgC,UAAWrxB,KAAK4wB,0BAHxBtjB,CAMG3C,EAAApL,EAAAqL,cAAC8D,GAAA,EAAD,CAAOyiB,OAAQxmB,EAAApL,EAAAqL,cAAC8F,GAAA,EAAD,CAAM5a,KAAK,OAAOmZ,MAAO,CAACmiB,MAAO,qBACzCt7B,KAAK,WACL6Y,YAAY,mBACZua,OAAQlpB,KAAK2wB,yBAQxChmB,EAAApL,EAAAqL,cAACsX,GAAA,EAAD,CAAKpsB,KAAK,OAAO2hC,QAAQ,SAASnoB,UAAWwD,KAAOrkB,wBAChDkc,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,CAAKlV,KAAM,IACPtC,EAAApL,EAAAqL,cAACkD,GAAA,EAAD,CAAQhY,KAAK,UAAUw5B,SAAS,SACxBrgB,MAAO,CAACxB,MAAO,QACfM,QAAS/N,KAAK+uB,cAFtB,YAORpkB,EAAApL,EAAAqL,cAAA,WAEAD,EAAApL,EAAAqL,cAACsX,GAAA,EAAD,CAAKpsB,KAAK,OAAO2hC,QAAQ,UACrB9sB,EAAApL,EAAAqL,cAACuX,GAAA,EAAD,KACIxX,EAAApL,EAAAqL,cAAC6F,GAAA,EAAD,CAAMxB,MAAO,CAACmiB,MAAO,WAAYlmB,GAAG,UAApC,oBAIRP,EAAApL,EAAAqL,cAAA,oBA5GcuS,IAAM5S,WAyHzB6F,mBAJf,SAAyBxa,GACrB,MAAO,IAGIwa,CAAyB7E,KAAK/B,QAAL+B,CAAcw0B,KCvHhDG,eACF,SAAAA,EAAYl1B,GAAO,IAAAW,EAAA,OAAAjX,OAAAonB,EAAA,EAAApnB,CAAAsL,KAAAkgC,GACfv0B,EAAAjX,OAAAqnB,EAAA,EAAArnB,CAAAsL,KAAAtL,OAAAsnB,EAAA,EAAAtnB,CAAAwrC,GAAAjkB,KAAAjc,KAAMgL,IACNtb,EAAQywC,OAAO,SAAC90B,EAAUxV,GAEtB7D,MAJW2Z,wEASf,OACIhB,EAAApL,EAAAqL,cAACk0B,EAAA,EAAD,KAEIn0B,EAAApL,EAAAqL,cAACC,EAAA,EAAD,CAAOk0B,KAAK,SAASv0B,UAAW20B,KAChCx0B,EAAApL,EAAAqL,cAACC,EAAA,EAAD,CAAOk0B,KAAK,UAAUv0B,UAAWi1B,KACjC90B,EAAApL,EAAAqL,cAACC,EAAA,EAAD,CAAOk0B,KAAK,mBAAmBv0B,UAAWq1B,KAC1Cl1B,EAAApL,EAAAqL,cAACC,EAAA,EAAD,CAAOk0B,KAAK,mBAAmBv0B,UAAW41B,KAC1Cz1B,EAAApL,EAAAqL,cAACy1B,GAAD,CAActB,KAAK,aAAav0B,UAAW0yB,KAC3CvyB,EAAApL,EAAAqL,cAACK,EAAA,EAAD,CAAUC,GAAI,CAACC,SAAU,wBAlBvBZ,aA8BH20B,eAAW9uB,YANF,SAACxa,GAErB,MAAO,CACH0qC,MAFY1qC,EAAT0qC,QAKelwB,CAAyB8vB,KC/B/BK,QACW,cAA7B93B,OAAO4C,SAAS8J,UAEe,UAA7B1M,OAAO4C,SAAS8J,UAEhB1M,OAAO4C,SAAS8J,SAASqZ,MACvB,mFCJAgS,GACF71B,EAAApL,EAAAqL,cAAC61B,EAAA,EAAD,CAAUv3B,MAAOA,IACbyB,EAAApL,EAAAqL,cAAC81B,GAAA,EAAD,CAAahvC,QAAS,KAAM2X,UAAWA,IACnCsB,EAAApL,EAAAqL,cAAC+1B,GAAA,EAAD,CAAQjxC,QAASA,GACbib,EAAApL,EAAAqL,cAACg2B,GAAD,SAMhBC,IAAS91B,OAAOy1B,GAAKpK,SAASC,eAAe,SDyGvC,kBAAmByK,WACrBA,UAAUC,cAAcC,MAAMjkB,KAAK,SAAAkkB,GACjCA,EAAaC,mCElInB/zC,EAAAC,QAAA,CAAkBC,KAAA,wBAAAC,QAAA,2BAAAC,OAAA,0BAAAC,MAAA,yBAAAC,MAAA,yBAAAC,kBAAA,qCAAAC,aAAA,gCAAAC,yBAAA,4CAAAC,WAAA,8BAAAC,gBAAA,mCAAAC,oBAAA,4DCAlBZ,EAAAC,QAAA,CAAkBC,KAAA,wBAAAC,QAAA,2BAAAC,OAAA,0BAAAC,MAAA,yBAAAC,MAAA,yBAAAC,kBAAA,qCAAAC,aAAA,gCAAAC,yBAAA,4CAAAC,WAAA,8BAAAC,gBAAA,mCAAAC,oBAAA","file":"react_static/js/main.382cfe60.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Integration_Logo__95x6p\",\"Trigger\":\"Integration_Trigger__2Se00\",\"Header\":\"Integration_Header__1BlRc\",\"Sider\":\"Integration_Sider__2KM_8\",\"Panel\":\"Integration_Panel__YQm7V\",\"Panel_With_Header\":\"Integration_Panel_With_Header__1vwGy\",\"Panel_Header\":\"Integration_Panel_Header__3fTNI\",\"Panel_Header_With_Button\":\"Integration_Panel_Header_With_Button__3igXy\",\"Panel_Body\":\"Integration_Panel_Body__4hmlE\",\"Panel_Body_Only\":\"Integration_Panel_Body_Only__2uxaX\",\"Panel_Header_Button\":\"Integration_Panel_Header_Button__2re5I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Documentation_Logo__2vPup\",\"Trigger\":\"Documentation_Trigger__3HGyt\",\"Header\":\"Documentation_Header__AnEX3\",\"Sider\":\"Documentation_Sider__2S9N6\",\"Panel\":\"Documentation_Panel__p7-mL\",\"Panel_With_Header\":\"Documentation_Panel_With_Header__CoONT\",\"Panel_Header\":\"Documentation_Panel_Header__3sSV8\",\"Panel_Header_With_Button\":\"Documentation_Panel_Header_With_Button__1SHSR\",\"Panel_Body\":\"Documentation_Panel_Body__Bvnfp\",\"Panel_Body_Only\":\"Documentation_Panel_Body_Only__1W8fG\",\"Panel_Header_Button\":\"Documentation_Panel_Header_Button__5Q4S5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LoginFormItem\":\"Login_LoginFormItem__Bjlod\",\"LoginBackground\":\"Login_LoginBackground__1vl63\",\"LoginPanel\":\"Login_LoginPanel__k_BiB\",\"LoginButton\":\"Login_LoginButton__3YREJ\",\"fadeIn\":\"Login_fadeIn__VleXS\",\"fade-in\":\"Login_fade-in__23ax_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"NewResetPasswordFormItem\":\"NewResetPassword_NewResetPasswordFormItem__80ZqZ\",\"NewResetPasswordBackground\":\"NewResetPassword_NewResetPasswordBackground__BqjiY\",\"NewResetPasswordPanel\":\"NewResetPassword_NewResetPasswordPanel__KrgLa\",\"NewResetPasswordButton\":\"NewResetPassword_NewResetPasswordButton__37vp3\",\"fadeIn\":\"NewResetPassword_fadeIn__1DQlT\",\"fade-in\":\"NewResetPassword_fade-in__1Kw3j\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Dashboard_Logo__1tX2D\",\"Trigger\":\"Dashboard_Trigger__3AedD\",\"Header\":\"Dashboard_Header__3Btdm\",\"Sider\":\"Dashboard_Sider__2ZI11\",\"Panel\":\"Dashboard_Panel__3xGal\",\"Panel_With_Header\":\"Dashboard_Panel_With_Header__223E9\",\"Panel_Header\":\"Dashboard_Panel_Header__WjA5O\",\"Panel_Header_With_Button\":\"Dashboard_Panel_Header_With_Button__ahSup\",\"Panel_Body\":\"Dashboard_Panel_Body__2CCNs\",\"Panel_Body_Only\":\"Dashboard_Panel_Body_Only__1ghhm\",\"Panel_Header_Button\":\"Dashboard_Panel_Header_Button__3e-Uv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Assistants_Logo__1_c55\",\"Trigger\":\"Assistants_Trigger__2L37K\",\"Header\":\"Assistants_Header__1p-1G\",\"Sider\":\"Assistants_Sider__206sR\",\"Panel\":\"Assistants_Panel__1ntI9\",\"Panel_With_Header\":\"Assistants_Panel_With_Header__2KVCE\",\"Panel_Header\":\"Assistants_Panel_Header__29BDR\",\"Panel_Header_With_Button\":\"Assistants_Panel_Header_With_Button__24_KV\",\"Panel_Body\":\"Assistants_Panel_Body__2GgUc\",\"Panel_Body_Only\":\"Assistants_Panel_Body_Only__3T20i\",\"Panel_Header_Button\":\"Assistants_Panel_Header_Button__3zsj3\",\"AssistantsList\":\"Assistants_AssistantsList__Q3wG3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Groups_Logo__1Xp0E\",\"Trigger\":\"Groups_Trigger__3Ucdo\",\"Header\":\"Groups_Header__62fiz\",\"Sider\":\"Groups_Sider__2qjgl\",\"Panel\":\"Groups_Panel__2qp5F\",\"Panel_With_Header\":\"Groups_Panel_With_Header__1JGwO\",\"Panel_Header\":\"Groups_Panel_Header__r-Yxh\",\"Panel_Header_With_Button\":\"Groups_Panel_Header_With_Button__1kcUe\",\"Panel_Body\":\"Groups_Panel_Body__6n_iM\",\"Panel_Body_Only\":\"Groups_Panel_Body_Only__2bKFB\",\"Panel_Header_Button\":\"Groups_Panel_Header_Button__1lCxR\",\"groupsList\":\"Groups_groupsList__30oXd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Sessions_Logo__104qD\",\"Trigger\":\"Sessions_Trigger__AGV9O\",\"Header\":\"Sessions_Header__2dewf\",\"Sider\":\"Sessions_Sider__1T8jl\",\"Panel\":\"Sessions_Panel__2PkYe\",\"Panel_With_Header\":\"Sessions_Panel_With_Header__1qCew\",\"Panel_Header\":\"Sessions_Panel_Header__5nE51\",\"Panel_Header_With_Button\":\"Sessions_Panel_Header_With_Button__1Kkm2\",\"Panel_Body\":\"Sessions_Panel_Body__2t-UB\",\"Panel_Body_Only\":\"Sessions_Panel_Body_Only__3DalE\",\"Panel_Header_Button\":\"Sessions_Panel_Header_Button__g5sYx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ResetPasswordFormItem\":\"ForgetPassword_ResetPasswordFormItem__223TJ\",\"ResetPasswordBackground\":\"ForgetPassword_ResetPasswordBackground__2seWN\",\"ResetPasswordPanel\":\"ForgetPassword_ResetPasswordPanel__cc9Gv\",\"ResetPasswordButton\":\"ForgetPassword_ResetPasswordButton__1wwLf\",\"fadeIn\":\"ForgetPassword_fadeIn__tRk-N\",\"fade-in\":\"ForgetPassword_fade-in__2SFfE\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Blocks_Logo__3EenA\",\"Trigger\":\"Blocks_Trigger__3lu5V\",\"Header\":\"Blocks_Header__26n00\",\"Sider\":\"Blocks_Sider__1vIWa\",\"Panel\":\"Blocks_Panel__Bbjus\",\"Panel_With_Header\":\"Blocks_Panel_With_Header__2Oz2T\",\"Panel_Header\":\"Blocks_Panel_Header__17iCM\",\"Panel_Header_With_Button\":\"Blocks_Panel_Header_With_Button__Gx_gz\",\"Panel_Body\":\"Blocks_Panel_Body__2yUxP\",\"Panel_Body_Only\":\"Blocks_Panel_Body_Only__1Gj-A\",\"Panel_Header_Button\":\"Blocks_Panel_Header_Button__10_dQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Header_Logo__pPWqk\",\"Trigger\":\"Header_Trigger__eWuBO\",\"Header\":\"Header_Header__SmyVP\",\"Sider\":\"Header_Sider__2FnLR\",\"Panel\":\"Header_Panel__C4UsN\",\"Panel_With_Header\":\"Header_Panel_With_Header__5mkk7\",\"Panel_Header\":\"Header_Panel_Header__1uYtq\",\"Panel_Header_With_Button\":\"Header_Panel_Header_With_Button__xEeeu\",\"Panel_Body\":\"Header_Panel_Body__1O0FM\",\"Panel_Body_Only\":\"Header_Panel_Body_Only__1obK3\",\"Panel_Header_Button\":\"Header_Panel_Header_Button__2Ri6l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Profile_Logo__3XyFo\",\"Trigger\":\"Profile_Trigger__mA7Id\",\"Header\":\"Profile_Header__2w-2z\",\"Sider\":\"Profile_Sider__3eRJ1\",\"Panel\":\"Profile_Panel__3rUmN\",\"Panel_With_Header\":\"Profile_Panel_With_Header__308J6\",\"Panel_Header\":\"Profile_Panel_Header__FLj1C\",\"Panel_Header_With_Button\":\"Profile_Panel_Header_With_Button__9nq7l\",\"Panel_Body\":\"Profile_Panel_Body__n4HRf\",\"Panel_Body_Only\":\"Profile_Panel_Body_Only__1G7Zp\",\"Panel_Header_Button\":\"Profile_Panel_Header_Button__2p-uS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Billing_Logo__3LV7q\",\"Trigger\":\"Billing_Trigger__1N7i4\",\"Header\":\"Billing_Header__23yYm\",\"Sider\":\"Billing_Sider__2Lb9g\",\"Panel\":\"Billing_Panel__1TiHB\",\"Panel_With_Header\":\"Billing_Panel_With_Header__3twiz\",\"Panel_Header\":\"Billing_Panel_Header__1kYbC\",\"Panel_Header_With_Button\":\"Billing_Panel_Header_With_Button__3fta8\",\"Panel_Body\":\"Billing_Panel_Body__2X2ii\",\"Panel_Body_Only\":\"Billing_Panel_Body_Only__1hVkP\",\"Panel_Header_Button\":\"Billing_Panel_Header_Button__26R6N\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"UsersManagement_Logo__AGxVz\",\"Trigger\":\"UsersManagement_Trigger__3x2lG\",\"Header\":\"UsersManagement_Header__DBfZc\",\"Sider\":\"UsersManagement_Sider__1Z2-f\",\"Panel\":\"UsersManagement_Panel__2eOJJ\",\"Panel_With_Header\":\"UsersManagement_Panel_With_Header__3B80l\",\"Panel_Header\":\"UsersManagement_Panel_Header__3iJ1q\",\"Panel_Header_With_Button\":\"UsersManagement_Panel_Header_With_Button__336oC\",\"Panel_Body\":\"UsersManagement_Panel_Body__1jmUt\",\"Panel_Body_Only\":\"UsersManagement_Panel_Body_Only__17Zp2\",\"Panel_Header_Button\":\"UsersManagement_Panel_Header_Button__92t-c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Home_Logo__3QAfe\",\"Trigger\":\"Home_Trigger__3dFyO\",\"Header\":\"Home_Header__2Pzqj\",\"Sider\":\"Home_Sider__3o5OO\",\"Panel\":\"Home_Panel__2IH4H\",\"Panel_With_Header\":\"Home_Panel_With_Header__2tEsh\",\"Panel_Header\":\"Home_Panel_Header__1uniL\",\"Panel_Header_With_Button\":\"Home_Panel_Header_With_Button__caHfT\",\"Panel_Body\":\"Home_Panel_Body__3d2sd\",\"Panel_Body_Only\":\"Home_Panel_Body_Only__23Vve\",\"Panel_Header_Button\":\"Home_Panel_Header_Button__mmeqI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"steps_content\":\"NewDatabaseModal_steps_content__3d42l\",\"steps_action\":\"NewDatabaseModal_steps_action__2flP1\"};","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"095f9e3bd27933c9fe40.worker.js\");\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Flow_Logo__hDNk3\",\"Trigger\":\"Flow_Trigger__2boX1\",\"Header\":\"Flow_Header__2WIFi\",\"Sider\":\"Flow_Sider__34Dhn\",\"Panel\":\"Flow_Panel__3bDX2\",\"Panel_With_Header\":\"Flow_Panel_With_Header__2UfLu\",\"Panel_Header\":\"Flow_Panel_Header__1JCa8\",\"Panel_Header_With_Button\":\"Flow_Panel_Header_With_Button__6CRn-\",\"Panel_Body\":\"Flow_Panel_Body__UqCCW\",\"Panel_Body_Only\":\"Flow_Panel_Body_Only__3Ge20\",\"Panel_Header_Button\":\"Flow_Panel_Header_Button__1p-dn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ErrorMsg\":\"Signup_ErrorMsg__sbO-q\",\"SignupFormItem\":\"Signup_SignupFormItem__36nwk\",\"SignupBackground\":\"Signup_SignupBackground__3os30\",\"SignupPanel\":\"Signup_SignupPanel__qu2wR\",\"SignupButton\":\"Signup_SignupButton__teQSV\",\"fadeIn\":\"Signup_fadeIn__1O1p7\",\"fade-in\":\"Signup_fade-in__OswwO\"};","import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();","\nexport const authHeader = () => {\n    // return authorization header with jwt token\n    let token = localStorage.getItem('token');\n    let refresh = localStorage.getItem('refresh');\n    if (!token || !refresh) {return null}\n    return {'Authorization': 'Bearer ' + token};\n};\n\n\nexport const getUser = () => {\n    // return user from local storage\n    let user = JSON.parse(localStorage.getItem('user'));\n    if(!user){return null;}\n    return user;\n};\n\n// Update username in localStorage\nexport const updateUsername = (firstname, surname) => {\n    // get user from localStorage\n    let user = JSON.parse(localStorage.getItem('user'));\n    if(!user){return null;}\n    // update username and reset localStorage\n    user.username = firstname + ' ' + surname;\n    localStorage.setItem(\"user\", JSON.stringify(user));\n};\n\n\nexport const checkAuthenticity = () => {\n    return !(!getUser() || !authHeader());\n\n};\n\n","import {message, notification} from 'antd';\n\nconst duration = 2.5;\nconst placement = \"topRight\";\nexport const alertSuccess = (title, message) => {\n    notification.success({\n        message: title,\n        description: message,\n        duration: duration,\n        placement: placement,\n    });\n};\n\n\nexport const alertError = (title, message) => {\n    notification.error({\n        message: title,\n        description: message\n    });\n};\n\nmessage.config({\n    maxCount: 1,\n});\nexport const loadingMessage = (title, time = 1.5) => message.loading(title, time);\nexport const successMessage = (title, time = 1.5) => message.success(title, time);\nexport const errorMessage = (title, time = 1.5) => message.error(title, time);\nexport const warningMessage = (title, time = 1.5) => message.warning(title, time);\n\nexport const destroyMessage = () => {\n    message.destroy();\n    notification.destroy();\n};\n\nexport const alertInfo = (title, message) => {\n    notification.info({\n        message: title,\n        description: message,\n        duration: duration,\n        placement: placement,\n    });\n};\n\n\nexport const alertWarn = (title, message) => {\n    notification.warn({\n        message: title,\n        description: message,\n        duration: duration,\n        placement: placement,\n    });\n};","export const LOGIN_REQUEST = 'LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\n\nexport const SIGNUP_REQUEST = 'SIGNUP_REQUEST';\nexport const SIGNUP_SUCCESS = 'SIGNUP_SUCCESS';\nexport const SIGNUP_FAILURE = 'SIGNUP_FAILURE';\n\nexport const RESET_PASSWORD_REQUEST = 'RESET_PASSWORD_REQUEST';\nexport const RESET_PASSWORD_SUCCESS = 'RESET_PASSWORD_SUCCESS';\nexport const RESET_PASSWORD_FAILURE = 'RESET_PASSWORD_FAILURE';\n\n    export const NEW_RESET_PASSWORD_REQUEST = 'NEW_RESET_PASSWORD_REQUEST';\n    export const NEW_RESET_PASSWORD_SUCCESS = 'NEW_RESET_PASSWORD_SUCCESS';\n    export const NEW_RESET_PASSWORD_FAILURE = 'NEW_RESET_PASSWORD_FAILURE';\n\n\nexport const LOGOUT = 'LOGOUT';\nexport const AUTH_CHECK_TIMEOUT = 'AUTH_CHECK_TIMEOUT';\nexport const REFRESH_TOKEN = 'REFRESH_TOKEN';\n\n\nexport const FETCH_OPTIONS_REQUEST = 'FETCH_OPTIONS_REQUEST';\nexport const FETCH_OPTIONS_SUCCESS = 'FETCH_OPTIONS_SUCCESS';\nexport const FETCH_OPTIONS_FAILURE = 'FETCH_OPTIONS_FAILURE';\n\n\nexport const FETCH_ASSISTANTS_REQUEST = 'FETCH_ASSISTANTS_REQUEST';\nexport const FETCH_ASSISTANTS_SUCCESS = 'FETCH_ASSISTANTS_SUCCESS';\nexport const FETCH_ASSISTANTS_FAILURE = 'FETCH_ASSISTANTS_FAILURE';\n\n    export const CHANGE_ASSISTANT_STATUS_REQUEST = 'CHANGE_ASSISTANT_STATUS_REQUEST';\n    export const CHANGE_ASSISTANT_STATUS_SUCCESS = 'CHANGE_ASSISTANT_STATUS_SUCCESS';\n    export const CHANGE_ASSISTANT_STATUS_FAILURE = 'CHANGE_ASSISTANT_STATUS_FAILURE';\n\n\n    export const ADD_ASSISTANT_REQUEST = 'ADD_ASSISTANTS_REQUEST';\n    export const ADD_ASSISTANT_SUCCESS = 'ADD_ASSISTANT_SUCCESS';\n    export const ADD_ASSISTANT_FAILURE = 'ADD_ASSISTANT_FAILURE';\n\n    export const UPDATE_ASSISTANT_REQUEST = 'UPDATE_ASSISTANT_REQUEST';\n    export const UPDATE_ASSISTANT_SUCCESS = 'UPDATE_ASSISTANT_SUCCESS';\n    export const UPDATE_ASSISTANT_FAILURE = 'UPDATE_ASSISTANT_FAILURE';\n\n    export const DELETE_ASSISTANT_REQUEST = 'DELETE_ASSISTANT_REQUEST';\n    export const DELETE_ASSISTANT_SUCCESS = 'DELETE_ASSISTANT_SUCCESS';\n    export const DELETE_ASSISTANT_FAILURE = 'DELETE_ASSISTANT_FAILURE';\n\n\nexport const UPDATE_FLOW_REQUEST = 'UPDATE_FLOW_REQUEST';\nexport const UPDATE_FLOW_SUCCESS = 'UPDATE_FLOW_SUCCESS';\nexport const UPDATE_FLOW_FAILURE = 'UPDATE_FLOW_FAILUR';\n\n// Profile\nexport const GET_PROFILE_REQUEST = 'GET_PROFILE_REQUEST';\nexport const GET_PROFILE_SUCCESS = 'GET_PROFILE_SUCCESS';\nexport const GET_PROFILE_FAILURE = 'GET_PROFILE_FAILURE';\n\n    export const SAVE_PROFILE_DETAILS_REQUEST = 'SAVE_PROFILE_DETAILS_REQUEST';\n    export const SAVE_PROFILE_DETAILS_SUCCESS = 'SAVE_PROFILE_DETAILS_SUCCESS';\n    export const SAVE_PROFILE_DETAILS_FAILURE = 'SAVE_PROFILE_DETAILS_FAILURE';\n\n    export const SAVE_DATA_SETTINGS_REQUEST = 'SAVE_DATA_SETTINGS_REQUEST';\n    export const SAVE_DATA_SETTINGS_SUCCESS = 'SAVE_DATA_SETTINGS_SUCCESS';\n    export const SAVE_DATA_SETTINGS_FAILURE = 'SAVE_DATA_SETTINGS_FAILURE';\n\n    export const CHANGE_PASS_REQUEST = 'CHANGE_PASS_REQUEST';\n    export const CHANGE_PASS_SUCCESS = 'CHANGE_PASS_SUCCESS';\n    export const CHANGE_PASS_FAILURE = 'CHANGE_PASS_FAILURE';\n\n\n// User Input\nexport const FETCH_CHATBOT_SESSIONS_REQUEST = 'FETCH_CHATBOT_SESSIONS_REQUEST';\nexport const FETCH_CHATBOT_SESSIONS_SUCCESS = 'FETCH_CHATBOT_SESSIONS_SUCCESS';\nexport const FETCH_CHATBOT_SESSIONS_FAILURE = 'FETCH_CHATBOT_SESSIONS_FAILURE';\n\n    export const CLEAR_ALL_CHATBOT_SESSIONS_REQUEST = 'CLEAR_ALL_CHATBOT_SESSIONS_REQUEST';\n    export const CLEAR_ALL_CHATBOT_SESSIONS_SUCCESS = 'CLEAR_ALL_CHATBOT_SESSIONS_SUCCESS';\n    export const CLEAR_ALL_CHATBOT_SESSIONS_FAILURE = 'CLEAR_ALL_CHATBOT_SESSIONS_FAILURE';\n\n\nexport const GET_DATABASES_LIST_REQUEST = 'GET_DATABASES_LIST_REQUEST';\nexport const GET_DATABASES_LIST_SUCCESS = 'GET_DATABASES_LIST_SUCCESS';\nexport const GET_DATABASES_LIST_FAILURE = 'GET_DATABASES_LIST_FAILURE';\n\n    export const UPLOAD_DATABASE_REQUEST = 'UPLOAD_DATABASE_REQUEST';\n    export const UPLOAD_DATABASE_SUCCESS = 'UPLOAD_DATABASE_SUCCESS';\n    export const UPLOAD_DATABASE_FAILURE = 'UPLOAD_DATABASE_FAILURE';\n\n    export const FETCH_DATABASE_REQUEST = 'FETCH_DATABASE_REQUEST';\n    export const FETCH_DATABASE_SUCCESS = 'FETCH_DATABASE_SUCCESS';\n    export const FETCH_DATABASE_FAILURE = 'FETCH_DATABASE_FAILURE';\n    export const RESET_DATABASE = 'RESET_DATABASE';\n\n    export const DELETE_DATABASE_REQUEST = 'DELETE_DATABASE_REQUEST';\n    export const DELETE_DATABASE_SUCCESS = 'DELETE_DATABASE_SUCCESS';\n    export const DELETE_DATABASE_FAILURE = 'DELETE_DATABASE_FAILURE';\n\n// Users Management\nexport const GET_USERS_REQUEST = 'GET_USERS_REQUEST';\nexport const GET_USERS_SUCCESS = 'GET_USERS_SUCCESS';\nexport const GET_USERS_FAILURE = 'GET_USERS_FAILURE';\n\n    export const ADD_USER_REQUEST = 'ADD_USER_REQUEST';\n    export const ADD_USER_SUCCESS = 'ADD_USER_SUCCESS';\n    export const ADD_USER_FAILURE = 'ADD_USER_FAILURE';\n\n    export const EDIT_USER_REQUEST = 'EDIT_USER_REQUEST';\n    export const EDIT_USER_SUCCESS = 'EDIT_USER_SUCCESS';\n    export const EDIT_USER_FAILURE = 'EDIT_USER_FAILURE';\n\n    export const DELETE_USER_REQUEST = 'DELETE_USER_REQUEST';\n    export const DELETE_USER_SUCCESS = 'DELETE_USER_SUCCESS';\n    export const DELETE_USER_FAILURE = 'DELETE_USER_FAILURE';","export const updateObject = (oldObject, updatedValues) => {\n    return {\n        ...oldObject,\n        ...updatedValues\n    }\n};\n","import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\nlet user = JSON.parse(localStorage.getItem('user'));\nconst initialState = user ? {isAuthenticated: true, user,  isSigningUp: false, isLoggingIn: false, errorMsg: null} :\n    {isAuthenticated: false, user: null,  isSigningUp: false, isLoggingIn: false, errorMsg: null};\n\nexport const auth = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.LOGIN_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isLoggingIn: true,\n            });\n        case actionTypes.LOGIN_SUCCESS:\n            return updateObject(state, {\n                isLoggingIn: false,\n                isAuthenticated: true,\n                user: action.user\n            });\n        case actionTypes.LOGIN_FAILURE:\n            return updateObject(state, {\n                isLoggingIn: false,\n                isAuthenticated: false,\n                user: null,\n                errorMsg: action.error.msg\n            });\n\n\n        case actionTypes.SIGNUP_REQUEST:\n            return updateObject(state, {\n                isSigningUp: true,\n                errorMsg: null,\n            });\n        case actionTypes.SIGNUP_SUCCESS:\n            return updateObject(state, {\n                isSigningUp: false,\n            });\n        case actionTypes.SIGNUP_FAILURE:\n            return updateObject(state, {\n                isSigningUp: false,\n                errorMsg: action.error.msg\n            });\n\n\n        case actionTypes.RESET_PASSWORD_REQUEST:\n            return updateObject(state, {\n            });\n        case actionTypes.RESET_PASSWORD_SUCCESS:\n            return updateObject(state, {\n            });\n        case actionTypes.RESET_PASSWORD_FAILURE:\n            return updateObject(state, {\n                errorMsg: action.error.msg\n            });\n\n\n        case actionTypes.NEW_RESET_PASSWORD_REQUEST:\n            return updateObject(state, {\n            });\n        case actionTypes.NEW_RESET_PASSWORD_SUCCESS:\n            return updateObject(state, {\n            });\n        case actionTypes.NEW_RESET_PASSWORD_FAILURE:\n            return updateObject(state, {\n                errorMsg: action.error.msg\n            });\n\n        case actionTypes.LOGOUT:\n            return updateObject(state, {\n                isLoggingIn: false,\n                isAuthenticated: false,\n                user: null,\n                errorMsg: null\n            });\n        default:\n            return state\n    }\n};","import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\nconst initialState = {assistantList: [], isLoading: false, errorMsg: null};\n\nexport const assistant = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.FETCH_ASSISTANTS_REQUEST:\n            return updateObject(state, {\n                assistantList: [],\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.FETCH_ASSISTANTS_SUCCESS:\n            return updateObject(state, {\n                assistantList: action.assistantList.assistants,\n                isLoading: false\n            });\n        case actionTypes.FETCH_ASSISTANTS_FAILURE:\n            return updateObject(state, {\n                assistantList: [],\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n\n        // Add\n        case actionTypes.ADD_ASSISTANT_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isAdding: true\n            });\n        case actionTypes.ADD_ASSISTANT_SUCCESS:\n            return updateObject(state, {\n                successMsg: action.successMsg,\n                isAdding: false\n            });\n        case actionTypes.ADD_ASSISTANT_FAILURE:\n            return updateObject(state, {\n                isAdding: false,\n                errorMsg: action.error.msg\n            });\n\n        // Update\n        case actionTypes.UPDATE_ASSISTANT_REQUEST:\n            return updateObject(state, {\n                successMsg: null,\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.UPDATE_ASSISTANT_SUCCESS:\n            return updateObject(state, {\n                successMsg: action.successMsg,\n                isLoading: false\n            });\n        case actionTypes.UPDATE_ASSISTANT_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n\n        // Delete\n        case actionTypes.DELETE_ASSISTANT_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isDeleting: true\n            });\n        case actionTypes.DELETE_ASSISTANT_SUCCESS:\n\n            let assistantList = [...state.assistantList].filter(assistant => assistant.ID !== action.assistantID);\n            console.log(assistantList);\n            return updateObject(state, {\n                successMsg: action.successMsg,\n                isDeleting: false,\n                assistantList\n            });\n        case actionTypes.DELETE_ASSISTANT_FAILURE:\n            return updateObject(state, {\n                isDeleting: false,\n                errorMsg: action.error.msg\n            });\n\n\n        case actionTypes.CHANGE_ASSISTANT_STATUS_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isStatusChanging: true\n            });\n        case actionTypes.CHANGE_ASSISTANT_STATUS_SUCCESS:\n            let newAssistantStatus = [...state.assistantList].map(assistant => {\n                if(assistant.ID === action.assistantID)\n                    assistant.Active = action.status;\n                return assistant\n            });\n\n            return updateObject(state, {\n                successMsg: action.successMsg,\n                isStatusChanging: false,\n                assistantList: newAssistantStatus\n            });\n        case actionTypes.CHANGE_ASSISTANT_STATUS_FAILURE:\n            return updateObject(state, {\n                isStatusChanging: false,\n                errorMsg: action.error.msg\n            });\n\n        case actionTypes.UPDATE_FLOW_REQUEST:\n            return updateObject(state, {\n                isUpdatingFlow: true,\n                updateFlowSuccessMsg: null,\n                updateFlowErrorMsg: null,\n            });\n        case actionTypes.UPDATE_FLOW_SUCCESS:\n\n            let newAssistantList = JSON.parse(JSON.stringify(state.assistantList));\n            newAssistantList =  newAssistantList.filter(assistant => assistant.id !== action.assistant.id);\n            newAssistantList.push(action.assistant);\n\n            return updateObject(state, {\n                isUpdatingFlow: false,\n                updateFlowSuccessMsg: action.msg,\n                assistantList: newAssistantList\n            });\n        case actionTypes.UPDATE_FLOW_FAILURE:\n            return updateObject(state, {\n                isUpdatingFlow: false,\n                updateFlowErrorMsg: action.error.msg\n            });\n\n        default:\n            return state\n    }\n};","import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\nconst initialState = {profile: {}, isLoading: false, errorMsg: null};\n\nexport const profile = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.GET_PROFILE_REQUEST:\n            return updateObject(state, {\n                profile: {},\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.GET_PROFILE_SUCCESS:\n            return updateObject(state, {\n                profile: action.profileData,\n                isLoading: false\n            });\n        case actionTypes.GET_PROFILE_FAILURE:\n            return updateObject(state, {\n                profile: {},\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n\n\n        case actionTypes.SAVE_PROFILE_DETAILS_REQUEST:\n            return updateObject(state, {\n                successMsg: null,\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.SAVE_PROFILE_DETAILS_SUCCESS:\n            return updateObject(state, {\n                successMsg: action.successMsg,\n                isLoading: false\n            });\n        case actionTypes.SAVE_PROFILE_DETAILS_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n\n\n        case actionTypes.SAVE_DATA_SETTINGS_REQUEST:\n            return updateObject(state, {\n                successMsg: null,\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.SAVE_DATA_SETTINGS_SUCCESS:\n            return updateObject(state, {\n                successMsg: action.successMsg,\n                isLoading: false\n            });\n        case actionTypes.SAVE_DATA_SETTINGS_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n        default:\n            return state\n    }\n};","import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\nconst initialState = {chatbotSessions: [], isLoading: false, errorMsg: null};\n\nexport const chatbotSessions = (state = initialState, action) => {\n    switch (action.type) {\n        // Fetching chatbot sessions\n        case actionTypes.FETCH_CHATBOT_SESSIONS_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.FETCH_CHATBOT_SESSIONS_SUCCESS:\n            return updateObject(state, {\n                chatbotSessions: action.chatbotSessions,\n                isLoading: false\n            });\n        case actionTypes.FETCH_CHATBOT_SESSIONS_FAILURE:\n            return updateObject(state, {\n                chatbotSessions: [],\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n\n        //Clearing all chatbot sessions\n        case actionTypes.CLEAR_ALL_CHATBOT_SESSIONS_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isClearingAll: true\n            });\n        case actionTypes.CLEAR_ALL_CHATBOT_SESSIONS_SUCCESS:\n            return updateObject(state, {\n                isClearingAll: false,\n                chatbotSessions: [],\n                errorMsg: null,\n            });\n        case actionTypes.CLEAR_ALL_CHATBOT_SESSIONS_FAILURE:\n            return updateObject(state, {\n                isClearingAll: false,\n                errorMsg: action.error.msg\n            });\n        default:\n            return state\n    }\n};","import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\nconst initialState = {usersList: [], isLoading: false, errorMsg: null};\n\nexport const usersManagement = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.GET_USERS_REQUEST:\n            return updateObject(state, {\n                usersList: [],\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.GET_USERS_SUCCESS:\n            return updateObject(state, {\n                usersList: action.usersData,\n                isLoading: false\n            });\n        case actionTypes.GET_USERS_FAILURE:\n            return updateObject(state, {\n                usersList: [],\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n        case actionTypes.ADD_USER_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.ADD_USER_SUCCESS:\n            return updateObject(state, {\n                isLoading: false\n            });\n        case actionTypes.ADD_USER_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n        case actionTypes.EDIT_USER_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.EDIT_USER_SUCCESS:\n            return updateObject(state, {\n                isLoading: false\n            });\n        case actionTypes.EDIT_USER_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n        case actionTypes.DELETE_USER_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.DELETE_USER_SUCCESS:\n            return updateObject(state, {\n                isLoading: false\n            });\n        case actionTypes.DELETE_USER_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n\n        default:\n            return state\n    }\n};","import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\nconst initialState = {isLoading: false, errorMsg: null, databasesList: [], fetchedDatabase:{}};\n\n\nexport const database = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.GET_DATABASES_LIST_REQUEST:\n            return updateObject(state, {\n                isLoading: true\n            });\n        case actionTypes.GET_DATABASES_LIST_SUCCESS:\n            return updateObject(state, {\n                isLoading: false,\n                databasesList: action.databasesList\n            });\n        case actionTypes.GET_DATABASES_LIST_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n\n\n        case actionTypes.FETCH_DATABASE_REQUEST:\n            return updateObject(state, {\n                isLoading: true\n            });\n        case actionTypes.FETCH_DATABASE_SUCCESS:\n            return updateObject(state, {\n                isLoading: false,\n                fetchedDatabase: action.fetchedDatabase\n            });\n        case actionTypes.FETCH_DATABASE_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n        case actionTypes.RESET_DATABASE:\n            return updateObject(state, {fetchedDatabase: {}});\n\n\n        case actionTypes.DELETE_DATABASE_REQUEST:\n            return updateObject(state, {\n                isDeletingGroup: true\n            });\n        case actionTypes.DELETE_DATABASE_SUCCESS:\n            let databasesList = [...state.databasesList];\n            const databaseToDeleteIndex =  databasesList.findIndex(db => db.ID === action.databaseID);\n            databasesList.splice(databaseToDeleteIndex, 1);\n            return updateObject(state, {\n                isDeletingGroup: false,\n                databasesList: action.databasesList\n            });\n        case actionTypes.DELETE_DATABASE_FAILURE:\n            return updateObject(state, {\n                isDeletingGroup: false,\n                errorMsg: action.error.msg\n            });\n\n\n        case actionTypes.UPLOAD_DATABASE_REQUEST:\n            return updateObject(state, {\n                isLoading: true\n            });\n        case actionTypes.UPLOAD_DATABASE_SUCCESS:\n            let updatedDatabaseList = [...state.databasesList];\n            updatedDatabaseList.push(action.newDatabase);\n            return updateObject(state, {\n                isLoading: false,\n                databasesList: updatedDatabaseList\n            });\n        case actionTypes.UPLOAD_DATABASE_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n\n        default:\n            return state\n    }\n};","import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\nconst initialState ={options: null, isLoading: false, errorMsg: null};\n\nexport const options = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.FETCH_OPTIONS_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isLoading: true,\n            });\n        case actionTypes.FETCH_OPTIONS_SUCCESS:\n            return updateObject(state, {\n                isLoading: false,\n                options: action.options\n            });\n        case actionTypes.FETCH_OPTIONS_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n        default:\n            return state\n    }\n};","import {combineReducers} from 'redux';\nimport {auth} from './auth.reducer';\nimport {assistant} from \"./assistant.reducer\";\nimport {profile} from \"./profile.reducer\";\nimport {chatbotSessions} from \"./chatbotSessions.reducer\";\nimport {usersManagement} from \"./usersManagement.reducer\";\nimport {database} from \"./database.reducer\";\nimport {options} from \"./options.reducer\";\nimport * as actionTypes from '../actions/actionTypes';\nimport storage from 'redux-persist/lib/storage'\n\n\n\n\nconst appReducer = combineReducers({\n    auth,\n    assistant,\n    profile,\n    chatbotSessions,\n    usersManagement,\n    database,\n    options,\n});\n\nconst rootReducer = (state, action) => {\n    if (action.type === actionTypes.LOGOUT) {\n        Object.keys(state).forEach(key => {\n            storage.removeItem(`persist:${key}`);\n        });\n        state = undefined\n    }\n    return appReducer(state, action)\n};\n\nexport default rootReducer;","import * as actionTypes from './actionTypes';\n\n\nfunction login (email, password) {\n    return {\n        type: actionTypes.LOGIN_REQUEST,\n        email,\n        password\n    };\n}\n\nfunction loginSuccess (user) {\n    return {\n        type: actionTypes.LOGIN_SUCCESS,\n        user\n    };\n}\n\nfunction loginFailure (error) {\n    return {\n        type: actionTypes.LOGIN_FAILURE,\n        error\n    };\n}\n\nfunction signup (signupDetails) {\n    return {\n        type: actionTypes.SIGNUP_REQUEST,\n        signupDetails\n    };\n}\n\nfunction signupSuccess () {\n    return {\n        type: actionTypes.SIGNUP_SUCCESS,\n    };\n}\n\nfunction signupFailure (error) {\n    return {\n        type: actionTypes.SIGNUP_FAILURE,\n        error\n    };\n}\n\n\nfunction resetPassword (data) {\n    return {\n        type: actionTypes.RESET_PASSWORD_REQUEST,\n        data\n    };\n}\n\nfunction resetPasswordSuccess () {\n    return {\n        type: actionTypes.RESET_PASSWORD_SUCCESS,\n    };\n}\n\nfunction resetPasswordFailure (error) {\n    return {\n        type: actionTypes.RESET_PASSWORD_FAILURE,\n        error\n    };\n}\n\n\nfunction newResetPassword (data) {\n    return {\n        type: actionTypes.NEW_RESET_PASSWORD_REQUEST,\n        data\n    };\n}\n\nfunction newResetPasswordSuccess () {\n    return {\n        type: actionTypes.NEW_RESET_PASSWORD_SUCCESS,\n    };\n}\n\nfunction newResetPasswordFailure (error) {\n    return {\n        type: actionTypes.NEW_RESET_PASSWORD_FAILURE,\n        error\n    };\n}\n\n\nconst logout = () => {\n    return {\n        type: actionTypes.LOGOUT\n    };\n};\n\nconst checkAuthTimeout = (expirationTime, refresh) => {\n    return {\n        type: actionTypes.AUTH_CHECK_TIMEOUT,\n        expirationTime, refresh\n    };\n};\n\nconst refreshToken = (refresh) => {\n    return {\n        type: actionTypes.REFRESH_TOKEN,\n        refresh\n    };\n};\n\nexport const authActions = {\n    login,\n    loginSuccess,\n    loginFailure,\n\n    signup,\n    signupSuccess,\n    signupFailure,\n\n    resetPassword,\n    resetPasswordSuccess,\n    resetPasswordFailure,\n\n    newResetPassword,\n    newResetPasswordSuccess,\n    newResetPasswordFailure,\n\n    logout,\n    refreshToken,\n    checkAuthTimeout\n};","import * as actionTypes from './actionTypes';\n\n\nconst fetchAssistants = () => {\n    return {\n        type: actionTypes.FETCH_ASSISTANTS_REQUEST\n    };\n};\n\nconst fetchAssistantsSuccess = (assistantList) => {\n    return {\n        type: actionTypes.FETCH_ASSISTANTS_SUCCESS,\n        assistantList\n    };\n};\n\nconst fetchAssistantsFailure = (error) => {\n    return {\n        type: actionTypes.FETCH_ASSISTANTS_FAILURE,\n        error\n    };\n};\n\n\nconst addAssistant = (newAssistant) => {\n    return {\n        type: actionTypes.ADD_ASSISTANT_REQUEST,\n        newAssistant\n    };\n};\n\nconst addAssistantSuccess = (successMsg) => {\n    return {\n        type: actionTypes.ADD_ASSISTANT_SUCCESS,\n        successMsg\n    };\n};\n\nconst addAssistantFailure = (error) => {\n    return {\n        type: actionTypes.ADD_ASSISTANT_FAILURE,\n        error\n    };\n};\n\nconst updateAssistant = ({assistantID, updatedSettings}) => {\n    return {\n        type: actionTypes.UPDATE_ASSISTANT_REQUEST,\n        assistantID,\n        updatedSettings\n    };\n};\n\nconst updateAssistantSuccess = (successMsg) => {\n    return {\n        type: actionTypes.UPDATE_ASSISTANT_SUCCESS,\n        successMsg\n    };\n};\n\nconst updateAssistantFailure = (error) => {\n    return {\n        type: actionTypes.UPDATE_ASSISTANT_FAILURE,\n        error\n    };\n};\n\n\n\nconst deleteAssistant = (assistantID) => {\n    return {\n        type: actionTypes.DELETE_ASSISTANT_REQUEST,\n        assistantID\n    };\n};\n\nconst deleteAssistantSuccess = (assistantID, successMsg) => {\n    return {\n        type: actionTypes.DELETE_ASSISTANT_SUCCESS,\n        assistantID,\n        successMsg\n    };\n};\n\nconst deleteAssistantFailure = (error) => {\n    return {\n        type: actionTypes.DELETE_ASSISTANT_FAILURE,\n        error\n    };\n};\n\n\nconst changeAssistantStatus = (assistantID, status) => {\n    return {\n        type: actionTypes.CHANGE_ASSISTANT_STATUS_REQUEST,\n        assistantID,\n        status\n    };\n};\n\nconst changeAssistantStatusSuccess = (successMsg, status, assistantID) => {\n    return {\n        type: actionTypes.CHANGE_ASSISTANT_STATUS_SUCCESS,\n        successMsg,\n        status,\n        assistantID\n    };\n};\n\nconst changeAssistantStatusFailure = (error) => {\n    return {\n        type: actionTypes.CHANGE_ASSISTANT_STATUS_FAILURE,\n        error\n    };\n};\n\n\nconst updateFlow = (assistant) => {\n    return {\n        type: actionTypes.UPDATE_FLOW_REQUEST,\n        assistant\n    };\n};\n\nconst updateFlowSuccess = (assistant, msg) => {\n    return {\n        type: actionTypes.UPDATE_FLOW_SUCCESS,\n        assistant,\n        msg\n    };\n};\n\nconst updateFlowFailure = (error) => {\n    return {\n        type: actionTypes.UPDATE_FLOW_FAILURE,\n        error\n    };\n};\n\nexport const assistantActions = {\n    fetchAssistants,\n    fetchAssistantsSuccess,\n    fetchAssistantsFailure,\n\n    addAssistant,\n    addAssistantSuccess,\n    addAssistantFailure,\n\n    updateAssistant,\n    updateAssistantSuccess,\n    updateAssistantFailure,\n\n    deleteAssistant,\n    deleteAssistantSuccess,\n    deleteAssistantFailure,\n\n    changeAssistantStatus,\n    changeAssistantStatusSuccess,\n    changeAssistantStatusFailure,\n\n    updateFlow,\n    updateFlowSuccess,\n    updateFlowFailure\n};","import * as actionTypes from './actionTypes';\n\nconst getDatabasesList = () => {\n    return {\n        type: actionTypes.GET_DATABASES_LIST_REQUEST,\n    }\n};\n\nconst getDatabasesListSuccess = (databasesList) => {\n    return {\n        type: actionTypes.GET_DATABASES_LIST_SUCCESS,\n        databasesList: databasesList\n    }\n};\n\nconst getDatabasesListFailure = (error) => {\n    return {\n        type: actionTypes.GET_DATABASES_LIST_FAILURE,\n        error\n    }\n};\n\n\n// Upload\nconst uploadDatabase = (newDatabase) => {\n    return {\n        type: actionTypes.UPLOAD_DATABASE_REQUEST,\n        newDatabase\n    }\n};\n\n\nconst uploadDatabaseSuccess = (successMessage, newDatabase) => {\n    return {\n        type: actionTypes.UPLOAD_DATABASE_SUCCESS,\n        successMessage,\n        newDatabase\n    }\n};\n\nconst uploadDatabaseFailure = (error) => {\n    return {\n        type: actionTypes.UPLOAD_DATABASE_FAILURE,\n        error\n    }\n};\n\n\n// Fetch\nconst fetchDatabase = (databaseID) => {\n    return {\n        type: actionTypes.FETCH_DATABASE_REQUEST,\n        databaseID\n    }\n};\n\nconst fetchDatabaseSuccess = (successMessage, fetchedDatabase) => {\n    return {\n        type: actionTypes.FETCH_DATABASE_SUCCESS,\n        successMessage,\n        fetchedDatabase\n    }\n};\n\nconst fetchDatabaseFailure = (error) => {\n    return {\n        type: actionTypes.FETCH_DATABASE_FAILURE,\n        error\n    }\n};\nconst resetFetchedDtabase = () => {\n    return {\n        type: actionTypes.RESET_DATABASE\n    }\n};\n\n// Delete\nconst DeleteDatabase = () => {\n    return {\n        type: actionTypes.DELETE_DATABASE_REQUEST,\n    }\n};\n\nconst DeleteDatabaseSuccess = (successMessage, databaseID) => {\n    return {\n        type: actionTypes.DELETE_DATABASE_SUCCESS,\n        successMessage,\n        databaseID\n    }\n};\n\nconst DeleteDatabaseFailure = (error) => {\n    return {\n        type: actionTypes.DELETE_DATABASE_FAILURE,\n        error\n    }\n};\n\nexport const databaseActions = {\n    getDatabasesList,\n    getDatabasesListSuccess,\n    getDatabasesListFailure,\n\n    uploadDatabase,\n    uploadDatabaseSuccess,\n    uploadDatabaseFailure,\n\n    fetchDatabase,\n    fetchDatabaseSuccess,\n    fetchDatabaseFailure,\n    resetFetchedDtabase,\n\n    DeleteDatabase,\n    DeleteDatabaseSuccess,\n    DeleteDatabaseFailure,\n};","import * as actionTypes from './actionTypes';\n\nconst getProfile = () => {\n    return {\n        type: actionTypes.GET_PROFILE_REQUEST\n    }\n};\n\nconst getProfileSuccess = (profile) => {\n    return {\n        type: actionTypes.GET_PROFILE_SUCCESS,\n        profileData: profile\n    }\n};\n\nconst getProfileFailure = (error) => {\n    return {\n        type: actionTypes.GET_PROFILE_FAILURE,\n        error\n    }\n};\n\nconst saveProfileDetails = (profileData) => {\n    return {\n        type: actionTypes.SAVE_PROFILE_DETAILS_REQUEST,\n        profileData\n    }\n};\n\nconst saveProfileDetailsSuccess = (successMsg) => {\n    return {\n        type: actionTypes.SAVE_PROFILE_DETAILS_SUCCESS,\n        successMsg\n    }\n};\n\nconst saveProfileDetailsFailure = (error) => {\n    return {\n        type: actionTypes.SAVE_PROFILE_DETAILS_FAILURE,\n        error\n    }\n};\n\nconst saveDataSettings = (dataSettings) => {\n    return {\n        type: actionTypes.SAVE_DATA_SETTINGS_REQUEST,\n        dataSettings\n    }\n};\n\nconst saveDataSettingsSuccess = (successMsg) => {\n    return {\n        type: actionTypes.SAVE_DATA_SETTINGS_SUCCESS,\n        successMsg\n    }\n};\n\nconst saveDataSettingsFailure = (error) => {\n    return {\n        type: actionTypes.SAVE_DATA_SETTINGS_FAILURE,\n        error\n    }\n};\n\n\nconst changePassword = (oldPassword, newPassword) => {\n    return {\n        type: actionTypes.CHANGE_PASS_REQUEST,\n        oldPassword,\n        newPassword\n    }\n};\n\nconst changePasswordSuccess = (successMsg) => {\n    return {\n        type: actionTypes.CHANGE_PASS_SUCCESS,\n        successMsg\n    }\n};\n\nconst changePasswordFailure = (error) => {\n    return {\n        type: actionTypes.CHANGE_PASS_FAILURE,\n        error\n    }\n};\n\nexport const profileActions = {\n    getProfile,\n    getProfileSuccess,\n    getProfileFailure,\n    saveProfileDetails,\n    saveProfileDetailsSuccess,\n    saveProfileDetailsFailure,\n    saveDataSettings,\n    saveDataSettingsSuccess,\n    saveDataSettingsFailure,\n\n    changePassword,\n    changePasswordSuccess,\n    changePasswordFailure,\n};","import * as actionTypes from './actionTypes';\n\n\nconst fetchChatbotSessions = (assistantID) => {\n    return {\n        type: actionTypes.FETCH_CHATBOT_SESSIONS_REQUEST,\n        assistantID\n    };\n};\n\nconst fetchChatbotSessionsSuccess = (chatbotSessions) => {\n    return {\n        type: actionTypes.FETCH_CHATBOT_SESSIONS_SUCCESS,\n        chatbotSessions\n    };\n};\n\nconst fetchChatbotSessionsFailure = (error) => {\n    return {\n        type: actionTypes.FETCH_CHATBOT_SESSIONS_FAILURE,\n        error\n    };\n};\n\n\nconst clearAllChatbotSessions = (assistantID) => {\n    return {\n        type: actionTypes.CLEAR_ALL_CHATBOT_SESSIONS_REQUEST,\n        assistantID\n    };\n};\n\nconst clearAllChatbotSessionsSuccess = () => {\n    return {\n        type: actionTypes.CLEAR_ALL_CHATBOT_SESSIONS_SUCCESS,\n    };\n};\n\nconst clearAllChatbotSessionsFailure = (error) => {\n    return {\n        type: actionTypes.CLEAR_ALL_CHATBOT_SESSIONS_FAILURE,\n        error\n    };\n};\n\n\nexport const chatbotSessionsActions = {\n    fetchChatbotSessions,\n    fetchChatbotSessionsSuccess,\n    fetchChatbotSessionsFailure,\n\n    clearAllChatbotSessions,\n    clearAllChatbotSessionsSuccess,\n    clearAllChatbotSessionsFailure\n};","import * as actionTypes from './actionTypes';\n\n\nconst getUsers = () => {\n    return {\n        type: actionTypes.GET_USERS_REQUEST\n    };\n};\n\nconst getUsersSuccess = (usersData) => {\n    return {\n        type: actionTypes.GET_USERS_SUCCESS,\n        usersData\n    };\n};\n\nconst getUsersFailure = (error) => {\n    return {\n        type: actionTypes.GET_USERS_FAILURE,\n        error\n    };\n};\n\nconst addUser = (params) => {\n    return {\n        type: actionTypes.ADD_USER_REQUEST,\n        params\n    };\n};\n\nconst addUserSuccess = (message) => {\n    return {\n        type: actionTypes.ADD_USER_SUCCESS,\n        message\n    };\n};\n\nconst addUserFailure = (error) => {\n    return {\n        type: actionTypes.ADD_USER_FAILURE,\n        error\n    };\n};\n\nconst editUser = (params) => {\n    return {\n        type: actionTypes.EDIT_USER_REQUEST,\n        params\n    };\n};\n\nconst editUserSuccess = (message) => {\n    return {\n        type: actionTypes.EDIT_USER_SUCCESS,\n        message\n    };\n};\n\nconst editUserFailure = (error) => {\n    return {\n        type: actionTypes.EDIT_USER_FAILURE,\n        error\n    };\n};\n\nconst deleteUser = (params) => {\n    return {\n        type: actionTypes.DELETE_USER_REQUEST,\n        params\n    };\n};\n\nconst deleteUserSuccess = (message) => {\n    return {\n        type: actionTypes.DELETE_USER_SUCCESS,\n        message\n    };\n};\n\nconst deleteUserFailure = (error) => {\n    return {\n        type: actionTypes.DELETE_USER_FAILURE,\n        error\n    };\n};\n\nexport const usersManagementActions = {\n    getUsers,\n    getUsersSuccess,\n    getUsersFailure,\n    addUser,\n    addUserSuccess,\n    addUserFailure,\n    editUser,\n    editUserSuccess,\n    editUserFailure,\n    deleteUser,\n    deleteUserSuccess,\n    deleteUserFailure\n};","import * as actionTypes from './actionTypes';\n\n\nfunction getOptions () {\n    return {\n        type: actionTypes.FETCH_OPTIONS_REQUEST,\n    };\n}\n\nfunction getOptionsSuccess (options) {\n    return {\n        type: actionTypes.FETCH_OPTIONS_SUCCESS,\n        options\n    };\n}\n\nfunction getOptionsFailure (error) {\n    return {\n        type: actionTypes.FETCH_OPTIONS_FAILURE,\n        error\n    };\n}\n\n\nexport const optionsActions = {\n    getOptions,\n    getOptionsSuccess,\n    getOptionsFailure,\n};","import * as actionTypes from '../actions/actionTypes';\nimport { delay } from \"redux-saga\";\nimport { put, takeEvery, takeLatest, all } from 'redux-saga/effects'\nimport {authActions, profileActions} from \"../actions\";\nimport {history, checkAuthenticity, http, successMessage} from '../../helpers'\nimport {destroyMessage, loadingMessage, errorMessage, warningMessage} from \"../../helpers/alert\";\nimport axios from 'axios';\n\n\nfunction* checkAuthTimeout({expirationTime, refresh}) {\n    yield delay(expirationTime * 1000);\n    yield put(authActions.refreshToken(refresh));\n}\n\nfunction* watchCheckAuthTimeout() {\n    yield takeEvery(actionTypes.AUTH_CHECK_TIMEOUT, checkAuthTimeout)\n}\n\n\n// Login\nfunction* login({email, password}) {\n    try {\n        loadingMessage('Logging you in...');\n        const res = yield axios.post(`/api/auth`, {email, password}, {\n            headers: {'Content-Type': 'application/json'},\n        });\n\n        const {user, token, refresh, expiresIn} = yield res.data.data;\n        yield localStorage.setItem(\"user\", JSON.stringify(user));\n        yield localStorage.setItem(\"token\", token);\n        yield localStorage.setItem(\"refresh\", refresh);\n        yield localStorage.setItem(\"expiresIn\", expiresIn);\n        // When access token expires in seconds\n        const secondsToExpire = yield (new Date(expiresIn).getTime() - new Date().getTime()) / 1000;\n        // Dispatch actions\n        yield destroyMessage();\n        yield put(profileActions.getProfile());\n        yield put(authActions.loginSuccess(user));\n        yield put(authActions.checkAuthTimeout(secondsToExpire, refresh)); // refresh to access token when expired\n        // Redirect to dashboard page\n        yield history.push('/dashboard');\n\n    } catch (error) {\n        console.log(error);\n        yield put(authActions.loginFailure(error.response.data));\n        yield errorMessage(error.response.data.msg, 0);\n\n\n    }\n}\n\nfunction* watchLogin() {\n    yield takeLatest(actionTypes.LOGIN_REQUEST, login)\n}\n\n// Signup\nfunction* signup({signupDetails}) {\n\n    try {\n        loadingMessage('Creating your account', 0);\n        const res = yield axios.post(`/api/signup`, {...signupDetails}, {\n            headers: {'Content-Type': 'application/json'},\n        });\n        console.log(res);\n        yield successMessage('Account created');\n        yield put(authActions.signupSuccess());\n\n        yield history.push('/login');\n        yield warningMessage('Please verify your account', 0);\n\n    } catch (error) {\n        console.log(error);\n        yield put(authActions.signupFailure(error.response.data));\n        yield errorMessage(error.response.data.msg, 0);\n    }\n}\n\nfunction* watchSignup() {\n    yield takeLatest(actionTypes.SIGNUP_REQUEST, signup)\n}\n\n\n// Reset Password\nfunction* forgetPassword({data}) {\n    try {\n        loadingMessage('Sending reset password email...', 0);\n        yield axios.post(`/api/reset_password`, {...data}, {\n            headers: {'Content-Type': 'application/json'},\n        });\n        yield successMessage('Email to reset your password has been sent');\n        yield put(authActions.resetPasswordSuccess());\n\n    } catch (error) {\n        console.log(error);\n        yield errorMessage('Could not send reset password email', 0);\n        yield put(authActions.resetPasswordFailure(error.response.data));\n    }\n}\n\nfunction* watchForgetPassword() {\n    yield takeLatest(actionTypes.RESET_PASSWORD_REQUEST, forgetPassword)\n}\n\nfunction* newResetPassword({data}) {\n    try {\n        loadingMessage('Saving new password...', 0);\n        yield axios.post(`/api/reset_password/`+data[\"payload\"], {...data}, {\n            headers: {'Content-Type': 'application/json'},\n        });\n        yield successMessage('The password for your account has been updated');\n        yield put(authActions.newResetPasswordSuccess());\n        yield history.push('/login');\n        yield successMessage('Login using your new password', 0);\n\n    } catch (error) {\n        console.log(error);\n        yield errorMessage('Could not update account password', 0);\n        yield put(authActions.newResetPasswordFailure(error.response.data));\n    }\n}\n\nfunction* watchNewResetPassword() {\n    yield takeLatest(actionTypes.NEW_RESET_PASSWORD_REQUEST, newResetPassword)\n}\n\n\n// Logout\nfunction* logout() {\n    // Clear local storage from user, token...\n    yield localStorage.clear();\n    yield history.push('/login');\n    yield successMessage('You have been logged out');\n\n}\n\nfunction* watchLogout() {\n    yield takeLatest(actionTypes.LOGOUT, logout)\n}\n\n\nfunction* refreshToken({refresh}) {\n    try {\n        if(!checkAuthenticity()){throw new Error('Authentication Failed!')}\n        const res = yield axios.post(`/api/auth/refresh`, null,{\n            headers: {'Authorization': 'Bearer ' + refresh},\n        });\n\n        const {token, expiresIn} = res.data.data;\n        yield localStorage.setItem(\"token\", token);\n        yield localStorage.setItem(\"expiresIn\", expiresIn);\n        const secondsToExpire = yield (new Date(expiresIn).getTime() - new Date().getTime()) / 1000;\n        yield put(authActions.checkAuthTimeout(secondsToExpire, refresh));\n\n\n    } catch (error) {\n        console.log(error);\n        // Log the user out\n        yield put(authActions.logout());\n    }\n}\n\nfunction* watchRefreshToken() {\n    yield takeEvery(actionTypes.REFRESH_TOKEN, refreshToken)\n}\n\nexport function* authSaga() {\n    yield all([\n        watchLogin(),\n        watchSignup(),\n        watchForgetPassword(),\n        watchLogout(),\n        watchCheckAuthTimeout(),\n        watchRefreshToken(),\n        watchNewResetPassword()\n    ])\n}\n","import {put, takeEvery,takeLatest, all} from 'redux-saga/effects'\nimport * as actionTypes from '../actions/actionTypes';\nimport {assistantActions, flowActions} from \"../actions\";\nimport {http, destroyMessage, loadingMessage, successMessage, errorMessage} from \"../../helpers\";\n\n\nfunction* fetchAssistants() {\n    try {\n        const res = yield http.get(`/assistants`);\n        yield put(assistantActions.fetchAssistantsSuccess(res.data.data));\n    } catch (error) {\n        console.log(error);\n        yield errorMessage(error.response.data.msg);\n        yield put(assistantActions.fetchAssistantsFailure(error.response.data));\n    }\n\n}\n\nfunction* addAssistant({type, newAssistant}) {\n    try {\n        loadingMessage('Removing all sessions...', 0);\n        const res = yield http.post(`/assistants`, newAssistant);\n        yield put(assistantActions.addAssistantSuccess(res.data.msg));\n        yield put(assistantActions.fetchAssistants());\n        yield successMessage('Assistant added!');\n\n    } catch (error) {\n        console.log(error);\n        yield errorMessage(error.response.data.msg);\n        yield put(assistantActions.addAssistantFailure(error.response.data));\n    }\n}\n\nfunction* updateAssistant({assistantID, updatedSettings}) {\n    try {\n        const res = yield http.put(`assistant/${assistantID}`, updatedSettings);\n        yield put(assistantActions.updateAssistantSuccess(res.data.msg));\n        yield put(assistantActions.fetchAssistants());\n        yield successMessage('Assistant updated!');\n    } catch (error) {\n        console.log(error);\n        yield errorMessage(error.response.data.msg);\n        yield put(assistantActions.updateAssistantFailure(error.response.data));\n\n    }\n}\n\n\nfunction* deleteAssistant({assistantID}) {\n    try {\n        loadingMessage('Removing assistant...', 0);\n        const res = yield http.delete(`/assistant/${assistantID}`);\n        yield put(assistantActions.deleteAssistantSuccess(assistantID, res.data.msg));\n        yield successMessage('Assistant deleted');\n    } catch (error) {\n        console.log(error);\n        yield put(assistantActions.deleteAssistantFailure(error.response.data));\n        yield errorMessage(\"Error in deleting assistant\");\n    }\n}\n\n\nfunction* updateFlow({assistant}) {\n    try {\n        loadingMessage('Updating Flow', 0);\n\n        const res = yield http.put(`/assistant/${assistant.ID}/flow`, {flow: assistant.Flow});\n        yield successMessage('Flow Updated');\n        yield put(assistantActions.updateFlowSuccess(assistant, res.data.msg));\n    } catch (error) {\n        console.log(error);\n        yield put(assistantActions.updateFlowFailure(error.response.data));\n        yield errorMessage(\"Error in updating flow\");\n    }\n}\n\nfunction* updateStatus({status, assistantID}) {\n    try {\n        loadingMessage('Updating Status', 0);\n        const res = yield http.put(`/assistant/${assistantID}/status`, {status});\n        yield destroyMessage();\n        yield successMessage('Status Updated');\n        yield put(assistantActions.changeAssistantStatusSuccess('Status updated successfully',\n                                                                            status, assistantID));\n    } catch (error) {\n        console.log(error);\n        yield put(assistantActions.changeAssistantStatusFailure(error.response.data));\n        yield destroyMessage();\n        yield errorMessage(\"Error in updating assistant status\");\n    }\n}\n\n\nfunction* watchUpdateStatus() {\n    yield takeLatest(actionTypes.CHANGE_ASSISTANT_STATUS_REQUEST, updateStatus)\n}\n\nfunction* watchUpdateFlow() {\n    yield takeLatest(actionTypes.UPDATE_FLOW_REQUEST, updateFlow)\n}\n\nfunction* watchFetchAssistants() {\n    yield takeEvery(actionTypes.FETCH_ASSISTANTS_REQUEST, fetchAssistants)\n}\n\nfunction* watchAddAssistant() {\n    yield takeEvery(actionTypes.ADD_ASSISTANT_REQUEST, addAssistant)\n}\n\nfunction* watchUpdateAssistant() {\n    yield takeEvery(actionTypes.UPDATE_ASSISTANT_REQUEST, updateAssistant)\n}\n\nfunction* watchDeleteAssistant() {\n    yield takeEvery(actionTypes.DELETE_ASSISTANT_REQUEST, deleteAssistant)\n}\n\n\nexport function* assistantSaga() {\n    yield all([\n        watchFetchAssistants(),\n        watchAddAssistant(),\n        watchUpdateAssistant(),\n        watchDeleteAssistant(),\n        watchUpdateFlow(),\n        watchUpdateStatus(),\n\n    ])\n}","import {put, takeEvery, all} from 'redux-saga/effects'\nimport * as actionTypes from '../actions/actionTypes';\nimport {http, updateUsername} from \"../../helpers\";\nimport {profileActions} from \"../actions\";\nimport {alertError, alertSuccess, destroyMessage, loadingMessage, errorMessage, successMessage} from \"../../helpers/alert\";\n\n\n\nfunction* getProfileData() {\n    try {\n        const res = yield http.get(`/profile`);\n        const profile = res.data.data;\n        // Update username in localStorage\n        yield updateUsername(profile.user.Firstname, profile.user.Surname);\n        return yield put(profileActions.getProfileSuccess(profile))\n\n    } catch (error) {\n        console.log(error);\n        return yield put(profileActions.getProfileFailure(error.response.data));\n    }\n\n}\n\nfunction* saveProfileData(action) {\n    try {\n        loadingMessage('Saving profile...', 0);\n        const res = yield http.post(`/profile`, action.profileData);\n        yield put(profileActions.saveProfileDetailsSuccess(res.data.msg));\n        yield successMessage('Profile saved');\n\n        return yield put(profileActions.getProfile())\n    } catch (error) {\n        console.log(error);\n        yield put(profileActions.saveProfileDetailsFailure(error.response.data));\n        yield errorMessage(\"Couldn't save your profile\");\n    }\n}\n\nfunction* saveDataSettings(action) {\n    try {\n        loadingMessage('Saving Data Settings...', 0);\n        const res = yield http.post(`/profile/settings`, action.dataSettings);\n        yield put(profileActions.saveDataSettingsSuccess(res.data.msg));\n        yield successMessage('Data Settings saved');\n        return yield put(profileActions.getProfile())\n    } catch (error) {\n        console.log(error);\n        yield put(profileActions.saveDataSettingsFailure(error.response.data));\n        yield errorMessage(\"Couldn't your settings\");\n    }\n}\n\nfunction* changePassword({newPassword, oldPassword}) {\n    try {\n        loadingMessage('Updating passwords...', 0);\n        const res = yield http.post(`/profile/password`, {newPassword, oldPassword});\n        yield put(profileActions.changePasswordSuccess(res.data.msg));\n        yield successMessage('Password updated');\n\n    } catch (error) {\n        console.log(error);\n        yield put(profileActions.changePasswordFailure(error.response.data));\n        yield errorMessage(error.response.data.msg);\n    }\n}\n\n\nfunction* watchProfileRequests(){\n    yield takeEvery(actionTypes.GET_PROFILE_REQUEST, getProfileData)\n}\n\nfunction* watchProfileUpdates() {\n    yield takeEvery(actionTypes.SAVE_PROFILE_DETAILS_REQUEST, saveProfileData)\n}\n\nfunction* watchDataSettingsUpdates() {\n    yield takeEvery(actionTypes.SAVE_DATA_SETTINGS_REQUEST, saveDataSettings)\n}\n\nfunction* watchChangePassword(){\n    yield takeEvery(actionTypes.CHANGE_PASS_REQUEST, changePassword)\n}\n\nexport function* profileSaga() {\n    yield all([\n        watchProfileRequests(),\n        watchProfileUpdates(),\n        watchDataSettingsUpdates(),\n        watchChangePassword(),\n    ])\n}","import {put, takeEvery, all} from 'redux-saga/effects'\nimport * as actionTypes from '../actions/actionTypes';\nimport {chatbotSessionsActions} from \"../actions\";\nimport {http, destroyMessage, successMessage, errorMessage, loadingMessage} from \"../../helpers\";\n\nfunction* fetchChatbotSessions({assistantID}) {\n    try {\n        const res = yield http.get(`/assistant/${assistantID}/chatbotSessions`);\n        return yield put(chatbotSessionsActions.fetchChatbotSessionsSuccess(res.data.data))\n    } catch (error) {\n        console.log(error);\n        return yield put(chatbotSessionsActions.fetchChatbotSessionsFailure(error));\n    }\n}\n\nfunction* watchFetchChatbotSessions() {\n    yield takeEvery(actionTypes.FETCH_CHATBOT_SESSIONS_REQUEST, fetchChatbotSessions)\n}\n\nfunction* clearAllChatbotSessions({assistantID}) {\n    try {\n        loadingMessage('Removing all sessions...', 0);\n        const res = yield http.delete(`/assistant/${assistantID}/chatbotSessions`);\n        yield put(chatbotSessionsActions.clearAllChatbotSessionsSuccess());\n        yield successMessage('All sessions cleared');\n    } catch (error) {\n        console.log(error);\n        yield put(chatbotSessionsActions.clearAllChatbotSessionsFailure(error));\n        yield errorMessage(error.response.data.msg);\n    }\n}\n\nfunction* watchClearAllChatbotSessions() {\n    yield takeEvery(actionTypes.CLEAR_ALL_CHATBOT_SESSIONS_REQUEST, clearAllChatbotSessions)\n}\n\n\nexport function* chatbotSessions() {\n    yield all([\n        watchFetchChatbotSessions(),\n        watchClearAllChatbotSessions(),\n    ])\n}","import {put, takeEvery, all} from 'redux-saga/effects'\nimport * as actionTypes from '../actions/actionTypes';\nimport {solutionsActions, usersManagementActions} from \"../actions\";\nimport {http, alertError, alertSuccess, destroyMessage, loadingMessage, successMessage, errorMessage} from \"../../helpers\";\n\nfunction* getUsers() {\n    try {\n        const res = yield http.get(`/users`);\n        return yield put(usersManagementActions.getUsersSuccess(res.data.data))\n    } catch (error) {\n        console.log(error);\n        return yield put(usersManagementActions.getUsersFailure(error.response.data));\n    }\n}\n\nfunction* addUser(action) {\n    try {\n        loadingMessage('Adding new user...');\n        const res = yield http.put(`/user`, action.params.user);\n\n        yield successMessage('User Added');\n        yield put(usersManagementActions.addUserSuccess(res.message));\n        yield put(usersManagementActions.getUsers());\n    } catch (error) {\n        console.log(error.response);\n        yield errorMessage('Error in adding User');\n        yield put(usersManagementActions.addUserFailure(error.response.data));\n    }\n}\n\nfunction* editUser(action) {\n    try {\n        loadingMessage('Editing user...');\n        const res = yield http.post(`/user`, action.params.user);\n\n        yield successMessage('User edited');\n        yield put(usersManagementActions.editUserSuccess(res.message));\n        yield put(usersManagementActions.getUsers())\n    } catch (error) {\n        console.log(error.response);\n        yield errorMessage('Error in editing user');\n        yield put(usersManagementActions.editUserFailure(error.response.data));\n    }\n}\n\nfunction* deleteUser(action) {\n    try {\n        loadingMessage('Deleting user...');\n        const res = yield http.post(`/user_delete`, action.params.user);\n\n        yield successMessage('User deleted');\n        yield put(usersManagementActions.deleteUserSuccess(res.message));\n        yield put(usersManagementActions.getUsers())\n    } catch (error) {\n        console.log(error.response);\n        yield errorMessage('Error in deleting User');\n        yield put(usersManagementActions.deleteUserFailure(error.response.data));\n    }\n}\n\n\nfunction* watchGetUsers() {\n    yield takeEvery(actionTypes.GET_USERS_REQUEST, getUsers)\n}\n\nfunction* watchAddUser() {\n    yield takeEvery(actionTypes.ADD_USER_REQUEST, addUser)\n}\n\nfunction* watchEditUser() {\n    yield takeEvery(actionTypes.EDIT_USER_REQUEST, editUser)\n}\n\nfunction* watchDeleteUser() {\n    yield takeEvery(actionTypes.DELETE_USER_REQUEST, deleteUser)\n}\n\n\nexport function* usersManagementSaga() {\n    yield all([\n        watchGetUsers(),\n        watchAddUser(),\n        watchEditUser(),\n        watchDeleteUser(),\n    ])\n}","import * as actionTypes from '../actions/actionTypes';\nimport {put, takeEvery, takeLatest, all} from 'redux-saga/effects'\nimport {databaseActions, flowActions} from \"../actions\";\nimport {http, successMessage, loadingMessage, errorMessage} from \"../../helpers\";\n\n\nfunction* getDatabasesList() {\n    try {\n        loadingMessage('Loading databases list');\n        const res = yield http.get(`/databases`);\n        yield put(databaseActions.getDatabasesListSuccess(res.data.data));\n        successMessage('Databases loaded')\n    } catch (error) {\n        console.log(error);\n        yield put(databaseActions.getDatabasesListFailure(error.response.data));\n        yield errorMessage(\"Couldn't load databases list\");\n\n    }\n}\n\nfunction* watchGetDatabaseList() {\n    yield takeLatest(actionTypes.GET_DATABASES_LIST_REQUEST, getDatabasesList)\n}\n\nfunction* fetchDatabase({databaseID}) {\n    try {\n        loadingMessage('Loading database...', 0);\n        const res = yield http.get(`/databases/${databaseID}`);\n        yield put(databaseActions.fetchDatabaseSuccess(res.data.msg, res.data.data));\n        yield successMessage('Database loaded');\n    } catch (error) {\n        console.log(error);\n        yield errorMessage(\"Couldn't load database\");\n        yield put(databaseActions.fetchDatabaseFailure(error.response.data));\n    }\n}\n\nfunction* watchFetchDatabase() {\n    yield takeLatest(actionTypes.FETCH_DATABASE_REQUEST, fetchDatabase)\n}\n\nfunction* uploadDatabase({newDatabase}) {\n    try {\n        yield loadingMessage('Uploading database...', 0);\n        const res = yield http.post(`/databases`, newDatabase);\n\n        yield successMessage('Database uploaded');\n        yield put(databaseActions.uploadDatabaseSuccess(res.data.msg, res.data.data));\n\n    } catch (error) {\n        console.log(error);\n        yield put(databaseActions.uploadDatabaseFailure(error.response.data));\n        yield errorMessage(\"Couldn't upload database\");\n    }\n}\n\nfunction* watchAddDatabase() {\n    yield takeLatest(actionTypes.UPLOAD_DATABASE_REQUEST, uploadDatabase)\n}\n\nexport function* databaseSaga() {\n    yield all([\n        watchGetDatabaseList(),\n        watchFetchDatabase(),\n        watchAddDatabase()\n    ])\n}\n","import {put, takeEvery, all} from 'redux-saga/effects'\nimport * as actionTypes from '../actions/actionTypes';\nimport {optionsActions} from \"../actions\";\nimport {http} from \"../../helpers\";\n\n\nfunction* fetchOptions() {\n    try {\n        const res = yield http.get(`/options`);\n        yield put(optionsActions.getOptionsSuccess(res.data.data));\n    } catch (error) {\n        console.log(error);\n        return yield put(optionsActions.getOptionsFailure(error.response.data));\n    }\n\n}\n\nfunction* watchFetchOptions() {\n    yield takeEvery(actionTypes.FETCH_OPTIONS_REQUEST, fetchOptions)\n}\n\n\nexport function* optionsSaga() {\n    yield all([\n        watchFetchOptions(),\n    ])\n}","import {createStore, applyMiddleware, compose} from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { persistStore, persistReducer } from 'redux-persist'\nimport storage from 'redux-persist/lib/storage'\nimport rootReducer from './reducers';\nimport {\n    assistantSaga,\n    authSaga,\n    profileSaga,\n    chatbotSessions,\n    usersManagementSaga,\n    databaseSaga,\n    optionsSaga\n} from './sagas'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst sagaMiddleware = createSagaMiddleware();\nconst persistConfig = {\n    key: 'root',\n    storage,\n    blacklist: ['auth', 'database']\n};\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\n\nconst store = createStore(\n    persistedReducer,\n    composeEnhancers(applyMiddleware(sagaMiddleware))\n);\nconst persistor = persistStore(store);\n\n\nsagaMiddleware.run(assistantSaga);\nsagaMiddleware.run(authSaga);\nsagaMiddleware.run(profileSaga);\nsagaMiddleware.run(chatbotSessions);\nsagaMiddleware.run(usersManagementSaga);\nsagaMiddleware.run(databaseSaga);\nsagaMiddleware.run(optionsSaga);\n\nexport { store, persistor }\n\n","import axios from 'axios';\nimport {authHeader} from './auth';\nimport { store, persistor} from '../store/store'\nimport { authActions } from \"../store/actions\";\n\nexport const http = axios.create({\n    baseURL: '/api',\n    headers: {'Content-Type': 'application/json'},\n});\n\nhttp.interceptors.request.use(\n    function (config) {\n        const header = authHeader();\n        if (!header) throw new Error('Token required!');  \n        config.headers = header;\n        return config;\n    },\n    function (error) {\n        console.log(error);\n        return Promise.reject(error);\n    }\n);\n\nhttp.interceptors.response.use(response => {\n    return response;\n}, error => {\n    if (error.response.status === 401) {\n        console.log('Axios Unauthorised');\n        store.dispatch(authActions.logout());\n    }\n    return Promise.reject(error);\n});","import Hashids from \"hashids\";\n\nconst hashids = new Hashids(\"b9iLXiAa\", 5);\n\nconst encode = (param) => {\n    return hashids.encode(param);\n};\n\nconst decode = (param) => {\n    return hashids.decode(param);\n};\n\n\nexport const hasher = {\n    encode,\n    decode\n};","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport {checkAuthenticity} from  '../helpers'\n\nexport const PrivateRoute = ({ component: Component, ...rest }) => {\n    console.log(\"Check Authenticity\", checkAuthenticity());\n    return (\n        <Route {...rest} render={props => (\n            checkAuthenticity()\n                ? <Component {...props} />\n                : <Redirect to={{pathname: '/login', state: {from: props.location}}}/>\n        )}/>\n    )\n}","import React, {Component} from 'react';\nimport {Button, Form, Input, InputNumber, Modal, Slider, Switch} from \"antd\";\n\nconst FormItem = Form.Item;\n\n\nclass AssistantSettingsModal extends Component {\n    state = {\n        isPopupDisabled: this.props.assistant.SecondsUntilPopup <= 0,\n        isAlertsEnabled: this.props.assistant.MailEnabled,\n        alertOptions: {0: \"Immediately\", 4: \"4 hours\", 8: \"8 hours\", 12: \"12 hours\", 24: \"24 hours\"}\n    };\n\n    togglePopupSwitch = () => {\n        this.setState({isPopupDisabled: !this.state.isPopupDisabled})\n    };\n\n    toggleAlertsSwitch = () => {\n        this.setState({isAlertsEnabled: !this.state.isAlertsEnabled})\n    };\n\n\n    componentDidMount() {\n        this.setState({\n            inputValue: this.props.assistant.SecondsUntilPopup\n        });\n    }\n\n    handleSave = () => {\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                if (this.state.isPopupDisabled) {\n                    values.secondsUntilPopup = 0\n                }\n                values[\"alertsEnabled\"] = this.state.isAlertsEnabled;\n\n                this.props.handleSave(values)\n            }\n        });\n    };\n\n    render() {\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        };\n\n        const alertsKeys = Object.keys(this.state.alertOptions);\n        const maxAlertsLength = parseInt(alertsKeys[alertsKeys.length - 1]);\n\n        const {getFieldDecorator} = this.props.form;\n        const {assistant} = this.props;\n\n        const {inputValue} = this.state;\n\n        return (\n            <Modal\n                title=\"Edit Assistant\"\n                visible={this.props.visible}\n                width={800}\n                destroyOnClose={true}\n                onCancel={this.props.handleCancel}\n                footer={[\n                    <Button key=\"delete\" type=\"danger\" onClick={this.props.handleDelete}>\n                        Delete\n                    </Button>,\n                    <Button key=\"cancel\" onClick={this.props.handleCancel}>Cancel</Button>,\n                    <Button key=\"submit\" type=\"primary\" onClick={this.handleSave}>\n                        Save\n                    </Button>,\n                ]}>\n\n                <Form layout='horizontal'>\n                    <FormItem\n                        label=\"Assistant Name\"\n                        extra=\"Enter a name for your assistant to easily identify it in the dashboard\"\n                        {...formItemLayout}>\n                        {\n                            getFieldDecorator('assistantName', {\n                                initialValue: assistant.Name,\n                                rules: [{\n                                    required: true,\n                                    message: 'Please input your assistant name',\n                                }],\n                            })\n                            (<Input placeholder=\"Ex: My first assistant, Sales Assistant\"/>)\n                        }\n                    </FormItem>\n\n                    <FormItem\n                        label=\"Welcome Message\"\n                        extra=\"This will be sent as first message\"\n                        {...formItemLayout}>\n\n                        {\n                            getFieldDecorator('welcomeMessage', {\n                                initialValue: assistant.Message,\n                                rules: [{\n                                    required: true,\n                                    message: 'Please input your welcome message',\n                                }],\n                            })(\n                                <Input placeholder=\"Ex: Hey there, Welcome visitor\"/>\n                            )\n                        }\n                    </FormItem>\n\n                    <FormItem\n                        label=\"Header Title\"\n                        extra=\"This will apear on top of your chatbot\"\n                        {...formItemLayout}>\n                        {\n                            getFieldDecorator('topBarTitle', {\n                                initialValue: assistant.TopBarText,\n                                rules: [{\n                                    required: true,\n                                    message: 'Please input your header title',\n                                }],\n                            })(\n                                <Input placeholder=\"Ex: Recruiter Bot\"/>\n                            )\n                        }\n                    </FormItem>\n\n                    <FormItem\n                        {...formItemLayout}\n                        label=\"Time to Popup\"\n                        extra=\"This will enforce the assistants' (chatbot) to popup automatically\"\n                    >\n                        <Switch checked={!this.state.isPopupDisabled} onChange={this.togglePopupSwitch}\n                                style={{marginRight: '5px'}}/>\n                        {getFieldDecorator('secondsUntilPopup', {initialValue: assistant.SecondsUntilPopup === 0 ? 1 : assistant.SecondsUntilPopup})(\n                            <InputNumber disabled={this.state.isPopupDisabled} min={1}/>\n                        )}\n                        <span className=\"ant-form-text\"> seconds</span>\n                    </FormItem>\n\n                    <FormItem\n                        {...formItemLayout}\n                        label=\"New Record Alert\"\n                        extra=\"Turning this on will make the assistant alert you when it has been used\"\n                    >\n                        <Switch checked={this.state.isAlertsEnabled} onChange={this.toggleAlertsSwitch}\n                                style={{marginRight: '5px'}}/>\n                    </FormItem>\n\n                    <FormItem\n                        {...formItemLayout}\n                        label=\"Alerts Every:\"\n                        extra=\"Select in what period of time the bot to check for new records and alert you. Note: 'Immediately' could spam your email if your assistant is used a lot\"\n                    >\n                        {getFieldDecorator('alertEvery', {\n                            initialValue: this.props.assistant.MailPeriod\n                        })(\n                            <Slider\n                                max={maxAlertsLength}\n                                disabled={!this.state.isAlertsEnabled}\n                                marks={this.state.alertOptions} step={null}/>\n                        )}\n                    </FormItem>\n\n                 </Form>\n            </Modal>\n        );\n    }\n}\n\nexport default Form.create()(AssistantSettingsModal)\n","import React, {Component} from 'react';\nimport connect from \"react-redux/es/connect/connect\";\nimport {assistantActions} from \"../../../../../store/actions\";\nimport AssistantSettingsModal from \"./AssistantSettingsModal/AssistantSettingsModal\";\nimport {Modal} from \"antd\";\n\nconst confirm = Modal.confirm;\n\n\nclass AssistantSettings extends Component {\n\n    handleSave = (updatedSettings) => {\n        this.props.hideModal();\n        // dispatch redux action\n        this.props.dispatch(assistantActions.updateAssistant({\n            assistantID: this.props.assistant.ID,\n            updatedSettings: updatedSettings\n        }));\n    };\n\n    ////// DELETE GROUP\n    handleDelete = (deletedAssistant) => {\n        confirm({\n            title: `Delete assistant confirmation`,\n            content: `If you click OK, this assistant will be deleted with its associated data forever`,\n            onOk: () => {\n                this.props.dispatch(assistantActions.deleteAssistant(this.props.assistant.ID));\n                this.props.hideModal();\n            }\n        });\n    };\n\n    render() {\n        return (\n            <AssistantSettingsModal assistant={this.props.assistant} visible={this.props.visible}\n                                    handleSave={this.handleSave} handleCancel={this.props.hideModal}\n                                    handleDelete={this.handleDelete}/>\n        )\n    }\n\n}\n\nconst mapStateToProps = (state) => ({\n    isLoading: state.assistant.isLoading,\n});\nexport default connect(mapStateToProps)(AssistantSettings);\n","import React, {Component} from 'react';\nimport {Card, Dropdown, Icon, Menu, Switch} from 'antd';\nimport {Link} from \"react-router-dom\";\nimport AssistantSettings from \"./AssistantSettings/AssistantSettings\";\nimport {assistantActions} from \"../../../../store/actions/assistant.actions\";\n\nconst {Meta} = Card;\n\nconst menu = (assistant) => (\n    <Menu>\n        <Menu.Item key=\"1\">\n            <Link to={{\n                      pathname: `assistants/${assistant.ID}/sessions`,\n                      state: {assistant: assistant}\n                  }}>\n                <Icon type=\"code\"/> Conversations\n            </Link>\n        </Menu.Item>\n        <Menu.Item key=\"2\">\n            <Link to={{\n                      pathname: `assistants/${assistant.ID}/analytics`,\n                      state: {assistant: assistant}\n                  }}>\n                <Icon type=\"line-chart\"/> Analytics\n            </Link>\n        </Menu.Item>\n        <Menu.Divider/>\n        <Menu.Item key=\"3\">\n            <Link to={{\n                      pathname: `assistants/${assistant.ID}/integration`,\n                      state: {assistant: assistant}\n                  }}>\n                <Icon type=\"sync\"/> Integration\n            </Link>\n        </Menu.Item>\n    </Menu>\n);\n\nconst covers = [\n    // 'https://42f2671d685f51e10fc6-b9fcecea3e50b3b59bdc28dead054ebc.ssl.cf5.rackcdn.com/illustrations/voice_control_ofo1.svg',\n    // 'https://42f2671d685f51e10fc6-b9fcecea3e50b3b59bdc28dead054ebc.ssl.cf5.rackcdn.com/illustrations/group_chat_v059.svg',\n    // 'https://42f2671d685f51e10fc6-b9fcecea3e50b3b59bdc28dead054ebc.ssl.cf5.rackcdn.com/illustrations/status_update_jjgk.svg',\n    'https://42f2671d685f51e10fc6-b9fcecea3e50b3b59bdc28dead054ebc.ssl.cf5.rackcdn.com/illustrations/messages1_9ah2.svg'\n];\n\n\nclass Assistant extends Component {\n\n    state = {visible: false};\n\n    showModal = () => {\n        this.setState({\n            visible: true,\n        });\n    };\n\n    hideModal = () => {\n        this.setState({\n            visible: false,\n        });\n    };\n\n    onActiveChanged = (checked) => this.props.activeHandler(checked, this.props.assistant.ID);\n\n    render() {\n        const {assistant, isStatusChanging} = this.props;\n        return (\n            <>\n                <Card loading={this.props.isLoading} style={{width: 300, margin: 15, float: 'left', height: 369}}\n                      cover={\n                          <img alt=\"example\"\n                               height={200}\n                               width=\"100%\"\n                               src={covers[Math.floor(Math.random() * covers.length)]}/>\n                      }\n                      title={assistant.Name}\n                      extra={<Switch loading={isStatusChanging} checked={assistant.Active} onChange={this.onActiveChanged}/>}\n                      actions={[\n                          <div onClick={this.showModal}>\n                              <Icon type=\"setting\"/>\n                              <span> Settings</span>\n                          </div>,\n\n                          <div>\n                              <Link to={{\n                                      pathname: `assistants/${assistant.ID}/flow`,\n                                      state: {assistant: assistant}\n                                  }}>\n                                  <Icon type=\"build\"/>\n                                  <span> Flow</span>\n                              </Link>\n                          </div>,\n\n                          <Dropdown overlay={menu(assistant)} trigger={['click']}>\n                              <a className=\"ant-dropdown-link\">\n                                  ...\n                              </a>\n                          </Dropdown>]}>\n                    <Meta description={assistant.TopBarText}/>\n                </Card>\n\n                <AssistantSettings assistant={assistant}\n                                   hideModal={this.hideModal}\n                                   visible={this.state.visible}/>\n\n            </>\n        )\n    }\n}\n\nexport default Assistant;\n","import React, {Component} from 'react';\n\nimport {Button, Form, Input, Modal, Select, InputNumber, message, Switch, Slider} from 'antd';\nimport {connect} from \"react-redux\";\nimport {assistantActions} from \"../../../../store/actions\";\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\n\nconst loading = () => {\n    message.loading('Adding assistant', 0);\n};\n\nclass NewAssistantModal extends Component {\n\n    state = {\n        isPopupDisabled: true,\n        isAlertsEnabled: false,\n        alertOptions: {0: \"Immediately\", 4: \"4 hours\", 8: \"8 hours\", 12: \"12 hours\", 24: \"24 hours\"}\n    };\n\n    togglePopupSwitch = () => {\n        this.setState({isPopupDisabled: !this.state.isPopupDisabled})\n    };\n\n    toggleAlertsSwitch = () => {\n        this.setState({isAlertsEnabled: !this.state.isAlertsEnabled})\n    };\n\n    handleAdd = () => {\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                if(this.state.isPopupDisabled) {values.secondsUntilPopup = 0}\n                values[\"alertsEnabled\"] = this.state.isAlertsEnabled;\n                console.log(values);\n                // send to server\n                this.props.dispatch(assistantActions.addAssistant(values));\n                loading();\n            }\n        });\n    };\n\n    componentDidUpdate(prevProps) {\n        if (!this.props.isAdding && this.props.isAdding !== prevProps.isAdding) {\n            this.props.hideModal();\n            message.destroy();\n            message.success(this.props.successMsg)\n        }\n    }\n\n\n    render() {\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        };\n\n        const alertsKeys = Object.keys(this.state.alertOptions);\n        const maxAlertsLength = parseInt(alertsKeys[alertsKeys.length - 1]);\n\n        const {getFieldDecorator} = this.props.form;\n\n        return (\n            <Modal\n                width={800}\n                title=\"Create New Assistant\"\n                visible={this.props.visible}\n                onOk={this.handleOk}\n                onCancel={this.handleCancel}\n                destroyOnClose={true}\n                footer={[\n                    <Button key=\"cancel\" onClick={this.props.hideModal}>Cancel</Button>,\n                    <Button key=\"submit\" type=\"primary\" onClick={this.handleAdd}>\n                        Add\n                    </Button>,\n                ]}>\n                <Form layout='horizontal'>\n                    <FormItem\n                        label=\"Assistant Name\"\n                        extra=\"Enter a name for your assistant to easily identify it in the dashboard\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('assistantName', {\n                            rules: [{\n                                required: true,\n                                message: 'Please input your assistant name',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: My first assistant, Sales Assistant\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem\n                        label=\"Welcome Message\"\n                        extra=\"This will be sent as first message\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('welcomeMessage', {\n                            rules: [{\n                                required: true,\n                                message: 'Please input your welcome message',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Hey there, Welcome visitor\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem\n                        label=\"Header Title\"\n                        extra=\"This will apear on top of your chatbot\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('topBarTitle', {\n                            rules: [{\n                                required: true,\n                                message: 'Please input your header title',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Recruiter Bot\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem\n                    {...formItemLayout}\n                    label=\"Time to Popup\"\n                    extra=\"This will enforce the assistants' (chatbot) to popup automatically\"\n                    >\n                    <Switch defaultChecked={false} onChange={this.togglePopupSwitch} style={{marginRight: '5px'}} />\n                    {getFieldDecorator('secondsUntilPopup', { initialValue: 1 })(\n                        <InputNumber disabled={this.state.isPopupDisabled} min={1} />\n                    )}\n                    <span className=\"ant-form-text\"> seconds</span>\n                    </FormItem>\n\n                    <FormItem\n                        {...formItemLayout}\n                        label=\"New Record Alert\"\n                        extra=\"Turning this on will make the assistant alert you when it has been used\"\n                    >\n                        <Switch checked={this.state.isAlertsEnabled} onChange={this.toggleAlertsSwitch}\n                                style={{marginRight: '5px'}}/>\n                    </FormItem>\n\n                    <FormItem\n                        {...formItemLayout}\n                        label=\"Alerts Every:\"\n                        extra=\"Select in what period of time the bot to check for new records and alert you. Note: 'Immediately' could spam your email if your assistant is used a lot\"\n                    >\n                        {getFieldDecorator('alertEvery', {\n                            initialValue: parseInt(alertsKeys[alertsKeys.length - 2])\n                        })(\n                            <Slider\n                                max={maxAlertsLength}\n                                disabled={!this.state.isAlertsEnabled}\n                                marks={this.state.alertOptions} step={null}/>\n                        )}\n                    </FormItem>\n\n                    <FormItem {...formItemLayout}\n                              label=\"Assistant Template\">\n\n                        {\n                            getFieldDecorator('template')(\n                                <Select placeholder=\"Please select template\">\n                                    <Option value=\"recruitment\">Recruitment</Option>\n                                    <Option value=\"Shopping\">Shopping</Option>\n                                    <Option value=\"Sales\">Sales</Option>\n                                </Select>\n                            )\n                        }\n                    </FormItem>\n                </Form>\n            </Modal>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        successMsg: state.assistant.successMsg,\n        isAdding: state.assistant.isAdding\n    };\n}\n\nexport default connect(mapStateToProps)(Form.create()(NewAssistantModal))\n","import React, {Component} from 'react';\nimport {Button, Skeleton, Modal} from 'antd';\nimport {connect} from 'react-redux';\n\nimport styles from \"./Assistants.module.less\"\nimport Assistant from \"./Assistant/Assistant\"\n\nimport {assistantActions} from \"../../../store/actions/assistant.actions\";\nimport NewAssistantModal from \"./Modals/NewAssistantModal\";\nconst confirm = Modal.confirm;\n\nclass Assistants extends Component {\n    state = {\n        visible: false,\n    };\n\n\n    componentDidMount() {\n        this.props.dispatch(assistantActions.fetchAssistants());\n    }\n\n\n    showModal = () => this.setState({visible: true});\n    hideModal = () => this.setState({visible: false});\n    activeHandler = (checked, assistantID) => {\n        if(!checked){\n            confirm({\n                title: `Deactivate assistant`,\n                content: <p>Are you sure you want to deactivate this assistant</p>,\n                onOk: () => {\n                    this.props.dispatch(assistantActions.changeAssistantStatus(assistantID, checked))\n                }\n            });\n            return;\n        }\n        this.props.dispatch(assistantActions.changeAssistantStatus(assistantID, checked))\n    };\n\n    render() {\n        return (\n            <div style={{height: '100%'}}>\n                <div className={styles.Panel}>\n                    <div className={styles.Panel_Header}>\n                        <div>\n                            <h3>Assistants List</h3>\n                            <p>Here you can see all assistants created by you</p>\n                        </div>\n                        <div>\n                            <Button className={styles.Panel_Header_Button} type=\"primary\" icon=\"plus\"\n                                    onClick={this.showModal}>\n                                Add Assistant\n                            </Button>\n                        </div>\n                    </div>\n\n\n                    <div className={styles.Panel_Body}>\n                        <div className={styles.AssistantsList}>\n                            {\n                                this.props.assistantList[0] ?\n                                    (\n                                        this.props.assistantList.map((assistant, i) => <Assistant assistant={assistant}\n                                                                                                  key={i}\n                                                                                                  index={i}\n                                                                                                  isStatusChanging={this.props.isStatusChanging}\n                                                                                                  activeHandler={this.activeHandler}\n                                                                                                  isLoading={this.props.isLoading}\n                                        />)\n                                    )\n                                    : <Skeleton active/>\n                            }\n                        </div>\n                    </div>\n\n                </div>\n\n                <NewAssistantModal visible={this.state.visible}\n                                   hideModal={this.hideModal}/>\n\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        assistantList: state.assistant.assistantList,\n        registerList: state.assistant.registerList,\n        isLoading: state.assistant.isLoading,\n        isStatusChanging: state.assistant.isStatusChanging,\n    };\n}\n\nexport default connect(mapStateToProps)(Assistants);\n","import {Button, Icon, Upload, message} from \"antd\";\nimport React, {Component} from 'react';\n\nimport Worker from \"./excel.worker\";\n\nclass UploadDatabaseStep extends Component {\n\n    readExcel = () => { // returns a promise because reader is asynchronous function\n        const {fileList, setStateHandler} = this.props;\n        // This reads the file from the upload component\n        // the file when uploaded as blob is considered as binary\n        return new Promise((resolve, reject) => {\n            if (fileList[0]) {\n                setStateHandler({isFileUploading: true});\n                const reader = new FileReader();\n                reader.readAsBinaryString(fileList[0]);\n                reader.onload = () => {\n                    const worker = new Worker();\n                    worker.postMessage(reader.result);\n                    worker.onmessage = (event) => {\n                        setStateHandler({isFileUploading: false});\n                        if (event.data.headers)\n                            return resolve(event.data);\n                        else {\n                            message.error('The uploaded size is too big');\n                            return reject({\n                                headers: undefined,\n                                data: undefined\n                            });\n                        }\n                    };\n                }\n            } else {\n                message.error('Please upload Excel file or CSV file');\n                return reject({\n                    headers: undefined,\n                    data: undefined\n                });\n            }\n        });\n    };\n\n    render() {\n        const {fileList, setStateHandler} = this.props;\n        const props = {\n            listType: 'picture',\n            multiple: false,\n            defaultFileList: [...fileList],\n            accept:\".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\",\n            onRemove: file => {\n                setStateHandler((state) => {\n                    const index = state.fileList.indexOf(file);\n                    const newFileList = state.fileList.slice();\n                    newFileList.splice(index, 1);\n                    return {\n                        fileList: newFileList,\n                    };\n                });\n            },\n            beforeUpload: file => {\n                file.thumbUrl = 'https://42f2671d685f51e10fc6-b9fcecea3e50b3b59bdc28dead054ebc.ssl.cf5.rackcdn.com/illustrations/files1_9ool.svg';\n                setStateHandler(() => ({fileList: [file]}));\n                return false;\n            },\n            fileList,\n        };\n\n\n        return (\n            <div>\n                <div style={{textAlign: 'center'}}>\n                    <img\n\n                        src={`${window.location.protocol}//${window.location.hostname}${window.location.port ? ':' + window.location.port : ''}/static/images/upload_data.svg`}\n                        alt=\"Upload Data Iamge\"\n                        style={{width: 300}}/>\n                    <p>Upload your Database to be used in the chat interaction</p>\n                </div>\n                <div style={{textAlign: 'center'}}>\n                    <Upload {...props}>\n                        <Button>\n                            <Icon type=\"upload\"/> Upload\n                        </Button>\n                    </Upload>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default UploadDatabaseStep;","import {Form, Input, Select} from \"antd\";\nimport React, {Component} from 'react'\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\nclass ConfigureDatabaseStep extends Component {\n    render() {\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        };\n        const {getFieldDecorator} = this.props.form;\n        const {databaseOptions} = this.props;\n\n        return (\n            <div>\n                <div style={{textAlign: 'center'}}>\n                    <img\n                        src=\"https://42f2671d685f51e10fc6-b9fcecea3e50b3b59bdc28dead054ebc.ssl.cf5.rackcdn.com/illustrations/setup_wizard_r6mr.svg\"\n                        alt=\"Upload Data Iamge\"\n                        style={{height: 150, marginBottom: 10}}/>\n                </div>\n                <Form layout='horizontal'>\n                    <FormItem label=\"Database Name\"\n                              extra=\"Enter unique name for your database\"\n                              {...formItemLayout}>\n                        {getFieldDecorator('databaseName', {\n                            initialValue: this.props.databaseConfiguration.databaseName,\n                            rules: [{\n                                required: true,\n                                message: 'Please input your assistant name',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: London candidates, Jobs in europ, etc...\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem label=\"Database Type\"\n                              extra=\"Select one of the supported types\"\n                              {...formItemLayout}>\n                        {getFieldDecorator('databaseType', {\n                            initialValue: this.props.databaseConfiguration.databaseType,\n                            rules: [{\n                                required: true,\n                                message: 'Please input your assistant name',\n                            }],\n                        })(\n                            <Select placeholder=\"Please select type\" loading={!(!!databaseOptions)}>\n                                {\n                                    databaseOptions ?\n                                        databaseOptions.types.map((type, key) =>\n                                            <Option key={key} value={type}>{type}</Option>)\n                                        : null\n                                }\n                            </Select>\n                        )}\n                    </FormItem>\n                </Form>\n            </div>\n        )\n    }\n}\n\nexport default Form.create()(ConfigureDatabaseStep);\n\n\n\n\n","import {Form, message, Select, Spin} from \"antd\";\n\nimport React, {Component} from 'react'\nimport \"./UploadDatabaseStep/UploadDatabaseStep.less\"\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\n\n/**\n * Columns which have mapped with excelColumn\n @typedef SelectedColumn\n @type {object}\n @property {string} ourColumn - TSB colums naming.\n @property {string[]} excelColumn - Users' colums naming.\n */\n\n/**\n * Columns which have mapped with excelColumn\n @typedef TSBcolumnOption\n @type {object}\n @property {string} column - the name of the column.\n @property {boolean} nullable - is nullable?.\n @property {string} type - type of column (VARCHAR(any) | FLOAT | DATETIME).\n */\n\n/**\n * The returned object from validate_and_construct function\n @typedef ColumnValidator\n @type {object}\n @property {(string|number|null|Date)} data - the record's data.\n @property {(string|null)} message - if not valid here will be a message.\n @property {boolean} isValid - to check if valid or not.\n @property {string[]} originalColumns - the columns in the uploaded file.\n */\n\n/**\n * The constructed record before check if valid or not\n @typedef NewRecord\n @type {Object.<string, ColumnValidator>}\n */\n\n/**\n * Date type\n @typedef Date\n @type {Object}\n @property {string} year\n @property {string} month\n @property {string} day\n */\n\n\nclass ColumnSelectionStep extends Component {\n    state = {\n        selectedColumns: [],\n    };\n\n    handleChange = selectedColumns => this.setState({selectedColumns: [...this.state.selectedColumns].concat(selectedColumns).unique()});\n    handleRemove = removedColumn => setTimeout(() => this.setState({selectedColumns: this.state.selectedColumns.filter(selectedColumn => selectedColumn !== removedColumn)}), 100);\n\n    /**\n     * Returns the ColumnValidator of the passed userRecord\n     * @param {TSBcolumnOption} TSBcolumnOption - The options needs to be met inorder to be sent to TSB db\n     * @param {String[]} userColumns\n     * @param {Object} userRecord\n     * @returns {ColumnValidator}\n     */\n    validate_and_construct = (TSBcolumnOption, userColumns, userRecord) => {\n        // find and merge userColumns data in userRecord\n        // 1- Merge userColumns data in userRecord as validatedData\n        // 2- validate that validatedData is meeting the TSBcolumnOption\n        // 3- return ColumnValidator Object with its attributes\n\n        /** @type {boolean} */\n        let isValid = true;\n\n        /** @type {(string|null)} */\n        let message = null;\n\n        /** @type {(string|number|null|Date)} */\n        let validatedData;\n\n\n        if (TSBcolumnOption.column === \"Currency\")\n            validatedData = userColumns.join('');\n        else\n            validatedData = userColumns.map(userColumn => userRecord[userColumn]).filter(item => item).join(' ').trim();\n\n\n        if (TSBcolumnOption.type.includes(\"VARCHAR\")) {\n            // get number from varchar then validate string length\n            const string_length = /\\(([^)]+)\\)/.exec(TSBcolumnOption.type)[1];\n\n            if (validatedData) {\n                if (validatedData.length > string_length) {\n                    isValid = false;\n                    message = `${validatedData} is exceeding the string length ${string_length}`\n                }\n            } else if (!validatedData && !TSBcolumnOption.nullable) {\n                isValid = false;\n                message = `${userColumns} can't be null in ${JSON.stringify(userRecord)}`\n            }\n        }\n\n        if (TSBcolumnOption.type === \"FLOAT\") {\n            if (validatedData) {\n                validatedData = Number(validatedData);\n                if (isNaN(validatedData)) {\n                    isValid = false;\n                    message = `${validatedData} Should be Numbers only`\n                } else if (!validatedData && !TSBcolumnOption.nullable) {\n                    isValid = false;\n                    message = `${userColumns} can't be null in ${JSON.stringify(userRecord)}`\n                }\n            }\n        }\n\n        if (TSBcolumnOption.type === \"DATETIME\") {\n            const date = new Date(validatedData);\n\n            validatedData = {\n                year: date.getUTCFullYear(),\n                month: date.getMonth() + 1,\n                day: date.getDate()\n            };\n\n            if (!validatedData.year || !validatedData.month || !validatedData.day) {\n                isValid = false;\n                message = `${JSON.stringify(validatedData)} You should pass dates only`\n            }\n        }\n\n        return {\n            data: validatedData,\n            message: message,\n            isValid: isValid,\n            originalColumns: userColumns\n        }\n    };\n\n    /**\n     * @returns {Promise} Promise object represents the valid and invalid data\n     */\n    parseForm = () => new Promise((resolve, reject) => {\n        const {form: {validateFields}, excelFile, databaseOptions, databaseType} = this.props;\n        validateFields((errors, columns) => {\n            if (errors) {\n                message.error('Select a value for the required fields');\n                return reject('Rejected');\n            }\n\n            if (!excelFile.data) {\n                message.error('Please check your CSV file try to add more than one single record');\n                return reject('Rejected');\n            }\n\n            // convert object to array of {ourColumn, excelColumn} pairs\n            columns = Object.keys(columns).map(key => {\n                return {ourColumn: key, excelColumn: columns[key]};\n            });\n\n            /** @type {SelectedColumn[]} */\n            const selectedColumns = columns.filter(column => !!column.excelColumn).filter(column => !!column.excelColumn[0]);\n\n            /** @type {NewRecord[]} */\n            let validRecords = [];\n\n            /** @type {NewRecord[]} */\n            let invalidRecords = [];\n\n            for (const user_record of excelFile.data) {\n                /** @type {NewRecord} */\n                let record = {};\n\n                for (const selectedColumn of selectedColumns) {\n                    const {ourColumn, excelColumn} = selectedColumn;\n\n                    /** @type {TSBcolumnOption} */\n                    const TSBcolumnOption = databaseOptions[databaseType].find(databaseOptions => databaseOptions.column === ourColumn);\n\n                    /** @type {ColumnValidator} */\n                    record[ourColumn] = this.validate_and_construct(TSBcolumnOption, [...excelColumn], user_record)\n                }\n\n                if (Object.values(record).flatMap(value => value.isValid).indexOf(false) > -1)\n                    invalidRecords.push(record);\n                else\n                    validRecords.push(record);\n            }\n\n            if (selectedColumns[0])\n                return resolve({\n                    validRecords: validRecords,\n                    invalidRecords: invalidRecords\n                });\n            else {\n                message.error('Select at least one column');\n                return reject('Rejected');\n            }\n        });\n    });\n\n\n    render() {\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        };\n\n        const {getFieldDecorator} = this.props.form;\n        const {databaseOptions, databaseType} = this.props;\n        const {selectedColumns} = this.state;\n        const filteredOptions = this.props.excelFile.headers.filter(o => !selectedColumns.includes(o));\n\n        return (\n            <div>\n                {!!databaseOptions ?\n                    <Form layout='horizontal'>\n                        {databaseOptions[databaseType].map((type, index) => {\n                            if (type.column === \"Currency\") return (\n                                <FormItem label={type.column} {...formItemLayout} key={index}>\n                                    {getFieldDecorator(type.column, {\n                                        defaultValue: selectedColumns,\n                                        rules: [{required: !type.nullable, message: 'This is required field',}]\n                                    })\n                                    (\n                                        <Select key={index} placeholder=\"Please select currency\">\n                                            {databaseOptions.currencyCodes.map(\n                                                (currencyCode, index) =>\n                                                    <Option key={index} value={currencyCode}>{currencyCode}</Option>\n                                            )}\n                                        </Select>\n                                    )}\n                                </FormItem>\n                            );\n\n                            // else if (type.type === \"DATETIME\") return (\n                            //     <div key={index}>\n                            //         <FormItem label={type.column} {...formItemLayout} >\n                            //             <div>\n                            //                 {getFieldDecorator(type.column, {\n                            //                     defaultValue: selectedColumns,\n                            //                     rules: [{required: !type.nullable, message: 'This is required field',}]\n                            //                 })\n                            //                 (\n                            //                     <Select mode=\"multiple\"\n                            //                             placeholder=\"Select Column or Columns\"\n                            //                             onDeselect={this.handleRemove}\n                            //                             onChange={this.handleChange}\n                            //                             style={{width: \"60%\", marginRight: 5}}>\n                            //                         {filteredOptions.map(item => (\n                            //                             <Select.Option key={item} value={item}>{item}</Select.Option>\n                            //                         ))}\n                            //                     </Select>\n                            //                 )}\n                            //                 {getFieldDecorator(`${type.column}_DateFormat`)\n                            //                 (\n                            //                     <Select placeholder=\"Select date format\"\n                            //                             style={{width: \"calc(40% - 5px)\"}}>\n                            //                         <Option value={\"MM/DD/YY\"}>{\"MM/DD/YY\"}</Option>\n                            //                         <Option value={\"DD/MM/YY\"}>{\"DD/MM/YY\"}</Option>\n                            //                         <Option value={\"YY/MM/DD\"}>{\"YY/MM/DD\"}</Option>\n                            //                     </Select>\n                            //                 )}\n                            //             </div>\n                            //         </FormItem>\n                            //     </div>\n                            // );\n\n                            else return (\n                                <FormItem label={type.column} {...formItemLayout} key={index}>\n                                    {getFieldDecorator(type.column, {\n                                        defaultValue: selectedColumns,\n                                        rules: [{required: !type.nullable, message: 'This is required field',}]\n                                    })\n                                    (\n                                        <Select mode=\"multiple\" placeholder=\"Select Column or Columns\"\n                                                onDeselect={this.handleRemove}\n                                                onChange={this.handleChange}>\n                                            {filteredOptions.map(item => (\n                                                <Select.Option key={item} value={item}>{item}</Select.Option>\n                                            ))}\n                                        </Select>\n                                    )}\n                                </FormItem>\n                            );\n                        })}\n                    </Form>\n                    : <Spin/>}\n\n            </div>\n        )\n    }\n}\n\nexport default Form.create()(ColumnSelectionStep);\n\nArray.prototype.unique = function () {\n    let a = this.concat();\n    for (let i = 0; i < a.length; ++i) {\n        for (let j = i + 1; j < a.length; ++j) {\n            if (a[i] === a[j])\n                a.splice(j--, 1);\n        }\n    }\n    return a;\n};\n\n","import {Table, Divider} from \"antd\";\nimport React, {Component} from 'react'\nimport {ColumnsOptions} from '../ColumnsOptions'\n\nclass ConfirmStep extends Component {\n\n    getRecordsData = records => {\n        let x = [];\n        let counter = 0;\n        for (const record of records) {\n            let renderedRecord = {};\n            renderedRecord.key = counter++;\n            for (const key of Object.keys(record))\n                renderedRecord[key] = record[key];\n            x.push(renderedRecord);\n        }\n        return x;\n    };\n\n    render() {\n\n        const {validRecords, invalidRecords} = this.props;\n        const columnsOptions = ColumnsOptions(validRecords[0] || invalidRecords[0]);\n        return (\n            <div>\n                <h4>Valid data </h4>\n                <Table columns={columnsOptions}\n                       dataSource={this.getRecordsData(validRecords)}\n                       size=\"small\"\n                       pagination={{pageSize: 5}}/>\n\n                <Divider/>\n\n                <h4>Invalid data (wither fix them or upload without them) </h4>\n                <Table columns={columnsOptions}\n                       dataSource={this.getRecordsData(invalidRecords)}\n                       size=\"small\"\n                       pagination={{pageSize: 5}}/>\n            </div>\n        )\n    }\n}\n\nexport default ConfirmStep;\n\n\n\n\n","import React from 'react'\n\nexport const ColumnsOptions = (columnHeader) =>\n    Object.keys(columnHeader).map((c, index) => {\n        return {\n            title: c,\n            dataIndex: c,\n            key: index,\n            width: 100,\n            render: item => <span>{\n                item.isValid ?\n                    (\n                        item.data.day ?\n                            [item.data.year, item.data.month, item.data.day].join('/')\n                            :\n                            item.data\n                    )\n                    :\n                    (\n                        <p style={{backgroundColor: '#ff7875'}}> {item.message}</p>\n                    )\n            }</span>\n\n        }\n});\n","import {Button, Divider, Modal, Steps, Spin, message} from 'antd';\n\nimport React, {Component} from 'react';\nimport styles from \"./NewDatabaseModal.module.less\"\n\nimport UploadDatabaseStep from './NewDatabaseSteps/UploadDatabaseStep/UploadDatabaseStep'\nimport ConfigureDatabaseStep from \"./NewDatabaseSteps/ConfigureDatabaseStep\";\nimport ColumnSelectionStep from \"./NewDatabaseSteps/ColumnSelectionStep\";\nimport ConfirmStep from \"./NewDatabaseSteps/ConfirmStep\";\n// import {dummyExcelData, jobsExcelSheet, validData, invalidData} from './testdata'\n\nconst Step = Steps.Step;\n\nclass NewDatabaseModal extends Component {\n\n    constructor(props) {\n        super(props);\n        this.configureDatabaseStep = React.createRef();\n        this.uploadDatabaseStep = React.createRef();\n        this.columnSelectionStep = React.createRef();\n    }\n\n    state = {\n        current: 0,\n        fileList: [],\n\n        databaseConfiguration: {\n            databaseName: undefined,\n            databaseType: undefined\n        },\n\n        isFileUploading: false,\n\n        excelFile: {\n            headers: undefined,\n            data: undefined\n        },\n\n        validRecords: [],\n        invalidRecords: []\n    };\n\n    steps = [\n        {\n            title: 'Configure Database',\n            content: () => this.props.databaseOptions ?\n                <ConfigureDatabaseStep ref={this.configureDatabaseStep}\n                                       databaseOptions={this.props.databaseOptions}\n                                       databaseConfiguration={this.state.databaseConfiguration}/>\n                : <Spin/>\n        },\n        {\n            title: 'Upload Data',\n            content: () => <UploadDatabaseStep ref={this.uploadDatabaseStep}\n                                               uploading={this.state.uploading}\n                                               handleUpload={this.handleUpload}\n                                               setStateHandler={state => this.setState(state)}\n                                               fileList={this.state.fileList}/>\n        },\n        {\n            title: 'Column Selection',\n            content: () => this.props.databaseOptions ?\n                <ColumnSelectionStep wrappedComponentRef={form => this.columnSelectionStep = form}\n                                     databaseOptions={this.props.databaseOptions}\n                                     databaseType={this.state.databaseConfiguration.databaseType}\n                                     excelFile={this.state.excelFile}/>\n                : <Spin/>\n        },\n        {\n            title: 'Confirm ',\n            content: () => this.props.databaseOptions ?\n                <ConfirmStep validRecords={this.state.validRecords}\n                             columns={this.props.databaseOptions[this.state.databaseConfiguration.databaseType]}\n                             invalidRecords={this.state.invalidRecords}/>\n                : <Spin/>\n        }];\n\n    next = () => {\n        switch (this.state.current + 1) {\n            case 1:\n                this.configureDatabaseStep.current.validateFields(\n                    (err, values) => err ? null : this.setState({\n                        databaseConfiguration: {\n                            databaseName: values.databaseName,\n                            databaseType: values.databaseType\n                        },\n                        current: this.state.current + 1\n                    })\n                );\n                break;\n\n            case 2:\n                this.uploadDatabaseStep.current.readExcel().then(\n                    excelFile => {\n                        console.log(JSON.stringify(excelFile));\n                        this.setState({excelFile, current: this.state.current + 1})\n                    },\n                    rejectedExcelFile => this.setState({excelFile: rejectedExcelFile})\n                );\n                break;\n\n            case 3:\n                this.columnSelectionStep.parseForm().then(\n                    records => this.setState({\n                        validRecords: records.validRecords,\n                        invalidRecords: records.invalidRecords,\n                        current: this.state.current + 1\n                    }),\n                    (error) => console.error(error)\n                );\n                break;\n\n            default:\n                this.setState({current: this.state.current + 1});\n                break;\n        }\n    };\n\n    prev = () => this.setState({current: this.state.current - 1});\n\n    submitDatabase = () => {\n        this.props.hideModal();\n        const {validRecords, databaseConfiguration} = this.state;\n        if (validRecords) {\n            this.props.uploadDatabase({...databaseConfiguration, records: validRecords});\n            // Reset state\n            this.setState({\n                current: 0,\n                fileList: [],\n\n                databaseConfiguration: {\n                    databaseName: undefined,\n                    databaseType: undefined\n                },\n                isFileUploading: false,\n                excelFile: {\n                    headers: undefined,\n                    data: undefined\n                },\n                validRecords: [],\n                invalidRecords: []\n            })\n        }\n        else\n            message.error('No valid records to be sent');\n    };\n\n    render() {\n        const {current} = this.state;\n\n        return (\n            <Modal width={\"80%\"}\n                   title=\"Upload New Database\"\n                   visible={this.props.visible}\n                   onCancel={this.props.hideModal}\n                   destroyOnClose={true}\n                   footer={null}>\n                <Spin spinning={this.state.isFileUploading} tip=\"Reading Excel File\">\n                    <Steps current={current}>\n                        {this.steps.map(item => <Step key={item.title} title={item.title}/>)}\n                    </Steps>\n\n                    <div className={styles.steps_content}>{this.steps[current].content()}</div>\n\n                    <Divider/>\n\n                    <div className={styles.steps_action}>\n                        {\n                            current > 0\n                            && (\n                                <Button style={{marginLeft: 8}} onClick={() => this.prev()}>\n                                    Previous\n                                </Button>\n                            )\n                        }\n                        {\n                            current < this.steps.length - 1\n                            && <Button type=\"primary\" onClick={() => this.next()}>Next</Button>\n                        }\n                        {\n                            current === this.steps.length - 1\n                            && <Button type=\"primary\" onClick={this.submitDatabase}>Done</Button>\n                        }\n                    </div>\n                </Spin>\n            </Modal>\n        );\n    }\n}\n\nexport default NewDatabaseModal;","import React, {Component} from 'react';\n\nimport styles from \"./Header.module.less\";\nimport {Button} from \"antd\";\nimport PropTypes from 'prop-types';\n\n\nclass Header extends Component {\n    static contextTypes = {\n        router: PropTypes.object\n    };\n\n    render() {\n        let showBackButton = true;\n        let button = this.props.button;\n        if (this.props.showBackButton === false)\n            showBackButton = false;\n\n\n        return (\n            <div style={{height: 56, marginBottom: 10}}>\n                <div className={styles.Panel}>\n                    <div className={styles.Panel_Header}>\n\n                        <div style={{display: '-webkit-inline-box'}}>\n                            {\n                                showBackButton ?\n                                    <Button onClick={this.context.router.history.goBack}\n                                            type=\"primary\" icon=\"left\" shape=\"circle\"\n                                            size={\"small\"}/>\n                                    : null\n                            }\n                            <h3>{this.props.assistantName || this.props.display}</h3>\n                        </div>\n                        <div>\n                            {\n                                button ?\n                                    <Button className={styles.Panel_Header_Button}\n                                            type=\"primary\"\n                                            icon={this.props.button.icon}\n                                            disabled={this.props.button.disabled}\n                                            loading={this.props.button.loading}\n                                            onClick={this.props.button.onClick}>\n                                        {this.props.button.text}\n                                    </Button>\n                                    : null\n                            }\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Header;\n","import React, {Component} from 'react';\nimport {HotTable} from \"@handsontable/react\";\nimport './DatabaseInfo.less'\n\nclass DatabaseInfo extends Component {\n\n    render() {\n\n        let data = this.props.data;\n\n        const columns = this.props.databaseOptions[this.props.databaseInfo.Type.name].map(x => x.column);\n        const colHeaders = this.props.databaseOptions[this.props.databaseInfo.Type.name].map(x => x.column).map(x => {\n            return {\n                data: x,\n                editor: false\n            }\n        });\n        return (\n            <div style={{height: '100%'}}>\n                <HotTable id=\"hot\" data={data} colHeaders={columns} columns={colHeaders} rowHeaders={true}/>\n            </div>\n        );\n    }\n}\n\n\nexport default DatabaseInfo;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {Menu, Table, Spin, Button} from 'antd';\n\nimport styles from \"./Databases.module.less\"\nimport NewDatabaseModal from \"./NewDatabaseModal/NewDatabaseModal\";\nimport Header from \"../../../components/Header/Header\";\nimport {http} from \"../../../helpers\";\nimport {databaseActions} from \"../../../store/actions\";\n\nimport DatabaseInfo from \"./DatabaseInfo/DatabaseInfo\"\n\nclass Databases extends Component {\n\n    state = {\n        visible: false,\n    };\n\n\n    componentWillMount() {\n        this.props.dispatch(databaseActions.getDatabasesList());\n    }\n\n\n    showModal = () => this.setState({visible: true});\n    hideModal = () => this.setState({visible: false});\n\n\n    uploadDatabase = newDatabase => this.props.dispatch(databaseActions.uploadDatabase({newDatabase: newDatabase}));\n    showDatabaseInfo = (databaseID) => this.props.dispatch(databaseActions.fetchDatabase(databaseID));\n\n\n    componentWillUnmount() {\n        this.props.dispatch(databaseActions.resetFetchedDtabase())\n    }\n\n    getRecordsData = records => {\n        let x = [];\n\n        if (records) {\n            for (const record of records) {\n                let renderedRecord = {};\n                for (const key of Object.keys(record))\n                    if (key !== 'DatabaseID')\n                        renderedRecord[key] = record[key];\n\n                x.push(renderedRecord);\n            }\n        }\n        return x;\n    };\n\n\n\n    render() {\n        return (\n            <div style={{height: '100%'}}>\n                <Header display={'Databases'} showBackButton={false}\n                        button={{icon: \"plus\", onClick: this.showModal, text: 'Add Database'}}/>\n\n                <div className={styles.Panel_Body_Only}>\n                    <div style={{margin: '0 5px 0 0', width: '20%'}}>\n                        <div className={styles.Panel}>\n\n                            <div className={styles.Panel_Header} style={{position: \"inherit\"}}>\n                                <h3>Databases List</h3>\n                            </div>\n                            <div className={styles.Panel_Body}>\n                                <Menu mode=\"inline\">\n                                    {\n                                        this.props.databasesList.map((database, index) =>\n                                            <Menu.Item key={index}\n                                                       onClick={() => this.showDatabaseInfo(database.ID)}>{database.Name}</Menu.Item>)\n                                    }\n                                </Menu>\n                            </div>\n                        </div>\n\n                    </div>\n\n                    <div style={{margin: '0 0 0 5px', width: '80%'}}>\n                        <div className={styles.Panel}>\n                            <div className={styles.Panel_Header_With_Button}>\n                                <div>\n                                    <h3>Databases Information</h3>\n                                </div>\n                                <div>\n                                    <Button className={styles.Panel_Header_Button}\n                                            disabled={!(!!this.props.fetchedDatabase.databaseContent?.length)}\n                                            type=\"primary\" icon=\"info\"\n                                            onClick={this.showDBInfo}>\n                                        Info\n                                    </Button>\n                                    <Button className={styles.Panel_Header_Button} type=\"danger\" icon=\"delete\"\n                                            disabled={!(!!this.props.fetchedDatabase.databaseContent?.length)}\n                                            onClick={this.deleteDB}>\n                                        Delete Database\n                                    </Button>\n                                </div>\n                            </div>\n\n\n                            <div className={styles.Panel_Body} style={{padding: 0}}>\n                                {\n                                    (\n                                        (!!this.props.fetchedDatabase.databaseContent?.length)\n                                        &&\n                                        (!!this.props.options.databases)\n                                    ) ?\n                                        <DatabaseInfo databaseOptions={this.props.options.databases}\n                                                      databaseInfo={this.props.fetchedDatabase.databaseInfo}\n                                                      data={this.getRecordsData(this.props.fetchedDatabase.databaseContent)}/>\n                                        :\n                                        <Spin spinning={this.props.isLoadingDatabase}>\n                                            <div>\n                                                <img\n                                                    src=\"https://42f2671d685f51e10fc6-b9fcecea3e50b3b59bdc28dead054ebc.ssl.cf5.rackcdn.com/illustrations/following_q0cr.svg\"\n                                                    width={\"50%\"}\n                                                    style={{\n                                                        display: \"block\",\n                                                        marginTop:20,\n                                                        marginLeft: \"auto\",\n                                                        marginRight: \"auto\",\n                                                    }}\n                                                />\n                                                <p style={{textAlign: 'center', marginTop: 5}}>\n                                                    Select a database to show its data\n                                                </p>\n                                            </div>\n                                        </Spin>\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <NewDatabaseModal visible={this.state.visible}\n                                   databaseOptions={this.props.options?.databases}\n                                   uploadDatabase={this.uploadDatabase}\n                                   hideModal={this.hideModal}/>\n\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        databasesList: state.database.databasesList,\n        fetchedDatabase: state.database.fetchedDatabase,\n        isLoadingDatabase: state.database.isLoading,\n\n        options: state.options.options,\n    };\n}\n\nexport default connect(mapStateToProps)(Databases);\n","import React, {Component} from 'react';\nimport {Button, Modal, Form, Input} from \"antd\";\n\nconst FormItem = Form.Item;\n\nclass NewGroup extends Component {\n\n    state = {};\n\n    handleSave = () => this.props.form.validateFields((err, values) => {\n        if (!err)\n            this.props.handleSave(values)\n    });\n\n    render() {\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        };\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Modal\n                width={800}\n                title=\"Create New Group\"\n                destroyOnClose={true}\n                visible={this.props.visible}\n                onOk={this.props.handleSave}\n                onCancel={this.props.handleCancel}\n                footer={[\n                    <Button key=\"Cancel\" onClick={this.props.handleCancel}>Cancel</Button>,\n                    <Button key=\"submit\" type=\"primary\" onClick={this.handleSave}>\n                        Add\n                    </Button>\n                ]}>\n                <Form layout='horizontal'>\n                    <FormItem\n                        label=\"Group Name\"\n                        extra=\"Enter a name for your group to easily identify it in the group list\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('name', {\n                            rules: [{\n                                required: true,\n                                message: 'Please enter your group name',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Greetings group, Sales group\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem\n                        label=\"Group Description\"\n                        extra=\"Just a description for you\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('description', {\n                            rules: [{\n                                required: true,\n                                message: 'Please add description to your group name',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: this is first group, this group help get info from user\"/>\n                        )}\n                    </FormItem>\n\n\n                </Form>\n            </Modal>\n        );\n    }\n}\n\nexport default Form.create()(NewGroup)","import React, {Component} from 'react';\nimport {Button, Modal, Form, Input} from \"antd\";\n\nconst FormItem = Form.Item;\n\nclass EditGroup extends Component {\n\n    state = {};\n\n    handleUpdate = () => this.props.form.validateFields((err, values) => {\n        if (!err)\n            this.props.handleUpdate(values)\n    });\n\n\n    render() {\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        };\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Modal\n                width={800}\n                title=\"Edit Group\"\n                visible={this.props.visible}\n                onOk={this.props.handleUpdate}\n                onCancel={this.props.handleCancel}\n                footer={[\n                    <Button key=\"delete\" type=\"danger\" onClick={() => this.props.handleDelete(this.props.group)}>\n                        Delete\n                    </Button>,\n                    <Button key=\"Cancel\" onClick={this.props.handleCancel}>Cancel</Button>,\n                    <Button key=\"submit\" type=\"primary\" onClick={this.handleUpdate}>\n                        Update\n                    </Button>\n                ]}>\n                <Form layout='horizontal'>\n                    <FormItem\n                        label=\"Group Name\"\n                        extra=\"Enter a name for your group to easily identify it in the group list\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('name', {\n                            initialValue: this.props.group.name,\n                            rules: [{\n                                required: true,\n                                message: 'Please enter your group name',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Greetings group, Sales group\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem\n                        label=\"Group Description\"\n                        extra=\"Just a description for you\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('description', {\n                            initialValue: this.props.group.description,\n                            rules: [{\n                                required: true,\n                                message: 'Please description to your group name',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: this is first group, this group help get info from user\"/>\n                        )}\n                    </FormItem>\n\n\n                </Form>\n            </Modal>\n        );\n    }\n}\n\nexport default Form.create()(EditGroup)","import React, {Component} from 'react';\nimport styles from \"./Groups.module.less\";\nimport {Button, List, Skeleton, Spin, Modal, Menu, Empty} from \"antd\";\nimport NewGroup from \"./NewGroup/NewGroup\";\nimport EditGroup from \"./EditGroup/EditGroup\";\n\nconst confirm = Modal.confirm;\n\nconst content = (\n    <div>\n        <p>Content</p>\n        <p>Content</p>\n    </div>\n);\n\nclass Groups extends Component {\n\n    state = {\n        newGroupModal: false,\n        editGroupModal: false,\n        selectedGroupToEdit: {}\n    };\n\n    componentWillReceiveProps(nextProps) {\n        // This handles when updating the selected group to show its blocks\n        if (nextProps.currentGroup !== this.state.currentGroup && nextProps.currentGroup) {\n            this.setState({selectedGroupToEdit: nextProps.currentGroup.blocks})\n        }\n    }\n\n    ////// ADD GROUP\n    handleAddGroup = (newGroup) => {\n        this.props.addGroup(newGroup);\n        this.setState({newGroupModal: false});\n    };\n\n    handleAddGroupCancel = () => this.setState({newGroupModal: false});\n\n    showNewGroupModal = () => this.setState({newGroupModal: true});\n\n\n    ////// EDIT GROUP\n    handleEditGroup = (editedGroup) => {\n        this.props.editGroup(editedGroup);\n        this.setState({editGroupModal: false});\n    };\n\n    handleEditGroupCancel = () => this.setState({editGroupModal: false});\n\n    showEditGroupModal = () => this.setState({editGroupModal: true});\n\n    ////// DELETE GROUP\n    handleDeleteGroup = (deletedGroup) => {\n        confirm({\n            title: `Delete group confirmation`,\n            content: `If you click OK, this group will be deleted with its associated blocks forever`,\n            onOk: () => {\n                this.props.deleteGroup(deletedGroup);\n                this.setState({editGroupModal: false, selectedGroupToEdit: {}});\n            }\n        });\n    };\n\n\n    render() {\n        const {groupsList} = this.props;\n        return (\n            <div className={styles.Panel}>\n                <div className={styles.Panel_Header_With_Button}>\n                    <div>\n                        <h3>Groups</h3>\n                    </div>\n                    <div>\n                        <Button className={styles.Panel_Header_Button}\n                                type=\"default\"\n                                size={\"small\"}\n                                icon=\"plus\"\n                                onClick={this.showNewGroupModal}>\n                            Add\n                        </Button>\n\n                        <Button className={styles.Panel_Header_Button}\n                                type=\"default\"\n                                size={\"small\"}\n                                icon=\"plus\"\n                                disabled={!(!!this.props.currentGroup.name)}\n                                onClick={() => this.showEditGroupModal()}>\n                            Edit\n                        </Button>\n\n                        <NewGroup visible={this.state.newGroupModal}\n                                  handleCancel={this.handleAddGroupCancel}\n                                  handleSave={this.handleAddGroup}/>\n                    </div>\n                </div>\n\n\n                <div className={styles.Panel_Body}>\n\n\n                    <Menu mode=\"inline\">\n                        {\n                            groupsList ?\n                            this.props.groupsList.map((group, index) =>\n                                <Menu.Item onClick={() => this.props.selectGroup(group)} key={index}>\n                                    {group.name}\n                                </Menu.Item>\n                            ) : null\n                        }\n                    </Menu>\n\n                </div>\n\n                <EditGroup group={this.props.currentGroup}\n                           visible={this.state.editGroupModal}\n                           handleCancel={this.handleEditGroupCancel}\n                           handleUpdate={this.handleEditGroup}\n                           handleDelete={this.handleDeleteGroup}/>\n            </div>\n        );\n    }\n}\n\nexport default Groups;\n","import React, {Component} from 'react';\nimport {Button, Card, Checkbox, Col, Collapse, Divider, Row, Tag} from \"antd\";\n\nconst Panel = Collapse.Panel;\nconst {Meta} = Card;\n\nclass Block extends Component {\n\n    editBlock = (block) => this.props.editBlock(block);\n    deleteBlock = (block) => this.props.deleteBlock(block);\n\n    render() {\n        const {block, options} = this.props;\n        const {databases} = options;\n\n        return (\n            <Collapse bordered={true}>\n                <Panel header={(\n                    <>\n                        {block.Type} <Divider type=\"vertical\"/>\n                        {block.Content.text} <Divider type=\"vertical\"/>\n\n                        <Button icon={'edit'} size={\"small\"} onClick={() => this.editBlock(block)}/>\n                        <Divider type=\"vertical\"/>\n                        <Button icon={'delete'} size={\"small\"} type={\"danger\"}\n                                onClick={() => this.deleteBlock(block)}/>\n                    </>\n                )}\n                       key={this.props.key}>\n\n                    {block.Content.text ?\n                        <Row>\n                            <Col span={6}><b>Question::</b></Col>\n                            <Col span={12}>{block.Content.text}</Col>\n                            <Divider/>\n                        </Row>\n                        : null\n                    }\n\n\n                    {block.Content.validation ?\n                        <Row>\n                            <Col span={6}><b>Validation:</b></Col>\n                            <Col span={12}>{block.Content.validation}</Col>\n                            <Divider/>\n                        </Row>\n                        : null\n                    }\n\n                    {block.Content.action ?\n                        <Row>\n                            <Col span={6}><b>Action:</b></Col>\n                            <Col span={12}>{block.Content.action}</Col>\n                            <Divider/>\n                        </Row>\n                        : null\n                    }\n\n                    {block.Content.afterMessage ?\n                        <Row>\n                            <Col span={6}><b>After Message:</b></Col>\n                            <Col span={12}>{block.Content.afterMessage}</Col>\n                            <Divider/>\n                        </Row>\n                        : null\n                    }\n\n                    {block.Content.showTop ?\n                        <Row>\n                            <Col span={6}><b>Show Top:</b></Col>\n                            <Col span={12}>{block.Content.showTop}</Col>\n                            <Divider/>\n                        </Row>\n                        : null\n                    }\n\n                    {block.Content.databaseID ?\n                        <Row>\n                            <Col span={6}><b>Database:</b></Col>\n                            <Col\n                                span={12}>{databases.databaseTypes?databases.databaseTypes\n                                .find(databaseType => databaseType === block.Content.databaseType):null}</Col>\n                            <Divider/>\n                        </Row>\n                        : null\n                    }\n\n                    {block.Content.storeInDB ?\n                        <Row>\n                            <Col span={6}><b>Store in DB:</b></Col>\n                            <Col span={6}><Checkbox checked={block.Content.storeInDB}></Checkbox></Col>\n\n                            <Col span={6}><b>Skippable:</b></Col>\n                            <Col span={6}><Checkbox checked={block.content.isSkippable}></Checkbox></Col>\n                            <Divider/>\n                        </Row>\n                        : null\n                    }\n\n                    {block.Content.answers ?\n                        <div>\n                            <b>Answers:</b>\n                            {\n                                block.Content.answers.map((answer, i) =>\n                                    <Card key={i} style={{margin: 5, width: 300}}>\n                                        <Meta\n                                            title={answer.text}\n                                            description={\n                                                (<>Keywords: {answer.keywords.map((keyword, i) =>\n                                                    <Tag key={i}>{keyword}</Tag>)}</>)\n                                            }\n                                        />\n                                        <Row>\n                                            <Divider/>\n                                            <Col span={6}>Action:</Col>\n                                            <Col span={12}>{answer.action}</Col>\n                                        </Row>\n\n                                        <Row>\n                                            <Divider/>\n                                            <Col span={6}>After Message</Col>\n                                            <Col span={12}>{answer.afterMessage}</Col>\n                                        </Row>\n\n                                    </Card>\n                                )\n                            }\n                        </div>\n                        : null\n                    }\n\n                    <Row>\n                        <Col span={6}><b>Block To Go ID:</b></Col>\n                        <Col span={12}>{block.Content.blockToGoID || `None`}</Col>\n                        <Divider/>\n                    </Row>\n\n                </Panel>\n            </Collapse>\n        );\n    }\n\n}\n\nexport default Block;\n\n","export const onDelete = (id, type, handler) => handler({\n    id: id,\n    type: type\n});\n\nexport const onCancel = (handleNewBlock, handleEditBlock) => handleNewBlock ? handleNewBlock(false) : handleEditBlock(false);\n\n\nexport const initActionType = (block, allGroups, handleSetState) => {\n    if (block.Content.action === \"Go To Specific Block\")\n        return {showGoToBlock: true, showGoToGroup: false}\n    else if (block.Content.action === \"Go To Group\") {\n        // because here we dont' have column in each block contains all the group\n        // this is a workaround to have the group name from the block id\n        const {blockToGoID} = block.Content;\n        for (const group of allGroups)\n            if (group.blocks[0].ID === blockToGoID)\n                return {showGoToBlock: false, showGoToGroup: true};\n    } else\n        return {showGoToBlock: false, showGoToGroup: false};\n};\n\nexport const onSelectAction = (action) => {\n    if (action === \"Go To Specific Block\")\n        return {showGoToBlock: true, showGoToGroup: false};\n    else if (action === \"Go To Group\")\n        return {showGoToBlock: false, showGoToGroup: true};\n    else\n        return {showGoToBlock: false, showGoToGroup: false};\n};\n\nexport const onFileTypeChange = (checkedValues) => {\n    return {fileTypes: checkedValues}\n};\n\nexport const getBlockId = (blockToGoID, blockToGoIDGroup, blocks, formBlock) => {\n    if (blockToGoID)\n        return blockToGoID;\n    else if (blockToGoIDGroup)\n        return blockToGoIDGroup;\n    else if (formBlock === \"NewBlock\")\n        return null;\n    else\n    // find my id and my next block id then return it\n    // else retrun null\n        for (const [index, block] of Object.entries(blocks)) {\n            if (formBlock?.ID === block?.ID)\n                if (blocks[Number(index) + 1]?.ID)\n                    return blocks[Number(index) + 1]?.ID;\n                else\n                    return null\n        }\n};\n\nexport const checkBlockTogGoID = (blocks, blockGroups, groupID) => {\n    // if there is a passed blocks\n    //   - if Content.action === \"Go To Next Block\" update it from here to the next block ID (DONE)\n    //   - Check the current block if its blockToGoID is valid or not\n    //     - how to check if it is valid or not?\n    //       by finding this ID in all blocks in the assistant level\n    //       if not return it as null\n    //       - in the case of deleting a block and there are blocks assigned to to it\n    // if there is no passed blocks\n    //   - Check each block.Content.action === \"Go To Next Block\" in each group then update it to the next block ID\n    //     - (1) Print each block from blockGroups variable\n    //     - (2) Validate each block from blockGroups variable if it has valid block.Content.blockToGoID or not\n    //   - [...]\n\n    if (blocks) {\n        // works fine for update\n        blocks.map((block, index) => {\n            if (block.Content.action === \"Go To Next Block\")\n                block.Content.blockToGoID = blocks[Number(index) + 1]?.ID || null;\n            else {\n                // check the next step where to check block.ID is valid or not\n                // we might have IDs from other groups, so we might need the whole state of blockGroups from reducer\n                let isValidID = !!blockGroups.map(group => group.blocks.find(fromState_block => fromState_block.ID === block.ID))[0];\n                if (!isValidID)\n                    block.Content.blockToGoID = null;\n            }\n            return block;\n        });\n\n        return blocks\n    } else {\n        // I want this to update everything in flow\n        blockGroups.map(group => {\n            group.blocks.map(fromState_block => {\n                // check each block.Content.blockToGoID if valid or not\n                let isValidID = !!blockGroups.map(group => group.blocks.find(comparedBlock => comparedBlock.ID === fromState_block.ID))[0];\n                if (!isValidID)\n                    fromState_block.Content.blockToGoID = null;\n            })\n        });\n\n        return blockGroups\n    }\n};\n\nexport const getInitialVariables = (flowOptions, modalState, type) => {\n    let block = modalState.block ? modalState.block : {Content: {}};\n    let blockOptions = {};\n    // extract the correct blockType from blockTypes[]\n    for (const blockType of flowOptions.blockTypes)\n        if (blockType.name === (block.Type || type)) {\n            blockOptions = blockType;\n            break;\n        }\n    return {blockOptions, block}\n};","import {Button, Checkbox, Input, Select, Spin} from \"antd\";\nimport React from 'react';\nimport {onCancel, onDelete, onFileTypeChange, onSelectAction} from \"./CardTypesHelpers\";\n\nconst Option = Select.Option;\nconst CheckboxGroup = Checkbox.Group;\n\n// Common Components\n////////////////////////////////////////////\nexport const QuestionFormItem = ({FormItem, layout, getFieldDecorator, block, placeholder}) => {\n    return (\n        <FormItem label=\"Question\"\n                  extra=\"The above text will be shown in a bubble inside the chat\"\n                  {...layout}>\n            {getFieldDecorator('text', {\n                initialValue: block.Content.text,\n                rules: [{\n                    required: true,\n                    message: \"Please input a question\",\n                }],\n            })(\n                <Input placeholder={placeholder}/>\n            )}\n        </FormItem>\n    )\n};\n\nexport const DataTypeFormItem = ({FormItem, layout, getFieldDecorator, options, block}) => (\n    <FormItem label=\"Data Type\" {...layout}\n              extra=\"Selecting a Data Type will result in a smarter AI processing and accurate data collection\">\n        {\n            getFieldDecorator('dataType', {\n                initialValue: block.DataType ? block.DataType.name : undefined,\n                rules: [{\n                    required: true,\n                    message: \"Please specify the data type\",\n                }]\n            })(\n                <Select placeholder=\"Will validate the input and categorise user inputs\">\n                    {\n                        options.flow.dataTypes.map((type, i) =>\n                            <Option key={i} value={type.name}>{type.name}</Option>)\n                    }\n                </Select>\n            )\n        }\n    </FormItem>\n);\n\nexport const SkippableFormItem = ({FormItem, layout, getFieldDecorator, block}) => (\n    <FormItem label=\"Skippable?\" {...layout}>\n        {getFieldDecorator('isSkippable', {\n            valuePropName: 'checked',\n            initialValue: block.Skippable ? block.Skippable : false,\n        })(\n            <Checkbox>Users can skip answering this question</Checkbox>\n        )}\n    </FormItem>\n);\n\n//TODO: Needs to be checked\nexport const StoreInDBFormItem = ({FormItem, layout, getFieldDecorator, block, blockOptions}) => (\n    <FormItem label=\"Store responses?\" {...layout}>\n        {getFieldDecorator('storeInDB', {\n            valuePropName: 'checked',\n            initialValue: block.alwaysStoreInDB ? block.alwaysStoreInDB : blockOptions.alwaysStoreInDB,\n        })(\n            <Checkbox disabled={blockOptions.alwaysStoreInDB}>\n                Users' responses should be recorded</Checkbox>\n        )}\n    </FormItem>\n);\n\nexport const AfterMessageFormItem = ({FormItem, layout, getFieldDecorator, block}) => (\n    <FormItem label=\"After message\"\n              extra=\"This message will display straight after the user's response\"\n              {...layout}>\n        {getFieldDecorator('afterMessage', {\n            initialValue: block.Content.afterMessage ? block.Content.afterMessage : undefined,\n            rules: [{\n                required: false,\n                message: \"Please input question field\",\n            }],\n        })(\n            <Input placeholder=\"Ex: Your input is recorded\"/>\n        )}\n    </FormItem>\n);\n\nexport const ActionFormItem = ({FormItem, layout, getFieldDecorator, setStateHandler, blockOptions, block}) => (\n    <FormItem label=\"Action\" {...layout}>\n        {\n            blockOptions.actions ?\n                getFieldDecorator('action', {\n                    initialValue: block.Content.action ? block.Content.action : undefined,\n                    rules: [{\n                        required: true,\n                        message: \"Please select an action\",\n                    }],\n                })(\n                    <Select onSelect={(action) => setStateHandler(onSelectAction(action))}\n                            placeholder=\"The next step after this block\">{\n                        blockOptions.actions.map((action, i) =>\n                            <Option key={i} value={action}>{action}</Option>)\n                    }</Select>\n                )\n                : <Spin><Select placeholder=\"The next step after this block\"></Select></Spin>\n        }\n    </FormItem>\n);\n\nexport const ShowGoToBlockFormItem = ({FormItem, layout, getFieldDecorator, allBlocks, showGoToBlock, block}) => {\n    return (\n        showGoToBlock ?\n            (\n                <FormItem label=\"Go To Specific Block\" {...layout}>\n                    {\n                        getFieldDecorator('blockToGoID',\n                            {\n                                initialValue: block.Content.blockToGoID ? block.Content.blockToGoID : undefined,\n                                rules: [{required: true, message: \"Please select your next block\"}]\n                            }\n                        )(\n                            <Select placeholder=\"The next block to go to\">{\n                                allBlocks.map((block, i) =>\n                                    <Option key={i} value={block.ID}>\n                                        {`${block.ID}- (${block.Type}) ${block.Content.text ? block.Content.text : ''}`}\n                                    </Option>\n                                )\n                            }</Select>\n                        )\n                    }\n                </FormItem>\n            ) : null\n    );\n};\n\nexport const ShowGoToGroupFormItem = ({FormItem, layout, getFieldDecorator, currentBlock, currentGroup, allGroups, showGoToGroup}) => {\n\n    allGroups = allGroups.filter(group => group.id !== currentGroup.id);\n    const selectedGroup = allGroups.find(group => !!group.blocks.find(block => block.id === currentBlock?.Content?.goToBlockID));\n\n    return (\n        showGoToGroup ?\n            (\n                <FormItem label=\"Go To Specific Group\"\n                          extra=\"The selected group will start from its first block\"\n                          {...layout}>\n                    {\n                        getFieldDecorator('blockToGoIDGroup',\n                            {\n                                initialValue: currentBlock && selectedGroup ? selectedGroup.blocks[0].ID : undefined,\n                                rules: [{required: true, message: \"Please select your next group\"}]\n                            }\n                        )(\n                            <Select placeholder=\"The first next block of a group\">{\n                                allGroups.map((group, i) => {\n                                    if (group.blocks[0]) {\n                                        return <Option key={i} value={group.blocks[0].ID}>\n                                                {`${group.name}`}\n                                            </Option>;\n                                    } else\n                                        return <Option disabled key={i} value={group.name}>\n                                                {`${group.name}`}\n                                            </Option>\n                                    }\n                                )\n                            }</Select>\n                        )\n                    }\n                </FormItem>\n            ) : null\n    );\n};\n\n// Others\n//////////////////////////////////////////////////\nexport const ButtonsForm = (handleNewBlock, handleEditBlock, handleDeleteBlock, onSubmit, block) => {\n    return handleNewBlock ? [\n        <Button key=\"cancel\" onClick={() => onCancel(handleNewBlock, handleEditBlock)}>Cancel</Button>,\n        <Button key=\"submit\" type=\"primary\" onClick={() => onSubmit('NewBlock')}>Add</Button>\n    ] : [\n        <Button key=\"delete\" type=\"danger\"\n                onClick={() => onDelete(block.ID, block.Type, handleDeleteBlock)}>\n            Delete\n        </Button>,\n        <Button key=\"cancel\" onClick={() => onCancel(handleNewBlock, handleEditBlock)}>Cancel</Button>,\n        <Button key=\"submit\" type=\"primary\" onClick={() => onSubmit(block)}>Update</Button>\n    ]\n};\n\n\nexport const FileTypesFormItem = ({FormItem, block, layout, getFieldDecorator, typesAllowed, setStateHandler}) => (\n    <FormItem label=\"File Types\" {...layout}>\n        {\n            typesAllowed ?\n                getFieldDecorator('fileTypes', {\n                    initialValue: block.Content.fileTypes,\n                    rules: [{\n                        required: true,\n                        message: \"Please select the accepted file type\",\n                    }]\n                })(\n                    <CheckboxGroup options={typesAllowed}\n                                   onChange={(checkedValues) => setStateHandler(onFileTypeChange(checkedValues))}/>\n                )\n                : <Spin/>\n        }\n    </FormItem>\n);\n\nexport const DatabaseTypeFormItem = ({FormItem, block, getFieldDecorator, layout, options}) => (\n    <FormItem label=\"Database\" {...layout}\n              extra=\"The database to be scanned for solutions (Jobs, Candidate...)\">\n        {\n            getFieldDecorator('databaseType', {\n                initialValue: block.Content.databaseType ?\n                    options.databases.types.find(type => type === block.Content.databaseType)\n                    : undefined,\n                rules: [{\n                    required: true,\n                    message: \"Please select a database type \" +\n                        \"If you don't have one please go to Database section form the left menu and upload one, \" +\n                        \"otherwise you won't be able to creat a Solution block and search for solutions in the chatbot\",\n                }],\n            })(\n                <Select placeholder=\"EX: Jobs database\">{options.databases.types.map((type, i) =>\n                    <Option key={i} value={type}>{type}</Option>)\n                }</Select>\n            )\n        }\n    </FormItem>\n);","import React, {Component} from 'react';\nimport {Card, Form} from \"antd\";\nimport {getInitialVariables, initActionType, getBlockId} from './CardTypesHelpers'\nimport {\n    ActionFormItem,\n    AfterMessageFormItem,\n    ButtonsForm,\n    DataTypeFormItem,\n    QuestionFormItem,\n    ShowGoToBlockFormItem,\n    ShowGoToGroupFormItem,\n    SkippableFormItem,\n    StoreInDBFormItem\n} from './CardTypesFormItems'\n\nconst FormItem = Form.Item;\n\nclass UserInput extends Component {\n\n    state = {\n        showGoToBlock: false,\n        showGoToGroup: false,\n    };\n\n    componentDidMount() {\n        const {modalState, options} = this.props;\n        const {block} = getInitialVariables(options.flow, modalState);\n        this.setState(initActionType(block, this.props.modalState.allGroups));\n    }\n\n    onSubmit = () => this.props.form.validateFields((err, values) => {\n        if (!err) {\n            const flowOptions = this.props.options.flow;\n            let options = {\n                Type: 'User Input',\n                StoreInDB: values.storeInDB,\n                Skippable: values.isSkippable || false,\n                DataType: flowOptions.dataTypes.find((dataType) => dataType.name === values.dataType),\n                Content: {\n                    text: values.text,\n                    blockToGoID: values.blockToGoID || values.blockToGoIDGroup || null,\n                    action: values.action,\n                    afterMessage: values.afterMessage || \"\"\n                }\n            };\n\n            if (this.props.handleNewBlock)\n                this.props.handleNewBlock(options);\n            else {\n                // Edit Block\n                options.ID = this.props.modalState.block.ID;\n                this.props.handleEditBlock(options);\n            }\n\n        }\n    });\n\n\n    render() {\n        const {modalState, options, form, handleNewBlock, handleEditBlock, handleDeleteBlock} = this.props;\n        const {blockOptions, block} = getInitialVariables(options.flow ,modalState, 'User Input');\n        const {allGroups, allBlocks, currentGroup, layout} = modalState;\n        const {getFieldDecorator} = form;\n\n\n        const buttons = ButtonsForm(handleNewBlock, handleEditBlock, handleDeleteBlock, this.onSubmit, block);\n\n        return (\n            <Card style={{width: '100%'}} actions={buttons}>\n                <Form layout='horizontal'>\n                    <QuestionFormItem FormItem={FormItem} block={block}\n                                      getFieldDecorator={getFieldDecorator}\n                                      layout={layout}\n                                      placeholder=\"Ex: What is your email?\"/>\n\n                    <DataTypeFormItem FormItem={FormItem} block={block}\n                                      getFieldDecorator={getFieldDecorator}\n                                      options={this.props.options}\n                                      layout={layout}/>\n\n                    <ActionFormItem FormItem={FormItem} blockOptions={blockOptions} block={block}\n                                    setStateHandler={(state) => this.setState(state)}\n                                    getFieldDecorator={getFieldDecorator}\n                                    layout={layout}/>\n\n                    <ShowGoToBlockFormItem FormItem={FormItem} allBlocks={allBlocks} block={block}\n                                           showGoToBlock={this.state.showGoToBlock}\n                                           getFieldDecorator={getFieldDecorator}\n                                           layout={layout}/>\n\n                    <ShowGoToGroupFormItem FormItem={FormItem}\n                                           currentBlock={block}\n                                           allGroups={allGroups}\n                                           currentGroup={currentGroup}\n                                           showGoToGroup={this.state.showGoToGroup}\n                                           getFieldDecorator={getFieldDecorator}\n                                           layout={layout}/>\n\n                    <AfterMessageFormItem FormItem={FormItem} block={block}\n                                          getFieldDecorator={getFieldDecorator}\n                                          layout={layout}/>\n\n                    <SkippableFormItem FormItem={FormItem} block={block}\n                                       getFieldDecorator={getFieldDecorator}\n                                       layout={layout}/>\n\n                    <StoreInDBFormItem FormItem={FormItem} block={block} blockOptions={blockOptions}\n                                       getFieldDecorator={getFieldDecorator}\n                                       layout={layout}/>\n\n                </Form>\n            </Card>\n        );\n    }\n}\n\nexport default Form.create()(UserInput);","import React, {Component} from 'react';\nimport {Button, Card, Form, Icon, Input, Modal, Popconfirm, Tag, Tooltip} from \"antd\";\n\nimport {getInitialVariables, initActionType} from './CardTypesHelpers'\nimport {\n    ActionFormItem,\n    AfterMessageFormItem,\n    ButtonsForm,\n    DataTypeFormItem,\n    QuestionFormItem,\n    ShowGoToBlockFormItem,\n    ShowGoToGroupFormItem,\n    SkippableFormItem,\n    StoreInDBFormItem\n} from './CardTypesFormItems'\n\nconst FormItem = Form.Item;\n\nclass Question extends Component {\n\n    state = {\n        showGoToBlock: false,\n        showGoToGroup: false,\n        modalVisible: false,\n\n        tags: [],\n        inputVisible: false,\n        inputValue: '',\n        answers: [],\n\n        groupName: ''\n    };\n\n    //Submit whole block\n    onSubmit = (formBlock) => this.props.form.validateFields(['text', 'isSkippable', 'storeInDB', 'dataType'],\n        (err, values) => {\n            if (!err) {\n                const flowOptions = this.props.options.flow;\n                let options = {\n                    Type: 'Question',\n                    StoreInDB: values.storeInDB,\n                    Skippable: values.isSkippable || false,\n                    DataType: flowOptions.dataTypes.find((dataType) => dataType.name === values.dataType),\n                    Content: {\n                        text: values.text,\n                        answers: this.state.answers\n                    }\n                };\n\n                if (this.props.handleNewBlock)\n                    this.props.handleNewBlock(options);\n                else {\n                    // Edit Block\n                    options.ID = this.props.modalState.block.ID;\n                    this.props.handleEditBlock(options);\n                }\n            }\n    });\n\n    //Add single answer\n    addAnswer = () => this.props.form.validateFields(['answer', 'action', 'blockToGoID', 'blockToGoIDGroup', 'afterMessage'],\n        (err, values) => {\n            if (!err) {\n                const answer = {\n                    text: values.answer,\n                    keywords: this.state.tags,\n                    blockToGoID: values.blockToGoID || values.blockToGoIDGroup || null,\n                    action: values.action === \"Go To Group\" ? \"Go To Specific Block\" : values.action,\n                    afterMessage: values.afterMessage || \"\"\n                };\n                let answers = [answer].concat(this.state.answers);\n                this.setState({answers, tags: []});\n                this.hideAddAnswer();\n            }\n        });\n    showAddAnswer = () => this.setState({modalVisible: true});\n    hideAddAnswer = () => this.setState({modalVisible: false});\n    removeAnswer = deletedAnswer => this.setState({\n        answers: [...this.state.answers].filter(answer => (answer.afterMessage !== deletedAnswer.afterMessage) && (answer.text !== deletedAnswer.text))\n    });\n\n    //Tags component's functions\n    removeTag = (removedTag) => this.setState({tags: this.state.tags.filter(tag => tag !== removedTag)});\n    showInput = () => this.setState({inputVisible: true}, () => this.input.focus());\n    handleInputChange = e => this.setState({inputValue: e.target.value});\n    saveInputRef = input => this.input = input;\n    handleInputConfirm = () => {\n        const inputValue = this.state.inputValue;\n        let tags = this.state.tags;\n        if (inputValue && tags.indexOf(inputValue) === -1)\n            tags = [...tags, inputValue];\n        this.setState({tags, inputVisible: false, inputValue: '',});\n    };\n\n\n    componentWillMount() {\n        const {modalState, options} = this.props;\n        const {block} = getInitialVariables(options.flow, modalState);\n        this.setState(initActionType(block, this.props.modalState.allGroups));\n        this.setState({answers: block.Content.answers || []})\n    }\n\n\n    render() {\n        const {modalState, options, form, handleNewBlock, handleEditBlock, handleDeleteBlock} = this.props;\n        const {blockOptions, block} = getInitialVariables(options.flow ,modalState, 'Question');\n        const {allGroups, allBlocks, currentGroup, layout} = modalState;\n        const {getFieldDecorator} = form;\n\n        const {tags, inputVisible, inputValue} = this.state;\n\n        const buttons = ButtonsForm(handleNewBlock, handleEditBlock, handleDeleteBlock, this.onSubmit, block);\n\n        return (\n            <Card style={{width: '100%'}} actions={buttons}>\n                <Form layout='horizontal'>\n                    <QuestionFormItem FormItem={FormItem} block={block}\n                                      getFieldDecorator={getFieldDecorator}\n                                      layout={layout}\n                                      placeholder=\"Ex: What best describes you?\"/>\n\n                    <DataTypeFormItem FormItem={FormItem} block={block}\n                                      getFieldDecorator={getFieldDecorator}\n                                      options={this.props.options}\n                                      layout={layout}/>\n\n                    <FormItem label=\"Answers\"\n                              {...layout}>\n                        <Button onClick={this.showAddAnswer}\n                                type=\"primary\" icon=\"plus\" shape=\"circle\" size={\"small\"}></Button>\n                        {\n                            this.state.answers.map((answer, i) => (\n\n                                <Card title={answer.text} key={i}\n                                      extra={\n                                          <Popconfirm placement=\"topRight\" title=\"Are you sure delete this answer?\"\n                                                      onConfirm={() => this.removeAnswer(answer)}\n                                                      okText=\"Yes\" cancelText=\"No\">\n                                              <Button type=\"danger\" icon=\"delete\" shape=\"circle\"\n                                                      size={\"small\"}></Button>\n                                          </Popconfirm>\n                                      }\n                                      style={{width: 200, margin: 10}}>\n                                    <p>Action: {answer.action}</p>\n                                    Tags: <br/>\n                                    {answer.keywords.map((keyword, i) => <Tag key={i}>{keyword}</Tag>)}\n                                </Card>\n                            ))\n                        }\n                    </FormItem>\n\n\n                    <SkippableFormItem FormItem={FormItem} block={block}\n                                       getFieldDecorator={getFieldDecorator}\n                                       layout={layout}/>\n\n                    <StoreInDBFormItem FormItem={FormItem} block={block} blockOptions={blockOptions}\n                                       getFieldDecorator={getFieldDecorator}\n                                       layout={layout}/>\n\n                </Form>\n\n\n                {/*ADDING ANSWER*/}\n                <Modal title=\"Add Answer\" width={700} destroyOnClose={true} visible={this.state.modalVisible}\n                       onOk={this.addAnswer} onCancel={this.hideAddAnswer}>\n                    <Form>\n                        <FormItem label=\"Answer\"\n                                  extra=\"This will be shown as answer in chatbot\"\n                                  {...layout}>\n                            {getFieldDecorator('answer', {\n                                rules: [{\n                                    required: true,\n                                    message: \"Please input answer field\",\n                                }],\n                            })(\n                                <Input placeholder=\"Ex: Yes I need it :)\"/>\n                            )}\n                        </FormItem>\n\n                        <FormItem label=\"Keywords\" {...layout}\n                                  extra=\"Adding related keywords to the answer is necessary\n                                  for retrieving accurate solutions to the user\">\n                            <div>\n                                {tags.map((tag) => {\n                                    const isLongTag = tag.length > 20;\n                                    const tagElem = (\n                                        <Tag key={tag} closable={true} afterClose={() => this.removeTag(tag)}>\n                                            {isLongTag ? `${tag.slice(0, 20)}...` : tag}\n                                        </Tag>\n                                    );\n                                    return isLongTag ? <Tooltip title={tag} key={tag}>{tagElem}</Tooltip> : tagElem;\n                                })}\n                                {inputVisible && (\n                                    <Input\n                                        ref={this.saveInputRef}\n                                        type=\"text\"\n                                        size=\"small\"\n                                        style={{width: 78}}\n                                        value={inputValue}\n                                        onChange={this.handleInputChange}\n                                        onBlur={this.handleInputConfirm}\n                                        onPressEnter={this.handleInputConfirm}\n                                    />\n                                )}\n                                {!inputVisible && (\n                                    <Tag\n                                        onClick={this.showInput}\n                                        style={{background: '#fff', borderStyle: 'dashed'}}>\n                                        <Icon type=\"plus\"/> New Keyword\n                                    </Tag>\n                                )}\n                            </div>\n                        </FormItem>\n\n                        <ActionFormItem FormItem={FormItem} blockOptions={blockOptions}\n                                        block={block}\n                                        setStateHandler={(state) => this.setState(state)}\n                                        getFieldDecorator={getFieldDecorator}\n                                        layout={layout}/>\n\n                        <ShowGoToBlockFormItem FormItem={FormItem}\n                                               block={block}\n                                               allBlocks={allBlocks}\n                                               showGoToBlock={this.state.showGoToBlock}\n                                               getFieldDecorator={getFieldDecorator}\n                                               layout={layout}/>\n\n                        <ShowGoToGroupFormItem FormItem={FormItem}\n                                               block={block}\n                                               allGroups={allGroups}\n                                               currentGroup={currentGroup}\n                                               showGoToGroup={this.state.showGoToGroup}\n                                               getFieldDecorator={getFieldDecorator}\n                                               layout={layout}/>\n\n                        <AfterMessageFormItem FormItem={FormItem} block={block}\n                                              getFieldDecorator={getFieldDecorator}\n                                              layout={layout}/>\n                    </Form>\n\n                </Modal>\n            </Card>\n        );\n    }\n\n}\n\n\nexport default Form.create()(Question);\n\n","import React, {Component} from 'react';\nimport {Card, Form} from \"antd\";\n\nimport {getInitialVariables, initActionType} from './CardTypesHelpers'\nimport {\n    ActionFormItem,\n    AfterMessageFormItem,\n    ButtonsForm,\n    DataTypeFormItem,\n    FileTypesFormItem,\n    QuestionFormItem,\n    ShowGoToBlockFormItem,\n    ShowGoToGroupFormItem,\n    SkippableFormItem\n} from './CardTypesFormItems'\n\nconst FormItem = Form.Item;\n\nclass FileUpload extends Component {\n\n    state = {\n        showGoToBlock: false,\n        showGoToGroup: false,\n        fileTypes: [],\n    };\n\n    onSubmit = () => this.props.form.validateFields((err, values) => {\n        if (!err) {\n            const flowOptions = this.props.options.flow;\n            let options = {\n                Type: 'File Upload',\n                StoreInDB: true,\n                Skippable: values.isSkippable || false,\n                DataType: flowOptions.dataTypes.find((dataType) => dataType.name === \"No Type\"),\n                Content: {\n                    text: values.text,\n                    action: values.action,\n                    fileTypes: this.state.fileTypes,\n                    blockToGoID: values.blockToGoID || values.blockToGoIDGroup || null,\n                    afterMessage: values.afterMessage || \"\"\n                }\n            };\n\n            if (this.props.handleNewBlock)\n                this.props.handleNewBlock(options);\n            else {\n                // Edit Block\n                options.ID = this.props.modalState.block.ID;\n                this.props.handleEditBlock(options);\n            }\n        }\n    });\n\n    componentWillMount() {\n        const {modalState, options} = this.props;\n        const {block} = getInitialVariables(options.flow, modalState);\n        this.setState(initActionType(block, this.props.modalState.allGroups));\n    }\n\n\n    render() {\n        const {modalState, options, form, handleNewBlock, handleEditBlock, handleDeleteBlock} = this.props;\n        const {blockOptions, block} = getInitialVariables(options.flow , modalState, 'File Upload');\n        const {allGroups, allBlocks, currentGroup, layout} = modalState;\n        const {getFieldDecorator} = form;\n        const {typesAllowed} = blockOptions;\n\n        const buttons = ButtonsForm(handleNewBlock, handleEditBlock, handleDeleteBlock, this.onSubmit, block);\n\n        return (\n            <Card style={{width: '100%'}} actions={buttons}>\n                <Form layout='horizontal'>\n                    <QuestionFormItem FormItem={FormItem} block={block}\n                                      getFieldDecorator={getFieldDecorator}\n                                      layout={layout}\n                                      placeholder=\"Ex: Please upload your CV\"/>\n\n                    <DataTypeFormItem FormItem={FormItem} block={block}\n                                      getFieldDecorator={getFieldDecorator}\n                                      options={this.props.options}\n                                      layout={layout}/>\n\n                    <FileTypesFormItem FormItem={FormItem} typesAllowed={typesAllowed} block={block}\n                                       setStateHandler={(state) => this.setState(state)}\n                                       getFieldDecorator={getFieldDecorator}\n                                       layout={layout}/>\n\n                    <ActionFormItem FormItem={FormItem} blockOptions={blockOptions} block={block}\n                                    setStateHandler={(state) => this.setState(state)}\n                                    getFieldDecorator={getFieldDecorator}\n                                    layout={layout}/>\n\n                    <ShowGoToBlockFormItem FormItem={FormItem} allBlocks={allBlocks} block={block}\n                                           showGoToBlock={this.state.showGoToBlock}\n                                           getFieldDecorator={getFieldDecorator}\n                                           layout={layout}/>\n\n                    <ShowGoToGroupFormItem FormItem={FormItem}\n                                           block={block}\n                                           allGroups={allGroups}\n                                           currentGroup={currentGroup}\n                                           showGoToGroup={this.state.showGoToGroup}\n                                           getFieldDecorator={getFieldDecorator}\n                                           layout={layout}/>\n\n                    <AfterMessageFormItem FormItem={FormItem} block={block}\n                                          getFieldDecorator={getFieldDecorator}\n                                          layout={layout}/>\n\n                    <SkippableFormItem FormItem={FormItem} block={block}\n                                       getFieldDecorator={getFieldDecorator}\n                                       layout={layout}/>\n                </Form>\n            </Card>\n        );\n    }\n}\n\nexport default Form.create()(FileUpload);\n\n","import React, {Component} from 'react';\nimport {Card, Form, Input} from \"antd\";\nimport {getBlockId, getInitialVariables, initActionType} from './CardTypesHelpers'\nimport {\n    ActionFormItem,\n    AfterMessageFormItem,\n    ButtonsForm,\n    ShowGoToBlockFormItem,\n    ShowGoToGroupFormItem,\n    DatabaseTypeFormItem\n} from './CardTypesFormItems'\n\nconst FormItem = Form.Item;\n\nclass Solutions extends Component {\n\n    state = {\n        showGoToBlock: false,\n        showGoToGroup: false,\n    };\n\n    componentWillMount() {\n        const {modalState, options} = this.props;\n        const {block} = getInitialVariables(options.flow, modalState);\n        this.setState(initActionType(block, this.props.modalState.allGroups));\n    }\n\n    onSubmit = (formBlock) => this.props.form.validateFields((err, values) => {\n        if (!err) {\n            const flowOptions = this.props.options.flow;\n            let options = {\n                    Type: 'Solutions',\n                    StoreInDB: false,\n                    Skippable: false,\n                    DataType: flowOptions.dataTypes.find((dataType) => dataType.name === \"No Type\"),\n                    Content: {\n                        showTop: Number(values.showTop),\n                        action: values.action,\n                        blockToGoID: values.blockToGoID || values.blockToGoIDGroup || null,\n                        afterMessage: values.afterMessage || \"\" ,\n                        databaseType: values.databaseType,\n                    }\n            };\n\n            if (this.props.handleNewBlock)\n                this.props.handleNewBlock(options);\n            else {\n                // Edit Block\n                options.ID = this.props.modalState.block.ID;\n                this.props.handleEditBlock(options);\n            }\n        }\n    });\n\n\n    render() {\n        const {modalState, options, form, handleNewBlock, handleEditBlock, handleDeleteBlock} = this.props;\n        const {blockOptions, block} = getInitialVariables(options.flow ,modalState, 'Solutions');\n        const {allGroups, allBlocks, currentGroup, layout} = modalState;\n        const {getFieldDecorator} = form;\n\n        const buttons = ButtonsForm(handleNewBlock, handleEditBlock, handleDeleteBlock, this.onSubmit, block);\n\n        return (\n            <Card style={{width: '100%'}} actions={buttons}>\n                <Form layout='horizontal'>\n\n                    <FormItem label=\"Show Top Results\"\n                              extra=\"Number of results you want to return (Best matches e.g. Clients, Candidates, etc.)\"\n                              {...layout}>\n                        {getFieldDecorator('showTop', {\n                            initialValue: block.Content.showTop,\n                            rules: [{\n                                required: true,\n                                message: \"Please set how many solutions to return\",\n                            }],\n                        })(\n                            <Input min=\"1\" type=\"number\" placeholder=\"Ex: 5\"/>\n                        )}\n                    </FormItem>\n\n                    <DatabaseTypeFormItem FormItem={FormItem} block={block}\n                                          getFieldDecorator={getFieldDecorator}\n                                          layout={layout}\n                                          options={this.props.options}/>\n\n                    <ActionFormItem FormItem={FormItem} blockOptions={blockOptions} block={block}\n                                    setStateHandler={(state) => this.setState(state)}\n                                    getFieldDecorator={getFieldDecorator}\n                                    layout={layout}/>\n\n                    <ShowGoToBlockFormItem FormItem={FormItem} allBlocks={allBlocks} block={block}\n                                           showGoToBlock={this.state.showGoToBlock}\n                                           getFieldDecorator={getFieldDecorator}\n                                           layout={layout}/>\n\n                    <ShowGoToGroupFormItem FormItem={FormItem}\n                                           block={block}\n                                           allGroups={allGroups}\n                                           currentGroup={currentGroup}\n                                           showGoToGroup={this.state.showGoToGroup}\n                                           getFieldDecorator={getFieldDecorator}\n                                           layout={layout}/>\n\n                    <AfterMessageFormItem FormItem={FormItem} block={block}\n                                          getFieldDecorator={getFieldDecorator}\n                                          layout={layout}/>\n\n                </Form>\n            </Card>\n        );\n    }\n}\n\nexport default Form.create()(Solutions);\n\n","import React, {Component} from 'react';\n\nimport {http} from \"../../../../../../../helpers\";\n\nimport {Icon, Modal, Tabs} from 'antd';\n\nimport UserInput from \"../CardTypes/UserInput\";\nimport Question from \"../CardTypes/Question\";\nimport FileUpload from \"../CardTypes/FileUpload\";\nimport Solutions from \"../CardTypes/Solutions\";\n\nconst TabPane = Tabs.TabPane;\n\nclass NewBlockModal extends Component {\n\n    state = {\n        layout: {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14}\n        },\n        allBlocks: [],\n        allGroups: [],\n        currentGroup: null,\n        block: null\n    };\n\n    // componentDidMount() {\n    //     http.get(`/assistant/flow/options`)\n    //         .then(res => this.setState({flowOptions: res.data.data}))\n    // }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            allBlocks: nextProps.allBlocks,\n            allGroups: nextProps.allGroups,\n            currentGroup: nextProps.currentGroup,\n        })\n    }\n\n    handleNewBlock = (newBlock) => {\n        if (newBlock)\n            this.props.handleAddBlock(newBlock);\n        this.props.closeModal();\n    };\n\n    onChangeTab = (currentTab) => this.setState({currentTab});\n\n    render() {\n        return (\n            <div>\n                <Modal width={800}\n                       title=\"Add New Block\"\n                       visible={this.props.visible}\n                       onCancel={this.props.closeModal}\n                       destroyOnClose={true}\n                       footer={null}>\n\n                    <Tabs type=\"card\" onChange={this.onChangeTab}>\n                        <TabPane tab={<span><Icon type=\"form\"/>User Input</span>}\n                                 key=\"UserInput\">\n                            <UserInput modalState={this.state}\n                                       addNewDataCategory={this.showNewDataCategoryModal}\n                                       handleNewBlock={this.handleNewBlock}\n                                       options={this.props.options}/>\n                        </TabPane>\n\n                        <TabPane tab={<span><Icon type=\"question-circle\"/>Question</span>}\n                                 key=\"Question\">\n                            <Question modalState={this.state}\n                                      handleNewBlock={this.handleNewBlock}\n                                      options={this.props.options}/>\n                        </TabPane>\n\n                        <TabPane tab={<span><Icon type=\"file-add\"/>File Upload</span>}\n                                 key=\"FileUpload\">\n                            <FileUpload modalState={this.state}\n                                        handleNewBlock={this.handleNewBlock}\n                                        options={this.props.options}/>\n                        </TabPane>\n\n                        <TabPane tab={<span><Icon type=\"tag\"/>Solutions</span>}\n                                 key=\"Solutions\">\n                            <Solutions modalState={this.state}\n                                       handleNewBlock={this.handleNewBlock}\n                                       options={this.props.options}/>\n                        </TabPane>\n\n                    </Tabs>\n                </Modal>\n\n\n            </div>\n\n\n\n        );\n    }\n}\n\n\nexport default NewBlockModal\n","import React, {Component} from 'react';\nimport {Modal} from 'antd';\nimport UserInput from \"../CardTypes/UserInput\";\nimport Question from \"../CardTypes/Question\";\nimport FileUpload from \"../CardTypes/FileUpload\";\nimport Solutions from \"../CardTypes/Solutions\";\n\nclass EditBlockModal extends Component {\n\n    state = {\n        layout: {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14}\n        },\n        allBlocks: [],\n        allGroups: [],\n        currentGroup: null,\n        block: null\n    };\n\n    // componentDidMount() {\n    //     http.get(`/assistant/flow/options`)\n    //         .then(res => this.setState({flowOptions: res.data.data}))\n    // }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            block: nextProps.block,\n            allBlocks: nextProps.allBlocks,\n            allGroups: nextProps.allGroups,\n            currentGroup: nextProps.currentGroup,\n        })\n    }\n\n    handleEditBlock = (edittedBlock) => {\n        if (edittedBlock)\n            this.props.handleEditBlock(edittedBlock);\n        this.props.closeModal();\n    };\n\n    render() {\n        return (\n            <Modal width={800}\n                   title=\"Edit Block\"\n                   visible={this.props.visible}\n                   onCancel={this.props.closeModal}\n                   destroyOnClose={true}\n                   footer={null}>\n\n                {this.props.block.Type === \"User Input\" ?\n                    <UserInput modalState={this.state}\n                               handleEditBlock={this.handleEditBlock}\n                               handleDeleteBlock={this.props.handleDeleteBlock}\n                               options={this.props.options}/> : null}\n                {this.props.block.Type === \"Question\" ?\n                    <Question modalState={this.state} handleEditBlock={this.handleEditBlock}\n                              handleDeleteBlock={this.props.handleDeleteBlock}\n                              options={this.props.options}/> : null}\n                {this.props.block.Type === \"File Upload\" ?\n                    <FileUpload modalState={this.state} handleEditBlock={this.handleEditBlock}\n                                handleDeleteBlock={this.props.handleDeleteBlock}\n                                options={this.props.options}/> : null}\n                {this.props.block.Type === \"Solutions\" ?\n                    <Solutions modalState={this.state} handleEditBlock={this.handleEditBlock}\n                               handleDeleteBlock={this.props.handleDeleteBlock}\n                               options={this.props.options}/> : null}\n\n            </Modal>\n        );\n    }\n}\n\n\nexport default EditBlockModal\n","import React, {Component} from 'react';\n\nimport styles from \"./Blocks.module.less\";\nimport {Button, Form, Modal} from \"antd\";\n\nimport Block from \"./Block/Block\";\nimport {DragDropContext, Draggable, Droppable} from 'react-beautiful-dnd';\nimport NewBlockModal from \"./Modals/NewBlockModal\";\nimport EditBlockModal from \"./Modals/EditBlockModal1\";\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n\nconst getItemStyle = draggableStyle => ({margin: `0 0 8px 0`, ...draggableStyle});\nconst confirm = Modal.confirm;\n\nclass Blocks extends Component {\n\n    state = {\n        addBlockVisible: false,\n        editBlockVisible: false,\n        deleteBlockVisible: false,\n        blocks: [],\n        edittedBlock: {},\n        deletedBlock: {content: {}}\n    };\n\n    constructor(props) {\n        super(props);\n        this.onDragEnd = this.onDragEnd.bind(this);\n    }\n\n    onDragEnd(result) {\n        // dropped outside the list\n        if (!result.destination) return;\n\n        let blocks = reorder(this.state.blocks, result.source.index, result.destination.index);\n        this.setState({blocks});\n        // send a request to the flow for logic\n        this.props.reorderBlocks(blocks)\n    }\n\n    componentWillReceiveProps(nextProps) {\n        // This handles when updating the selected group to show its blocks\n        if (nextProps.currentGroup !== this.state.currentGroup && nextProps.currentGroup.blocks){\n            this.setState({blocks: nextProps.currentGroup.blocks})\n        }\n    }\n\n\n    ///////////////////////////////////////////////////\n\n    // ADD BLOCK MODAL CONFIGS\n    showAddBlockModal = () => this.setState({addBlockVisible: true});\n    closeAddBlockModal = () => this.setState({addBlockVisible: false});\n    handleAddBlock = (newBlock) => this.props.addBlock(newBlock, this.props.currentGroup.id);\n\n\n    // EDIT BLOCK MODAL CONFIGS\n    // this called from block.js when you click on edit block button\n    editBlock = (edittedBlock) => this.setState({edittedBlock, editBlockVisible: true});\n    closeEditBlockModal = () => this.setState({edittedBlock: {}, editBlockVisible: false});\n    handleEditBlock = (edittedBlock) => this.props.editBlock(edittedBlock);\n\n    // DELETE BLOCK MODAL CONFIGS\n    // this called from block.js & editBlockModal when you click on delete block button\n    handleDeleteBlock = deletedBlock => this.props.deleteBlock(deletedBlock);\n\n\n    render() {\n        return (\n            <div className={styles.Panel}>\n                <div className={styles.Panel_Header_With_Button}>\n                    <div>\n                        <h3>{this.props.currentGroup.name} Blocks</h3>\n                    </div>\n                    <div>\n                        <Button className={styles.Panel_Header_Button} type=\"primary\" icon=\"plus\"\n                                onClick={this.showAddBlockModal} disabled={!this.props.currentGroup.id}>\n                            Add Block\n                        </Button>\n                    </div>\n                </div>\n\n                <div className={styles.Panel_Body}>\n                    <div style={{height: \"100%\", width: '100%', overflowY: 'auto'}}>\n                        <DragDropContext onDragEnd={this.onDragEnd}>\n                            <Droppable droppableId=\"droppable\">\n                                {(provided) => (\n                                    <div ref={provided.innerRef}>\n                                        {\n                                            this.state.blocks.map((block, index) =>\n                                                <Draggable key={block.ID} draggableId={block.ID} index={index}>\n                                                    {(provided) => (\n                                                        <div ref={provided.innerRef} {...provided.draggableProps}\n                                                             {...provided.dragHandleProps}\n                                                             style={getItemStyle(provided.draggableProps.style)}>\n                                                            <Block block={block}\n                                                                   editBlock={this.editBlock}\n                                                                   deleteBlock={this.handleDeleteBlock}\n                                                                   options={this.props.options}/>\n                                                        </div>\n                                                    )}\n                                                </Draggable>\n                                            )\n                                        }\n                                        {provided.placeholder}\n                                    </div>\n                                )}\n                            </Droppable>\n                        </DragDropContext>\n                    </div>\n                </div>\n\n                <NewBlockModal visible={this.state.addBlockVisible}\n                               handleAddBlock={this.handleAddBlock}\n                               closeModal={this.closeAddBlockModal}\n\n                               currentGroup={this.props.currentGroup}\n                               allBlocks={this.state.blocks}\n                               allGroups={this.props.allGroups}\n                               options={this.props.options}/>\n\n                <EditBlockModal visible={this.state.editBlockVisible}\n                                handleEditBlock={this.handleEditBlock}\n                                handleDeleteBlock={this.handleDeleteBlock}\n                                closeModal={this.closeEditBlockModal}\n\n                                block={this.state.edittedBlock}\n                                currentGroup={this.props.currentGroup}\n                                allBlocks={this.state.blocks}\n                                allGroups={this.props.allGroups}\n                                options={this.props.options}/>\n            </div>\n        );\n    }\n}\n\nexport default Form.create()(Blocks);\n","import React, {Component} from 'react';\n\nimport Groups from \"./Groups/Groups\";\nimport Blocks from \"./Blocks/Blocks\";\nimport Header from \"../../../../../components/Header/Header\";\nimport {assistantActions} from \"../../../../../store/actions\";\nimport connect from \"react-redux/es/connect/connect\";\nimport styles from \"./Flow.module.less\"\nimport {Modal, Spin} from \"antd\";\nimport shortid from 'shortid';\nimport { Prompt } from \"react-router-dom\";\nimport {destroyMessage, successMessage} from \"../../../../../helpers\";\n\nconst confirm = Modal.confirm;\n\nclass Flow extends Component {\n\n    savedClicked = false; // Important for solving the saving flow bug\n\n    state = {\n        currentGroup: {blocks: []},\n        assistant: {Flow: {groups:[]}},\n        isSaved: true\n    };\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        if (nextProps.successMsg && this.savedClicked){\n            this.savedClicked = false;\n            this.setState({isSaved: true});\n        }\n    }\n\n    componentDidUpdate = () => {\n        if (!this.state.isSaved) {\n            console.log('reload?');\n            window.onbeforeunload = () => true\n        } else {\n            window.onbeforeunload = undefined\n        }\n    };\n\n\n    componentDidMount() {\n        console.log('componentDidMount');\n        const {assistantList, match} = this.props;\n        this.setState({assistant: assistantList.find(assistant => assistant.ID === +match.params.id)},\n            () => console.log(this.state.assistant)\n        )\n    }\n\n    getUpdatableState = () => {\n        const {assistant, currentGroup} = this.state;\n        let updatedAssistant = JSON.parse(JSON.stringify(assistant));\n        let updatedGroup = updatedAssistant.Flow?.groups[updatedAssistant.Flow.groups.findIndex(group => group.id === currentGroup.id)];\n        return {updatedAssistant, updatedGroup}\n    };\n\n    selectGroup = currentGroup => this.setState({currentGroup});\n\n\n    // GROUPS\n    addGroup = newGroup => {\n        const {updatedAssistant} = this.getUpdatableState();\n        if(!updatedAssistant.Flow)\n            updatedAssistant.Flow = {groups: []};\n        updatedAssistant.Flow.groups.push({\n            id: shortid.generate(),\n            name: newGroup.name,\n            description: newGroup.description,\n            blocks: []\n        });\n\n        this.setState({\n            assistant: updatedAssistant,\n            isSaved: false\n        })\n        destroyMessage();\n        successMessage('Group added!');\n    };\n\n    editGroup = editedGroup => {\n        const {updatedAssistant, updatedGroup} = this.getUpdatableState();\n\n        updatedGroup.name = editedGroup.name;\n        updatedGroup.description = editedGroup.description;\n        this.selectGroup(updatedGroup);\n\n        this.setState({\n            assistant: updatedAssistant,\n            isSaved: false\n        });\n        destroyMessage();\n        successMessage('Group updated!');\n    };\n\n    deleteGroup = deletedGroup => {\n        const {updatedAssistant} = this.getUpdatableState();\n        updatedAssistant.Flow.groups = updatedAssistant.Flow.groups.filter(group => group.id !== deletedGroup.id);\n        this.setState({\n            assistant: updatedAssistant,\n            currentGroup: {blocks: []},\n            isSaved: false\n        });\n        destroyMessage();\n        successMessage('Group deleted!');\n        // Todo: run the blocksRelation checker function\n    };\n\n\n    // BLOCKS\n    addBlock = (newBlock) => {\n        const {updatedAssistant, updatedGroup} = this.getUpdatableState();\n\n        const ID = shortid.generate();\n        newBlock.ID = ID;\n\n        if (updatedGroup.blocks.length > 0) {\n            const lastBlock = updatedGroup.blocks[updatedGroup.blocks.length - 1];\n            if (lastBlock.Content.action === \"Go To Next Block\")\n                lastBlock.Content.blockToGoID = ID;\n        }\n\n        updatedGroup.blocks.push(newBlock);\n\n        this.setState({\n            assistant: updatedAssistant,\n            currentGroup: updatedGroup,\n            isSaved: false\n        });\n        destroyMessage();\n        successMessage('Block added!');\n    };\n\n    editBlock = (edittedBlock) => {\n        const {updatedAssistant, updatedGroup} = this.getUpdatableState();\n        const nextBlock = updatedGroup.blocks[updatedGroup.blocks.findIndex(b => b.ID === edittedBlock.ID) + 1];\n\n        if (edittedBlock.Content.action === \"Go To Next Block\")\n            if (nextBlock?.ID)\n                edittedBlock.Content.blockToGoID = nextBlock.ID;\n            else\n                edittedBlock.Content.blockToGoID = null;\n\n        updatedGroup.blocks[updatedGroup.blocks.findIndex(b => b.ID === edittedBlock.ID)] = edittedBlock;\n\n        this.setState({\n            assistant: updatedAssistant,\n            currentGroup: updatedGroup,\n            isSaved: false\n        });\n        destroyMessage();\n        successMessage('Block updated!');\n    };\n\n    deleteBlock = (deletedBlock) => {\n        const {updatedAssistant, updatedGroup} = this.getUpdatableState();\n        let counter = 0;\n        updatedAssistant.Flow.groups.forEach((group) => {\n            group.blocks.map((block) => {\n                if (block.Content.blockToGoID === deletedBlock.ID) {\n                    block.Content.blockToGoID = null;\n                    counter++;\n                }\n                return block;\n            })\n        });\n\n        confirm({\n            title: `Delete block with type: ${deletedBlock.Type}`,\n            content: <p>If you click OK, this block will be deleted forever and will affect <b>{counter}</b> blocks</p>,\n            onOk: () => {\n                updatedGroup.blocks = updatedGroup.blocks.filter((block) => block.ID !== deletedBlock.ID);\n\n                this.setState({\n                    assistant: updatedAssistant,\n                    currentGroup: updatedGroup,\n                    isSaved: false\n                });\n                destroyMessage();\n                successMessage('Block deleted!');\n            }\n        });\n    };\n\n    reorderBlocks = (newBlocksOrder) => {\n        const {updatedAssistant, updatedGroup} = this.getUpdatableState();\n        newBlocksOrder.map((block, index, array) => {\n            if (block.Type === \"Question\") {\n                block.Content.answers.map((answer) => {\n                    if (answer.action === \"Go To Next Block\")\n                        if (array[index + 1]?.ID)\n                            answer.blockToGoID = array[index + 1].ID;\n                        else\n                            answer.blockToGoID = null;\n                    return answer\n                })\n            } else {\n                if (block.Content.action === \"Go To Next Block\")\n                    if (array[index + 1]?.ID)\n                        block.Content.blockToGoID = array[index + 1].ID;\n                    else\n                        block.Content.blockToGoID = null;\n            }\n\n            return block\n        });\n\n        updatedGroup.blocks = newBlocksOrder;\n\n        this.setState({\n            assistant: updatedAssistant,\n            currentGroup: updatedGroup,\n            isSaved: false\n        })\n    };\n\n    saveFlow = () => {\n        this.savedClicked = true;\n        this.props.dispatch(assistantActions.updateFlow(this.state.assistant));\n        this.props.location.state.assistant = this.state.assistant;\n    };\n\n    render() {\n        const {assistant} = this.state;\n        const {Flow} = assistant;\n\n        return (\n            <Spin spinning={!(!!assistant)} style={{height: '100%'}}>\n\n                <div style={{height: '100%'}}>\n                    <Header display={assistant.Name}\n                            button={{\n                                icon: \"save\",\n                                onClick: this.saveFlow,\n                                text: 'Save Flow',\n                                disabled: this.state.isSaved,\n                                loading: this.props.isUpdatingFlow\n                            }}/>\n\n                    <div className={styles.Panel_Body_Only}>\n                        <div style={{margin: '0 5px 0 0', width: '27%'}}>\n                            {\n                                assistant && <Groups selectGroup={this.selectGroup}\n                                                isLoading={this.props.isLoading}\n                                                groupsList={Flow?.groups}\n                                                currentGroup={this.state.currentGroup}\n                                                addGroup={this.addGroup}\n                                                editGroup={this.editGroup}\n                                                deleteGroup={this.deleteGroup}/>\n                            }\n                        </div>\n\n                        <div style={{margin: '0 0 0 5px', width: '73%'}}>\n                            {\n                                assistant && <Blocks addBlock={this.addBlock}\n                                                editBlock={this.editBlock}\n                                                deleteBlock={this.deleteBlock}\n                                                reorderBlocks={this.reorderBlocks}\n                                                currentGroup={this.state.currentGroup}\n                                                allGroups={Flow?.groups}\n                                                options={this.props.options}/>\n                            }\n                        </div>\n\n                    </div>\n                </div>\n\n                <Prompt\n                    when={!this.state.isSaved}\n                    message={location =>\n                        `Your flow is not saved are you sure you want leave without saving it?`\n                    }\n                />\n\n\n            </Spin>\n\n        );\n    }\n\n}\n\nfunction mapStateToProps(state) {\n    return {\n        options: state.options.options,\n        assistantList: state.assistant.assistantList,\n        successMsg: state.assistant.updateFlowSuccessMsg,\n        isUpdatingFlow: state.assistant.isUpdatingFlow,\n    };\n}\n\n\nexport default connect(mapStateToProps)(Flow);\n","import React from \"react\";\nimport {Button, Form, Input} from \"antd\";\nimport {isEmpty} from \"lodash\";\n\nconst FormItem = Form.Item;\n\nclass ProfileDetails extends React.Component {\n\n    state= {\n        name: \"\",\n        email: \"\",\n        companyName: \"\"\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                this.props.saveProfileDetails(values);\n            }\n        });\n    };\n\n    componentWillReceiveProps(nextProps){\n        const data = nextProps.profileData;\n        if(!isEmpty(data)){\n            if(data.user && data.user.email !== this.state.email){\n                this.setState({\n                    name: data.user.Firstname + \" \" + data.user.Surname,\n                    email: data.user.Email,\n                    companyName: data.company.Name\n                });\n            }\n        }\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14}\n        };\n\n        return (\n            <Form onSubmit={this.handleSubmit}>\n                <FormItem\n                    label={\"Name:\"}\n                    extra={\"Enter your name here\"}\n                    {...formItemLayout}>\n                    {getFieldDecorator(\"name\", {\n                        initialValue: this.state.name,\n                        rules: [{\n                            required: true,\n                            message: \"Please enter your first and last name here\"\n                        }],\n                    })(\n                        <Input/>\n                    )}\n                </FormItem>\n\n                <FormItem\n                    label={\"Email:\"}\n                    extra={\"Enter your email here (For your security we have temporarily disabled this box)\"}\n                    {...formItemLayout}>\n                    {getFieldDecorator(\"email\", {\n                        initialValue: this.state.email,\n                        rules: [{\n                            required: true,\n                            message: \"Please enter a valid email\"\n                        }],\n                    })(\n                        <Input disabled={true} readOnly={true}/>\n                    )}\n                </FormItem>\n\n                <FormItem\n                    label={\"Company Name:\"}\n                    extra={\"Enter your company name here\"}\n                    {...formItemLayout}>\n                    {getFieldDecorator(\"companyName\", {\n                        initialValue: this.state.companyName,\n                        rules: [{\n                            required: true,\n                            message: \"Please enter your company name\"\n                        }],\n                    })(\n                        <Input/>\n                    )}\n                </FormItem>\n\n                <br/>\n\n                <div style={{textAlign: \"center\", marginBottom: \"25px\"}}><Button htmlType={\"submit\"}\n                                                           className={\"ant-btn-primary\"}>Update</Button>\n                </div>\n            </Form>\n        )\n    }\n}\n\nexport default Form.create()(ProfileDetails)","import React from \"react\";\nimport {Button, Form, Input} from \"antd\";\nimport {isEmpty} from \"lodash\";\n\nconst FormItem = Form.Item;\n\nclass DataSettings extends React.Component {\n    state = {\n        newsletters: false,\n        statNotifications: false,\n        trackData: false,\n        techSupport: false,\n        accountSpecialist: false,\n        initialRender: false\n    };\n\n    static getDerivedStateFromProps(newProps, prevState){\n        if(prevState.initialRender){\n            return newProps\n        }\n\n        const data = newProps.profileData;\n        if(!isEmpty(data)){\n            if(data.userSettings){\n                return ({\n                    newsletters: data.newsletters,\n                    statNotifications: data.userSettings.UserInputNotifications,\n                    trackData: data.userSettings.TrackingData,\n                    techSupport: data.userSettings.TechnicalSupport,\n                    accountSpecialist: data.userSettings.AccountSpecialist,\n                    initialRender: true\n                })\n            } else {\n                return ({\n                    newsletters: data.newsletters,\n                    statNotifications: false,\n                    trackData: false,\n                    techSupport: false,\n                    accountSpecialist: false,\n                    initialRender: true\n                })\n            }\n        }\n        return ({\n            newsletters: false,\n            statNotifications: false,\n            trackData: false,\n            techSupport: false,\n            accountSpecialist: false,\n            initialRender: false\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n        console.log(\"VALUES: \", values)\n            if (!err) {\n                this.props.saveDataSettings(values);\n            }\n        });\n    };\n\n    handleChange = (e) => {\n        let name = e.target.name;\n        let checked = e.target.checked;\n        this.setState({[name]: checked});\n    };\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14}\n        };\n\n        return(\n            <Form onSubmit={this.handleSubmit}>\n                <h2>Data Sharing Settings</h2>\n                <p>Any data that you collect, process and store on TheSearchBase platform is kept\n                    secure\n                    and confidential at all times. The data that you collect is data that enables\n                    our\n                    software to work at its optimum level.</p>\n                <h4>This part of the website enables you to control what settings you may share with\n                    us.</h4>\n\n                <br/>\n\n                <FormItem\n                    label={\"Newsletters:\"}\n                    extra={\"We would like to keep you updated with the latest software updates and features available to\\n\" +\n                            \"you, If you decide to not subscribe you may miss on important features and announcements.\"}\n                    {...formItemLayout}>\n                    {getFieldDecorator(\"newsletters\", {\n                        initialValue: this.state.newsletters,\n                    })(\n                        <Input type={\"checkbox\"} name={\"newsletters\"} onChange={this.handleChange} checked={this.state.newsletters}/>\n                    )}\n                </FormItem>\n\n                <br/>\n\n                <FormItem\n                    label={\"New Users Counter:\"}\n                    extra={\"If allowed we will send you the number of new user records your assistants \" +\n                              \"have stored every 12 hours through email.\"}\n                    {...formItemLayout}>\n                    {getFieldDecorator(\"statNotifications\", {\n                        initialValue: this.state.statNotifications,\n                    })(\n                        <Input type={\"checkbox\"} name={\"statNotifications\"} onChange={this.handleChange} checked={this.state.statNotifications}/>\n                    )}\n                </FormItem>\n\n                <br/>\n\n                <strong>Erasing data</strong>\n                <p>If you decide to stop using our platform, we will simply delete\n                    your information after a year of inactivity.</p>\n\n                <br/>\n\n                <FormItem\n                    label={\"Tracking Data:\"}\n                    extra={\"We do not in any way track your information for marketing purposes. However we would recommend \" +\n                    \"allowing us to contact you if we see that there are ways we could enhance your bot or use of our software.\"}\n                    {...formItemLayout}>\n                    {getFieldDecorator(\"trackData\", {\n                        initialValue: this.state.trackData,\n                    })(\n                        <Input type={\"checkbox\"} name={\"trackData\"} onChange={this.handleChange} checked={this.state.trackData}/>\n                    )}\n                </FormItem>\n\n                <br/>\n\n                <FormItem\n                    label={\"Technical Support:\"}\n                    extra={\"Let our team view your errors and problems in order for us to solve your issues.\"}\n                    {...formItemLayout}>\n                    {getFieldDecorator(\"techSupport\", {\n                        initialValue: this.state.techSupport,\n                    })(\n                        <Input type={\"checkbox\"} name={\"techSupport\"} onChange={this.handleChange} checked={this.state.techSupport}/>\n                    )}\n                </FormItem>\n\n                <br/>\n\n                <FormItem\n                    label={\"Account Specialist:\"}\n                    extra={\"Let our team contact you to help make recommendations as to how you can make your bots more \" +\n                    \"successful and ways to collect more valuable data. If you don't have a sales specialist, we recommend \" +\n                    \"you enable this so we can help you make the most of our software.\"}\n                    {...formItemLayout}>\n                    {getFieldDecorator(\"accountSpecialist\", {\n                        initialValue: this.state.accountSpecialist,\n                    })(\n                        <Input type={\"checkbox\"} name={\"accountSpecialist\"} onChange={this.handleChange} checked={this.state.accountSpecialist}/>\n                    )}\n                </FormItem>\n\n                <br/>\n\n                <div style={{textAlign: \"center\", marginBottom: \"25px\"}}><Button htmlType={\"submit\"}\n                                                           className={\"ant-btn-primary\"}>Update</Button>\n                </div>\n            </Form>\n        )\n    }\n}\n\nexport default Form.create()(DataSettings)","import React from \"react\";\nimport {Button, Form, Icon, Input} from \"antd\";\n\nconst FormItem = Form.Item;\n\nclass ChangePassword extends React.Component {\n\n    state = {\n        confirmDirty: false,\n    };\n\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n                this.props.savePassword(values);\n                this.props.form.resetFields()\n            }\n        });\n    };\n\n    handleConfirmBlur = (e) => {\n        const value = e.target.value;\n        this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n    };\n\n    compareToFirstPassword = (rule, value, callback) => {\n        const form = this.props.form;\n        if (value && value !== form.getFieldValue('newPassword')) {\n            callback('The two new passwords that you entered are inconsistent!');\n        } else {\n            callback();\n        }\n    };\n\n    validateToNextPassword = (rule, value, callback) => {\n        const form = this.props.form;\n        if (value && this.state.confirmDirty) {\n            form.validateFields(['confirmNewPassword'], { force: true });\n        }\n        callback();\n    };\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14}\n        };\n\n        return (\n            <Form onSubmit={this.handleSubmit}>\n\n                <FormItem\n                    label={\"Old Password:\"}\n                    {...formItemLayout}>\n                    {getFieldDecorator('oldPassword', {\n                        rules: [{required: true, message: 'Please input your old password!'},],\n                    })(\n                        <Input prefix={<Icon type=\"lock\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               type=\"password\"\n                               placeholder=\"\"/>\n                    )}\n                </FormItem>\n\n                <FormItem\n                    label={\"New Password:\"}\n                    {...formItemLayout}>\n                    {getFieldDecorator('newPassword', {\n                        rules: [\n                            {required: true, message: 'Please input your new password!'},\n                            {validator: this.validateToNextPassword},\n                            {pattern: /^.{6,}$/, message: 'Minimum is 6 characters'}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"lock\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               type=\"password\"\n                               placeholder=\"\"/>\n                    )}\n                </FormItem>\n\n                <FormItem\n                    label={\"Confirm Password:\"}\n                    {...formItemLayout}>\n                    {getFieldDecorator('confirmNewPassword', {\n                        rules: [\n                            {required: true, message: 'Please confirm your new password!'},\n                            {validator: this.compareToFirstPassword}\n                        ],\n                    })(\n                        <Input prefix={<Icon type=\"lock\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                               type=\"password\"\n                               placeholder=\"\"\n                               onBlur={this.handleConfirmBlur}/>\n                    )}\n                </FormItem>\n                <br/>\n\n                <div style={{textAlign: \"center\", marginBottom: \"25px\"}}><Button htmlType={\"submit\"}\n                                                           className={\"ant-btn-primary\"}>Update</Button>\n                </div>\n            </Form>\n        )\n    }\n}\n\nexport default Form.create()(ChangePassword)","import React from 'react';\nimport {Tabs} from \"antd\";\nimport {connect} from 'react-redux';\n\nimport styles from \"./Profile.module.less\"\nimport ProfileDetails from \"./profileComponents/ProfileDetails/ProfileDetails\";\nimport DataSettings from \"./profileComponents/DataSettings/DataSettings\";\nimport ChangePassword from \"./profileComponents/ChangePassword/ChangePassword\";\n\nimport {profileActions} from \"../../../../store/actions/profile.actions\";\nconst TabPane = Tabs.TabPane;\n\nclass Profile extends React.Component {\n\n    saveProfileDetails = (values) => {\n        this.props.dispatch(profileActions.saveProfileDetails(values));\n    };\n\n    saveDataSettings = (values) => {\n        this.props.dispatch(profileActions.saveDataSettings(values));\n    };\n\n    savePassword = (values) => {\n        this.props.dispatch(profileActions.changePassword(values.oldPassword, values.newPassword));\n    };\n\n\n    componentDidMount() {\n        this.props.dispatch(profileActions.getProfile());\n    }\n\n    render() {\n\n        return (\n            <div style={{height: '100%'}}>\n                <div className={styles.Panel}>\n                    <div className={styles.Panel_Header}>\n                        <div>\n                            <h3>User Profile</h3>\n                            <p>Here you can edit your details and how we handle your data.</p>\n                        </div>\n                    </div>\n\n                    <div className={styles.Panel_Body} style={{overflowY: \"auto\"}}>\n                        <Tabs defaultActiveKey={\"1\"}>\n                            <TabPane tab={\"Conversation Details\"} key={\"1\"}>\n                                <ProfileDetails profileData={this.props.profileData} saveProfileDetails={this.saveProfileDetails}/>\n                            </TabPane>\n\n                            <TabPane tab={\"Data Settings\"} key={\"2\"}>\n                                <DataSettings profileData={this.props.profileData} saveDataSettings={this.saveDataSettings}/>\n                            </TabPane>\n\n                            <TabPane tab={\"Change Password\"} key={\"3\"}>\n                                <ChangePassword savePassword={this.savePassword}/>\n                            </TabPane>\n                        </Tabs>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        profileData: state.profile.profile\n    };\n}\n\nexport default connect(mapStateToProps)(Profile);\n","import React from 'react';\nimport {Form, Tabs} from \"antd\";\nimport {connect} from 'react-redux';\nimport {isEmpty} from \"lodash\";\n\nimport styles from \"./Billing.module.less\"\nimport \"./Billing.less\"\n\n// import {profileActions} from \"../../../../store/actions/profile.actions\";\nconst TabPane = Tabs.TabPane;\n\nclass Billing extends React.Component {\n\n    componentDidMount() {\n        // this.props.dispatch(profileActions.getProfile());\n    }\n\n    render() {\n\n        return (\n            <div style={{height: '100%'}}>\n                <div className={styles.Panel}>\n                    <div className={styles.Panel_Header}>\n                        <div>\n                            <h3>Billing</h3>\n                            <p>This page will help you understand and control what you pay to us.</p>\n                        </div>\n                    </div>\n\n                    <div className={styles.Panel_Body} style={{overflowY: \"auto\"}}>\n                        <div id=\"generic_price_table\">\n                            <section>\n                                <div className=\"container\" style={{textAlign: \"center\"}}>\n\n                                    {/*BLOCK ROW START*/}\n                                    <div className=\"row\">\n\n                                        <div className=\"col-md-4 priceBlockStyle\">\n\n                                            {/*PRICE CONTENT START*/}\n                                            <div className=\"generic_content active clearfix\">\n\n                                                {/*HEAD PRICE DETAIL START*/}\n                                                <div className=\"generic_head_price clearfix\">\n\n                                                    {/*HEAD CONTENT START*/}\n                                                    <div className=\"generic_head_content clearfix\">\n\n                                                        {/*HEAD START*/}\n                                                        <div className=\"head_bg\"></div>\n                                                        <div className=\"head\">\n                                                            <span>Standard</span>\n                                                        </div>\n                                                        {/*//HEAD END*/}\n\n                                                    </div>\n                                                    {/*//HEAD CONTENT END*/}\n\n                                                    {/*PRICE START*/}\n                                                    <div className=\"generic_price_tag clearfix\">\t\n                                                        <span className=\"price\">\n                                                            <span className=\"sign\">£</span>\n                                                            <span className=\"currency\">14</span>\n                                                            <span className=\"cent\">.99</span>\n                                                            <span className=\"month\">/Monthly</span>\n                                                        </span>\n                                                    </div>\n                                                    {/*//PRICE END*/}\n\n                                                </div>\n                                                {/*//HEAD PRICE DETAIL END*/}\n\n                                                {/*FEATURE LIST START*/}\n                                                <div className=\"generic_feature_list\">\n                                                    <ul>\n                                                        {/*<li><span>∞</span> Unlimited Usage</li>*/}\n                                                        <li><span>∞</span> Conversations</li>\n                                                        <li><span>CV</span> Storage</li>\n                                                        <li><span>CRM</span> Integration</li>\n                                                        <li><span>Custom</span> Chatbots</li>\n                                                        <li><span>7 Day</span> Support</li>\n                                                    </ul>\n                                                </div>\n                                                {/*//FEATURE LIST END*/}\n\n                                                {/*BUTTON START*/}\n                                                <div className=\"generic_price_btn clearfix\">\n                                                    <a className=\"\" href=\"mailto:info@thesearchbase.com?subject=Standard Package&body=Hi, I'm interested in the Standard Package.\">Sign up</a>\n                                                </div>\n                                                {/*//BUTTON END*/}\n\n                                            </div>\n                                            {/*//PRICE CONTENT END*/}\n\n                                        </div>\n                                        <div className=\"col-md-4 priceBlockStyle\">\n\n                                            {/*PRICE CONTENT START*/}\n                                            <div className=\"generic_content clearfix\">\n\n                                                {/*HEAD PRICE DETAIL START*/}\n                                                <div className=\"generic_head_price clearfix\">\n\n                                                    {/*HEAD CONTENT START*/}\n                                                    <div className=\"generic_head_content clearfix\">\n\n                                                        {/*HEAD START*/}\n                                                        <div className=\"head_bg\"></div>\n                                                        <div className=\"head\">\n                                                            <span>Professional</span>\n                                                        </div>\n                                                        {/*//HEAD END*/}\n\n                                                    </div>\n                                                    {/*//HEAD CONTENT END*/}\n\n                                                    {/*PRICE START*/}\n                                                    <div className=\"generic_price_tag clearfix\">\t\n                                                        <span className=\"price\">\n                                                            <span className=\"sign\">£</span>\n                                                            <span className=\"currency\">129</span>\n                                                            <span className=\"cent\">.99</span>\n                                                            <span className=\"month\">/Annually</span>\n                                                        </span>\n                                                    </div>\n                                                    {/*//PRICE END*/}\n\n                                                </div>\n                                                {/*//HEAD PRICE DETAIL END*/}\n\n                                                {/*FEATURE LIST START*/}\n                                                <div className=\"generic_feature_list\">\n                                                    <ul>\n                                                        <li><span>∞</span> Unlimited Usage</li>\n                                                        <li><span>∞</span> Conversations</li>\n                                                        <li><span>CV</span> Storage</li>\n                                                        <li><span>CRM</span> Integration</li>\n                                                        <li><span>Custom</span> Chatbots</li>\n                                                        <li><span>7 Day</span> Support</li>\n                                                    </ul>\n                                                </div>\n                                                {/*//FEATURE LIST END*/}\n\n                                                {/*BUTTON START*/}\n                                                <div className=\"generic_price_btn clearfix\">\n                                                    <a className=\"\" href=\"mailto:info@thesearchbase.com?subject=Professional Package&body=Hi, I'm interested in the Professional Package.\">Sign up</a>\n                                                </div>\n                                                {/*//BUTTON END*/}\n\n                                            </div>\n                                            {/*//PRICE CONTENT END*/}\n\n                                        </div>\n\n                                        <div className=\"col-md-4 priceBlockStyle\">\n\n                                            {/*PRICE CONTENT START*/}\n                                            <div className=\"generic_content clearfix\">\n\n                                                {/*HEAD PRICE DETAIL START*/}\n                                                <div className=\"generic_head_price clearfix\">\n\n                                                    {/*HEAD CONTENT START*/}\n                                                    <div className=\"generic_head_content clearfix\">\n\n                                                        {/*HEAD START*/}\n                                                        <div className=\"head_bg\"></div>\n                                                        <div className=\"head\">\n                                                            <span>Enterprise</span>\n                                                        </div>\n                                                        {/*//HEAD END*/}\n\n                                                    </div>\n                                                    {/*//HEAD CONTENT END*/}\n\n                                                    {/*PRICE START*/}\n                                                    <div className=\"generic_price_tag clearfix\">\n                                                        <span className=\"price\">\n                                                            <span className=\"sign\"></span>\n                                                            <span className=\"currency\"></span>\n                                                            <span className=\"cent\">Contact Sales Team</span>\n                                                            <span className=\"month\"></span>\n                                                        </span>\n                                                    </div>\n                                                    {/*//PRICE END*/}\n\n                                                </div>\n                                                {/*//HEAD PRICE DETAIL END*/}\n\n                                                {/*FEATURE LIST START*/}\n                                                <div className=\"generic_feature_list\">\n                                                    <ul>\n                                                        <li><span>Access</span> to Personal Assistant</li>\n                                                        <li><span>∞</span> Unlimited Usage</li>\n                                                        <li><span>∞</span> Conversations</li>\n                                                        <li><span>CV</span> Storage</li>\n                                                        <li><span>CRM</span> Integration</li>\n                                                        <li><span>Custom</span> Chatbots</li>\n                                                        <li><span>7 Day</span> Support</li>\n                                                    </ul>\n                                                </div>\n                                                {/*//FEATURE LIST END*/}\n\n                                                {/*BUTTON START*/}\n                                                <div className=\"generic_price_btn clearfix\">\n                                                    <a className=\"\" href=\"mailto:info@thesearchbase.com?subject=Enterprise Package&body=Hi, I'm interested in the Enterprise Package.\">Contact Sales</a>\n                                                </div>\n                                                {/*//BUTTON END*/}\n\n                                            </div>\n                                            {/*//PRICE CONTENT END*/}\n\n                                        </div>\n                                    </div>\n                                    {/*//BLOCK ROW END*/}\n\n                                </div>\n                            </section>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        // profileData: state.profile.profile\n    };\n}\n\nexport default connect(mapStateToProps)(Form.create()(Billing));\n","import React from 'react';\nimport {Button, Modal, Form, Input, Select, Tabs, Icon, Upload} from \"antd\";\nimport {isEmpty} from \"lodash\";\n\nconst FormItem = Form.Item;\nconst TabPane = Tabs.TabPane;\nconst OptGroup = Select.OptGroup;\nconst Option = Select.Option;\n\nclass UserModal extends React.Component {\n\n    state = {\n        roles: [\"Admin\", \"User\"]\n    };\n\n    handleSave = () => this.props.form.validateFields((err, values) => {\n        const formData = new FormData();\n        for (let key in values) {\n            // skip loop if the property is from prototype\n            if (!values.hasOwnProperty(key)) continue;\n\n            formData.append(key, values[key]);\n        }\n        this.props.handleSave(formData);\n    });\n\n    closeModal = () => {\n        this.props.handleCancel();\n    };\n\n    render() {\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        };\n        const {getFieldDecorator} = this.props.form;\n\n        return (\n            <Modal\n                width={800}\n                title=\"Add New User\"\n                destroyOnClose={true}\n                visible={this.props.visible}\n                onOk={this.props.handleSave}\n                onCancel={this.props.handleCancel}\n                footer={[\n                    <Button key=\"Cancel\" onClick={this.closeModal}>Cancel</Button>,\n                    <Button key=\"submit\" type=\"primary\" onClick={this.handleSave}>{\"Add\"}</Button>\n                ]}>\n                <Form layout='horizontal'>\n                    <FormItem\n                        label=\"User Name\"\n                        extra=\"Enter the name of the user\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('name', {\n                            rules: [{\n                                required: true,\n                                message: 'Please enter your the new user\\'s name',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: John Smith, Wesley Snipes\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem\n                        label=\"User Email\"\n                        extra=\"The email of the User. When added they will receive a random generated password which they can change later\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('email', {\n                            rules: [{\n                                required: true,\n                                message: 'Please enter the User\\'s email',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: john_smith@mycompany.com\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem\n                        label=\"User Type\"\n                        extra=\"The type defines what permissions the User will have\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('type', {\n                            initialValue: \"User\",\n                            rules: [{\n                                required: true,\n                                message: 'Please select what User you are adding',\n                            }],\n                        })(\n                            <Select onChange={this.changeTypeHandler}>\n                                {\n                                    this.state.roles.map(role => (\n                                            <Option key={role} value={role}>{role}</Option>\n                                        )\n                                    )\n                                }\n                            </Select>\n                        )}\n                    </FormItem>\n                </Form>\n            </Modal>\n        );\n    }\n}\n\nexport default Form.create()(UserModal)","import React from \"react\";\n\nimport {Button, Form, Input, InputNumber, Popconfirm, Table,} from 'antd';\nimport {isEmpty} from \"lodash\";\nimport UserModal from \"./UserModal/UserModal\";\nimport styles from \"./UsersDisplay.less\"\n\n\nconst data = [];\nconst FormItem = Form.Item;\nconst EditableContext = React.createContext();\n\nconst EditableRow = ({form, index, ...props}) => (\n    <EditableContext.Provider value={form}>\n        <tr {...props} />\n    </EditableContext.Provider>\n);\n\nconst EditableFormRow = Form.create()(EditableRow);\n\nclass EditableCell extends React.Component {\n    getInput = () => {\n        if (this.props.inputType === 'number') {\n            return <InputNumber/>;\n        }\n        return <Input/>;\n    };\n\n    render() {\n        const {\n            editing,\n            dataIndex,\n            title,\n            inputType,\n            record,\n            index,\n            ...restProps\n        } = this.props;\n        return (\n            <EditableContext.Consumer>\n                {(form) => {\n                    const {getFieldDecorator} = form;\n                    return (\n                        <td {...restProps}>\n                            {editing ? (\n                                <FormItem style={{margin: 0}}>\n                                    {getFieldDecorator(dataIndex, {\n                                        rules: [{\n                                            required: true,\n                                            message: `Please Input ${title}!`,\n                                        }],\n                                        initialValue: record[dataIndex],\n                                    })(this.getInput())}\n                                </FormItem>\n                            ) : restProps.children}\n                        </td>\n                    );\n                }}\n            </EditableContext.Consumer>\n        );\n    }\n}\n\nclass UsersDisplay extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {data, editingKey: '', UserModal: false};\n        this.columns = [\n            {\n                title: 'Name',\n                dataIndex: 'Fullname',\n                width: '31%',\n                editable: true,\n            },\n            {\n                title: 'Email',\n                dataIndex: 'Email',\n                width: '35%',\n                editable: true,\n            },\n            {\n                title: 'Role',\n                dataIndex: 'RoleName',\n                width: '18%',\n                editable: true,\n            },\n            {\n                title: 'Action',\n                dataIndex: 'operation',\n                render: (text, record) => {\n                    const editable = this.isEditing(record);\n                    return (\n                        <div>\n                            {editable ? (\n                                <span>\n                  <EditableContext.Consumer>\n                    {form => (\n                        <a\n                            href=\"javascript:;\"\n                            onClick={() => this.handleEdit(form, record.key)}\n                            style={{marginRight: 8}}\n                        >\n                            Save\n                        </a>\n                    )}\n                  </EditableContext.Consumer>\n                  <Popconfirm\n                      title=\"Sure to cancel?\"\n                      onConfirm={() => this.cancel(record.key)}\n                  >\n                    <a>Cancel</a>\n                  </Popconfirm>\n                </span>\n                            ) : (\n                                <>\n                                    <a style={{marginRight:\"7px\"}} onClick={() => this.edit(record.key)}>Edit</a>\n                                    <a onClick={() => this.delete(record.key)}>Delete</a>\n                                </>\n                            )}\n                        </div>\n                    );\n                },\n            },\n        ];\n    }\n\n    componentWillReceiveProps(nextProps) {\n        let data = nextProps.users;\n        if (!isEmpty(data)) {\n            if (data !== this.state.data) {\n                //add records needed by the columns\n                // needs key\n                data = data.map((record, index) => {\n                    data[index][\"key\"] = data[index][\"ID\"];\n                    return record\n                });\n\n                // cant put 2 in 1\n                data = data.map((record, index) => {\n                    data[index][\"Fullname\"] = data[index][\"Firstname\"] + \" \" + data[index][\"Surname\"];\n                    return record\n                });\n\n                // cant go down a . when editing\n                data = data.map((record, index) => {\n                    data[index][\"RoleName\"] = data[index][\"Role\"][\"Name\"];\n                    return record\n                });\n\n                this.setState({\n                    data: data\n                });\n            }\n        }\n    }\n\n    isEditing = record => record.key === this.state.editingKey;\n\n    cancel = () => {\n        this.setState({editingKey: ''});\n    };\n\n    handleAdd = (form) => {\n        this.props.addUser(form);\n        this.setState({UserModal: false})\n    };\n\n    handleEdit(form, key) {\n        form.validateFields((error, row) => {\n            if (error) {\n                return;\n            }\n            console.log(\"row\", row);\n            const newData = [...this.state.data];\n            const index = newData.findIndex(item => key === item.key);\n            if (index > -1) {\n                const item = newData[index];\n                const newRecord = {...item, ...row};\n\n                console.log(\"item\", item)\n                console.log(\"newRecord\", newRecord)\n                this.props.editUser(newRecord);\n\n                newData.splice(index, 1, newRecord);\n                this.setState({data: newData, editingKey: ''});\n            } else {\n                newData.push(row);\n                this.setState({data: newData, editingKey: ''});\n            }\n        });\n    }\n\n    edit(key) {\n        this.setState({editingKey: key});\n    }\n\n    delete = (key) => {\n        this.props.deleteUser(this.state.data.filter(record => record[\"key\"] === key)[0]);\n    };\n\n    showUserModal = () => this.setState({UserModal: true});\n\n    handleUserCancel = () => this.setState({UserModal: false});\n\n    render() {\n        const components = {\n            body: {\n                row: EditableFormRow,\n                cell: EditableCell,\n            },\n        };\n\n        const columns = this.columns.map((col) => {\n            if (!col.editable) {\n                return col;\n            }\n            return {\n                ...col,\n                onCell: record => ({\n                    record,\n                    inputType: col.dataIndex === 'age' ? 'number' : 'text',\n                    dataIndex: col.dataIndex,\n                    title: col.title,\n                    editing: this.isEditing(record),\n                }),\n            };\n        });\n\n        return (\n            <>\n                <UserModal\n                    visible={this.state.UserModal}\n                    handleCancel={this.handleUserCancel}\n                    handleSave={this.handleAdd}\n                />\n                <div style={{textAlign: \"right\"}}>\n                    <Button className={styles.Panel_Header_Button} style={{marginBottom: \"10px\"}} type=\"primary\"\n                            icon=\"plus\"\n                            onClick={this.showUserModal}>\n                        Add User\n                    </Button>\n                </div>\n                <Table\n                    components={components}\n                    bordered\n                    dataSource={this.state.data}\n                    columns={columns}\n                    rowClassName=\"editable-row\"\n                />\n            </>\n        );\n    }\n}\n\nexport default UsersDisplay;","import React from \"react\";\nimport styles from \"./UsersManagement.module.less\";\nimport {Tabs, Modal} from \"antd\";\nimport connect from \"react-redux/es/connect/connect\";\nimport {usersManagementActions} from \"../../../../store/actions\";\nimport UsersDisplay from \"./UsersDisplay/UsersDisplay\";\n\nconst TabPane = Tabs.TabPane;\nconst confirm = Modal.confirm;\n\n\nclass UsersManagement extends React.Component {\n\n    componentDidMount() {\n        this.props.dispatch(usersManagementActions.getUsers());\n    }\n\n    addUser = (user) => {\n        this.props.dispatch(usersManagementActions.addUser({user:user}));\n    };\n\n    editUser = (user) => {\n        this.props.dispatch(usersManagementActions.editUser({user:user}));\n    };\n\n    deleteUser = (user) => {\n        confirm({\n            title: `Delete user confirmation`,\n            content: `If you click OK, this user will be deleted and its associated details forever`,\n            onOk: () => {\n                this.props.dispatch(usersManagementActions.deleteUser({user:user}));\n            }\n        });\n    };\n\n    render () {\n        return (\n            <div style={{height: '100%'}}>\n                <div className={styles.Panel}>\n                    <div className={styles.Panel_Header}>\n                        <div>\n                            <h3>Users Management</h3>\n                            <p>Here you can edit other users under your company and what permissions they have.</p>\n                        </div>\n                    </div>\n\n                    <div className={styles.Panel_Body} style={{overflowY: \"auto\"}}>\n                        <Tabs defaultActiveKey={\"1\"}>\n                            <TabPane tab={\"Users\"} key={\"1\"}>\n                                <UsersDisplay\n                                    users={this.props.usersData.users}\n                                    addUser={this.addUser}\n                                    editUser={this.editUser}\n                                    deleteUser={this.deleteUser}\n                                />\n                            </TabPane>\n\n                            <TabPane tab={\"Permissions\"} key={\"2\"}>\n                                Coming soon...\n                            </TabPane>\n                        </Tabs>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        usersData: state.usersManagement.usersList\n    };\n}\n\nexport default connect(mapStateToProps)(UsersManagement)","import React from 'react';\nimport styles from \"./Analytics.module.less\";\n\nimport Header from \"../../../../../components/Header/Header\";\nimport {Bar} from \"ant-design-pro/lib/Charts\";\nimport NumberInfo from 'ant-design-pro/lib/NumberInfo';\nimport {Icon} from 'antd';\n\nimport moment from 'moment';\n\nconst visitData = [];\nconst beginDay = new Date().getTime();\nfor (let i = 0; i < 10; i += 1) {\n    visitData.push({\n        x: moment(new Date(beginDay + (1000 * 60 * 60 * 24 * i))).format('MMM-DD'),\n        y: Math.floor(Math.random() * 100) + 10,\n        z: '123'\n    });\n}\n\nclass Analytics extends React.Component {\n    state = {\n        height: 100\n    };\n    chartDiv;\n\n    componentDidMount() {\n        const height = this.chartDiv.clientHeight;\n        this.setState({height});\n    }\n\n    render() {\n        return (\n            <div style={{height: '100%'}}>\n                <div style={{padding: '0 5px'}}>\n                    <div style={{width: '100%', height: 56, marginBottom: 10}}>\n                        <Header display={\"Analytics Page\"}/>\n                    </div>\n                </div>\n\n                <div style={{height: 'calc(100% - 66px)', width: '100%', display: 'flex'}}>\n                    <div style={{margin: 5, width: '70%'}}>\n                        <div className={styles.Panel}>\n                            <div className={styles.Panel_Header}>\n                                <h3>\n                                    <Icon type=\"fund\" theme=\"twoTone\" twoToneColor={\"#9254de\"}/> Monthly Records\n                                </h3>\n                            </div>\n\n                            <div className={styles.Panel_Body}\n                                 ref={chartDiv => this.chartDiv = chartDiv}>\n                                <Bar\n                                    color={\"#9254de\"}\n                                    height={this.state.height - 30}\n                                    title=\"Users Over Date\"\n                                    data={visitData}\n                                />\n                            </div>\n                        </div>\n                    </div>\n\n                    <div style={{height: '100%', width: '30%', margin: 5}}>\n                        <div style={{height: 'calc(50% - 5px)', marginBottom: 5}}>\n                            <div className={styles.Panel}>\n                                <div className={styles.Panel_Header}>\n                                    <h3>\n                                        <Icon type=\"team\" style={{color: \"#9254de\"}}/> Total Users\n                                    </h3>\n                                </div>\n\n                                <div className={styles.Panel_Body}>\n                                    <NumberInfo\n                                        subTitle={<span>All Users</span>}\n                                        total={123.0}\n                                        subtitle={<span>The total users number used this assistant</span>}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n\n                        <div style={{height: 'calc(50% - 10px)'}}>\n                            <div className={styles.Panel}>\n                                <div className={styles.Panel_Header}>\n                                    <h3>\n                                        <Icon type=\"eye\" theme=\"twoTone\" twoToneColor=\"#9254de\"/> Total Visits\n                                    </h3>\n                                </div>\n\n                                <div className={styles.Panel_Body}>\n                                    <NumberInfo\n                                        subTitle={<span>Visits this week</span>}\n                                        total={12321.0}\n                                        status=\"up\"\n                                        subTotal={17.1}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default Analytics;","import React from \"react\";\nimport Header from \"../../../components/Header/Header\";\nimport {Menu, Icon, Tabs, Button} from 'antd';\nimport styles from \"./Documentation.module.less\";\n\nconst SubMenu = Menu.SubMenu;\nconst TabPane = Tabs.TabPane;\n\nclass Documentation extends React.Component{\n\n    state = {\n        currentKey: \"1\"\n    };\n\n    handleMenuChange = (item) => {\n        this.setState({currentKey: item.key});\n    };\n\n    render () {\n\n\n        return (\n            <div style={{height: '100%'}}>\n                <div style={{height: 'calc(100% - 66px)', width: '100%', display: 'flex'}}>\n                    <div style={{margin: 5, width: '27%'}}>\n                        <div className={styles.Panel}>\n                            <div className={styles.Panel_Header}>\n                                <div>\n                                    <h3>Navigation</h3>\n                                </div>\n                            </div>\n                            <div className={styles.Panel_Body}>\n                                <Menu\n                                    mode=\"inline\"\n                                    style={{ width: '100%' }}\n                                    onClick={this.handleMenuChange}\n                                    defaultSelectedKeys={['1']}\n                                    defaultOpenKeys={['sub1']}\n                                  >\n                                    <SubMenu key=\"sub1\" title={<span><Icon type=\"mail\" /><span>General Information</span></span>}>\n                                      <Menu.Item key=\"1\">Website Structure</Menu.Item>\n                                      <Menu.Item key=\"2\">Date & Time</Menu.Item>\n                                      <Menu.Item key=\"3\">Candidate</Menu.Item>\n                                      <Menu.Item key=\"4\">Client</Menu.Item>\n                                      <Menu.Item key=\"5\">Jobs</Menu.Item>\n                                    </SubMenu>\n\n                                    <SubMenu key=\"sub2\" title={<span><Icon type=\"mail\" /><span>Chatbots</span></span>}>\n                                      <Menu.Item key=\"6\">Creating your Chatbot</Menu.Item>\n                                      <Menu.Item key=\"7\">Data</Menu.Item>\n                                      <Menu.Item key=\"8\">Candidates from Chatbot</Menu.Item>\n                                      <Menu.Item key=\"9\">Clients from Chatbot</Menu.Item>\n                                      <Menu.Item key=\"10\">Templates</Menu.Item>\n                                    </SubMenu>\n\n                                  </Menu>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div style={{margin: 5, width: '73%'}}>\n                        <div className={styles.Panel}>\n                            <div className={styles.Panel_Header}>\n                                <div>\n                                    <h3>Information</h3>\n                                </div>\n                            </div>\n                            <div className={styles.Panel_Body}>\n\n                                <Tabs defaultActiveKey=\"1\" activeKey={this.state.currentKey} tabBarStyle={{display:\"none\"}}>\n                                    <TabPane key=\"1\">\n                                        <p>\n                                            As a platform, we have divided Admin Panel into three multiple sections which allow for the ease of accessibility.\n                                            <ul>\n                                                <li>Dashboard</li>\n                                                <li>Assistants</li>\n                                                <li>Account</li>\n                                            </ul>\n                                            Dashboard: The Dashboard is mainly there to help give you an easily accessible toolbox which provides you with all the platform's features.<br /><br />\n                                            Assistants: The Assistant's page is where you will be able to control all their Chatbots and control their operations.<br /><br />\n                                            Account: The Account's page can be used to make changes to your account and control your details.\n                                        </p>\n                                    </TabPane>\n\n                                    <TabPane key=\"2\">\n                                        <p>\n                                            TheSearchBase uses Greenwich Mean Time (GMT) to track the time. All your automatic notifications will be based on this time and the time in which data has been collected will also be measured using this format.\n                                        </p>\n                                    </TabPane>\n\n                                    <TabPane key=\"3\">\n                                        <p>\n                                            Your account will be provided with a default database for the candidates which you process and collect data from. All of the data which you collect will be can be easily accessed by clicking on the Chatbot's dropdown menu and selecting 'Candidates'. This page will present you with all the candidates which have interacted with the chatbot and entered their data.\n                                        </p>\n                                    </TabPane>\n\n                                    <TabPane key=\"4\">\n                                        <p>\n                                            Your account will be provided with a default database for the clients which you start interacting with. This database will store all the key information which you can share with candidates.\n                                        </p>\n                                    </TabPane>\n\n                                    <TabPane key=\"5\">\n                                        <p>\n                                            The Jobs database is the primary location for storing all your job information. This database can be linked to your CRM and automatically import all your jobs.\n                                        </p>\n                                    </TabPane>\n\n                                    <TabPane key=\"6\">\n                                        <p>\n                                            To create a chatbot, you can choose to use the templates provide or create your own customised conversation flow. To create a Chatbot, you should first click on 'Assistants'. Once the page has loaded, at the top right click on 'Add Assistant'.<br />\n                                            <br />\n                                            You should then:<br />\n                                            <ul>\n                                                <li>Give your Assistant a name</li>\n                                                <li>A welcome message</li>\n                                                <li>A title (this will appear at the top of the chatbot)</li>\n                                                <li>How long before it automatically opens a conversation (switch off if you wish to keep it silent)</li>\n                                                <li>A template (if you wish to create it from a template)</li>\n                                            </ul>\n                                            After you have entered the necessary information, click the 'Add' button on the bottom right to save your assistant.<br />\n                                            To help speed things up, a set of default values and databases will be created for your assistant. You can change the settings at any point by clicking the 'Crank' icon on your Assistant card. You can start to customise your conversation and make it more personal by clicking on the 'Flow' icon located next to the Settings icon.<br />\n                                        </p>\n                                    </TabPane>\n\n                                    <TabPane key=\"7\">\n                                        If you wish to use your Assistant for specific task, such as showing candidates job opportunities, or showing clients candidate profiles then you can very easily connect your live data to the chatbot.<br /><br />\n                                        To connect your available jobs to the Assistant, proceed to opening the drop-down menu of the Assistant and heading to 'Jobs'. In the middle-top of the page, click on 'Add Jobs'. You can give this group of jobs a name such as 'Jobs-Feb-2019' and select how you will provide the job data.<br />\n                                        You can directly connect your CRM to our platform if you CRM provider is listed below:<br />\n                                        <ul>\n                                            <li>Bullhorn</li>\n                                            <li>Vincere</li>\n                                        </ul>\n                                        Or you can upload a file from CRM providers such as:<br />\n                                        <ul>\n                                            <li>RDB Pro Net (Access Group)</li>\n                                            <li>Mercury Xrm</li>\n                                            <li>Bullhorn</li>\n                                            <li>Vincere</li>\n                                        </ul>\n                                        Processing your jobs will take up to five seconds, and once we have processed the file, you will be able to use the data in automated conversations with candidates.<br />\n                                    </TabPane>\n\n                                    <TabPane key=\"8\">\n                                        <p>\n                                            For every Assistant you create, you will have the option to connect this to a specific database. If direct CRM integration is enabled, you will then have the option to transit this data back into your CRM.<br />\n                                            <br />\n                                            <h4>Candidate Conversations</h4>\n                                            All the conversations held with candidates and the data collected from the conversations will be held in the candidate database. Every new entry into the database will be classified as a 'new candidate', therefore from the questions asked, a profile will be made for the candidate.<br />\n                                            <h4>Jobs</h4>\n                                            In some cases, you may wish to start conversations with candidates, showcasing with jobs they may be interested in. In this instance, you will have the option to connect your 'Jobs' database to the chatbot.<br />\n                                        </p>\n                                    </TabPane>\n\n                                    <TabPane key=\"9\">\n                                        <p>\n                                            Our assistants also enable clients to directly communicate with your company and share their details, but also view undisclosed candidate profiles.<br />\n                                            <br />\n                                            <h4>Client Conversations</h4>\n                                            Every conversation held with clients will be recorded and safely stored in a database. To give make it easier to identify a client, we build a profile for every conversation held with the assistant. By viewing a client's profile, you will able to view all their details.<br />\n                                        </p>\n                                    </TabPane>\n\n                                    <TabPane key=\"10\">\n                                        <p>\n                                            We have multiple starting points for recruiters to start their conversations from. When creating a chatbot, you can simply choose if you wish to start with a template.<br />\n                                            <br />\n                                            <h4>Template Formats</h4>\n                                            We have several template formats that are best suited for certain environments.\n                                            <ul>\n                                                <li>General Front-website</li>\n                                                <li>Specific Front-Website</li>\n                                                <li>Joining Us</li>\n                                                <li>Re-recruiting old clients</li>\n                                                <li>Candidate experience</li>\n                                                <li>Pre-screening confirmation</li>\n                                                <li>Candidates with clients</li>\n                                            </ul>\n                                            <br />\n                                            <h4>Template Conversations</h4>\n                                            All the templates have been pre-made to give recruiters to save time in making them. You can at any point, change the format of the conversation and make it as personal and unique as you like.<br />\n                                            <br />\n                                            <h4>Collecting Feedback</h4>\n                                            As a recruiter, you will have the option to collect feedback after you have placed a candidate with a client. We've tried to make this as easy for you as possible.<br />\n                                            Using our pre-made templates, you can simply assign a chatbot link directly to a candidate and see what they think of their new role. You can also use similar chatbot's to ask your clients what they think of the candidate which you have recruited.<br />\n                                        </p>\n                                    </TabPane>\n\n                                </Tabs>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Documentation","import React from 'react';\n\nimport {Button, Col, Input, Row} from \"antd\";\nimport Header from \"../../../../../components/Header/Header\"\n\nimport styles from \"./Integration.module.less\"\nimport ReactDOMServer from 'react-dom/server'\nimport {hasher} from \"../../../../../helpers\"\nimport {SwatchesPicker} from 'react-color';\n\n\nconst {TextArea} = Input;\n\n\nclass Integration extends React.Component {\n\n    state = {\n        source: \"\",\n        dataName: \"tsb-widget\",\n        assistantID: \"assistantid\",\n        // dataIcon: \"#ffffff\",\n        dataCircle: \"#9254de\",\n        async: true,\n        defer: true\n    };\n\n    componentDidMount() {\n        this.setState({\n            assistantID: hasher.encode(this.props.match.params.id),\n            source: this.getWidgetSrc()\n        });\n    }\n\n    componentWillUnmount(){\n        this.removeChatbot();\n    }\n\n    handleChange = (color) => this.setState({dataCircle: color.hex || color.target.value});\n\n    removeChatbot = () => {\n        let oldBot = document.getElementById(\"TheSearchBase_Chatbot\");\n        if (oldBot) oldBot.remove();\n        let oldBotScript = document.getElementById(\"oldBotScript\");\n        if (oldBotScript) oldBotScript.remove();\n    };\n\n    copyScriptPaste = () => {\n        const pasteArea = document.getElementById(\"pasteArea\");\n        pasteArea.select();\n        document.execCommand(\"copy\");\n    };\n\n    testIntegration = () => {\n        this.removeChatbot();\n        const script = document.createElement(\"script\");\n\n        script.src = this.state.source;\n        script.async = this.state.async;\n        script.defer = this.state.defer;\n        script.setAttribute(\"data-name\", this.state.dataName);\n        script.setAttribute(\"data-id\", this.state.assistantID);\n        // script.setAttribute(\"data-icon\", this.state.dataIcon);\n        script.setAttribute(\"data-circle\", this.state.dataCircle);\n        script.setAttribute(\"id\", \"oldBotScript\");\n\n        document.body.appendChild(script);\n    };\n\n\n    getWidgetSrc = () => {\n        // include the colon if there is port number, which means localhost and not real server\n        let colon = \"\";\n        if (window.location.port !== \"\") {colon = \":\";}\n        const {protocol, port, hostname} = window.location;\n        return protocol + '//' + hostname + colon + port + \"/api/widgets/chatbot.js\";\n    };\n\n    generateDirectLink = () => {\n        const {protocol, port, hostname} = window.location;\n        let colon = \"\";\n        if (window.location.port !== \"\") colon = \":\";\n        if (port === \"3000\")\n            window.open(`${protocol}//${hostname}${colon}5000/api/assistant/${this.state.assistantID}/chatbot_direct_link`);\n        else\n            window.open(`${protocol}//${hostname}${colon}${port}/api/assistant/${this.state.assistantID}/chatbot_direct_link`);\n\n    };\n\n    getChatbotScript = () => {\n        return <script src={this.getWidgetSrc()}\n                       data-name={this.state.dataName}\n                       data-id={this.state.assistantID}\n                       // data-icon={this.state.dataIcon}\n                       data-circle={this.state.dataCircle}\n                       async={this.state.async}\n                       defer={this.state.defer}/>\n    };\n\n    render() {\n        return (\n            <div style={{height: '100%'}}>\n                <Header display={`Integration`}/>\n\n                <div className={styles.Panel_Body_Only}>\n                    <div style={{marginRight: 5, width: '45%'}} className={styles.Panel}>\n\n                        <div className={styles.Panel_Header} style={{position: \"inherit\"}}>\n                            <h3>Choosing your Assistant's looks</h3>\n                        </div>\n\n                        <div className={styles.Panel_Body}>\n                            <Row type=\"flex\" justify=\"center\">\n                                <Col>\n                                    <p> Currently you can edit the colour setting of your assistant's button.\n                                        Simply pick your preferred one bellow.</p>\n                                </Col>\n                            </Row>\n\n                            <br/>\n\n                            <Row type=\"flex\" justify=\"center\" style={{marginBottom: 50}}>\n                                <Col>\n                                    <SwatchesPicker color={this.state.dataCircle} onChange={this.handleChange}/>\n                                </Col>\n                            </Row>\n\n                            <Row type=\"flex\" justify=\"center\">\n                                <Col>\n                                    <p style={{lineHeight: '27px', marginRight: 5}}>Selected Color:</p>\n                                </Col>\n                                <Col>\n                                    <Input style={{padding: \"3px\", width: \"60px\"}} type=\"color\" name=\"dataCircle\"\n                                           value={this.state.dataCircle} onChange={this.handleChange}/>\n                                </Col>\n\n                            </Row>\n                        </div>\n                    </div>\n\n\n                    <div style={{marginLeft: 5, width: '55%'}} className={styles.Panel}>\n\n                        <div className={styles.Panel_Header} style={{position: \"inherit\"}}>\n                            <h3>Connecting your assistant</h3>\n                        </div>\n\n                        <div className={styles.Panel_Body} style={{textAlign: 'center'}}>\n                            <p style={{textAlign: 'left'}}>\n                                To integrate your assistant, you must paste the pre-made code into any part of your\n                                HTML\n                                source code.\n                            </p>\n\n                            <TextArea value={ReactDOMServer.renderToString(this.getChatbotScript())}\n                                      id={\"pasteArea\"}\n                                      style={{width: \"100%\", height: \"110px\", fontWeight: \"600\", margin: \"1.5% 0\"}}\n                                      readOnly/>\n                            <Button onClick={this.copyScriptPaste} className={\"ant-btn-primary\"}>Copy</Button>\n                            <Button style={{marginLeft: \"5px\"}} onClick={this.testIntegration}\n                                    className={\"ant-btn-primary\"}>Test</Button>\n                            <Button style={{marginLeft: \"5px\"}} onClick={this.generateDirectLink}\n                                    className={\"ant-btn-primary\"}>Generate Direct Link</Button>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default (Integration);","import React, {Component} from 'react';\nimport {Button, Table} from \"antd\";\n\n\n\nclass Profile extends Component {\n\n    counter = -1;\n    state = {\n        fileNames: []\n    };\n\n    columns = [{\n        title: 'Data Type',\n        key: 'dataType',\n        render: (text, dataType, index) => {\n            return(<p>{dataType.name}</p>)\n        },\n    }, {\n        title: 'Value',\n        key: 'input',\n        render: (text, dataType, index) => {\n\n            // Find the session with that current dataType in the row from the list of collectedData\n            let sessions = this.props.session.Data.collectedData\n                .filter((data)=> data.dataType === dataType.name);\n            if (sessions.length < 1) return null;\n\n            // If there are more than one inputs of the same dataType then concat them\n            let input = \"\";\n            let downloadFilesBtns = [];\n            let isFiles = false;\n\n            // If there are multiple records of the same data type\n            if (sessions.length > 1){\n                sessions.forEach(session => {\n                    console.log(session);\n                    // Only when file upload do the following\n                    if(session.input === '&FILE_UPLOAD&'){\n                        this.counter += 1;\n                        downloadFilesBtns.push(this.createDownloadFileBtn(this.counter));\n                        console.log(downloadFilesBtns);\n                        isFiles = true;\n                    } else {\n                        input += session.input + \" | \";\n                    }\n                });\n\n            // If there is one record of the same data type\n            } else {\n                if(sessions[0].input === '&FILE_UPLOAD&'){\n                    this.counter += 1;\n                    input = this.createDownloadFileBtn(this.counter);\n                } else {\n                    input = sessions[0].input;\n                }\n            }\n\n            // If there are files to be download\n            if (isFiles){\n                return (\n                    <React.Fragment>\n                        {downloadFilesBtns.map((fileBtn) => fileBtn)}\n                        | {input}\n                    </React.Fragment>\n                )\n            }\n\n            // If only normal text and no files\n            return (<p>{input}</p>);\n\n        }\n    }];\n\n    createDownloadFileBtn = (index) => {\n        return (<Button key={index} hreftype=\"primary\" file-path-index={index} icon=\"download\"\n                        size=\"small\" style={{margin: '0 5px 0 5px'}}\n                        onClick={(e) => {this.props.downloadFile(e.target.getAttribute('file-path-index'))}}>\n                    Download File\n                </Button>);\n    };\n \n    render() {\n        const {session, dataTypes} = this.props;\n        console.log(this.state);\n        return (\n            <Table columns={this.columns}\n                   dataSource={dataTypes.filter((type) => type.userTypes.includes(session.UserType))}\n                   size='middle'\n                   pagination={false}\n            />\n        );\n    }\n}\n\nexport default Profile;","import React, {Component} from 'react';\nimport {Button, Table, Tag} from \"antd\";\n\n\nclass Conversation extends Component {\n\n    counter = -1; // this is important for specifying what is the file name's index\n    state = {\n        fileNames: []\n    };\n\n    columns = [{\n        title: 'Question',\n        key: 'questionText',\n        render: (text, record, index) => (<p>{record.questionText}</p>),\n    }, {\n        title: 'Input',\n        key: 'input',\n        render: (text, record, index) => {\n\n            if (record.input === '&FILE_UPLOAD&') {\n                this.counter+=1;\n                return (<Button hreftype=\"primary\" file-path-index={this.counter} icon=\"download\" size=\"small\"\n                                onClick={(e) => {this.props.downloadFile(e.target.getAttribute('file-path-index'))}}>\n                    Download File\n                </Button>);\n            }\n\n            else {\n               return (<p>\n                   {record.input}\n               </p>);\n            }\n        },\n    },{\n        title: 'Data Type',\n        key: 'DataType',\n        render: (text, record, index) => (<Tag key={record.UserType}>{record.dataType}</Tag>),\n    }];\n\n\n    render() {\n        const {session} = this.props;\n        return (\n            <Table columns={this.columns}\n                   dataSource={session.Data.collectedData}\n                   size='middle'\n                   pagination={false}\n            />\n        );\n    }\n}\n\nexport default Conversation;","import React, {Component} from 'react';\nimport {Button, Modal, Table, Tabs} from \"antd\";\nimport {http, alertError} from '../../../../../../helpers';\nimport saveAs from 'file-saver';\nimport Profile from '../Profile/Profile'\nimport Conversation from '../Conversation/Conversation'\n\nconst TabPane = Tabs.TabPane;\n\n\nclass ViewsModal extends Component {\n\n    counter = -1;\n    state = {\n        fileNames: []\n    };\n\n    columns = [{\n        title: 'Question',\n        key: 'questionText',\n        render: (text, record, index) => (<p>{record.questionText}</p>),\n    }, {\n        title: 'Input',\n        key: 'input',\n        render: (text, record, index) => {\n\n            if (record.input === '&FILE_UPLOAD&') {\n                this.counter+=1;\n                return (<Button hreftype=\"primary\" data-index={this.counter} icon=\"download\" size=\"small\"\n                                onClick={(e) => {this.downloadFile(e)}}>\n                    Download File\n                </Button>);\n            }\n\n            else {\n               return (<p>\n                   {record.input}\n               </p>);\n            }\n        },\n    }];\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        if(nextProps.session && nextProps.session.FilePath){\n            this.setState({fileNames: nextProps.session.FilePath.split(',')})\n        }\n    }\n\n    downloadFileHandler = (filenameIndex) => {\n        console.log(filenameIndex);\n        // Get file name by index. indexes stored in each button corresponds to filenames stored in the state\n        const fileName = this.state.fileNames[filenameIndex];\n        if (!fileName){\n            alertError(\"File Error\", \"Sorry, but file doesn't exist!\");\n            return;\n        }\n\n        http({\n            url: `/assistant/${this.props.assistant.ID}/chatbotSessions/${fileName}`,\n            method: 'GET',\n            responseType: 'blob', // important\n        }).then((response) => {\n            saveAs(new Blob([response.data]), fileName);\n        }).catch(error => {\n            alertError(\"File Error\", \"Sorry, cannot download this file!\")\n        });\n    };\n\n\n    render() {\n        const {session, dataTypes} = this.props;\n        const userType = session ? session.UserType : 'Unknown';\n\n        return (\n            <Modal\n                width={800}\n                title=\"Session Details\"\n                destroyOnClose={true}\n                visible={this.props.visible}\n                onCancel={this.props.closeViewModal}\n                onOk={this.props.closeViewModal}\n                footer={[\n                    <Button key=\"Cancel\" onClick={this.props.closeViewModal}>OK</Button>\n                ]}>\n                <Tabs defaultActiveKey={\"1\"}>\n\n                    <TabPane tab={\"Conversation\"} key={\"1\"}>\n                        <Conversation session={session}\n                                      downloadFile={this.downloadFileHandler} />\n                    </TabPane>\n\n                    <TabPane tab={`Profile (${userType})`} key={\"2\"}>\n                        <Profile session={session} downloadFile={this.downloadFileHandler}\n                                 dataTypes={dataTypes} />\n                    </TabPane>\n\n                </Tabs>\n            </Modal>\n        );\n    }\n}\n\nexport default ViewsModal;","import React from 'react';\nimport styles from \"./Sessions.module.less\"\nimport ViewsModal from \"./ViewModal/ViewsModal\";\nimport {Button, Modal, Table, Tag} from 'antd';\nimport moment from 'moment';\nimport {chatbotSessionsActions} from \"../../../../../store/actions\";\nimport connect from \"react-redux/es/connect/connect\";\nimport Header from \"../../../../../components/Header/Header\";\n\nconst confirm = Modal.confirm;\n\n\nclass Sessions extends React.Component {\n\n    filesCounter=-1; // important for file uploads\n    state = {\n        filteredInfo: null,\n        sortedInfo: null,\n        selectedSession: null,\n        viewModal: false\n    };\n\n\n    componentDidMount() {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(chatbotSessionsActions.fetchChatbotSessions(assistant.ID))\n    }\n\n    refreshSessions = () => {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(chatbotSessionsActions.fetchChatbotSessions(assistant.ID))\n    };\n\n    clearAllChatbotSessions = () => {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(chatbotSessionsActions.clearAllChatbotSessions(assistant.ID))\n    };\n\n\n    handleFilter = (pagination, filters, sorter) => {\n        console.log('Various parameters', pagination, filters, sorter);\n        this.setState({\n            filteredInfo: filters,\n            sortedInfo: sorter,\n        });\n    };\n\n\n    closeViewModal = () => {\n        this.setState({viewModal: false, selectedSession: null})\n    };\n\n\n    showConfirmForClearing = () => {\n        const clear = this.clearAllChatbotSessions;\n        confirm({\n            title: 'Do you want to delete all records?',\n            content: 'By clicking OK, there will be no way to get these records back!',\n            okType: 'danger',\n            onOk() {clear()},\n            onCancel() {},\n        });\n    };\n\n\n\n    // Nested table that has all the answered questions per session (Not being used)\n    expandedRowRender = (record, index, indent, expanded) => {\n        const columns = [\n            {\n                title: 'Question',\n                key: 'questionText',\n                render: (text, record, index) => (<p>{record.questionText}</p>),\n            },\n            {\n                title: 'Input',\n                key: 'input',\n                render: (text, record, index) => {\n\n                    if (record.input === '&FILE_UPLOAD&') {\n                        this.filesCounter+=1;\n                        return (<Button hreftype=\"primary\" data-index={this.filesCounter} icon=\"download\" size=\"small\"\n                                        onClick={(e) => {this.downloadFile(e)}}>\n                            Download File\n                        </Button>);\n                    }\n\n                    else {\n                        return (<p>\n                            {record.input}\n                        </p>);\n                    }\n                },\n            }\n        ];\n\n\n        return (\n            <Table\n                columns={columns}\n                dataSource={record.Data.collectedData}\n                pagination={false}\n                scroll={{ y: 500 }}\n            />\n        );\n    };\n\n\n    render() {\n        const {assistant} = this.props.location.state;\n        const {sessions} = this.props;\n        let { sortedInfo, filteredInfo } = this.state;\n        sortedInfo = sortedInfo || {};\n        filteredInfo = filteredInfo || {};\n\n        const columns = [{\n            title: '#',\n            dataIndex: '#',\n            key: '#',\n            render: (text, record, index) => (<p>{index+1}</p>),\n\n        },{\n            title: 'ID',\n            dataIndex: 'ID',\n            key: 'ID',\n            sorter: (a, b) => a.ID - b.ID,\n            render: (text, record) => (<p>{record.ID}</p>),\n\n        },{\n            title: 'User Type',\n            dataIndex: 'UserType',\n            key: 'UserType',\n            filters: [\n                { text: 'Candidate', value: 'Candidate' },\n                { text: 'Client', value: 'Client' },\n            ],\n            onFilter: (value, record) => {\n                console.log(value);\n                record.UserType.includes(value)},\n            render: (text, record) => (<Tag key={record.UserType}>{record.UserType}</Tag>),\n\n        },{\n            title: 'Questions Answered',\n            dataIndex: 'QuestionsAnswered',\n            key: 'QuestionsAnswered',\n            sorter: (a, b) => a.QuestionsAnswered - b.QuestionsAnswered,\n            render: (text, record) => (\n                <p style={{textAlign:''}}>{text}</p>),\n\n        }, {\n            title: 'Solutions Returned',\n            dataIndex: 'SolutionsReturned',\n            sorter: (a, b) => a.SolutionsReturned - b.SolutionsReturned,\n            render: (text, record) => (\n                <p style={{textAlign:''}}>{text}</p>),\n\n        }, {\n            title: 'Time Spent',\n            dataIndex: 'TimeSpent',\n            key: 'TimeSpent',\n            sorter: (a, b) => a.TimeSpent - b.TimeSpent,\n            render: (text, record) => (<p style={{textAlign:'center'}}>{\n                moment.duration(parseInt(record.TimeSpent), 'seconds').asMinutes().toFixed(2) + \" minute(s)\"\n            }\n            </p>),\n\n        },{\n            title: 'Date & Time',\n            dataIndex: 'DateTime',\n            key: 'DateTime',\n            sorter: (a, b) => new Date(a.DateTime).valueOf() - new Date(b.DateTime).valueOf(),\n            render: (text, record) => (<p>{record.DateTime}</p>),\n\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record, index) => (\n                <span>\n              <a onClick={()=> {\n                  this.setState({viewModal: true, selectedSession: record})\n              }\n              }> View</a>\n                    {/*<Divider type=\"vertical\" />*/}\n                    {/*<a>Delete</a>*/}\n            </span>\n            ),\n        }];\n\n\n\n        return (\n            <div style={{height: '100%'}}>\n                <Header display={assistant.Name}/>\n                <div className={styles.Panel}>\n                    <div className={styles.Panel_Header}>\n                        <div>\n                            <h3>{assistant.Name}: conversations</h3>\n                            <p>Here you can find all the responses to your chatbot</p>\n                        </div>\n\n                        <div>\n                            <Button className={styles.Panel_Header_Button} type=\"primary\" icon=\"sync\"\n                                    onClick={this.refreshSessions} loading={this.props.isLoading}>\n                                Refresh\n                            </Button>\n\n\n                            <Button className={styles.Panel_Header_Button} type=\"primary\" icon=\"delete\"\n                                    onClick={this.showConfirmForClearing} loading={this.props.isClearingAll}>\n                                Clear All\n                            </Button>\n                        </div>\n                    </div>\n\n                    <div className={styles.Panel_Body}>\n\n                        <Table columns={columns}\n                               dataSource={sessions.sessionsList ? sessions.sessionsList : null}\n                               onChange={this.handleFilter}\n                               loading={this.props.isLoading}\n                            // expandedRowRender={this.expandedRowRender}\n                               size='middle'\n                        />\n\n                        <ViewsModal visible={this.state.viewModal}\n                                    closeViewModal={this.closeViewModal}\n                                    filesPath={sessions.filesPath}\n                                    dataTypes={sessions.dataTypes}\n                                    session={this.state.selectedSession}\n                                    assistant={assistant}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state =>  {\n    const {chatbotSessions} = state;\n    return {\n        sessions: chatbotSessions.chatbotSessions,\n        isLoading: chatbotSessions.isLoading,\n        errorMsg: chatbotSessions.errorMsg,\n\n        isClearingAll: chatbotSessions.isClearingAll\n    };\n};\nexport default connect(mapStateToProps)(Sessions);","import React from 'react';\nimport styles from \"./Home.module.less\"\n\nclass Home extends React.Component {\n\n    state = {\n\n    };\n\n    render() {\n        return (\n\n            <div style={{height: '100%'}}>\n                <div className={styles.Panel}>\n                    <div className={styles.Panel_Header}>\n                        <h1>Welcome to the Dashboard</h1>\n                    </div>\n\n                    <div className={styles.Panel_Body}>\n                        <h1>Welcome!</h1>\n                        <img\n                            src=\"https://42f2671d685f51e10fc6-b9fcecea3e50b3b59bdc28dead054ebc.ssl.cf5.rackcdn.com/illustrations/hello_aeia.svg\"\n                            alt=\"welcome image\"\n                            width={300}/>\n                        <h2>Here you can manage all your bots & see their usage analytics</h2>\n                        <h4>Use your side navigation to navigate the application.</h4>\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React, {Component} from 'react';\n\nimport {Avatar, Dropdown, Icon, Layout, Menu, notification} from 'antd';\nimport \"./Dashboard.less\"\nimport styles from \"./Dashboard.module.less\"\nimport Assistants from './Assistants/Assistants';\nimport Databases from './Databases/Databases';\nimport {getUser, history} from '../../helpers';\nimport {Route, Switch, withRouter} from 'react-router-dom';\nimport Flow from \"./Assistants/Assistant/Flow/Flow\";\nimport Profile from \"./AccountDetails/Profile/Profile\";\nimport Billing from \"./AccountDetails/Billing/Billing\";\nimport UsersManagement from \"./AccountDetails/UsersManagement/UsersManagement\";\nimport Documentation from \"./Documentation/Documentation\";\nimport Integration from \"./Assistants/Assistant/Integration/Integration\";\nimport Sessions from \"./Assistants/Assistant/Sessions/Sessions\";\nimport Home from \"./Home/Home\";\nimport Analytics from \"./Assistants/Assistant/Analytics/Analytics\";\nimport {authActions, optionsActions} from \"../../store/actions\";\nimport {store} from '../../store/store'\nimport {connect} from 'react-redux';\n\nimport {TransitionGroup, CSSTransition} from \"react-transition-group\";\n\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\nimport {faCloud} from '@fortawesome/free-solid-svg-icons'\n\nconst {SubMenu} = Menu;\nconst {Divider} = Menu;\nconst {Header, Content, Footer, Sider} = Layout;\n\n\nclass Dashboard extends Component {\n    state = {\n        collapsed: false,\n        marginLeft: 200,\n    };\n\n    componentWillMount() {\n        this.props.dispatch(optionsActions.getOptions())\n    }\n\n\n    toggle = () => {\n        this.setState({\n            collapsed: !this.state.collapsed,\n        }, () => this.setState({marginLeft: this.state.collapsed ? 81 : 200}));\n    };\n\n    handleMenuClick = (e) => {\n        if (e.key === 'logout'){this.logout()}\n        e.key === 'dashboard' ? history.push(`/dashboard`) : history.push(`/dashboard/${e.key}`)\n    };\n\n    logout = () => {\n        store.dispatch(authActions.logout());\n    };\n\n    getInitials = (username) => {\n        const initials = username.match(/\\b\\w/g) || [];\n        return ((initials.shift() || '') + (initials.pop() || '')).toUpperCase();\n    };\n\n    render() {\n\n        const {match, location} = this.props;\n        const user = getUser();\n        let userInfo = null;\n        // User Information at the top\n        if (!user) {\n            this.logout();\n        } else {\n\n            let avatar = (\n                <Avatar size=\"large\" style={{ backgroundColor: '#9254de', verticalAlign: 'middle' }}>\n                    {this.getInitials(user.username || '')}\n                </Avatar>\n            );\n            let userInfoMenu = (\n                <Menu onClick={this.handleMenuClick}>\n                    <Menu.Item key=\"profile\">\n                        <div style={{display:'flex', marginTop:'10px'}}>\n                            {avatar}\n                            <div style={{marginLeft:'10px'}}>\n                                <h3>{user.username}</h3>\n                                <p>{user.email}</p>\n                            </div>\n                        </div>\n                    </Menu.Item>\n                    <Menu.Divider />\n                    <Menu.Item key=\"logout\" >\n                        <Icon type=\"logout\"/>\n                        <span>Logout</span>\n                    </Menu.Item>\n                </Menu>\n            );\n\n            userInfo = (\n                <Dropdown overlay={userInfoMenu} overlayStyle={{width:'255px'}}>\n                    {avatar}\n                </Dropdown>\n            );\n        }\n        // End of User Information\n\n\n        return (\n            <Layout style={{height: '100%'}}>\n                <Sider\n                    trigger={null}\n                    collapsible\n                    collapsed={this.state.collapsed}\n                    className={styles.Sider}>\n\n                    <div className={styles.Logo}>\n                        {\n                            this.state.collapsed ?\n                                <div style={{display: 'flex'}}>\n                                    <FontAwesomeIcon size=\"2x\" icon={faCloud}\n                                                     style={{color: '#673AB7', marginLeft: 7}}/>\n                                </div>\n                                :\n                                <div style={{display: 'flex'}}>\n                                    <FontAwesomeIcon size=\"2x\" icon={faCloud} style={{color: '#673AB7'}}/>\n                                    <div style={{lineHeight: '32px', marginLeft: 18}}>TheSearchBase</div>\n                                </div>\n                        }\n\n                    </div>\n\n                    <Menu theme=\"light\" defaultSelectedKeys={this.state.selectedMenuKey}\n                          selectedKeys={location.pathname.split('/')[2] ? [location.pathname.split('/')[2]] : [location.pathname.split('/')[1]]}\n                          mode=\"inline\" onClick={this.handleMenuClick}>\n                        <Menu.Item key=\"dashboard\">\n                            <Icon type=\"home\"/>\n                            <span>Home</span>\n                        </Menu.Item>\n\n                        <Menu.Item key=\"assistants\">\n                            <Icon type=\"robot\"/>\n                            <span>Assistants</span>\n                        </Menu.Item>\n\n                        <Menu.Item key=\"databases\">\n                            <Icon type=\"database\"/>\n                            <span>Databases</span>\n                        </Menu.Item>\n\n                        <Divider/>\n\n                        <SubMenu key=\"sub2\" title={<span><Icon type=\"user\"/><span>Account Details</span></span>}>\n                            <Menu.Item key=\"profile\">\n                                <Icon type=\"profile\"/>\n                                Profile\n                            </Menu.Item>\n                            <Menu.Item key=\"billing\">\n                                <Icon type=\"pound\"/>\n                                Billing\n                            </Menu.Item>\n                            <Menu.Item key=\"users-management\" style={{fontSize: '9pt'}}>\n                                <Icon type=\"usergroup-add\"/>\n                                Users Management\n                            </Menu.Item>\n                        </SubMenu>\n\n                        <Menu.Item key=\"documentation\">\n                            <Icon type=\"question-circle\"/>\n                            <span>Documentation</span>\n                        </Menu.Item>\n                    </Menu>\n                </Sider>\n\n                <Layout style={{marginLeft: this.state.marginLeft, height: '100%'}}>\n\n                    <Header className={styles.Header}>\n                        <Icon\n                            className={styles.Trigger}\n                            type={this.state.collapsed ? 'menu-unfold' : 'menu-fold'}\n                            onClick={this.toggle}\n                        />\n                        <div className={styles.UserInfo}>\n                            {userInfo}\n                        </div>\n                    </Header>\n\n                    {/*HERE GOES ALL THE ROUTES*/}\n                    <Content style={{margin: 16, marginTop: 10, marginBottom: 0, height: '100%'}}>\n                        <Route render={() =>\n                            <TransitionGroup style={{height: '100%'}}>\n                                <CSSTransition key={location.key} classNames=\"fade\" timeout={550}>\n                                    <Switch location={location} style={{height: '100%'}}>\n                                        <Route path={`${match.path}/assistants/:id/flow`} component={Flow}/>\n                                        <Route path={`${match.path}/assistants/:id/integration`} component={Integration}/>\n                                        <Route path={`${match.path}/assistants/:id/sessions`} component={Sessions}/>\n                                        <Route path={`${match.path}/assistants/:id/analytics`} component={Analytics}/>\n                                        <Route path={`${match.path}/assistants`} component={Assistants} exact/>\n                                        <Route path={`${match.path}/databases`} component={Databases} exact/>\n                                        <Route path={`${match.path}/profile`} component={Profile} exact/>\n                                        <Route path={`${match.path}/billing`} component={Billing} exact/>\n                                        <Route path={`${match.path}/users-management`} component={UsersManagement} exact/>\n                                        <Route path={`${match.path}/documentation`} component={Documentation} exact/>\n                                        <Route path=\"/dashboard\" component={Home}/>\n                                    </Switch>\n                                </CSSTransition>\n                            </TransitionGroup>\n                        }/>\n\n                    </Content>\n\n                    <Footer style={{textAlign: 'center', padding: 10, zIndex:1}}>\n                        Copyright TheSearchBase Limited 2019. All rights reserved.\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        profile: state.profile.profile\n    };\n}\n\nexport default withRouter(connect(mapStateToProps)(Dashboard));","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport {authActions} from '../../store/actions/index';\nimport styles from './Login.module.less';\n\nimport {Button, Col, Form, Icon, Input, Row, Spin} from 'antd';\nimport {Link} from \"react-router-dom\";\n\nconst FormItem = Form.Item;\nclass Login extends React.Component {\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                //this.setState({isLoggin: true});\n                console.log('Received values of form: ', values);\n                this.props.dispatch(authActions.login(values.email, values.password));\n            }\n        });\n    };\n\n    handleLogout = () => {\n        this.props.dispatch(authActions.logout());\n    };\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <div className={styles.LoginBackground}>\n                <div className={[styles.LoginPanel, styles.fadeIn].join(' ')}>\n                    <Spin spinning={this.props.isLoggingIn}>\n                        <Row type=\"flex\" justify=\"center\">\n                            <Col>\n                                <h1>Login</h1>\n                            </Col>\n                        </Row>\n\n                        <br/>\n\n                        <Row type=\"flex\" justify=\"center\">\n                            <Col>\n                                <Form onSubmit={this.handleSubmit} layout={'horizontal'}>\n                                    <FormItem className={styles.LoginFormItem}>\n                                        {getFieldDecorator('email', {\n                                            rules: [{required: true, message: 'Please input your email!'}],\n                                        })(\n                                            <Input prefix={<Icon type=\"user\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                                                   placeholder=\"Email\"/>\n                                        )}\n                                    </FormItem>\n                                    <FormItem className={styles.LoginFormItem}>\n                                        {getFieldDecorator('password', {\n                                            rules: [{required: true, message: 'Please input your Password!'}],\n                                        })(\n                                            <Input prefix={<Icon type=\"lock\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                                                   type=\"password\"\n                                                   placeholder=\"Password\"/>\n                                        )}\n                                    </FormItem>\n                                </Form>\n                            </Col>\n                        </Row>\n\n                        <Row type=\"flex\" justify=\"center\" className={styles.LoginButton}>\n                            <Col span={12}>\n                                <Button type=\"primary\" htmlType=\"submit\"\n                                        style={{width: '100%'}}\n                                        onClick={this.handleSubmit}>\n                                    Log in\n                                </Button>\n                            </Col>\n                        </Row>\n                        <br/>\n\n                        <Row type=\"flex\" justify=\"center\">\n                            <Col>\n                                <Link style={{color: \"#9254de\"}} to=\"/forget_password\">Forgot password?</Link>\n                            </Col>\n                        </Row>\n\n                        <Row type=\"flex\" justify=\"center\">\n                            <Col>\n                                <Link style={{color: \"#9254de\"}} to=\"/signup\">Don't have an account?</Link>\n                            </Col>\n                        </Row>\n                        <br/>\n                    </Spin>\n                </div>\n            </div>\n        );\n\n\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        isLoggingIn: state.auth.isLoggingIn\n    };\n}\n\nconst loginForm = Form.create()(Login);\nexport default connect(mapStateToProps)(loginForm);\n","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport {authActions} from '../../store/actions/index';\nimport styles from './Signup.module.less';\nimport {Link} from 'react-router-dom';\nimport {Form, Input, Icon, Select, Row, Col, Checkbox, Button, Spin} from 'antd';\n\nconst FormItem = Form.Item;\nconst { Option } = Select;\n\n\nconst selectBeforeURL = (\n    <Select defaultValue=\"http://\" style={{ width: 85 }}>\n        <Option value=\"http://\">http://</Option>\n        <Option value=\"https://\">https://</Option>\n    </Select>\n);\n\n\nclass Signup extends React.Component {\n\n    state = {\n        confirmDirty: false,\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n                this.props.dispatch(authActions.signup(values));\n            }\n        });\n    };\n\n    handleConfirmBlur = (e) => {\n        const value = e.target.value;\n        this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n    };\n\n    compareToFirstPassword = (rule, value, callback) => {\n        const form = this.props.form;\n        if (value && value !== form.getFieldValue('password')) {\n            callback('The two passwords that you entered are inconsistent!');\n        } else {\n            callback();\n        }\n    };\n\n    validateToNextPassword = (rule, value, callback) => {\n        const form = this.props.form;\n        if (value && this.state.confirmDirty) {\n            form.validateFields(['confirm'], { force: true });\n        }\n        callback();\n    };\n\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <div className={styles.SignupBackground}>\n                <div className={[styles.SignupPanel, styles.fadeIn].join(' ')}>\n                    <Spin spinning={false}>\n                        <Row type=\"flex\" justify=\"center\">\n                            <Col>\n                                <h1>Signup Page</h1>\n                            </Col>\n                        </Row>\n\n                        <br/>\n\n\n                        <Row type=\"flex\" justify=\"center\">\n                            <Col>\n                                <Form onSubmit={this.handleSubmit} layout={'horizontal'}>\n\n                                    <FormItem className={styles.SignupFormItem}>\n                                        {getFieldDecorator('companyName', {\n                                            rules: [{required: true, message: 'Please input your company name!'}],\n                                        })(\n                                            <Input prefix={<Icon type=\"home\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                                                   placeholder=\"Company Name\"/>\n                                        )}\n                                    </FormItem>\n\n\n\n                                    <FormItem className={styles.SignupFormItem}>\n                                        {getFieldDecorator('websiteURL', {\n                                            rules: [{required: true, message: 'Please input company website URL!'},\n                                                {pattern: /[-a-zA-Z0-9@:%_\\+.~#?&//=]{2,256}\\.[a-z]{2,4}\\b(\\/[-a-zA-Z0-9@:%_\\+.~#?&//=]*)?/,\n                                                    message: 'Sorry, input a valid URL'}],\n                                        })(\n                                            <Input prefix={<Icon type=\"global\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                                                   placeholder=\"Website URL\" addonBefore={selectBeforeURL}/>\n                                        )}\n                                    </FormItem>\n\n                                    <FormItem className={styles.SignupFormItem}>\n                                        {getFieldDecorator('firstName', {\n                                            rules: [{required: true, message: 'Please input your first name!'}],\n                                        })(\n                                            <Input prefix={<Icon type=\"idcard\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                                                   placeholder=\"First Name \"/>\n                                        )}\n                                    </FormItem>\n\n                                    <FormItem className={styles.SignupFormItem}>\n                                        {getFieldDecorator('lastName', {\n                                            rules: [{required: true, message: 'Please input your last name!'}],\n                                        })(\n                                            <Input prefix={<Icon type=\"idcard\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                                                   placeholder=\"Last Name \"/>\n                                        )}\n                                    </FormItem>\n\n                                    <FormItem className={styles.SignupFormItem}>\n                                        {getFieldDecorator('telephone', {\n                                            rules: [\n                                                {pattern: /^((\\+\\d{1,3}(-| )?\\(?\\d\\)?(-| )?\\d{1,3})|(\\(?\\d{2,3}\\)?))(-| )?(\\d{3,4})(-| )?(\\d{4})(( x| ext)\\d{1,5}){0,1}$/,\n                                                    message: 'Sorry, use a valid number'}\n                                            ],\n                                        })(\n                                            <Input prefix={<Icon type=\"phone\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                                                   placeholder=\"Telephone\"/>\n                                        )}\n                                    </FormItem>\n\n\n                                    <FormItem className={styles.SignupFormItem}>\n                                        {getFieldDecorator('email', {\n                                            rules: [\n                                                {required: true, message: 'Please input your email!'},\n                                                {pattern: /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/,\n                                                    message: 'Sorry, use a valid email'}\n                                            ],\n                                        })(\n                                            <Input prefix={<Icon type=\"user\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                                                   placeholder=\"Email\"/>\n                                        )}\n                                    </FormItem>\n\n\n                                    <FormItem className={styles.SignupFormItem}>\n                                        {getFieldDecorator('password', {\n                                            rules: [\n                                                {required: true, message: 'Please input your Password!'},\n                                                {validator: this.validateToNextPassword},\n                                                {pattern: /^.{6,}$/, message: 'Minimum is 6 characters'}\n                                            ],\n                                        })(\n                                            <Input prefix={<Icon type=\"lock\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                                                   type=\"password\"\n                                                   placeholder=\"Password\"/>\n                                        )}\n                                    </FormItem>\n\n                                    <FormItem className={styles.SignupFormItem}>\n                                        {getFieldDecorator('confirm', {\n                                            rules: [\n                                                {required: true, message: 'Please confirm your Password!'},\n                                                {validator: this.compareToFirstPassword}\n                                            ],\n                                        })(\n                                            <Input prefix={<Icon type=\"lock\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                                                   type=\"password\"\n                                                   placeholder=\"Password\"\n                                                   onBlur={this.handleConfirmBlur}/>\n                                        )}\n                                    </FormItem>\n\n                                    <Form.Item>\n                                        {getFieldDecorator('agreement', {\n                                            rules: [{required: true, message: 'Agree to our Terms & Privacy Policy first'}],\n                                        })(\n                                            <Checkbox>I have read the <a href=\"/privacy\">Terms & Privacy Policy</a></Checkbox>\n                                        )}\n                                    </Form.Item>\n\n\n                                </Form>\n                            </Col>\n                        </Row>\n\n                        <Row type=\"flex\" justify=\"center\" className={styles.SignupButton}>\n                            <Col span={12}>\n                                <Button type=\"primary\" htmlType=\"submit\"\n                                        style={{width: '100%'}}\n                                        onClick={this.handleSubmit}>\n                                    Create Account\n                                </Button>\n                            </Col>\n                        </Row>\n                        <br/>\n\n                        <Row type=\"flex\" justify=\"center\">\n                            <Col>\n                                <Link style={{color: \"#9254de\"}} to=\"/login\">Already have an account?</Link>\n                            </Col>\n                        </Row>\n\n\n                        <br/>\n                    </Spin>\n                </div>\n            </div>\n        );\n\n\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        isSigningUp: state.auth.isSigningUp,\n    };\n}\n\nconst signupForm = Form.create()(Signup);\nexport default connect(mapStateToProps)(signupForm);\n","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport {authActions} from '../../store/actions/index';\nimport styles from './ForgetPassword.module.less';\n\nimport {Button, Col, Form, Icon, Input, Row} from 'antd';\nimport {Link} from \"react-router-dom\";\n\nconst FormItem = Form.Item;\n\nclass ForgetPassword extends React.Component {\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n                this.props.dispatch(authActions.resetPassword({\"email\": values.email}));\n            }\n        });\n    };\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <div className={styles.ResetPasswordBackground}>\n                <div className={[styles.ResetPasswordPanel, styles.fadeIn].join(' ')}>\n                    <Row type=\"flex\" justify=\"center\">\n                        <Col>\n                            <h1>Reset Your Password</h1>\n                        </Col>\n                    </Row>\n\n                    <br/>\n\n                    <Row type=\"flex\" justify=\"center\">\n                        <Col>\n                            <Form onSubmit={this.handleSubmit} layout={'horizontal'}>\n                                <FormItem className={styles.ResetPasswordFormItem}>\n                                    {getFieldDecorator('email', {\n                                        rules: [{required: true, message: 'Please input your email!'}],\n                                    })(\n                                        <Input prefix={<Icon type=\"user\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                                               placeholder=\"Email\"/>\n                                    )}\n                                </FormItem>\n                            </Form>\n                        </Col>\n                    </Row>\n\n                    <Row type=\"flex\" justify=\"center\" className={styles.ResetPasswordButton}>\n                        <Col span={12}>\n                            <Button type=\"primary\" htmlType=\"submit\"\n                                    style={{width: '100%'}}\n                                    onClick={this.handleSubmit}>\n                                Submit\n                            </Button>\n                        </Col>\n                    </Row>\n                    <br/>\n\n                    <Row type=\"flex\" justify=\"center\">\n                        <Col>\n                            <Link style={{color: \"#9254de\"}} to=\"/login\">Back to login?</Link>\n                        </Col>\n                    </Row>\n\n                    <br/>\n                </div>\n            </div>\n        );\n\n\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {};\n}\n\nexport default connect(mapStateToProps)(Form.create()(ForgetPassword));\n","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport {authActions} from '../../../store/actions/index';\nimport styles from './NewResetPassword.module.less';\n\nimport {Button, Col, Form, Icon, Input, Row} from 'antd';\nimport {Link} from \"react-router-dom\";\n\nconst FormItem = Form.Item;\n\nclass NewNewResetPassword extends React.Component {\n\n    state = {\n        confirmDirty: false,\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n                this.props.dispatch(authActions.newResetPassword(\n                    {\n                        \"password\": values.password,\n                        \"payload\": window.location.href.split(\"/\").pop()\n                    }));\n            }\n        });\n    };\n\n    handleConfirmBlur = (e) => {\n        const value = e.target.value;\n        this.setState({ confirmDirty: this.state.confirmDirty || !!value });\n    };\n\n    compareToFirstPassword = (rule, value, callback) => {\n        const form = this.props.form;\n        if (value && value !== form.getFieldValue('password')) {\n            callback('Passwords must match!');\n        } else {\n            callback();\n        }\n    };\n\n    validateToNextPassword = (rule, value, callback) => {\n        const form = this.props.form;\n        if (value && this.state.confirmDirty) {\n            form.validateFields(['confirm'], { force: true });\n        }\n        callback();\n    };\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n\n        return (\n            <div className={styles.NewResetPasswordBackground}>\n                <div className={[styles.NewResetPasswordPanel, styles.fadeIn].join(' ')}>\n                    <Row type=\"flex\" justify=\"center\">\n                        <Col>\n                            <h1>Reset your password</h1>\n                        </Col>\n                    </Row>\n\n                    <br/>\n\n                    <Row type=\"flex\" justify=\"center\">\n                        <Col>\n                            <Form onSubmit={this.handleSubmit} layout={'horizontal'}>\n                                <FormItem className={styles.NewResetPasswordFormItem}>\n                                    {getFieldDecorator('password', {\n                                        rules: [\n                                            {required: true, message: 'Please input your Password!'},\n                                            {validator: this.validateToNextPassword},\n                                            {pattern: /^.{6,}$/, message: 'Minimum is 6 characters'}\n                                        ],\n                                    })(\n                                        <Input prefix={<Icon type=\"lock\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                                               type=\"password\"\n                                               placeholder=\"New Password\"/>\n                                    )}\n                                </FormItem>\n\n                                <FormItem className={styles.NewResetPasswordFormItem}>\n                                    {getFieldDecorator('confirm', {\n                                        rules: [\n                                            {required: true, message: 'Please confirm your Password!'},\n                                            {validator: this.compareToFirstPassword}\n                                        ],\n                                    })(\n                                        <Input prefix={<Icon type=\"lock\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                                               type=\"password\"\n                                               placeholder=\"Confirm Password\"\n                                               onBlur={this.handleConfirmBlur}/>\n                                    )}\n                                </FormItem>\n\n                            </Form>\n                        </Col>\n                    </Row>\n\n                    <Row type=\"flex\" justify=\"center\" className={styles.NewResetPasswordButton}>\n                        <Col span={12}>\n                            <Button type=\"primary\" htmlType=\"submit\"\n                                    style={{width: '100%'}}\n                                    onClick={this.handleSubmit}>\n                                Submit\n                            </Button>\n                        </Col>\n                    </Row>\n                    <br/>\n\n                    <Row type=\"flex\" justify=\"center\">\n                        <Col>\n                            <Link style={{color: \"#9254de\"}} to=\"/login\">Back to login?</Link>\n                        </Col>\n                    </Row>\n\n                    <br/>\n                </div>\n            </div>\n        );\n\n\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {};\n}\n\nexport default connect(mapStateToProps)(Form.create()(NewNewResetPassword));\n","import React, {Component} from 'react';\nimport {Redirect, Route, Switch, withRouter} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {history} from './helpers';\n\nimport {PrivateRoute} from './hoc';\nimport Dashboard from \"./application/Dashboard/Dashboard\";\nimport Login from './application/Login/Login'\nimport Signup from './application/Signup/Signup'\nimport ForgetPassword from './application/ForgetPassword/ForgetPassword'\nimport NewResetPassword from './application/ForgetPassword/NewResetPassword/NewResetPassword'\nimport {destroyMessage} from './helpers/alert';\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        history.listen((location, action) => {\n            // Clear recent notifications boxes when route changes\n            destroyMessage();\n        });\n    }\n\n    render() {\n        return (\n            <Switch>\n                {/* <Route exact path=\"/\" component={Home} /> */}\n                <Route path=\"/login\" component={Login}/>\n                <Route path=\"/signup\" component={Signup}/>\n                <Route path=\"/forget_password\" component={ForgetPassword}/>\n                <Route path=\"/reset_password/\" component={NewResetPassword}/>\n                <PrivateRoute path=\"/dashboard\" component={Dashboard}/>\n                <Redirect to={{pathname: '/dashboard'}}/>\n            </Switch>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    const {alert} = state;\n    return {\n        alert,\n    };\n};\nexport default withRouter(connect(mapStateToProps)(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.less';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport {history} from './helpers'\n// import store from './store/store'\n// import persistor from './store/store'\nimport { store, persistor} from './store/store'\nimport { PersistGate } from 'redux-persist/integration/react'\n\n\nconst app = (\n    <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n            <Router history={history} >\n                <App />\n            </Router>\n        </PersistGate>\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Databases_Logo__j9wPy\",\"Trigger\":\"Databases_Trigger__itxl0\",\"Header\":\"Databases_Header__VzMAw\",\"Sider\":\"Databases_Sider__3Rx9D\",\"Panel\":\"Databases_Panel__1dX7r\",\"Panel_With_Header\":\"Databases_Panel_With_Header__2GQEO\",\"Panel_Header\":\"Databases_Panel_Header__2FqVL\",\"Panel_Header_With_Button\":\"Databases_Panel_Header_With_Button__1lJx1\",\"Panel_Body\":\"Databases_Panel_Body__2R8Tj\",\"Panel_Body_Only\":\"Databases_Panel_Body_Only__12m2U\",\"Panel_Header_Button\":\"Databases_Panel_Header_Button__3IQ8K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Analytics_Logo__1DvxC\",\"Trigger\":\"Analytics_Trigger__3VPvU\",\"Header\":\"Analytics_Header__Vn0lv\",\"Sider\":\"Analytics_Sider__3z_Dq\",\"Panel\":\"Analytics_Panel__24NY4\",\"Panel_With_Header\":\"Analytics_Panel_With_Header__1wLj9\",\"Panel_Header\":\"Analytics_Panel_Header__3vYeP\",\"Panel_Header_With_Button\":\"Analytics_Panel_Header_With_Button__16AON\",\"Panel_Body\":\"Analytics_Panel_Body__3bpj7\",\"Panel_Body_Only\":\"Analytics_Panel_Body_Only__Fn9k-\",\"Panel_Header_Button\":\"Analytics_Panel_Header_Button__2g-DE\"};"],"sourceRoot":""}