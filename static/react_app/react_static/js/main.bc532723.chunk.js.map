{"version":3,"sources":["application/Dashboard/Databases/Databases.module.less","application/Dashboard/Assistants/Assistant/Integration/Integration.module.less","application/Login/Login.module.less","application/Dashboard/Dashboard.module.less","application/Dashboard/Assistants/Assistants.module.less","application/Dashboard/Assistants/Assistant/Flow/Groups/Groups.module.less","application/Dashboard/Assistants/Assistant/Sessions/Sessions.module.less","application/Dashboard/AccountDetails/Profile/Profile.module.less","application/Dashboard/AccountDetails/UsersManagement/UsersManagement.module.less","application/Dashboard/Home/Home.module.less","application/Dashboard/Assistants/Assistant/Flow/Blocks/Blocks.module.less","components/Header/Header.module.less","application/Dashboard/Databases/NewDatabaseModal/NewDatabaseModal.module.less","application/Dashboard/Databases/NewDatabaseModal/NewDatabaseSteps/UploadDatabaseStep/excel.worker.js","application/Dashboard/Assistants/Assistant/Flow/Flow.module.less","helpers/history.js","helpers/auth.js","helpers/alert.js","store/actions/actionTypes.js","store/utility.js","store/reducers/auth.reducer.js","store/reducers/assistant.reducer.js","store/reducers/flow.reducer.js","store/reducers/profile.reducer.js","store/reducers/chatbotSessions.reducer.js","store/reducers/solutions.reducer.js","store/reducers/usersManagement.reducer.js","store/reducers/database.reducer.js","store/reducers/index.js","store/actions/auth.actions.js","store/actions/assistant.actions.js","store/actions/database.actions.js","store/actions/flow.actions.js","store/actions/profile.actions.js","store/actions/chatbotSessions.actions.js","store/actions/solutions.actions.js","store/actions/usersManagement.actions.js","store/sagas/auth.saga.js","store/sagas/assistant.saga.js","store/sagas/flow.saga.js","store/sagas/profile.saga.js","store/sagas/chatbotSessions.js","store/sagas/solutions.saga.js","store/sagas/usersManagement.saga.js","store/sagas/database.saga.js","store/store.js","helpers/http.js","helpers/hashids.js","hoc/PrivateRoute.js","application/Dashboard/Assistants/Assistant/AssistantSettings/AssistantSettingsModal/AssistantSettingsModal.js","application/Dashboard/Assistants/Assistant/AssistantSettings/AssistantSettings.js","application/Dashboard/Assistants/Assistant/Assistant.js","application/Dashboard/Assistants/Modals/NewAssistantModal.js","application/Dashboard/Assistants/Assistants.js","application/Dashboard/Databases/NewDatabaseModal/NewDatabaseSteps/UploadDatabaseStep/UploadDatabaseStep.js","application/Dashboard/Databases/NewDatabaseModal/NewDatabaseSteps/ConfigureDatabaseStep.js","application/Dashboard/Databases/NewDatabaseModal/NewDatabaseSteps/ColumnSelectionStep.js","application/Dashboard/Databases/NewDatabaseModal/NewDatabaseSteps/ConfirmStep.js","application/Dashboard/Databases/NewDatabaseModal/ColumnsOptions.js","application/Dashboard/Databases/NewDatabaseModal/NewDatabaseModal.js","components/Header/Header.js","application/Dashboard/Databases/DatabaseInfo/DatabaseInfo.js","application/Dashboard/Databases/Databases.js","application/Dashboard/Assistants/Assistant/Flow/Groups/NewGroup/NewGroup.js","application/Dashboard/Assistants/Assistant/Flow/Groups/EditGroup/EditGroup.js","application/Dashboard/Assistants/Assistant/Flow/Groups/Groups.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/Block/Block.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/CardTypes/CardTypesHelpers.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/CardTypes/CardTypesFormItems.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/CardTypes/UserInput.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/CardTypes/Question.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/CardTypes/FileUpload.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/CardTypes/Solutions.js","components/Modals/NewDataCategoryModal/NewDataCategoryModal.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/Modals/NewBlockModal.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/Modals/EditBlockModal1.js","application/Dashboard/Assistants/Assistant/Flow/Blocks/Blocks.js","application/Dashboard/Assistants/Assistant/Flow/Flow.js","application/Dashboard/AccountDetails/Profile/profileComponents/ProfileDetails/ProfileDetails.js","application/Dashboard/AccountDetails/Profile/profileComponents/DataSettings/DataSettings.js","application/Dashboard/AccountDetails/Profile/Profile.js","application/Dashboard/AccountDetails/UsersManagement/UsersDisplay/UserModal/UserModal.js","application/Dashboard/AccountDetails/UsersManagement/UsersDisplay/UsersDisplay.js","application/Dashboard/AccountDetails/UsersManagement/UsersManagement.js","application/Dashboard/Assistants/Assistant/Solutions/SolutionsDisplay/SolutionModal/SolutionModal.js","application/Dashboard/Assistants/Assistant/Solutions/SolutionsDisplay/SolutionsDisplay.js","application/Dashboard/Assistants/Assistant/Solutions/SolutionsSettings/InformationToDisplay/InformationToDisplay.js","application/Dashboard/Assistants/Assistant/Solutions/SolutionsSettings/ButtonLink/ButtonLink.js","application/Dashboard/Assistants/Assistant/Solutions/SolutionsSettings/EmailAutomatch/EmailAutomatch.js","application/Dashboard/Assistants/Assistant/Solutions/SolutionsSettings/SolutionsSettings.js","application/Dashboard/Documentation/Documentation.js","application/Dashboard/Assistants/Assistant/Integration/Integration.js","application/Dashboard/Assistants/Assistant/Sessions/Profile/Profile.js","application/Dashboard/Assistants/Assistant/Sessions/Conversation/Conversation.js","application/Dashboard/Assistants/Assistant/Sessions/ViewModal/ViewsModal.js","application/Dashboard/Assistants/Assistant/Sessions/Sessions.js","application/Dashboard/Assistants/Assistant/Solutions/Solutions.js","application/Dashboard/Assistants/Assistant/Analytics/Analytics.js","application/Dashboard/Home/Home.js","application/Dashboard/Dashboard.js","application/Login/Login.js","App.js","serviceWorker.js","index.js","application/Dashboard/Assistants/Assistant/Solutions/Solutions.module.less","application/Dashboard/Assistants/Assistant/Solutions/SolutionsSettings/SolutionsSettings.module.less","application/Dashboard/Assistants/Assistant/Analytics/Analytics.module.less"],"names":["module","exports","Logo","Trigger","Header","Sider","Panel","Panel_With_Header","Panel_Header","Panel_Body","Panel_Body_Only","Panel_Header_Button","LoginFormItem","LoginBackground","LoginPanel","LoginButton","fadeIn","fade-in","AssistantsList","groupsList","steps_content","steps_action","Worker","__webpack_require__","p","history","createBrowserHistory","authHeader","token","localStorage","getItem","refresh","Authorization","getUser","user","JSON","parse","updateUsername","firstname","surname","username","setItem","stringify","checkAuthenticity","alertSuccess","title","message","notification","success","description","duration","placement","alertError","error","loadingMessage","loading","destroyMessage","destroy","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","LOGOUT","AUTH_CHECK_TIMEOUT","REFRESH_TOKEN","FETCH_ASSISTANTS_REQUEST","ADD_ASSISTANT_REQUEST","UPDATE_ASSISTANT_REQUEST","DELETE_ASSISTANT_REQUEST","FETCH_FLOW_REQUEST","ADD_GROUP_REQUEST","EDIT_GROUP_REQUEST","DELETE_GROUP_REQUEST","ADD_BLOCK_REQUEST","EDIT_BLOCK_REQUEST","DELETE_BLOCK_REQUEST","UPDATE_BLOCKS_ORDER_REQUEST","GET_PROFILE_REQUEST","SAVE_PROFILE_DETAILS_REQUEST","SAVE_DATA_SETTINGS_REQUEST","FETCH_CHATBOT_SESSIONS_REQUEST","CLEAR_ALL_CHATBOT_SESSIONS_REQUEST","GET_SOLUTIONS_REQUEST","ADD_SOLUTION_REQUEST","EDIT_SOLUTION_REQUEST","UPDATE_SOLUTION_INFORMATION_TO_DISPLAY_REQUEST","UPDATE_BUTTON_LINK_REQUEST","SEND_SOLUTION_ALERT_REQUEST","UPDATE_AUTOMATIC_SOLUTION_ALERTS_REQUEST","GET_DATABASES_LIST_REQUEST","UPLOAD_DATABASE_REQUEST","FETCH_DATABASE_REQUEST","GET_USERS_REQUEST","ADD_USER_REQUEST","EDIT_USER_REQUEST","DELETE_USER_REQUEST","updateObject","oldObject","updatedValues","Object","objectSpread","initialState","isAuthenticated","assistantList","isLoading","errorMsg","blockGroups","profile","chatbotSessions","solutionsData","usersList","databasesList","fetchedDatabase","rootReducer","combineReducers","auth","state","arguments","length","undefined","action","type","actionTypes","isLoggingIn","msg","assistant","isAdding","successMsg","isDeleting","toConsumableArray","assistantToDeleteIndex","findIndex","id","assistantID","splice","isChanging","flow","isAddingGroup","addSuccessMsg","isEditingGroup","editSuccessMsg","isDeletingGroup","groupToDeleteIndex","group","groupID","deleteSuccessMsg","isAddingBlock","isDeletingBlock","profileData","isClearingAll","solutions","usersManagement","usersData","database","databaseToDeleteIndex","db","ID","databaseID","updatedDatabaseList","push","newDatabase","authActions","login","email","password","loginSuccess","loginFailure","logout","refreshToken","checkAuthTimeout","expirationTime","assistantActions","fetchAssistants","fetchAssistantsSuccess","fetchAssistantsFailure","addAssistant","newAssistant","addAssistantSuccess","addAssistantFailure","updateAssistant","_ref","updatedSettings","updateAssistantSuccess","updateAssistantFailure","deleteAssistant","deleteAssistantSuccess","deleteAssistantFailure","changeAssistantStatus","changeAssistantStatusSuccess","status","changeAssistantStatusFailure","databaseActions","getDatabasesList","getDatabasesListSuccess","getDatabasesListFailure","uploadDatabase","uploadDatabaseSuccess","successMessage","uploadDatabaseFailure","fetchDatabase","fetchDatabaseSuccess","fetchDatabaseFailure","resetFetchedDtabase","DeleteDatabase","DeleteDatabaseSuccess","DeleteDatabaseFailure","flowActions","fetchFlowRequest","fetchFlowSuccess","args","fetchFlowFailure","addGroupRequest","newGroup","addGroupSuccess","addGroupFailure","editGroupRequest","_ref2","editedGroup","editGroupSuccess","editGroupFailure","deleteGroupRequest","_ref3","deletedGroup","deleteGroupSuccess","deleteGroupFailure","addBlockRequest","_ref4","newBlock","addBlockSuccess","addBlockFailure","editBlockRequest","_ref5","edittedBlock","currentBlocks","editBlockSuccess","editBlockFailure","deleteBlockRequest","_ref6","deletedBlock","deleteBlockSuccess","deleteBlockFailure","updateBlocksOrderRequest","_ref7","newBlocksOrder","updateBlocksOrderSuccess","updateBlocksOrderFailure","profileActions","getProfile","getProfileSuccess","getProfileFailure","saveProfileDetails","saveProfileDetailsSuccess","saveProfileDetailsFailure","saveDataSettings","dataSettings","saveDataSettingsSuccess","saveDataSettingsFailure","chatbotSessionsActions","fetchChatbotSessions","fetchChatbotSessionsSuccess","fetchChatbotSessionsFailure","clearAllChatbotSessions","clearAllChatbotSessionsSuccess","clearAllChatbotSessionsFailure","solutionsActions","getSolutions","getSolutionsSuccess","data","getSolutionsFailure","addSolution","params","addSolutionSuccess","addSolutionFailure","editSolution","editSolutionSuccess","editSolutionFailure","updateSolutionInformationToDisplay","updateSolutionInformationToDisplaySuccess","updateSolutionInformationToDisplayFailure","updateButtonLink","updateButtonLinkSuccess","updateButtonLinkFailure","sendSolutionAlert","sendSolutionAlertSuccess","sendSolutionAlertFailure","updateAutomaticSolutions","updateAutomaticSolutionsSuccess","updateAutomaticSolutionsFailure","usersManagementActions","getUsers","getUsersSuccess","getUsersFailure","addUser","addUserSuccess","addUserFailure","editUser","editUserSuccess","editUserFailure","deleteUser","deleteUserSuccess","deleteUserFailure","watchCheckAuthTimeout","watchLogin","watchLogout","watchRefreshToken","authSaga","regenerator_default","a","wrap","_context","prev","next","delay","put","stop","_marked","this","_context2","takeEvery","_marked2","res","expiresIn","secondsToExpire","_context3","axios","post","headers","Content-Type","sent","Date","getTime","t0","console","log","response","_marked3","_context4","takeLatest","_marked4","_context5","clear","_marked5","_context6","_marked6","_res$data$data","_context7","Error","_marked7","_context8","_marked8","_context9","all","_marked9","watchFetchAssistants","watchAddAssistant","watchUpdateAssistant","watchDeleteAssistant","assistantSaga","http","get","abrupt","assistant_saga_marked","assistant_saga_marked2","concat","assistant_saga_marked3","delete","assistant_saga_marked4","assistant_saga_marked5","assistant_saga_marked6","assistant_saga_marked7","assistant_saga_marked8","assistant_saga_marked9","fetchFlow","watchFetchFlow","addGroup","editGroup","deleteGroup","watchAddGroup","watchEditGroup","watchDeleteGroup","addBlock","editBlock","deleteBlock","updateBlocksOrder","watchAddBlock","watchEditBlock","watchDeleteBlock","watchUpdateBlocksOrder","flowSaga","flow_saga_marked","flow_saga_marked2","flow_saga_marked3","flow_saga_marked4","flow_saga_marked5","flow_saga_marked6","flow_saga_marked7","flow_saga_marked8","flow_saga_marked9","currentUpdatedGroup","_context10","block","map","blocks","_marked10","_context11","_marked11","_ref8","_context12","_marked12","_context13","_marked13","_context14","_marked14","_context15","_marked15","_context16","_marked16","_context18","_marked18","getProfileData","saveProfileData","watchProfileRequests","watchProfileUpdates","watchDataSettingsUpdates","profileSaga","Firstname","Surname","profile_saga_marked","profile_saga_marked2","profile_saga_marked3","profile_saga_marked4","profile_saga_marked5","profile_saga_marked6","profile_saga_marked7","watchFetchChatbotSessions","watchClearAllChatbotSessions","chatbotSessions_marked","chatbotSessions_marked2","chatbotSessions_marked3","chatbotSessions_marked4","chatbotSessions_marked5","getSolutionsData","sendSolutionAlerts","updateAutomaticSolutionsAlerts","watchSolutionsRequests","watchAddSolutionRequests","watchEditSolutionRequests","watchUpdateSolutionInformationToDisplayRequests","watchUpdateButtonLinkRequests","watchSendSolutionAlertsRequests","watchUpdateAutomaticSolutionAlertsRequests","solutionsSaga","solutions_saga_marked","newSolution","solutions_saga_marked2","editedSolution","solutions_saga_marked3","solutionID","information","solutions_saga_marked4","solutions_saga_marked5","solutions_saga_marked6","solutions_saga_marked7","solutions_saga_marked8","solutions_saga_marked9","solutions_saga_marked10","solutions_saga_marked11","solutions_saga_marked12","solutions_saga_marked13","solutions_saga_marked14","solutions_saga_marked15","watchGetUsers","watchAddUser","watchEditUser","watchDeleteUser","usersManagementSaga","usersManagement_saga_marked","usersManagement_saga_marked2","usersManagement_saga_marked3","usersManagement_saga_marked4","usersManagement_saga_marked5","usersManagement_saga_marked6","usersManagement_saga_marked7","usersManagement_saga_marked8","usersManagement_saga_marked9","watchGetDatabaseList","fetchDatabases","watchFetchDatabases","watchAddDatabase","databaseSaga","database_saga_marked","database_saga_marked2","database_saga_marked3","database_saga_marked4","database_saga_marked5","database_saga_marked6","database_saga_marked7","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","create","baseURL","interceptors","request","use","config","header","Promise","reject","dispatch","hashids","Hashids","hasher","param","encode","PrivateRoute","Component","component","rest","objectWithoutProperties","react_default","createElement","Route","assign","render","props","Redirect","to","pathname","from","location","FormItem","Form","Item","AssistantSettingsModal","isPopupDisabled","_this","SecondsUntilPopup","togglePopupSwitch","setState","handleSave","form","validateFields","err","values","secondsUntilPopup","inputValue","formItemLayout","labelCol","span","wrapperCol","getFieldDecorator","modal","visible","width","destroyOnClose","onCancel","handleCancel","footer","es_button","key","onClick","handleDelete","es_form","layout","AssistantSettingsModal_FormItem","label","extra","initialValue","Name","rules","required","es_input","placeholder","Message","TopBarText","es_switch","checked","onChange","style","marginRight","input_number","disabled","min","className","confirm","Modal","AssistantSettings","hideModal","deletedAssistant","content","onOk","AssistantSettings_AssistantSettingsModal_AssistantSettingsModal","connect","Meta","Card","menu","es_menu","Link","icon","Divider","covers","Assistant","showModal","onActiveChanged","Fragment","card","margin","float","height","cover","alt","src","Math","floor","random","defaultChecked","Active","actions","dropdown","overlay","trigger","Assistant_AssistantSettings_AssistantSettings","Option","Select","NewAssistantModal","handleAdd","prevProps","handleOk","NewAssistantModal_FormItem","es_select","value","Assistants","_this2","styles","i","Assistants_Assistant_Assistant","index","skeleton","active","Modals_NewAssistantModal","UploadDatabaseStep","readExcel","_this$props","fileList","setStateHandler","resolve","isFileUploading","reader","FileReader","readAsBinaryString","onload","worker","postMessage","result","onmessage","event","_this$props2","listType","multiple","defaultFileList","accept","onRemove","file","indexOf","newFileList","slice","beforeUpload","thumbUrl","textAlign","protocol","hostname","port","upload","ConfigureDatabaseStep","databaseOptions","marginBottom","ConfigureDatabaseStep_FormItem","databaseConfiguration","databaseName","databaseType","types","ConfigureDatabaseStep_Option","ColumnSelectionStep","selectedColumns","handleChange","unique","handleRemove","removedColumn","setTimeout","filter","selectedColumn","validate_and_construct","TSBcolumnOption","userColumns","userRecord","validatedData","isValid","column","join","userColumn","item","trim","includes","string_length","exec","nullable","Number","isNaN","date","year","getUTCFullYear","month","getMonth","day","getDate","originalColumns","parseForm","excelFile","errors","columns","keys","ourColumn","excelColumn","validRecords","invalidRecords","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","user_record","record","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_loop","find","_iterator2","return","flatMap","filteredOptions","o","ColumnSelectionStep_FormItem","defaultValue","currencyCodes","currencyCode","ColumnSelectionStep_Option","mode","onDeselect","spin","Array","prototype","j","ConfirmStep","getRecordsData","records","x","counter","renderedRecord","_arr","_i","columnHeader","columnsOptions","c","dataIndex","fixed","backgroundColor","table","dataSource","size","pagination","pageSize","divider","Step","Steps","NewDatabaseModal","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","current","steps","NewDatabaseSteps_ConfigureDatabaseStep","ref","configureDatabaseStep","NewDatabaseSteps_UploadDatabaseStep_UploadDatabaseStep","uploadDatabaseStep","uploading","handleUpload","NewDatabaseSteps_ColumnSelectionStep","wrappedComponentRef","columnSelectionStep","NewDatabaseSteps_ConfirmStep","then","rejectedExcelFile","submitDatabase","_this$state","React","createRef","spinning","tip","marginLeft","showBackButton","button","display","context","router","goBack","shape","assistantName","text","contextTypes","PropTypes","object","DatabaseInfo","databaseOption","databaseInfo","Type","colHeaders","editor","react_handsontable","rowHeaders","Databases","showDatabaseInfo","_this$props$fetchedDa","_this3","components_Header_Header","position","padding","databaseContent","Databases_DatabaseInfo_DatabaseInfo","isLoadingDatabase","marginTop","Databases_NewDatabaseModal_NewDatabaseModal","NewGroup","NewGroup_FormItem","EditGroup","handleUpdate","name","EditGroup_FormItem","Groups","newGroupModal","editGroupModal","selectedGroupToEdit","handleAddGroup","handleAddGroupCancel","showNewGroupModal","handleEditGroup","handleEditGroupCancel","showEditGroupModal","handleDeleteGroup","Groups_NewGroup_NewGroup","es_list","itemLayout","renderItem","selectGroup","avatar","es_avatar","Groups_EditGroup_EditGroup","Collapse","Block","collapse","bordered","Content","es_row","es_col","blockToGoID","validation","afterMessage","showTop","storeInDB","es_checkbox","isSkippable","answers","answer","Block_Meta","keywords","keyword","es_tag","handleNewBlock","handleEditBlock","initActionType","allGroups","showGoToBlock","showGoToGroup","groupName","getInitialVariables","options","flowOptions","allBlocks","blockOptions","blockTypes","blockType","CheckboxGroup","Checkbox","Group","QuestionFormItem","DataTypeFormItem","DataType","dataTypes","CardTypesFormItems_Option","SkippableFormItem","valuePropName","IsSkippable","StoreInDBFormItem","alwaysStoreInDB","AfterMessageFormItem","ActionFormItem","onSelect","onSelectAction","ShowGoToBlockFormItem","ShowGoToGroupFormItem","ButtonsForm","handleDeleteBlock","onSubmit","FileTypesFormItem","_ref9","typesAllowed","fileTypes","checkedValues","onFileTypeChange","ScannedDatabaseFormItem","_ref10","UserInput","GroupID","currentGroup","StoreInDB","Skippable","dataType","blockToGoIDGroup","Order","_getInitialVariables2","_getInitialVariables3","buttons","CardTypesFormItems_QuestionFormItem","CardTypesFormItems_DataTypeFormItem","CardTypesFormItems_ActionFormItem","CardTypesFormItems_ShowGoToBlockFormItem","CardTypesFormItems_ShowGoToGroupFormItem","CardTypesFormItems_AfterMessageFormItem","CardTypesFormItems_SkippableFormItem","CardTypesFormItems_StoreInDBFormItem","Question","modalVisible","tags","inputVisible","addAnswer","hideAddAnswer","showAddAnswer","removeAnswer","deletedAnswer","removeTag","removedTag","tag","showInput","input","focus","handleInputChange","e","target","saveInputRef","handleInputConfirm","Question_FormItem","popconfirm","onConfirm","okText","cancelText","isLongTag","tagElem","closable","afterClose","tooltip","onBlur","onPressEnter","background","borderStyle","FileUpload","CardTypesFormItems_FileTypesFormItem","Solutions","Solutions_FormItem","CardTypesFormItems_ScannedDatabaseFormItem","NewDataCategoryModal","handleSubmit","preventDefault","top","closeModal","NewDataCategoryModal_FormItem","htmlType","TabPane","Tabs","NewBlockModal","handleAddBlock","onChangeTab","currentTab","nextProps","tabs","tab","CardTypes_UserInput","addNewDataCategory","showNewDataCategoryModal","CardTypes_Question","CardTypes_FileUpload","CardTypes_Solutions","EditBlockModal","Blocks","addBlockVisible","editBlockVisible","deleteBlockVisible","showAddBlockModal","closeAddBlockModal","closeEditBlockModal","reorderBlocks","onDragEnd","bind","assertThisInitialized","destination","list","startIndex","endIndex","_result$splice","removed","slicedToArray","reorder","source","overflowY","react_beautiful_dnd_esm","droppableId","provided","innerRef","draggableId","draggableProps","dragHandleProps","draggableStyle","Blocks_Block_Block","Modals_NewBlockModal","EditBlockModal1","Flow","Flow_Groups_Groups","Flow_Blocks_Blocks","ProfileDetails","companyName","isEmpty","Email","company","ProfileDetails_FormItem","readOnly","DataSettings","newsletters","statNotifications","trackData","techSupport","accountSpecialist","initialRender","defineProperty","DataSettings_FormItem","newProps","prevState","userSettings","UserInputNotifications","TrackingData","TechnicalSupport","AccountSpecialist","Profile","defaultActiveKey","Profile_TabPane","profileComponents_ProfileDetails_ProfileDetails","profileComponents_DataSettings_DataSettings","OptGroup","UserModal","roles","formData","FormData","hasOwnProperty","append","UserModal_FormItem","changeTypeHandler","role","UserModal_Option","EditableContext","createContext","EditableFormRow","Provider","EditableCell","getInput","inputType","editing","restProps","Consumer","UsersDisplay_FormItem","children","UsersDisplay","isEditing","editingKey","cancel","showUserModal","handleUserCancel","editable","href","handleEdit","edit","users","_this4","row","newData","newRecord","_this5","components","body","cell","col","onCell","UsersDisplay_UserModal_UserModal","rowClassName","UsersManagement","UsersManagement_TabPane","UsersManagement_UsersDisplay_UsersDisplay","SolutionModal","connectionType","uploadFile","onFileChange","files","solutionExists","solutionToEdit","Solution","SolutionModal_FormItem","SolutionModal_OptGroup","databaseFileTypes","fileType","SolutionModal_Option","activeKey","tabBarStyle","SolutionModal_TabPane","hidden","document","getElementById","click","SolutionsDisplay","editMode","selectedSolutionToEdit","handleSolution","handleSolutionCancel","showSolutionModal","selectSolution","SolutionsDisplay_SolutionModal_SolutionModal","databaseCRMTypes","ITDForm","chosenDisplays","addNewDisplaySelect","updateInformationToDisplay","Button","rc_queue_anim_es","InformationToDisplay_FormItem","String","currentSolution","DisplayTitles","InformationToDisplay_Option","titleValues","ButtonLink","webLink","IDHeader","ButtonLink_FormItem","Input","ButtonLink_Option","WebLink","IDReference","EmailAutomatch","checkedChildren","unCheckedChildren","automaticSolutionAlerts","submitAutomaticAlerts","SolutionsSettings","Animate","transitionName","transitionAppear","SolutionsSettings_TabPane","InformationToDisplay","SolutionsSettings_ButtonLink_ButtonLink","SolutionsSettings_EmailAutomatch_EmailAutomatch","updateAutomaticAlerts","SubMenu","Menu","Documentation","currentKey","handleMenuChange","defaultSelectedKeys","defaultOpenKeys","Documentation_TabPane","TextArea","Integration","dataName","dataCircle","async","defer","color","hex","removeChatbot","oldBot","remove","oldBotScript","copyScriptPaste","select","execCommand","testIntegration","script","setAttribute","appendChild","getWidgetSrc","colon","_window$location","generateDirectLink","_window$location2","open","getChatbotScript","data-name","data-id","data-circle","match","justify","lib","lineHeight","ReactDOMServer","renderToString","fontWeight","fileNames","sessions","session","Data","collectedData","downloadFilesBtns","isFiles","forEach","createDownloadFileBtn","fileBtn","hreftype","file-path-index","downloadFile","getAttribute","userTypes","UserType","Conversation","questionText","ViewsModal","data-index","downloadFileHandler","filenameIndex","fileName","url","method","responseType","saveAs","Blob","catch","nextContext","FilePath","split","userType","closeViewModal","ViewsModal_TabPane","Sessions_Conversation_Conversation","Sessions_Profile_Profile","Sessions","filesCounter","filteredInfo","sortedInfo","selectedSession","viewModal","refreshSessions","handleFilter","filters","sorter","showConfirmForClearing","okType","expandedRowRender","indent","expanded","scroll","y","b","onFilter","QuestionsAnswered","SolutionsReturned","TimeSpent","moment","parseInt","asMinutes","toFixed","DateTime","valueOf","sessionsList","ViewModal_ViewsModal","filesPath","deleteSolution","deletedSolution","switchState","setTo","solution","Solutions_SolutionsDisplay_SolutionsDisplay","Solutions_SolutionsSettings_SolutionsSettings","Home","visitData","beginDay","format","z","Analytics","chartDiv","clientHeight","theme","twoToneColor","Charts","NumberInfo_default","subTitle","total","subtitle","subTotal","Layout","Footer","Dashboard","collapsed","toggle","handleMenuClick","getInitials","initials","shift","pop","toUpperCase","userInfo","verticalAlign","userInfoMenu","overlayStyle","es_layout","collapsible","fontSize","selectedMenuKey","selectedKeys","Dashboard_SubMenu","Dashboard_Header","UserInfo","Switch","path","exact","withRouter","Login","isLoggin","handleLogout","Login_FormItem","prefix","loginForm","App","listen","PrivateRoute_PrivateRoute","alert","Boolean","app","es","Router","src_App","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"react_static/js/main.bc532723.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Databases_Logo__j9wPy\",\"Trigger\":\"Databases_Trigger__itxl0\",\"Header\":\"Databases_Header__VzMAw\",\"Sider\":\"Databases_Sider__3Rx9D\",\"Panel\":\"Databases_Panel__1dX7r\",\"Panel_With_Header\":\"Databases_Panel_With_Header__2GQEO\",\"Panel_Header\":\"Databases_Panel_Header__2FqVL\",\"Panel_Body\":\"Databases_Panel_Body__2R8Tj\",\"Panel_Body_Only\":\"Databases_Panel_Body_Only__12m2U\",\"Panel_Header_Button\":\"Databases_Panel_Header_Button__3IQ8K\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Integration_Logo__95x6p\",\"Trigger\":\"Integration_Trigger__2Se00\",\"Header\":\"Integration_Header__1BlRc\",\"Sider\":\"Integration_Sider__2KM_8\",\"Panel\":\"Integration_Panel__YQm7V\",\"Panel_With_Header\":\"Integration_Panel_With_Header__1vwGy\",\"Panel_Header\":\"Integration_Panel_Header__3fTNI\",\"Panel_Body\":\"Integration_Panel_Body__4hmlE\",\"Panel_Body_Only\":\"Integration_Panel_Body_Only__2uxaX\",\"Panel_Header_Button\":\"Integration_Panel_Header_Button__2re5I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LoginFormItem\":\"Login_LoginFormItem__Bjlod\",\"LoginBackground\":\"Login_LoginBackground__1vl63\",\"LoginPanel\":\"Login_LoginPanel__k_BiB\",\"LoginButton\":\"Login_LoginButton__3YREJ\",\"fadeIn\":\"Login_fadeIn__VleXS\",\"fade-in\":\"Login_fade-in__23ax_\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Dashboard_Logo__1tX2D\",\"Trigger\":\"Dashboard_Trigger__3AedD\",\"Header\":\"Dashboard_Header__3Btdm\",\"Sider\":\"Dashboard_Sider__2ZI11\",\"Panel\":\"Dashboard_Panel__3xGal\",\"Panel_With_Header\":\"Dashboard_Panel_With_Header__223E9\",\"Panel_Header\":\"Dashboard_Panel_Header__WjA5O\",\"Panel_Body\":\"Dashboard_Panel_Body__2CCNs\",\"Panel_Body_Only\":\"Dashboard_Panel_Body_Only__1ghhm\",\"Panel_Header_Button\":\"Dashboard_Panel_Header_Button__3e-Uv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Assistants_Logo__1_c55\",\"Trigger\":\"Assistants_Trigger__2L37K\",\"Header\":\"Assistants_Header__1p-1G\",\"Sider\":\"Assistants_Sider__206sR\",\"Panel\":\"Assistants_Panel__1ntI9\",\"Panel_With_Header\":\"Assistants_Panel_With_Header__2KVCE\",\"Panel_Header\":\"Assistants_Panel_Header__29BDR\",\"Panel_Body\":\"Assistants_Panel_Body__2GgUc\",\"Panel_Body_Only\":\"Assistants_Panel_Body_Only__3T20i\",\"Panel_Header_Button\":\"Assistants_Panel_Header_Button__3zsj3\",\"AssistantsList\":\"Assistants_AssistantsList__Q3wG3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Groups_Logo__1Xp0E\",\"Trigger\":\"Groups_Trigger__3Ucdo\",\"Header\":\"Groups_Header__62fiz\",\"Sider\":\"Groups_Sider__2qjgl\",\"Panel\":\"Groups_Panel__2qp5F\",\"Panel_With_Header\":\"Groups_Panel_With_Header__1JGwO\",\"Panel_Header\":\"Groups_Panel_Header__r-Yxh\",\"Panel_Body\":\"Groups_Panel_Body__6n_iM\",\"Panel_Body_Only\":\"Groups_Panel_Body_Only__2bKFB\",\"Panel_Header_Button\":\"Groups_Panel_Header_Button__1lCxR\",\"groupsList\":\"Groups_groupsList__30oXd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Sessions_Logo__104qD\",\"Trigger\":\"Sessions_Trigger__AGV9O\",\"Header\":\"Sessions_Header__2dewf\",\"Sider\":\"Sessions_Sider__1T8jl\",\"Panel\":\"Sessions_Panel__2PkYe\",\"Panel_With_Header\":\"Sessions_Panel_With_Header__1qCew\",\"Panel_Header\":\"Sessions_Panel_Header__5nE51\",\"Panel_Body\":\"Sessions_Panel_Body__2t-UB\",\"Panel_Body_Only\":\"Sessions_Panel_Body_Only__3DalE\",\"Panel_Header_Button\":\"Sessions_Panel_Header_Button__g5sYx\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Profile_Logo__3XyFo\",\"Trigger\":\"Profile_Trigger__mA7Id\",\"Header\":\"Profile_Header__2w-2z\",\"Sider\":\"Profile_Sider__3eRJ1\",\"Panel\":\"Profile_Panel__3rUmN\",\"Panel_With_Header\":\"Profile_Panel_With_Header__308J6\",\"Panel_Header\":\"Profile_Panel_Header__FLj1C\",\"Panel_Body\":\"Profile_Panel_Body__n4HRf\",\"Panel_Body_Only\":\"Profile_Panel_Body_Only__1G7Zp\",\"Panel_Header_Button\":\"Profile_Panel_Header_Button__2p-uS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"UsersManagement_Logo__AGxVz\",\"Trigger\":\"UsersManagement_Trigger__3x2lG\",\"Header\":\"UsersManagement_Header__DBfZc\",\"Sider\":\"UsersManagement_Sider__1Z2-f\",\"Panel\":\"UsersManagement_Panel__2eOJJ\",\"Panel_With_Header\":\"UsersManagement_Panel_With_Header__3B80l\",\"Panel_Header\":\"UsersManagement_Panel_Header__3iJ1q\",\"Panel_Body\":\"UsersManagement_Panel_Body__1jmUt\",\"Panel_Body_Only\":\"UsersManagement_Panel_Body_Only__17Zp2\",\"Panel_Header_Button\":\"UsersManagement_Panel_Header_Button__92t-c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Home_Logo__3QAfe\",\"Trigger\":\"Home_Trigger__3dFyO\",\"Header\":\"Home_Header__2Pzqj\",\"Sider\":\"Home_Sider__3o5OO\",\"Panel\":\"Home_Panel__2IH4H\",\"Panel_With_Header\":\"Home_Panel_With_Header__2tEsh\",\"Panel_Header\":\"Home_Panel_Header__1uniL\",\"Panel_Body\":\"Home_Panel_Body__3d2sd\",\"Panel_Body_Only\":\"Home_Panel_Body_Only__23Vve\",\"Panel_Header_Button\":\"Home_Panel_Header_Button__mmeqI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Blocks_Logo__3EenA\",\"Trigger\":\"Blocks_Trigger__3lu5V\",\"Header\":\"Blocks_Header__26n00\",\"Sider\":\"Blocks_Sider__1vIWa\",\"Panel\":\"Blocks_Panel__Bbjus\",\"Panel_With_Header\":\"Blocks_Panel_With_Header__2Oz2T\",\"Panel_Header\":\"Blocks_Panel_Header__17iCM\",\"Panel_Body\":\"Blocks_Panel_Body__2yUxP\",\"Panel_Body_Only\":\"Blocks_Panel_Body_Only__1Gj-A\",\"Panel_Header_Button\":\"Blocks_Panel_Header_Button__10_dQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Header_Logo__pPWqk\",\"Trigger\":\"Header_Trigger__eWuBO\",\"Header\":\"Header_Header__SmyVP\",\"Sider\":\"Header_Sider__2FnLR\",\"Panel\":\"Header_Panel__C4UsN\",\"Panel_With_Header\":\"Header_Panel_With_Header__5mkk7\",\"Panel_Header\":\"Header_Panel_Header__1uYtq\",\"Panel_Body\":\"Header_Panel_Body__1O0FM\",\"Panel_Body_Only\":\"Header_Panel_Body_Only__1obK3\",\"Panel_Header_Button\":\"Header_Panel_Header_Button__2Ri6l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"steps_content\":\"NewDatabaseModal_steps_content__3d42l\",\"steps_action\":\"NewDatabaseModal_steps_action__2flP1\"};","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"095f9e3bd27933c9fe40.worker.js\");\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Flow_Logo__hDNk3\",\"Trigger\":\"Flow_Trigger__2boX1\",\"Header\":\"Flow_Header__2WIFi\",\"Sider\":\"Flow_Sider__34Dhn\",\"Panel\":\"Flow_Panel__3bDX2\",\"Panel_With_Header\":\"Flow_Panel_With_Header__2UfLu\",\"Panel_Header\":\"Flow_Panel_Header__1JCa8\",\"Panel_Body\":\"Flow_Panel_Body__UqCCW\",\"Panel_Body_Only\":\"Flow_Panel_Body_Only__3Ge20\",\"Panel_Header_Button\":\"Flow_Panel_Header_Button__1p-dn\"};","import { createBrowserHistory } from 'history';\n\nexport const history = createBrowserHistory();","\nexport const authHeader = () => {\n    // return authorization header with jwt token\n    let token = localStorage.getItem('token');\n    let refresh = localStorage.getItem('refresh');\n    if (!token || !refresh) {return null}\n    return {'Authorization': 'Bearer ' + token};\n};\n\n\nexport const getUser = () => {\n    // return user from local storage\n    let user = JSON.parse(localStorage.getItem('user'));\n    if(!user){return null;}\n    return user;\n};\n\n// Update username in localStorage\nexport const updateUsername = (firstname, surname) => {\n    // get user from localStorage\n    let user = JSON.parse(localStorage.getItem('user'));\n    if(!user){return null;}\n    // update username and reset localStorage\n    user.username = firstname + ' ' + surname\n    localStorage.setItem(\"user\", JSON.stringify(user));\n};\n\n\nexport const checkAuthenticity = () => {\n    return !(!getUser() || !authHeader());\n\n};\n\n","import {message, notification} from 'antd';\n\nconst duration = 2.5;\nconst placement = \"topRight\";\n\nexport const alertSuccess = (title, message) => {\n    notification.success({\n        message: title,\n        description: message,\n        duration: duration,\n        placement: placement,\n    });\n};\n\n\nexport const alertError = (title, message) => {\n    notification.error({\n        message: title,\n        description: message\n    });\n};\n\nexport const loadingMessage = title => message.loading(title);\n\nexport const destroyMessage = () => {\n    message.destroy();\n    notification.destroy();\n};\n\nexport const alertInfo = (title, message) => {\n    notification.info({\n        message: title,\n        description: message,\n        duration: duration,\n        placement: placement,\n    });\n};\n\n\nexport const alertWarn = (title, message) => {\n    notification.warn({\n        message: title,\n        description: message,\n        duration: duration,\n        placement: placement,\n    });\n};","export const LOGIN_REQUEST = 'LOGIN_REQUEST';\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\nexport const LOGIN_FAILURE = 'LOGIN_FAILURE';\nexport const LOGOUT = 'LOGOUT';\nexport const AUTH_CHECK_TIMEOUT = 'AUTH_CHECK_TIMEOUT';\nexport const REFRESH_TOKEN = 'REFRESH_TOKEN';\n\n\nexport const FETCH_ASSISTANTS_REQUEST = 'FETCH_ASSISTANTS_REQUEST';\nexport const FETCH_ASSISTANTS_SUCCESS = 'FETCH_ASSISTANTS_SUCCESS';\nexport const FETCH_ASSISTANTS_FAILURE = 'FETCH_ASSISTANTS_FAILURE';\n\n    export const CHANGE_ASSISTANT_STATUS_REQUEST = 'CHANGE_ASSISTANT_STATUS_REQUEST';\n    export const CHANGE_ASSISTANT_STATUS_SUCCESS = 'CHANGE_ASSISTANT_STATUS_SUCCESS';\n    export const CHANGE_ASSISTANT_STATUS_FAILURE = 'CHANGE_ASSISTANT_STATUS_FAILURE';\n\n\n    export const ADD_ASSISTANT_REQUEST = 'ADD_ASSISTANTS_REQUEST';\n    export const ADD_ASSISTANT_SUCCESS = 'ADD_ASSISTANT_SUCCESS';\n    export const ADD_ASSISTANT_FAILURE = 'ADD_ASSISTANT_FAILURE';\n\n    export const UPDATE_ASSISTANT_REQUEST = 'UPDATE_ASSISTANT_REQUEST';\n    export const UPDATE_ASSISTANT_SUCCESS = 'UPDATE_ASSISTANT_SUCCESS';\n    export const UPDATE_ASSISTANT_FAILURE = 'UPDATE_ASSISTANT_FAILURE';\n\n    export const DELETE_ASSISTANT_REQUEST = 'DELETE_ASSISTANT_REQUEST';\n    export const DELETE_ASSISTANT_SUCCESS = 'DELETE_ASSISTANT_SUCCESS';\n    export const DELETE_ASSISTANT_FAILURE = 'DELETE_ASSISTANT_FAILURE';\n\n\nexport const FETCH_FLOW_REQUEST = 'FETCH_FLOW_REQUEST';\nexport const FETCH_FLOW_SUCCESS = 'FETCH_FLOW_SUCCESS';\nexport const FETCH_FLOW_FAILURE = 'FETCH_FLOW_FAILURE';\n    // Groups\n    export const ADD_GROUP_REQUEST = 'ADD_GROUP_REQUEST';\n    export const ADD_GROUP_SUCCESS = 'ADD_GROUP_SUCCESS';\n    export const ADD_GROUP_FAILURE = 'ADD_GROUP_FAILURE';\n\n    export const EDIT_GROUP_REQUEST = 'EDIT_GROUP_REQUEST';\n    export const EDIT_GROUP_SUCCESS = 'EDIT_GROUP_SUCCESS';\n    export const EDIT_GROUP_FAILURE = 'EDIT_GROUP_FAILURE';\n\n    export const DELETE_GROUP_REQUEST = 'DELETE_GROUP_REQUEST';\n    export const DELETE_GROUP_SUCCESS = 'DELETE_GROUP_SUCCESS';\n    export const DELETE_GROUP_FAILURE = 'DELETE_GROUP_FAILURE';\n\n    // Block\n    export const ADD_BLOCK_REQUEST = 'ADD_BLOCK_REQUEST';\n    export const ADD_BLOCK_SUCCESS = 'ADD_BLOCK_SUCCESS';\n    export const ADD_BLOCK_FAILURE = 'ADD_BLOCK_FAILURE';\n\n    export const EDIT_BLOCK_REQUEST = 'EDIT_BLOCK_REQUEST';\n    export const EDIT_BLOCK_SUCCESS = 'EDIT_BLOCK_SUCCESS';\n    export const EDIT_BLOCK_FAILURE = 'EDIT_BLOCK_FAILURE';\n\n    export const DELETE_BLOCK_REQUEST = 'DELETE_BLOCK_REQUEST';\n    export const DELETE_BLOCK_SUCCESS = 'DELETE_BLOCK_SUCCESS';\n    export const DELETE_BLOCK_FAILURE = 'DELETE_BLOCK_FAILURE';\n\n    export const UPDATE_BLOCKS_ORDER_REQUEST = 'UPDATE_BLOCKS_ORDER_REQUEST';\n    export const UPDATE_BLOCKS_ORDER_SUCCESS = 'UPDATE_BLOCKS_ORDER_SUCCESS';\n    export const UPDATE_BLOCKS_ORDER_FAILURE = 'UPDATE_BLOCKS_ORDER_FAILURE';\n\n\n\n// Conversation\nexport const GET_PROFILE_REQUEST = 'GET_PROFILE_REQUEST';\nexport const GET_PROFILE_SUCCESS = 'GET_PROFILE_SUCCESS';\nexport const GET_PROFILE_FAILURE = 'GET_PROFILE_FAILURE';\n\n    export const SAVE_PROFILE_DETAILS_REQUEST = 'SAVE_PROFILE_DETAILS_REQUEST';\n    export const SAVE_PROFILE_DETAILS_SUCCESS = 'SAVE_PROFILE_DETAILS_SUCCESS';\n    export const SAVE_PROFILE_DETAILS_FAILURE = 'SAVE_PROFILE_DETAILS_FAILURE';\n\n    export const SAVE_DATA_SETTINGS_REQUEST = 'SAVE_DATA_SETTINGS_REQUEST';\n    export const SAVE_DATA_SETTINGS_SUCCESS = 'SAVE_DATA_SETTINGS_SUCCESS';\n    export const SAVE_DATA_SETTINGS_FAILURE = 'SAVE_DATA_SETTINGS_FAILURE';\n\n// User Input\nexport const FETCH_CHATBOT_SESSIONS_REQUEST = 'FETCH_CHATBOT_SESSIONS_REQUEST';\nexport const FETCH_CHATBOT_SESSIONS_SUCCESS = 'FETCH_CHATBOT_SESSIONS_SUCCESS';\nexport const FETCH_CHATBOT_SESSIONS_FAILURE = 'FETCH_CHATBOT_SESSIONS_FAILURE';\n\n    export const CLEAR_ALL_CHATBOT_SESSIONS_REQUEST = 'CLEAR_ALL_CHATBOT_SESSIONS_REQUEST';\n    export const CLEAR_ALL_CHATBOT_SESSIONS_SUCCESS = 'CLEAR_ALL_CHATBOT_SESSIONS_SUCCESS';\n    export const CLEAR_ALL_CHATBOT_SESSIONS_FAILURE = 'CLEAR_ALL_CHATBOT_SESSIONS_FAILURE';\n\n// Solutions\nexport const GET_SOLUTIONS_REQUEST = 'GET_SOLUTIONS_REQUEST';\nexport const GET_SOLUTIONS_SUCCESS = 'GET_SOLUTIONS_SUCCESS';\nexport const GET_SOLUTIONS_FAILURE = 'GET_SOLUTIONS_FAILURE';\n\n    export const ADD_SOLUTION_REQUEST = 'ADD_SOLUTION_REQUEST';\n    export const ADD_SOLUTION_SUCCESS = 'ADD_SOLUTION_SUCCESS';\n    export const ADD_SOLUTION_FAILURE = 'ADD_SOLUTION_FAILURE';\n\n    export const EDIT_SOLUTION_REQUEST = 'EDIT_SOLUTION_REQUEST';\n    export const EDIT_SOLUTION_SUCCESS = 'EDIT_SOLUTION_SUCCESS';\n    export const EDIT_SOLUTION_FAILURE = 'EDIT_SOLUTION_FAILURE';\n\n    export const UPDATE_SOLUTION_INFORMATION_TO_DISPLAY_REQUEST = 'UPDATE_SOLUTION_INFORMATION_TO_DISPLAY_REQUEST';\n    export const UPDATE_SOLUTION_INFORMATION_TO_DISPLAY_SUCCESS = 'UPDATE_SOLUTION_INFORMATION_TO_DISPLAY_SUCCESS';\n    export const UPDATE_SOLUTION_INFORMATION_TO_DISPLAY_FAILURE = 'UPDATE_SOLUTION_INFORMATION_TO_DISPLAY_FAILURE';\n\n    export const UPDATE_BUTTON_LINK_REQUEST = 'UPDATE_BUTTON_LINK_REQUEST';\n    export const UPDATE_BUTTON_LINK_SUCCESS = 'UPDATE_BUTTON_LINK_SUCCESS';\n    export const UPDATE_BUTTON_LINK_FAILURE = 'UPDATE_BUTTON_LINK_FAILURE';\n\n    export const SEND_SOLUTION_ALERT_REQUEST = 'SEND_SOLUTION_ALERT_REQUEST';\n    export const SEND_SOLUTION_ALERT_SUCCESS = 'SEND_SOLUTION_ALERT_SUCCESS';\n    export const SEND_SOLUTION_ALERT_FAILURE = 'SEND_SOLUTION_ALERT_FAILURE';\n\n    export const UPDATE_AUTOMATIC_SOLUTION_ALERTS_REQUEST = 'UPDATE_AUTOMATIC_SOLUTION_ALERTS_REQUEST';\n    export const UPDATE_AUTOMATIC_SOLUTION_ALERTS_SUCCESS = 'UPDATE_AUTOMATIC_SOLUTION_ALERTS_SUCCESS';\n    export const UPDATE_AUTOMATIC_SOLUTION_ALERTS_FAILURE = 'UPDATE_AUTOMATIC_SOLUTION_ALERTS_FAILURE';\n\n\nexport const GET_DATABASES_LIST_REQUEST = 'GET_DATABASES_LIST_REQUEST';\nexport const GET_DATABASES_LIST_SUCCESS = 'GET_DATABASES_LIST_SUCCESS';\nexport const GET_DATABASES_LIST_FAILURE = 'GET_DATABASES_LIST_FAILURE';\n\n    export const UPLOAD_DATABASE_REQUEST = 'UPLOAD_DATABASE_REQUEST';\n    export const UPLOAD_DATABASE_SUCCESS = 'UPLOAD_DATABASE_SUCCESS';\n    export const UPLOAD_DATABASE_FAILURE = 'UPLOAD_DATABASE_FAILURE';\n\n    export const FETCH_DATABASE_REQUEST = 'FETCH_DATABASE_REQUEST';\n    export const FETCH_DATABASE_SUCCESS = 'FETCH_DATABASE_SUCCESS';\n    export const FETCH_DATABASE_FAILURE = 'FETCH_DATABASE_FAILURE';\n    export const RESET_DATABASE = 'RESET_DATABASE';\n\n    export const DELETE_DATABASE_REQUEST = 'DELETE_DATABASE_REQUEST';\n    export const DELETE_DATABASE_SUCCESS = 'DELETE_DATABASE_SUCCESS';\n    export const DELETE_DATABASE_FAILURE = 'DELETE_DATABASE_FAILURE';\n\n// Users Management\nexport const GET_USERS_REQUEST = 'GET_USERS_REQUEST';\nexport const GET_USERS_SUCCESS = 'GET_USERS_SUCCESS';\nexport const GET_USERS_FAILURE = 'GET_USERS_FAILURE';\n\n    export const ADD_USER_REQUEST = 'ADD_USER_REQUEST';\n    export const ADD_USER_SUCCESS = 'ADD_USER_SUCCESS';\n    export const ADD_USER_FAILURE = 'ADD_USER_FAILURE';\n\n    export const EDIT_USER_REQUEST = 'EDIT_USER_REQUEST';\n    export const EDIT_USER_SUCCESS = 'EDIT_USER_SUCCESS';\n    export const EDIT_USER_FAILURE = 'EDIT_USER_FAILURE';\n\n    export const DELETE_USER_REQUEST = 'DELETE_USER_REQUEST';\n    export const DELETE_USER_SUCCESS = 'DELETE_USER_SUCCESS';\n    export const DELETE_USER_FAILURE = 'DELETE_USER_FAILURE';","export const updateObject = (oldObject, updatedValues) => {\n    return {\n        ...oldObject,\n        ...updatedValues\n    }\n};\n","import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\nlet user = JSON.parse(localStorage.getItem('user'));\nconst initialState = user ? {isAuthenticated: true, user} : {isAuthenticated: false, user: null};\n\nexport const auth = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.LOGIN_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isLoggingIn: true,\n            });\n        case actionTypes.LOGIN_SUCCESS:\n            return updateObject(state, {\n                isLoggingIn: false,\n                isAuthenticated: true,\n                user: action.user\n            });\n        case actionTypes.LOGIN_FAILURE:\n            return updateObject(state, {\n                isLoggingIn: false,\n                isAuthenticated: false,\n                user: null,\n                errorMsg: action.error.msg\n            });\n        case actionTypes.LOGOUT:\n            return updateObject(state, {\n                isLoggingIn: false,\n                isAuthenticated: false,\n                user: null,\n                errorMsg: null\n            });\n        default:\n            return state\n    }\n};","import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\nconst initialState = {assistantList: [], isLoading: false, errorMsg: null};\n\nexport const assistant = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.FETCH_ASSISTANTS_REQUEST:\n            return updateObject(state, {\n                assistantList: [],\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.FETCH_ASSISTANTS_SUCCESS:\n            return updateObject(state, {\n                assistantList: action.assistantList,\n                isLoading: false\n            });\n        case actionTypes.FETCH_ASSISTANTS_FAILURE:\n            return updateObject(state, {\n                assistantList: [],\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n\n        // Add\n        case actionTypes.ADD_ASSISTANT_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isAdding: true\n            });\n        case actionTypes.ADD_ASSISTANT_SUCCESS:\n            return updateObject(state, {\n                successMsg: action.successMsg,\n                isAdding: false\n            });\n        case actionTypes.ADD_ASSISTANT_FAILURE:\n            return updateObject(state, {\n                isAdding: false,\n                errorMsg: action.error.msg\n            });\n\n        // Update\n        case actionTypes.UPDATE_ASSISTANT_REQUEST:\n            return updateObject(state, {\n                successMsg: null,\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.UPDATE_ASSISTANT_SUCCESS:\n            return updateObject(state, {\n                successMsg: action.successMsg,\n                isLoading: false\n            });\n        case actionTypes.UPDATE_ASSISTANT_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n\n        // Delete\n        case actionTypes.DELETE_ASSISTANT_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isDeleting: true\n            });\n        case actionTypes.DELETE_ASSISTANT_SUCCESS:\n\n            let assistantList = [...state.assistantList];\n            const assistantToDeleteIndex =  assistantList\n                .findIndex(assistant => assistant.id === action.assistantID);\n            assistantList.splice(assistantToDeleteIndex, 1);\n\n            return updateObject(state, {\n                successMsg: action.successMsg,\n                isDeleting: false,\n                assistantList\n            });\n        case actionTypes.DELETE_ASSISTANT_FAILURE:\n            return updateObject(state, {\n                isDeleting: false,\n                errorMsg: action.error.msg\n            });\n\n\n        case actionTypes.CHANGE_ASSISTANT_STATUS_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isChanging: true\n            });\n        case actionTypes.CHANGE_ASSISTANT_STATUS_SUCCESS:\n\n            return updateObject(state, {\n                successMsg: action.successMsg,\n                isChanging: false\n            });\n        case actionTypes.CHANGE_ASSISTANT_STATUS_FAILURE:\n            return updateObject(state, {\n                isChanging: false,\n                errorMsg: action.error.msg\n            });\n\n        default:\n            return state\n    }\n};","import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\n\nconst initialState = {isLoading: false, errorMsg: null, blockGroups: []};\n\nexport const flow = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.FETCH_FLOW_REQUEST:\n            return updateObject(state, {\n                isLoading: true\n            });\n        case actionTypes.FETCH_FLOW_SUCCESS:\n            return updateObject(state, {\n                isLoading: false,\n                blockGroups: action.blockGroups\n            });\n        case actionTypes.FETCH_FLOW_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n\n        // Groups\n        case actionTypes.ADD_GROUP_REQUEST:\n            return updateObject(state, {\n                isAddingGroup: true\n            });\n        case actionTypes.ADD_GROUP_SUCCESS:\n            return updateObject(state, {\n                isAddingGroup: false,\n                addSuccessMsg: action.msg\n            });\n        case actionTypes.ADD_GROUP_FAILURE:\n            return updateObject(state, {\n                isAddingGroup: false,\n                errorMsg: action.error.msg\n            });\n\n\n        case actionTypes.EDIT_GROUP_REQUEST:\n            return updateObject(state, {\n                isEditingGroup: true\n            });\n        case actionTypes.EDIT_GROUP_SUCCESS:\n            return updateObject(state, {\n                isEditingGroup: false,\n                editSuccessMsg: action.msg\n            });\n        case actionTypes.EDIT_GROUP_FAILURE:\n            return updateObject(state, {\n                isEditingGroup: false,\n                errorMsg: action.error.msg\n            });\n\n\n        case actionTypes.DELETE_GROUP_REQUEST:\n            return updateObject(state, {\n                isDeletingGroup: true\n            });\n        case actionTypes.DELETE_GROUP_SUCCESS:\n            let blockGroups = [...state.blockGroups];\n            const groupToDeleteIndex =  blockGroups.findIndex(group => group.id === action.groupID);\n            blockGroups.splice(groupToDeleteIndex, 1);\n\n            return updateObject(state, {\n                isDeletingGroup: false,\n                deleteSuccessMsg: action.msg,\n                blockGroups\n            });\n        case actionTypes.DELETE_GROUP_FAILURE:\n            return updateObject(state, {\n                isDeletingGroup: false,\n                errorMsg: action.error.msg\n            });\n\n\n        // Blocks\n        case actionTypes.ADD_BLOCK_REQUEST:\n            return updateObject(state, {\n                isAddingBlock: true\n            });\n        case actionTypes.ADD_BLOCK_SUCCESS:\n            return updateObject(state, {\n                isAddingBlock: false,\n                successMsg: action.msg\n            });\n        case actionTypes.ADD_BLOCK_FAILURE:\n            return updateObject(state, {\n                isAddingBlock: false,\n                errorMsg: action.error.msg\n            });\n\n\n        case actionTypes.DELETE_BLOCK_REQUEST:\n            return updateObject(state, {\n                isDeletingBlock: true\n            });\n        case actionTypes.DELETE_BLOCK_SUCCESS:\n            return updateObject(state, {\n                isDeletingBlock: false,\n                deleteSuccessMsg: action.msg,\n            });\n        case actionTypes.DELETE_BLOCK_FAILURE:\n            return updateObject(state, {\n                isDeletingBlock: false,\n                errorMsg: action.error.msg\n            });\n\n\n        default:\n            return state\n    }\n};","import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\nconst initialState = {profile: {}, isLoading: false, errorMsg: null};\n\nexport const profile = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.GET_PROFILE_REQUEST:\n            return updateObject(state, {\n                profile: {},\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.GET_PROFILE_SUCCESS:\n            return updateObject(state, {\n                profile: action.profileData,\n                isLoading: false\n            });\n        case actionTypes.GET_PROFILE_FAILURE:\n            return updateObject(state, {\n                profile: {},\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n        case actionTypes.SAVE_PROFILE_DETAILS_REQUEST:\n            return updateObject(state, {\n                successMsg: null,\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.SAVE_PROFILE_DETAILS_SUCCESS:\n            return updateObject(state, {\n                successMsg: action.successMsg,\n                isLoading: false\n            });\n        case actionTypes.SAVE_PROFILE_DETAILS_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n        case actionTypes.SAVE_DATA_SETTINGS_REQUEST:\n            return updateObject(state, {\n                successMsg: null,\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.SAVE_DATA_SETTINGS_SUCCESS:\n            return updateObject(state, {\n                successMsg: action.successMsg,\n                isLoading: false\n            });\n        case actionTypes.SAVE_DATA_SETTINGS_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n        default:\n            return state\n    }\n};","import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\nconst initialState = {chatbotSessions: [], isLoading: false, errorMsg: null};\n\nexport const chatbotSessions = (state = initialState, action) => {\n    switch (action.type) {\n        // Fetching chatbot sessions\n        case actionTypes.FETCH_CHATBOT_SESSIONS_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.FETCH_CHATBOT_SESSIONS_SUCCESS:\n            return updateObject(state, {\n                chatbotSessions: action.chatbotSessions,\n                isLoading: false\n            });\n        case actionTypes.FETCH_CHATBOT_SESSIONS_FAILURE:\n            return updateObject(state, {\n                chatbotSessions: [],\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n\n        //Clearing all chatbot sessions\n        case actionTypes.CLEAR_ALL_CHATBOT_SESSIONS_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isClearingAll: true\n            });\n        case actionTypes.CLEAR_ALL_CHATBOT_SESSIONS_SUCCESS:\n            return updateObject(state, {\n                isClearingAll: false,\n                chatbotSessions: [],\n                errorMsg: null,\n            });\n        case actionTypes.CLEAR_ALL_CHATBOT_SESSIONS_FAILURE:\n            return updateObject(state, {\n                isClearingAll: false,\n                errorMsg: action.error.msg\n            });\n        default:\n            return state\n    }\n};","import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\nconst initialState = {solutionsData: {}, isLoading: false, errorMsg: null};\n\nexport const solutions = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.GET_SOLUTIONS_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.GET_SOLUTIONS_SUCCESS:\n            return updateObject(state, {\n                solutionsData: action.solutionsData,\n                isLoading: false\n            });\n        case actionTypes.GET_SOLUTIONS_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n        case actionTypes.ADD_SOLUTION_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.ADD_SOLUTION_SUCCESS:\n            return updateObject(state, {\n                isLoading: false,\n                message: action.message\n            });\n        case actionTypes.ADD_SOLUTION_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n        case actionTypes.EDIT_SOLUTION_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.EDIT_SOLUTION_SUCCESS:\n            return updateObject(state, {\n                isLoading: false,\n                message: action.message\n            });\n        case actionTypes.EDIT_SOLUTION_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n        case actionTypes.UPDATE_BUTTON_LINK_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.UPDATE_BUTTON_LINK_SUCCESS:\n            return updateObject(state, {\n                isLoading: false,\n                message: action.message\n            });\n        case actionTypes.UPDATE_BUTTON_LINK_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n        case actionTypes.SEND_SOLUTION_ALERT_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.SEND_SOLUTION_ALERT_SUCCESS:\n            return updateObject(state, {\n                isLoading: false,\n                message: action.message\n            });\n        case actionTypes.SEND_SOLUTION_ALERT_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n        case actionTypes.UPDATE_AUTOMATIC_SOLUTION_ALERTS_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.UPDATE_AUTOMATIC_SOLUTION_ALERTS_SUCCESS:\n            return updateObject(state, {\n                isLoading: false,\n                message: action.message\n            });\n        case actionTypes.UPDATE_AUTOMATIC_SOLUTION_ALERTS_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n        default:\n            return state\n    }\n};","import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\nconst initialState = {usersList: [], isLoading: false, errorMsg: null};\n\nexport const usersManagement = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.GET_USERS_REQUEST:\n            return updateObject(state, {\n                usersList: [],\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.GET_USERS_SUCCESS:\n            return updateObject(state, {\n                usersList: action.usersData,\n                isLoading: false\n            });\n        case actionTypes.GET_USERS_FAILURE:\n            return updateObject(state, {\n                usersList: [],\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n        case actionTypes.ADD_USER_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.ADD_USER_SUCCESS:\n            return updateObject(state, {\n                isLoading: false\n            });\n        case actionTypes.ADD_USER_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n        case actionTypes.EDIT_USER_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.EDIT_USER_SUCCESS:\n            return updateObject(state, {\n                isLoading: false\n            });\n        case actionTypes.EDIT_USER_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n        case actionTypes.DELETE_USER_REQUEST:\n            return updateObject(state, {\n                errorMsg: null,\n                isLoading: true\n            });\n        case actionTypes.DELETE_USER_SUCCESS:\n            return updateObject(state, {\n                isLoading: false\n            });\n        case actionTypes.DELETE_USER_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n\n        default:\n            return state\n    }\n};","import * as actionTypes from '../actions/actionTypes';\nimport {updateObject} from '../utility';\n\nconst initialState = {isLoading: false, errorMsg: null, databasesList: [], fetchedDatabase:{}};\n\n\nexport const database = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.GET_DATABASES_LIST_REQUEST:\n            return updateObject(state, {\n                isLoading: true\n            });\n        case actionTypes.GET_DATABASES_LIST_SUCCESS:\n            return updateObject(state, {\n                isLoading: false,\n                databasesList: action.databasesList\n            });\n        case actionTypes.GET_DATABASES_LIST_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n\n\n        case actionTypes.FETCH_DATABASE_REQUEST:\n            return updateObject(state, {\n                isLoading: true\n            });\n        case actionTypes.FETCH_DATABASE_SUCCESS:\n            return updateObject(state, {\n                isLoading: false,\n                fetchedDatabase: action.fetchedDatabase\n            });\n        case actionTypes.FETCH_DATABASE_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n        case actionTypes.RESET_DATABASE:\n            return updateObject(state, {fetchedDatabase: {}});\n\n\n        case actionTypes.DELETE_DATABASE_REQUEST:\n            return updateObject(state, {\n                isDeletingGroup: true\n            });\n        case actionTypes.DELETE_DATABASE_SUCCESS:\n            let databasesList = [...state.databasesList];\n            const databaseToDeleteIndex =  databasesList.findIndex(db => db.ID === action.databaseID);\n            databasesList.splice(databaseToDeleteIndex, 1);\n            return updateObject(state, {\n                isDeletingGroup: false,\n                databasesList: action.databasesList\n            });\n        case actionTypes.DELETE_DATABASE_FAILURE:\n            return updateObject(state, {\n                isDeletingGroup: false,\n                errorMsg: action.error.msg\n            });\n\n\n        case actionTypes.UPLOAD_DATABASE_REQUEST:\n            return updateObject(state, {\n                isLoading: true\n            });\n        case actionTypes.UPLOAD_DATABASE_SUCCESS:\n            let updatedDatabaseList = [...state.databasesList];\n            updatedDatabaseList.push(action.newDatabase);\n            return updateObject(state, {\n                isLoading: false,\n                databasesList: updatedDatabaseList\n            });\n        case actionTypes.UPLOAD_DATABASE_FAILURE:\n            return updateObject(state, {\n                isLoading: false,\n                errorMsg: action.error.msg\n            });\n\n        default:\n            return state\n    }\n};","import {combineReducers} from 'redux';\nimport {auth} from './auth.reducer';\nimport {assistant} from \"./assistant.reducer\";\nimport {flow} from \"./flow.reducer\";\nimport {profile} from \"./profile.reducer\";\nimport {chatbotSessions} from \"./chatbotSessions.reducer\";\nimport {solutions} from \"./solutions.reducer\";\nimport {usersManagement} from \"./usersManagement.reducer\";\nimport {database} from \"./database.reducer\";\n\n\nconst rootReducer = combineReducers({\n    auth,\n    assistant,\n    flow,\n    profile,\n    chatbotSessions,\n    solutions,\n    usersManagement,\n    database\n});\n\nexport default rootReducer;","import * as actionTypes from './actionTypes';\n\n\nfunction login (email, password) {\n    return {\n        type: actionTypes.LOGIN_REQUEST,\n        email,\n        password\n    };\n}\n\nfunction loginSuccess (user) {\n    return {\n        type: actionTypes.LOGIN_SUCCESS,\n        user\n    };\n}\n\nfunction loginFailure (error) {\n    return {\n        type: actionTypes.LOGIN_FAILURE,\n        error\n    };\n}\n\n\nconst logout = () => {\n    return {\n        type: actionTypes.LOGOUT\n    };\n};\n\nconst checkAuthTimeout = (expirationTime, refresh) => {\n    return {\n        type: actionTypes.AUTH_CHECK_TIMEOUT,\n        expirationTime, refresh\n    };\n};\n\nconst refreshToken = (refresh) => {\n    return {\n        type: actionTypes.REFRESH_TOKEN,\n        refresh\n    };\n};\n\nexport const authActions = {\n    login,\n    loginSuccess,\n    loginFailure,\n    logout,\n    refreshToken,\n    checkAuthTimeout\n};","import * as actionTypes from './actionTypes';\n\n\nconst fetchAssistants = () => {\n    return {\n        type: actionTypes.FETCH_ASSISTANTS_REQUEST\n    };\n};\n\nconst fetchAssistantsSuccess = (assistantList) => {\n    return {\n        type: actionTypes.FETCH_ASSISTANTS_SUCCESS,\n        assistantList\n    };\n};\n\nconst fetchAssistantsFailure = (error) => {\n    return {\n        type: actionTypes.FETCH_ASSISTANTS_FAILURE,\n        error\n    };\n};\n\n\nconst addAssistant = (newAssistant) => {\n    return {\n        type: actionTypes.ADD_ASSISTANT_REQUEST,\n        newAssistant\n    };\n};\n\nconst addAssistantSuccess = (successMsg) => {\n    return {\n        type: actionTypes.ADD_ASSISTANT_SUCCESS,\n        successMsg\n    };\n};\n\nconst addAssistantFailure = (error) => {\n    return {\n        type: actionTypes.ADD_ASSISTANT_FAILURE,\n        error\n    };\n};\n\nconst updateAssistant = ({assistantID, updatedSettings}) => {\n    return {\n        type: actionTypes.UPDATE_ASSISTANT_REQUEST,\n        assistantID,\n        updatedSettings\n    };\n};\n\nconst updateAssistantSuccess = (successMsg) => {\n    return {\n        type: actionTypes.UPDATE_ASSISTANT_SUCCESS,\n        successMsg\n    };\n};\n\nconst updateAssistantFailure = (error) => {\n    return {\n        type: actionTypes.UPDATE_ASSISTANT_FAILURE,\n        error\n    };\n};\n\n\n\nconst deleteAssistant = (assistantID) => {\n    return {\n        type: actionTypes.DELETE_ASSISTANT_REQUEST,\n        assistantID\n    };\n};\n\nconst deleteAssistantSuccess = (assistantID, successMsg) => {\n    return {\n        type: actionTypes.DELETE_ASSISTANT_SUCCESS,\n        assistantID,\n        successMsg\n    };\n};\n\nconst deleteAssistantFailure = (error) => {\n    return {\n        type: actionTypes.DELETE_ASSISTANT_FAILURE,\n        error\n    };\n};\n\n\nconst changeAssistantStatus = (assistantID) => {\n    return {\n        type: actionTypes.CHANGE_ASSISTANT_STATUS_REQUEST,\n        assistantID\n    };\n};\n\nconst changeAssistantStatusSuccess = (successMsg, status, assistantID) => {\n    return {\n        type: actionTypes.CHANGE_ASSISTANT_STATUS_SUCCESS,\n        successMsg,\n        status,\n        assistantID\n    };\n};\n\nconst changeAssistantStatusFailure = (error) => {\n    return {\n        type: actionTypes.CHANGE_ASSISTANT_STATUS_FAILURE,\n        error\n    };\n};\n\nexport const assistantActions = {\n    fetchAssistants,\n    fetchAssistantsSuccess,\n    fetchAssistantsFailure,\n\n    addAssistant,\n    addAssistantSuccess,\n    addAssistantFailure,\n\n    updateAssistant,\n    updateAssistantSuccess,\n    updateAssistantFailure,\n\n    deleteAssistant,\n    deleteAssistantSuccess,\n    deleteAssistantFailure,\n\n    changeAssistantStatus,\n    changeAssistantStatusSuccess,\n    changeAssistantStatusFailure,\n};","import * as actionTypes from './actionTypes';\n\nconst getDatabasesList = () => {\n    return {\n        type: actionTypes.GET_DATABASES_LIST_REQUEST,\n    }\n};\n\nconst getDatabasesListSuccess = (databasesList) => {\n    return {\n        type: actionTypes.GET_DATABASES_LIST_SUCCESS,\n        databasesList: databasesList\n    }\n};\n\nconst getDatabasesListFailure = (error) => {\n    return {\n        type: actionTypes.GET_DATABASES_LIST_FAILURE,\n        error\n    }\n};\n\n\n// Upload\nconst uploadDatabase = (newDatabase) => {\n    return {\n        type: actionTypes.UPLOAD_DATABASE_REQUEST,\n        newDatabase\n    }\n};\n\n\nconst uploadDatabaseSuccess = (successMessage, newDatabase) => {\n    return {\n        type: actionTypes.UPLOAD_DATABASE_SUCCESS,\n        successMessage,\n        newDatabase\n    }\n};\n\nconst uploadDatabaseFailure = (error) => {\n    return {\n        type: actionTypes.UPLOAD_DATABASE_FAILURE,\n        error\n    }\n};\n\n\n// Fetch\nconst fetchDatabase = (databaseID) => {\n    return {\n        type: actionTypes.FETCH_DATABASE_REQUEST,\n        databaseID\n    }\n};\n\nconst fetchDatabaseSuccess = (successMessage, fetchedDatabase) => {\n    return {\n        type: actionTypes.FETCH_DATABASE_SUCCESS,\n        successMessage,\n        fetchedDatabase\n    }\n};\n\nconst fetchDatabaseFailure = (error) => {\n    return {\n        type: actionTypes.FETCH_DATABASE_FAILURE,\n        error\n    }\n};\nconst resetFetchedDtabase = () => {\n    return {\n        type: actionTypes.RESET_DATABASE\n    }\n};\n\n// Delete\nconst DeleteDatabase = () => {\n    return {\n        type: actionTypes.DELETE_DATABASE_REQUEST,\n    }\n};\n\nconst DeleteDatabaseSuccess = (successMessage, databaseID) => {\n    return {\n        type: actionTypes.DELETE_DATABASE_SUCCESS,\n        successMessage,\n        databaseID\n    }\n};\n\nconst DeleteDatabaseFailure = (error) => {\n    return {\n        type: actionTypes.DELETE_DATABASE_FAILURE,\n        error\n    }\n};\n\nexport const databaseActions = {\n    getDatabasesList,\n    getDatabasesListSuccess,\n    getDatabasesListFailure,\n\n    uploadDatabase,\n    uploadDatabaseSuccess,\n    uploadDatabaseFailure,\n\n    fetchDatabase,\n    fetchDatabaseSuccess,\n    fetchDatabaseFailure,\n    resetFetchedDtabase,\n\n    DeleteDatabase,\n    DeleteDatabaseSuccess,\n    DeleteDatabaseFailure,\n};","import * as actionTypes from './actionTypes';\n\n\nconst fetchFlowRequest = (assistantID) => {\n    return {\n        type: actionTypes.FETCH_FLOW_REQUEST,\n        assistantID\n    };\n};\n\nconst fetchFlowSuccess = (args) => {\n    return {\n        type: actionTypes.FETCH_FLOW_SUCCESS,\n        blockGroups: args.blockGroups\n    };\n};\n\nconst fetchFlowFailure = (error) => {\n    return {\n        type: actionTypes.FETCH_FLOW_FAILURE,\n        error\n    };\n};\n\n// Groups Actions\nconst addGroupRequest = ({assistantID, newGroup}) => {\n    return {\n        type: actionTypes.ADD_GROUP_REQUEST,\n        assistantID: assistantID,\n        newGroup: newGroup\n    };\n};\n\nconst addGroupSuccess = (msg) => {\n    return {\n        type: actionTypes.ADD_GROUP_SUCCESS,\n        msg\n    };\n};\n\nconst addGroupFailure = (error) => {\n    return {\n        type: actionTypes.ADD_GROUP_FAILURE,\n        error\n    };\n};\n\n//////////////////////////////////////////\n\nconst editGroupRequest = ({assistantID, editedGroup}) => {\n    return {\n        type: actionTypes.EDIT_GROUP_REQUEST,\n        assistantID: assistantID,\n        editedGroup: editedGroup\n    };\n};\n\nconst editGroupSuccess = (msg) => {\n    return {\n        type: actionTypes.EDIT_GROUP_SUCCESS,\n        msg\n    };\n};\n\nconst editGroupFailure = (error) => {\n    return {\n        type: actionTypes.EDIT_GROUP_FAILURE,\n        error\n    };\n};\n\n//////////////////////////////////////////\n\nconst deleteGroupRequest = ({assistantID, deletedGroup}) => {\n    return {\n        type: actionTypes.DELETE_GROUP_REQUEST,\n        assistantID: assistantID,\n        deletedGroup: deletedGroup\n    };\n};\n\nconst deleteGroupSuccess = (msg, groupID) => {\n    return {\n        type: actionTypes.DELETE_GROUP_SUCCESS,\n        msg,\n        groupID\n    };\n};\n\nconst deleteGroupFailure = (error) => {\n    return {\n        type: actionTypes.DELETE_GROUP_FAILURE,\n        error\n    };\n};\n\n//////////////////////////////////////////\n// ADD Blocks Actions\nconst addBlockRequest = ({newBlock, assistantID, groupID}) => {\n    return {\n        type: actionTypes.ADD_BLOCK_REQUEST,\n        newBlock,\n        assistantID,\n        groupID\n    };\n};\n\nconst addBlockSuccess = (msg) => {\n    return {\n        type: actionTypes.ADD_BLOCK_SUCCESS,\n        msg\n    };\n};\n\nconst addBlockFailure = (error) => {\n    return {\n        type: actionTypes.ADD_BLOCK_FAILURE,\n        error\n    };\n};\n//////////////////////////////////////////\n// EDIT Blocks Actions\nconst editBlockRequest = ({edittedBlock, assistantID, groupID, currentBlocks}) => {\n    return {\n        type: actionTypes.EDIT_BLOCK_REQUEST,\n        edittedBlock,\n        assistantID,\n        groupID,\n        currentBlocks\n    };\n};\n\nconst editBlockSuccess = (msg) => {\n    return {\n        type: actionTypes.EDIT_BLOCK_SUCCESS,\n        msg\n    };\n};\n\nconst editBlockFailure = (error) => {\n    return {\n        type: actionTypes.EDIT_BLOCK_FAILURE,\n        error\n    };\n};\n\n//////////////////////////////////////////\n// DELETE Blocks Actions\nconst deleteBlockRequest = ({deletedBlock, assistantID, groupID}) => {\n    return {\n        type: actionTypes.DELETE_BLOCK_REQUEST,\n        deletedBlock,\n        assistantID,\n        groupID\n    };\n};\n\nconst deleteBlockSuccess = (msg) => {\n    return {\n        type: actionTypes.DELETE_BLOCK_SUCCESS,\n        msg\n    };\n};\n\nconst deleteBlockFailure = (error) => {\n    return {\n        type: actionTypes.DELETE_BLOCK_FAILURE,\n        error\n    };\n};\n//////////////////////////////////////////\n// UPDATE Blocks' order Actions\nconst updateBlocksOrderRequest = ({newBlocksOrder, assistantID, groupID}) => {\n    return {\n        type: actionTypes.UPDATE_BLOCKS_ORDER_REQUEST,\n        newBlocksOrder,\n        assistantID,\n        groupID\n    };\n};\n\nconst updateBlocksOrderSuccess = (msg) => {\n    return {\n        type: actionTypes.UPDATE_BLOCKS_ORDER_SUCCESS,\n        msg\n    };\n};\n\nconst updateBlocksOrderFailure = (error) => {\n    return {\n        type: actionTypes.UPDATE_BLOCKS_ORDER_FAILURE,\n        error\n    };\n};\n//////////////////////////////////////////\n\n\nexport const flowActions = {\n\n    fetchFlowRequest,\n    fetchFlowSuccess,\n    fetchFlowFailure,\n\n    addGroupRequest,\n    addGroupSuccess,\n    addGroupFailure,\n\n    editGroupRequest,\n    editGroupSuccess,\n    editGroupFailure,\n\n    deleteGroupRequest,\n    deleteGroupSuccess,\n    deleteGroupFailure,\n\n    addBlockRequest,\n    addBlockSuccess,\n    addBlockFailure,\n\n    editBlockRequest,\n    editBlockSuccess,\n    editBlockFailure,\n\n    deleteBlockRequest,\n    deleteBlockSuccess,\n    deleteBlockFailure,\n\n    updateBlocksOrderRequest,\n    updateBlocksOrderSuccess,\n    updateBlocksOrderFailure,\n\n};","import * as actionTypes from './actionTypes';\n\nconst getProfile = () => {\n    return {\n        type: actionTypes.GET_PROFILE_REQUEST\n    }\n};\n\nconst getProfileSuccess = (profile) => {\n    return {\n        type: actionTypes.GET_PROFILE_SUCCESS,\n        profileData: profile\n    }\n};\n\nconst getProfileFailure = (error) => {\n    return {\n        type: actionTypes.GET_PROFILE_FAILURE,\n        error\n    }\n};\n\nconst saveProfileDetails = (profileData) => {\n    return {\n        type: actionTypes.SAVE_PROFILE_DETAILS_REQUEST,\n        profileData\n    }\n};\n\nconst saveProfileDetailsSuccess = (successMessage) => {\n    return {\n        type: actionTypes.SAVE_PROFILE_DETAILS_SUCCESS,\n        successMessage\n    }\n};\n\nconst saveProfileDetailsFailure = (error) => {\n    return {\n        type: actionTypes.SAVE_PROFILE_DETAILS_FAILURE,\n        error\n    }\n};\n\nconst saveDataSettings = (dataSettings) => {\n    return {\n        type: actionTypes.SAVE_DATA_SETTINGS_REQUEST,\n        dataSettings\n    }\n};\n\nconst saveDataSettingsSuccess = (successMessage) => {\n    return {\n        type: actionTypes.SAVE_DATA_SETTINGS_SUCCESS,\n        successMessage\n    }\n};\n\nconst saveDataSettingsFailure = (error) => {\n    return {\n        type: actionTypes.SAVE_DATA_SETTINGS_FAILURE,\n        error\n    }\n};\n\nexport const profileActions = {\n    getProfile,\n    getProfileSuccess,\n    getProfileFailure,\n    saveProfileDetails,\n    saveProfileDetailsSuccess,\n    saveProfileDetailsFailure,\n    saveDataSettings,\n    saveDataSettingsSuccess,\n    saveDataSettingsFailure\n};","import * as actionTypes from './actionTypes';\n\n\nconst fetchChatbotSessions = (assistantID) => {\n    return {\n        type: actionTypes.FETCH_CHATBOT_SESSIONS_REQUEST,\n        assistantID\n    };\n};\n\nconst fetchChatbotSessionsSuccess = (chatbotSessions) => {\n    return {\n        type: actionTypes.FETCH_CHATBOT_SESSIONS_SUCCESS,\n        chatbotSessions\n    };\n};\n\nconst fetchChatbotSessionsFailure = (error) => {\n    return {\n        type: actionTypes.FETCH_CHATBOT_SESSIONS_FAILURE,\n        error\n    };\n};\n\n\nconst clearAllChatbotSessions = (assistantID) => {\n    return {\n        type: actionTypes.CLEAR_ALL_CHATBOT_SESSIONS_REQUEST,\n        assistantID\n    };\n};\n\nconst clearAllChatbotSessionsSuccess = () => {\n    return {\n        type: actionTypes.CLEAR_ALL_CHATBOT_SESSIONS_SUCCESS,\n    };\n};\n\nconst clearAllChatbotSessionsFailure = (error) => {\n    return {\n        type: actionTypes.CLEAR_ALL_CHATBOT_SESSIONS_FAILURE,\n        error\n    };\n};\n\n\nexport const chatbotSessionsActions = {\n    fetchChatbotSessions,\n    fetchChatbotSessionsSuccess,\n    fetchChatbotSessionsFailure,\n\n    clearAllChatbotSessions,\n    clearAllChatbotSessionsSuccess,\n    clearAllChatbotSessionsFailure\n};","import * as actionTypes from './actionTypes';\n\nconst getSolutions = (assistantID) => {\n    return {\n        type: actionTypes.GET_SOLUTIONS_REQUEST,\n        assistantID\n    }\n};\n\nconst getSolutionsSuccess = (solutions) => {\n    return {\n        type: actionTypes.GET_SOLUTIONS_SUCCESS,\n        solutionsData: solutions.data\n    }\n};\n\nconst getSolutionsFailure = (error) => {\n    return {\n        type: actionTypes.GET_SOLUTIONS_FAILURE,\n        error\n    }\n};\n\nconst addSolution = (params) => {\n    return {\n        type: actionTypes.ADD_SOLUTION_REQUEST,\n        params\n    }\n};\n\nconst addSolutionSuccess = (message) => {\n    return {\n        type: actionTypes.ADD_SOLUTION_SUCCESS,\n        message\n    }\n};\n\nconst addSolutionFailure = (error) => {\n    return {\n        type: actionTypes.ADD_SOLUTION_FAILURE,\n        error\n    }\n};\n\nconst editSolution = (params) => {\n    return {\n        type: actionTypes.EDIT_SOLUTION_REQUEST,\n        params\n    }\n};\n\nconst editSolutionSuccess = (message) => {\n    return {\n        type: actionTypes.EDIT_SOLUTION_SUCCESS,\n        message\n    }\n};\n\nconst editSolutionFailure = (error) => {\n    return {\n        type: actionTypes.EDIT_SOLUTION_FAILURE,\n        error\n    }\n};\n\nconst updateSolutionInformationToDisplay = (params) => {\n    return {\n        type: actionTypes.UPDATE_SOLUTION_INFORMATION_TO_DISPLAY_REQUEST,\n        params\n    }\n};\n\nconst updateSolutionInformationToDisplaySuccess = (params) => {\n    return {\n        type: actionTypes.UPDATE_SOLUTION_INFORMATION_TO_DISPLAY_SUCCESS,\n        params\n    }\n};\n\nconst updateSolutionInformationToDisplayFailure = (params) => {\n    return {\n        type: actionTypes.UPDATE_SOLUTION_INFORMATION_TO_DISPLAY_FAILURE,\n        params\n    }\n};\n\nconst updateButtonLink = (params) => {\n    return {\n        type: actionTypes.UPDATE_BUTTON_LINK_REQUEST,\n        params\n    }\n};\n\nconst updateButtonLinkSuccess = (params) => {\n    return {\n        type: actionTypes.UPDATE_BUTTON_LINK_SUCCESS,\n        params\n    }\n};\n\nconst updateButtonLinkFailure = (params) => {\n    return {\n        type: actionTypes.UPDATE_BUTTON_LINK_FAILURE,\n        params\n    }\n};\n\nconst sendSolutionAlert = (params) => {\n    return {\n        type: actionTypes.SEND_SOLUTION_ALERT_REQUEST,\n        params\n    }\n};\n\nconst sendSolutionAlertSuccess = (params) => {\n    return {\n        type: actionTypes.SEND_SOLUTION_ALERT_SUCCESS,\n        params\n    }\n};\n\nconst sendSolutionAlertFailure = (params) => {\n    return {\n        type: actionTypes.SEND_SOLUTION_ALERT_FAILURE,\n        params\n    }\n};\n\nconst updateAutomaticSolutions = (params) => {\n    return {\n        type: actionTypes.UPDATE_AUTOMATIC_SOLUTION_ALERTS_REQUEST,\n        params\n    }\n};\n\nconst updateAutomaticSolutionsSuccess = (params) => {\n    return {\n        type: actionTypes.UPDATE_AUTOMATIC_SOLUTION_ALERTS_SUCCESS,\n        params\n    }\n};\n\nconst updateAutomaticSolutionsFailure = (params) => {\n    return {\n        type: actionTypes.UPDATE_AUTOMATIC_SOLUTION_ALERTS_FAILURE,\n        params\n    }\n};\n\nexport const solutionsActions = {\n    getSolutions,\n    getSolutionsSuccess,\n    getSolutionsFailure,\n    addSolution,\n    addSolutionSuccess,\n    addSolutionFailure,\n    editSolution,\n    editSolutionSuccess,\n    editSolutionFailure,\n    updateSolutionInformationToDisplay,\n    updateSolutionInformationToDisplaySuccess,\n    updateSolutionInformationToDisplayFailure,\n    updateButtonLink,\n    updateButtonLinkSuccess,\n    updateButtonLinkFailure,\n    sendSolutionAlert,\n    sendSolutionAlertSuccess,\n    sendSolutionAlertFailure,\n    updateAutomaticSolutions,\n    updateAutomaticSolutionsSuccess,\n    updateAutomaticSolutionsFailure\n};","import * as actionTypes from './actionTypes';\n\n\nconst getUsers = () => {\n    return {\n        type: actionTypes.GET_USERS_REQUEST\n    };\n};\n\nconst getUsersSuccess = (usersData) => {\n    return {\n        type: actionTypes.GET_USERS_SUCCESS,\n        usersData\n    };\n};\n\nconst getUsersFailure = (error) => {\n    return {\n        type: actionTypes.GET_USERS_FAILURE,\n        error\n    };\n};\n\nconst addUser = (params) => {\n    return {\n        type: actionTypes.ADD_USER_REQUEST,\n        params\n    };\n};\n\nconst addUserSuccess = (message) => {\n    return {\n        type: actionTypes.ADD_USER_SUCCESS,\n        message\n    };\n};\n\nconst addUserFailure = (error) => {\n    return {\n        type: actionTypes.ADD_USER_FAILURE,\n        error\n    };\n};\n\nconst editUser = (params) => {\n    return {\n        type: actionTypes.EDIT_USER_REQUEST,\n        params\n    };\n};\n\nconst editUserSuccess = (message) => {\n    return {\n        type: actionTypes.EDIT_USER_SUCCESS,\n        message\n    };\n};\n\nconst editUserFailure = (error) => {\n    return {\n        type: actionTypes.EDIT_USER_FAILURE,\n        error\n    };\n};\n\nconst deleteUser = (params) => {\n    return {\n        type: actionTypes.DELETE_USER_REQUEST,\n        params\n    };\n};\n\nconst deleteUserSuccess = (message) => {\n    return {\n        type: actionTypes.DELETE_USER_SUCCESS,\n        message\n    };\n};\n\nconst deleteUserFailure = (error) => {\n    return {\n        type: actionTypes.DELETE_USER_FAILURE,\n        error\n    };\n};\n\nexport const usersManagementActions = {\n    getUsers,\n    getUsersSuccess,\n    getUsersFailure,\n    addUser,\n    addUserSuccess,\n    addUserFailure,\n    editUser,\n    editUserSuccess,\n    editUserFailure,\n    deleteUser,\n    deleteUserSuccess,\n    deleteUserFailure\n};","import * as actionTypes from '../actions/actionTypes';\nimport { delay } from \"redux-saga\";\nimport { put, takeEvery, takeLatest, all } from 'redux-saga/effects'\nimport {authActions, profileActions} from \"../actions\";\nimport { history, checkAuthenticity } from '../../helpers'\nimport {alertError, alertSuccess, destroyMessage, loadingMessage} from \"../../helpers/alert\";\nimport axios from 'axios';\n\n\nfunction* checkAuthTimeout({expirationTime, refresh}) {\n    yield delay(expirationTime * 1000);\n    yield put(authActions.refreshToken(refresh));\n}\n\nfunction* watchCheckAuthTimeout() {\n    yield takeEvery(actionTypes.AUTH_CHECK_TIMEOUT, checkAuthTimeout)\n}\n\nfunction* login({email, password}) {\n    try {\n        loadingMessage('Logging you in...');\n        const res = yield axios.post(`/api/auth`, {email, password}, {\n            headers: {'Content-Type': 'application/json'},\n        });\n\n        const {user, token, refresh, expiresIn} = yield res.data.data;\n        yield localStorage.setItem(\"user\", JSON.stringify(user));\n        yield localStorage.setItem(\"token\", token);\n        yield localStorage.setItem(\"refresh\", refresh);\n        yield localStorage.setItem(\"expiresIn\", expiresIn);\n        // When access token expires in seconds\n        const secondsToExpire = yield (new Date(expiresIn).getTime() - new Date().getTime()) / 1000;\n        // Dispatch actions\n        yield destroyMessage();\n        yield put(profileActions.getProfile());\n        yield put(authActions.loginSuccess(user));\n        yield put(authActions.checkAuthTimeout(secondsToExpire, refresh)); // refresh to access token when expired\n        // Redirect to dashboard page\n        yield history.push('/dashboard');\n    } catch (error) {\n        console.log(error);\n        yield destroyMessage();\n        yield alertError('Log in Unsuccessful', error.response.data.msg);\n        yield put(authActions.loginFailure(error.response.data));\n    }\n}\n\nfunction* watchLogin() {\n    yield takeLatest(actionTypes.LOGIN_REQUEST, login)\n}\n\nfunction* logout() {\n    // Clear local storage from user, token...\n    yield localStorage.clear();\n    yield history.push('/login');\n}\n\nfunction* watchLogout() {\n    yield takeLatest(actionTypes.LOGOUT, logout)\n}\n\nfunction* refreshToken({refresh}) {\n    try {\n        if(!checkAuthenticity()){throw new Error('Authentication Failed!')}\n        const res = yield axios.post(`/api/auth/refresh`, null,{\n            headers: {'Authorization': 'Bearer ' + refresh},\n        });\n\n        const {token, expiresIn} = res.data.data;\n        yield localStorage.setItem(\"token\", token);\n        yield localStorage.setItem(\"expiresIn\", expiresIn);\n        const secondsToExpire = yield (new Date(expiresIn).getTime() - new Date().getTime()) / 1000;\n        yield put(authActions.checkAuthTimeout(secondsToExpire, refresh));\n\n\n    } catch (error) {\n        console.log(error);\n        // Log the user out\n        yield put(authActions.logout());\n    }\n}\n\nfunction* watchRefreshToken() {\n    yield takeEvery(actionTypes.REFRESH_TOKEN, refreshToken)\n}\n\nexport function* authSaga() {\n    yield all([\n        watchLogin(),\n        watchLogout(),\n        watchCheckAuthTimeout(),\n        watchRefreshToken()\n    ])\n}\n","import {put, takeEvery, all} from 'redux-saga/effects'\nimport * as actionTypes from '../actions/actionTypes';\nimport {assistantActions, authActions, flowActions} from \"../actions\";\nimport {http} from \"../../helpers\";\nimport {alertError, alertSuccess, destroyMessage, loadingMessage} from \"../../helpers/alert\";\n\n\nfunction* fetchAssistants() {\n    try {\n        const res = yield http.get(`/assistants`);\n        yield put(assistantActions.fetchAssistantsSuccess(res.data.data));\n    } catch (error) {\n        console.log(error);\n        yield put(assistantActions.fetchAssistantsFailure(error.response.data));\n        return yield alertError('Error', \"Sorry, we could not fetch your assistants.\");\n    }\n\n}\n\nfunction* addAssistant({type, newAssistant}) {\n    try {\n        const res = yield http.post(`/assistants`, newAssistant);\n        yield put(assistantActions.addAssistantSuccess(res.data.msg));\n        yield put(assistantActions.fetchAssistants())\n        return yield alertSuccess('Assistant Added', res.data.msg);\n\n    } catch (error) {\n        console.log(error);\n        yield put(assistantActions.addAssistantFailure(error.response.data));\n        return yield alertError('Error', \"Sorry, we could not create the assistant.\");\n    }\n}\n\nfunction* updateAssistant({assistantID, updatedSettings}) {\n    try {\n        const res = yield http.put(`assistant/${assistantID}`, updatedSettings);\n        yield put(assistantActions.updateAssistantSuccess(res.data.msg));\n        yield put(assistantActions.fetchAssistants());\n        return yield alertSuccess('Assistant Updated', res.data.msg);\n    } catch (error) {\n        console.log(error);\n        yield put(assistantActions.updateAssistantFailure(error.response.data));\n        return yield alertError('Error', \"Sorry, we could not update the assistant.\");\n\n    }\n}\n\n\nfunction* deleteAssistant({assistantID}) {\n    try {\n        const res = yield http.delete(`/assistant/${assistantID}`);\n        yield put(assistantActions.deleteAssistantSuccess(assistantID, res.data.msg));\n        return yield alertSuccess('Assistant Deleted', res.data.msg);\n    } catch (error) {\n        console.log(error);\n        yield put(assistantActions.deleteAssistantFailure(error.response.data));\n        return yield alertError('Error', \"Sorry, we could not remove the assistant.\");\n    }\n}\n\n\nfunction* watchFetchAssistants() {\n    yield takeEvery(actionTypes.FETCH_ASSISTANTS_REQUEST, fetchAssistants)\n}\n\nfunction* watchAddAssistant() {\n    yield takeEvery(actionTypes.ADD_ASSISTANT_REQUEST, addAssistant)\n}\n\nfunction* watchUpdateAssistant() {\n    yield takeEvery(actionTypes.UPDATE_ASSISTANT_REQUEST, updateAssistant)\n}\n\nfunction* watchDeleteAssistant() {\n    yield takeEvery(actionTypes.DELETE_ASSISTANT_REQUEST, deleteAssistant)\n}\n\n\nexport function* assistantSaga() {\n    yield all([\n        watchFetchAssistants(),\n        watchAddAssistant(),\n        watchUpdateAssistant(),\n        watchDeleteAssistant(),\n\n    ])\n}","import {all, put, takeEvery} from 'redux-saga/effects'\nimport * as actionTypes from '../actions/actionTypes';\nimport {flowActions} from \"../actions/flow.actions\";\nimport {http} from \"../../helpers\";\nimport {alertError, alertSuccess, destroyMessage, loadingMessage} from \"../../helpers/alert\";\n\nfunction* fetchFlow({assistantID}) {\n    try {\n        const res = yield http.get(`/assistant/${assistantID}/flow`);\n        return yield put(flowActions.fetchFlowSuccess(res.data.data))\n    } catch (error) {\n        console.log(error);\n        yield put(flowActions.fetchFlowFailure(error.response.data));\n        return yield alertError('Error', \"Sorry, we could not retrieve the flow\");\n\n    }\n\n}\n\nfunction* watchFetchFlow() {\n    yield takeEvery(actionTypes.FETCH_FLOW_REQUEST, fetchFlow)\n}\n\n// Groups\nfunction* addGroup({assistantID, newGroup}) {\n    try {\n        loadingMessage('Adding Group');\n        const res = yield http.post(`/assistant/${assistantID}/flow/group`, newGroup);\n        yield put(flowActions.fetchFlowRequest(assistantID));\n        yield destroyMessage();\n        return yield alertSuccess('Group Added', res.data.msg);\n\n    } catch (error) {\n        console.log(error);\n        return yield put(flowActions.addGroupFailure(error.response.data));\n    }\n}\n\nfunction* editGroup({assistantID, editedGroup}) {\n    try {\n        loadingMessage('Updating Group');\n        const res = yield http.put(`/assistant/${assistantID}/flow/group`, editedGroup);\n        yield put(flowActions.editGroupSuccess(res.data.msg));\n        yield destroyMessage();\n        yield alertSuccess('Group Updated', res.data.msg);\n        return yield put(flowActions.fetchFlowRequest(assistantID))\n    } catch (error) {\n        console.log(error);\n        yield destroyMessage();\n        yield put(flowActions.editGroupFailure(error.response.data));\n        return yield alertError('Error', \"Sorry, we could not update the group.\");\n\n    }\n}\n\nfunction* deleteGroup({assistantID, deletedGroup}) {\n    try {\n        loadingMessage('Deleting Group');\n        const res = yield http.delete(`/assistant/${assistantID}/flow/group`, {data: {id: deletedGroup.id}});\n        yield put(flowActions.deleteGroupSuccess(res.data.msg, deletedGroup.id));\n        yield destroyMessage();\n        return yield alertSuccess('Group Deleted', res.data.msg);\n    } catch (error) {\n        console.log(error);\n        yield destroyMessage();\n        yield put(flowActions.deleteGroupFailure(error.response.data));\n        return yield alertError('Error', \"Sorry, we could not remove the group.\");\n\n    }\n}\n\nfunction* watchAddGroup() {\n    yield takeEvery(actionTypes.ADD_GROUP_REQUEST, addGroup)\n}\n\nfunction* watchEditGroup() {\n    yield takeEvery(actionTypes.EDIT_GROUP_REQUEST, editGroup)\n}\n\nfunction* watchDeleteGroup() {\n    yield takeEvery(actionTypes.DELETE_GROUP_REQUEST, deleteGroup)\n}\n\n// Blocks\nfunction* addBlock({newBlock, groupID, assistantID}) {\n    try {\n        loadingMessage('Adding Block');\n        const res = yield http.post(`/assistant/flow/group/${groupID}/block`, newBlock);\n\n        yield destroyMessage();\n        yield alertSuccess('Block Added', res.data.msg);\n        yield put(flowActions.addBlockSuccess(res.data.msg));\n\n        return yield put(flowActions.fetchFlowRequest(assistantID))\n    } catch (error) {\n        console.log(error);\n        yield put(flowActions.addBlockFailure(error.response.data));\n        return yield alertError('Error', \"Sorry, we could not create the block\");\n    }\n}\n\nfunction* editBlock({edittedBlock, assistantID, currentBlocks}) {\n    try {\n        loadingMessage('Updating Block');\n        let currentUpdatedGroup = [];\n        edittedBlock = edittedBlock.block;\n        currentBlocks.map(block =>\n            block.ID === edittedBlock.ID ? currentUpdatedGroup.push(edittedBlock) : currentUpdatedGroup.push(block)\n        );\n        const res = yield http.put(`/assistant/${assistantID}/flow`, {blocks: currentUpdatedGroup});\n        yield destroyMessage();\n        yield alertSuccess('Block Updated', res.data.msg);\n        yield put(flowActions.editBlockSuccess('done'));\n        return yield put(flowActions.fetchFlowRequest(assistantID));\n    } catch (error) {\n        console.log(error);\n        yield put(flowActions.editBlockFailure(error.response.data));\n        return yield alertError('Error', \"Sorry, we could not update the block\");\n    }\n}\n\nfunction* deleteBlock({deletedBlock, assistantID, groupID}) {\n    try {\n        loadingMessage('Deleting Block');\n        const res = yield http.delete(`/assistant/flow/group/${groupID}/block`, {data: {id: deletedBlock.ID}});\n        yield put(flowActions.deleteBlockSuccess(res.data.msg));\n        yield destroyMessage();\n        yield alertSuccess('Block Deleted', res.data.msg);\n        return yield put(flowActions.fetchFlowRequest(assistantID))\n    } catch (error) {\n        console.log(error);\n        yield put(flowActions.deleteBlockFailure(error.response.data));\n        return yield alertError('Error', \"Sorry, we could not delete the block\");\n    }\n}\n\nfunction* updateBlocksOrder({newBlocksOrder, assistantID}) {\n    try {\n        loadingMessage('Updating Blocks Order');\n        const res = yield http.put(`/assistant/${assistantID}/flow`, {blocks: newBlocksOrder});\n        yield put(flowActions.updateBlocksOrderSuccess(res.data.msg));\n        yield destroyMessage();\n        return yield alertSuccess('Order Updated', res.data.msg);\n    } catch (error) {\n        console.log(error);\n        yield destroyMessage();\n        yield alertError('Error in Block Delete', error.message);\n        yield put(flowActions.updateBlocksOrderFailure(error.response.data));\n        return yield alertError('Error', \"Sorry, we could not update the blocks order\");\n    }\n}\n\nfunction* watchAddBlock() {\n    yield takeEvery(actionTypes.ADD_BLOCK_REQUEST, addBlock)\n}\n\nfunction* watchEditBlock() {\n    yield takeEvery(actionTypes.EDIT_BLOCK_REQUEST, editBlock)\n}\n\nfunction* watchDeleteBlock() {\n    yield takeEvery(actionTypes.DELETE_BLOCK_REQUEST, deleteBlock)\n}\n\nfunction* watchUpdateBlocksOrder() {\n    yield takeEvery(actionTypes.UPDATE_BLOCKS_ORDER_REQUEST, updateBlocksOrder)\n}\n\n// Data Category (For Future)\nfunction* addDataCategory({name}) {\n    try {\n\n    } catch (error) {\n\n    }\n}\n\n\nexport function* flowSaga() {\n    yield all([\n        watchFetchFlow(),\n\n        watchAddGroup(),\n        watchEditGroup(),\n        watchDeleteGroup(),\n\n        watchAddBlock(),\n        watchEditBlock(),\n        watchDeleteBlock(),\n        watchUpdateBlocksOrder()\n    ])\n}","import {put, takeEvery, all} from 'redux-saga/effects'\nimport * as actionTypes from '../actions/actionTypes';\nimport {http, updateUsername} from \"../../helpers\";\nimport {profileActions} from \"../actions\";\nimport {alertError, alertSuccess, destroyMessage, loadingMessage} from \"../../helpers/alert\";\n\n\n\nfunction* getProfileData() {\n    try {\n        const res = yield http.get(`/profile`);\n        const profile = res.data.data;\n        // Update username in localStorage\n        yield updateUsername(profile.user.Firstname, profile.user.Surname);\n        return yield put(profileActions.getProfileSuccess(profile))\n\n    } catch (error) {\n        console.log(error);\n        return yield put(profileActions.getProfileFailure(error.response.data));\n    }\n\n}\n\nfunction* saveProfileData(action) {\n    try {\n        loadingMessage('Saving profile...');\n        const res = yield http.post(`/profile`, action.profileData);\n        yield put(profileActions.saveProfileDetailsSuccess(res.data.msg));\n        yield destroyMessage();\n        yield alertSuccess('Conversation Saved', \"Conversation details have been updated\");\n        return yield put(profileActions.getProfile())\n    } catch (error) {\n        console.log(error);\n        yield destroyMessage();\n        return yield put(profileActions.saveProfileDetailsFailure(error.response.data));\n    }\n}\n\nfunction* saveDataSettings(action) {\n    try {\n        loadingMessage('Saving Data Settings');\n        const res = yield http.post(`/profile/settings`, action.dataSettings);\n        yield destroyMessage();\n        yield put(profileActions.saveDataSettingsSuccess(res.data.msg));\n        yield alertSuccess('Data Settings saved', res.data.msg);\n        return yield put(profileActions.getProfile())\n    } catch (error) {\n        console.log(error);\n        yield destroyMessage();\n        yield alertError('Error in saving Data Settings', error.response.data.msg);\n        return yield put(profileActions.saveDataSettingsFailure(error.response.data));\n    }\n}\n\nfunction* watchProfileRequests(){\n    yield takeEvery(actionTypes.GET_PROFILE_REQUEST, getProfileData)\n}\n\nfunction* watchProfileUpdates() {\n    yield takeEvery(actionTypes.SAVE_PROFILE_DETAILS_REQUEST, saveProfileData)\n}\n\nfunction* watchDataSettingsUpdates() {\n    yield takeEvery(actionTypes.SAVE_DATA_SETTINGS_REQUEST, saveDataSettings)\n}\n\n\nexport function* profileSaga() {\n    yield all([\n        watchProfileRequests(),\n        watchProfileUpdates(),\n        watchDataSettingsUpdates()\n    ])\n}","import {put, takeEvery, all} from 'redux-saga/effects'\nimport * as actionTypes from '../actions/actionTypes';\nimport {chatbotSessionsActions} from \"../actions\";\nimport {http, alertSuccess, alertError} from \"../../helpers\";\n\nfunction* fetchChatbotSessions({assistantID}) {\n    try {\n        const res = yield http.get(`/assistant/${assistantID}/chatbotSessions`);\n        return yield put(chatbotSessionsActions.fetchChatbotSessionsSuccess(res.data.data))\n    } catch (error) {\n        console.log(error);\n        return yield put(chatbotSessionsActions.fetchChatbotSessionsFailure(error));\n    }\n}\n\nfunction* watchFetchChatbotSessions() {\n    yield takeEvery(actionTypes.FETCH_CHATBOT_SESSIONS_REQUEST, fetchChatbotSessions)\n}\n\nfunction* clearAllChatbotSessions({assistantID}) {\n    try {\n        const res = yield http.delete(`/assistant/${assistantID}/chatbotSessions`);\n        yield put(chatbotSessionsActions.clearAllChatbotSessionsSuccess());\n        return yield alertSuccess('Cleared Successfully', res.data.msg)\n    } catch (error) {\n        console.log(error);\n        yield put(chatbotSessionsActions.clearAllChatbotSessionsFailure(error));\n        return yield alertError('Error', \"Sorry, we could'nt clear all the records!\");\n\n    }\n}\n\nfunction* watchClearAllChatbotSessions() {\n    yield takeEvery(actionTypes.CLEAR_ALL_CHATBOT_SESSIONS_REQUEST, clearAllChatbotSessions)\n}\n\n\nexport function* chatbotSessions() {\n    yield all([\n        watchFetchChatbotSessions(),\n        watchClearAllChatbotSessions(),\n    ])\n}","import {put, takeEvery, all} from 'redux-saga/effects'\nimport * as actionTypes from '../actions/actionTypes';\nimport {http} from \"../../helpers\";\nimport {solutionsActions} from \"../actions\";\nimport {alertError, alertSuccess, destroyMessage, loadingMessage} from \"../../helpers/alert\";\n\n\nfunction* getSolutionsData({assistantID}) {\n    try {\n        const res = yield http.get(`/assistant/${assistantID}/solutionsData`);\n        return yield put(solutionsActions.getSolutionsSuccess(res.data))\n    } catch (error) {\n        console.log(error);\n        return yield put(solutionsActions.getSolutionsFailure(error.response.data));\n    }\n\n}\n\nfunction* addSolution(action) {\n    try {\n        loadingMessage('Adding Solution');\n        const res = yield http.put(`/assistant/${action.params.ID}/solutionsData`, action.params.newSolution);\n        yield destroyMessage();\n        yield alertSuccess('Solution Added', res.data.msg);\n        yield put(solutionsActions.addSolutionSuccess(res.message));\n        yield put(solutionsActions.getSolutions(action.params.ID));\n    } catch (error) {\n        console.log(error.response);\n        yield destroyMessage();\n        yield alertError('Error in adding Solution', error.response.data.msg);\n        yield put(solutionsActions.addSolutionFailure(error.response.data));\n    }\n}\n\nfunction* editSolution(action) {\n    try {\n        loadingMessage('Editing Solution');\n        const res = yield http.post(`/assistant/${action.params.ID}/solutionsData`, action.params.editedSolution);\n        yield destroyMessage();\n        yield alertSuccess('Solution Edited', res.data.msg);\n        yield put(solutionsActions.editSolutionSuccess(res.message));\n        yield put(solutionsActions.getSolutions(action.params.ID))\n    } catch (error) {\n        console.log(error.response);\n        yield destroyMessage();\n        yield alertError('Error in editing Solution', error.response.data.msg);\n        yield put(solutionsActions.editSolutionFailure(error.response.data));\n    }\n}\n\nfunction* updateSolutionInformationToDisplay(action) {\n    try {\n        loadingMessage('Editing Display Settings');\n        const res = yield http.post(`/assistant/savedisplaytitles/${action.params.solutionID}`, action.params.information);\n        yield destroyMessage();\n        yield alertSuccess('Display Settings have been edited', res.data.msg);\n        yield put(solutionsActions.updateSolutionInformationToDisplaySuccess(res.message));\n    } catch (error) {\n        console.log(error.response);\n        yield alertError('Error in editing Display Settings', error.response.data.msg);\n        yield put(solutionsActions.updateSolutionInformationToDisplayFailure(error.response.data));\n    }\n}\n\nfunction* updateButtonLink(action) {\n    try {\n        loadingMessage('Updating Button Link');\n        const res = yield http.post(`/assistant/savesolutionweblink/${action.params.solutionID}`, action.params.information);\n        yield destroyMessage();\n        yield alertSuccess('Button Link has been updated', res.data.msg);\n        yield put(solutionsActions.updateButtonLinkSuccess(res.message));\n    } catch (error) {\n        console.log(error.response);\n        yield alertError('Error in updating Button Link', error.response.data.msg);\n        yield put(solutionsActions.updateButtonLinkFailure(error.response.data));\n    }\n}\n\nfunction* sendSolutionAlerts(action) {\n    try {\n        loadingMessage('Sending Solution Alerts');\n        const res = yield http.post(`/assistant/${action.params.assistantID}/sendsolutionalerts/${action.params.solutionID}`);\n        yield destroyMessage();\n        yield alertSuccess('Solution Alerts have been sent', res.data.msg);\n        yield put(solutionsActions.sendSolutionAlertSuccess(res.message));\n    } catch (error) {\n        console.log(error.response);\n        yield alertError('Error in sending Solution Alerts', error.response.data.msg);\n        yield put(solutionsActions.sendSolutionAlertFailure(error.response.data));\n    }\n}\n\nfunction* updateAutomaticSolutionsAlerts(action) {\n    try {\n        loadingMessage('Updating Automatic Solution Alerts');\n        const res = yield http.post(`/assistant/automaticsolutionalerts/${action.params.solutionID}`, action.params.information);\n        yield destroyMessage();\n        yield alertSuccess('Automatic Solution Alerts have been updated', res.data.msg);\n        yield put(solutionsActions.updateAutomaticSolutionsSuccess(res.message));\n    } catch (error) {\n        console.log(error.response);\n        yield alertError('Error in updating Automatic Solution Alerts', error.response.data.msg);\n        yield put(solutionsActions.updateAutomaticSolutionsFailure(error.response.data));\n    }\n}\n\nfunction* watchSolutionsRequests(){\n    yield takeEvery(actionTypes.GET_SOLUTIONS_REQUEST, getSolutionsData)\n}\n\nfunction* watchAddSolutionRequests(){\n    yield takeEvery(actionTypes.ADD_SOLUTION_REQUEST, addSolution)\n}\n\nfunction* watchEditSolutionRequests(){\n    yield takeEvery(actionTypes.EDIT_SOLUTION_REQUEST, editSolution)\n}\n\nfunction* watchUpdateSolutionInformationToDisplayRequests(){\n    yield takeEvery(actionTypes.UPDATE_SOLUTION_INFORMATION_TO_DISPLAY_REQUEST, updateSolutionInformationToDisplay)\n}\n\nfunction* watchUpdateButtonLinkRequests(){\n    yield takeEvery(actionTypes.UPDATE_BUTTON_LINK_REQUEST, updateButtonLink)\n}\n\nfunction* watchSendSolutionAlertsRequests(){\n    yield takeEvery(actionTypes.SEND_SOLUTION_ALERT_REQUEST, sendSolutionAlerts)\n}\n\nfunction* watchUpdateAutomaticSolutionAlertsRequests(){\n    yield takeEvery(actionTypes.UPDATE_AUTOMATIC_SOLUTION_ALERTS_REQUEST, updateAutomaticSolutionsAlerts)\n}\n\nexport function* solutionsSaga() {\n    yield all([\n        watchSolutionsRequests(),\n        watchAddSolutionRequests(),\n        watchEditSolutionRequests(),\n        watchUpdateSolutionInformationToDisplayRequests(),\n        watchUpdateButtonLinkRequests(),\n        watchSendSolutionAlertsRequests(),\n        watchUpdateAutomaticSolutionAlertsRequests()\n    ])\n}","import {put, takeEvery, all} from 'redux-saga/effects'\nimport * as actionTypes from '../actions/actionTypes';\nimport {solutionsActions, usersManagementActions} from \"../actions\";\nimport {http} from \"../../helpers\";\nimport {alertError, alertSuccess, destroyMessage, loadingMessage} from \"../../helpers/alert\";\n\nfunction* getUsers() {\n    try {\n        const res = yield http.get(`/users`);\n        return yield put(usersManagementActions.getUsersSuccess(res.data.data))\n    } catch (error) {\n        console.log(error);\n        return yield put(usersManagementActions.getUsersFailure(error.response.data));\n    }\n}\n\nfunction* addUser(action) {\n    try {\n        loadingMessage('Adding User');\n        const res = yield http.put(`/user`, action.params.user);\n        yield destroyMessage();\n        yield alertSuccess('User Added', res.data.msg);\n        yield put(usersManagementActions.addUserSuccess(res.message));\n        yield put(usersManagementActions.getUsers());\n    } catch (error) {\n        console.log(error.response);\n        yield destroyMessage();\n        yield alertError('Error in adding User', error.response.data.msg);\n        yield put(usersManagementActions.addUserFailure(error.response.data));\n    }\n}\n\nfunction* editUser(action) {\n    try {\n        loadingMessage('Editing User');\n        console.log(\"action.params\", action.params)\n        const res = yield http.post(`/user`, action.params.user);\n        yield destroyMessage();\n        yield alertSuccess('User Edited', res.data.msg);\n        yield put(usersManagementActions.editUserSuccess(res.message));\n        yield put(usersManagementActions.getUsers())\n    } catch (error) {\n        console.log(error.response);\n        yield destroyMessage();\n        yield alertError('Error in editing User', error.response.data.msg);\n        yield put(usersManagementActions.editUserFailure(error.response.data));\n    }\n}\n\nfunction* deleteUser(action) {\n    try {\n        loadingMessage('Deleting User');\n        const res = yield http.post(`/user_delete`, action.params.user);\n        yield destroyMessage();\n        yield alertSuccess('User Deleted', res.data.msg);\n        yield put(usersManagementActions.deleteUserSuccess(res.message));\n        yield put(usersManagementActions.getUsers())\n    } catch (error) {\n        console.log(error.response);\n        yield destroyMessage();\n        yield alertError('Error in deleting User', error.response.data.msg);\n        yield put(usersManagementActions.deleteUserFailure(error.response.data));\n    }\n}\n\n\nfunction* watchGetUsers() {\n    yield takeEvery(actionTypes.GET_USERS_REQUEST, getUsers)\n}\n\nfunction* watchAddUser() {\n    yield takeEvery(actionTypes.ADD_USER_REQUEST, addUser)\n}\n\nfunction* watchEditUser() {\n    yield takeEvery(actionTypes.EDIT_USER_REQUEST, editUser)\n}\n\nfunction* watchDeleteUser() {\n    yield takeEvery(actionTypes.DELETE_USER_REQUEST, deleteUser)\n}\n\n\nexport function* usersManagementSaga() {\n    yield all([\n        watchGetUsers(),\n        watchAddUser(),\n        watchEditUser(),\n        watchDeleteUser(),\n    ])\n}","import * as actionTypes from '../actions/actionTypes';\nimport {put, takeEvery, takeLatest, all} from 'redux-saga/effects'\nimport {databaseActions, flowActions} from \"../actions\";\nimport {alertSuccess, http} from \"../../helpers\";\nimport {alertError, destroyMessage, loadingMessage} from \"../../helpers/alert\";\n\n\nfunction* getDatabasesList() {\n    try {\n        loadingMessage('Loading databases list');\n        const res = yield http.get(`/databases`);\n        yield put(databaseActions.getDatabasesListSuccess(res.data.data));\n        yield destroyMessage();\n    } catch (error) {\n        console.log(error);\n        yield destroyMessage();\n        yield alertError('Loading databases list Unsuccessful', error.response.data.msg);\n        yield put(databaseActions.getDatabasesListFailure(error.response.data));\n    }\n}\n\nfunction* watchGetDatabaseList() {\n    yield takeLatest(actionTypes.GET_DATABASES_LIST_REQUEST, getDatabasesList)\n}\n\nfunction* fetchDatabases({databaseID}) {\n    try {\n        loadingMessage('Loading database');\n        const res = yield http.get(`/databases/${databaseID}`);\n        yield put(databaseActions.fetchDatabaseSuccess(res.data.msg, res.data.data));\n        yield destroyMessage();\n    } catch (error) {\n        console.log(error);\n        yield destroyMessage();\n        yield alertError('Loading database Unsuccessful', error.response.data.msg);\n        yield put(databaseActions.fetchDatabaseFailure(error.response.data));\n    }\n}\n\nfunction* watchFetchDatabases() {\n    yield takeLatest(actionTypes.FETCH_DATABASE_REQUEST, fetchDatabases)\n}\n\nfunction* uploadDatabase({newDatabase}) {\n    try {\n        loadingMessage('Adding database');\n        const res = yield http.post(`/databases`, newDatabase);\n        yield destroyMessage();\n        yield alertSuccess('Database added', res.data.msg);\n        yield put(databaseActions.uploadDatabaseSuccess(res.data.msg, res.data.data));\n\n    } catch (error) {\n        console.log(error);\n        yield destroyMessage();\n        yield alertError('Adding database faild', error.response.data.msg);\n        yield put(databaseActions.uploadDatabaseFailure(error.response.data));\n    }\n}\n\nfunction* watchAddDatabase() {\n    yield takeLatest(actionTypes.UPLOAD_DATABASE_REQUEST, uploadDatabase)\n}\n\nexport function* databaseSaga() {\n    yield all([\n        watchGetDatabaseList(),\n        watchFetchDatabases(),\n        watchAddDatabase()\n    ])\n}\n","import {createStore, applyMiddleware, compose} from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport rootReducer from './reducers';\nimport {\n    assistantSaga,\n    authSaga,\n    flowSaga,\n    profileSaga,\n    chatbotSessions,\n    solutionsSaga,\n    usersManagementSaga,\n    databaseSaga\n} from './sagas'\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n    rootReducer,\n    composeEnhancers(applyMiddleware(sagaMiddleware))\n);\n\nsagaMiddleware.run(flowSaga);\nsagaMiddleware.run(assistantSaga);\nsagaMiddleware.run(authSaga);\nsagaMiddleware.run(profileSaga);\nsagaMiddleware.run(chatbotSessions);\nsagaMiddleware.run(solutionsSaga);\nsagaMiddleware.run(usersManagementSaga);\nsagaMiddleware.run(databaseSaga);\n\n\nexport default store;","import axios from 'axios';\nimport {authHeader} from './auth';\nimport store from '../store/store';\nimport { authActions } from \"../store/actions\";\n\nexport const http = axios.create({\n    baseURL: '/api',\n    headers: {'Content-Type': 'application/json'},\n});\n\nhttp.interceptors.request.use(\n    function (config) {\n        const header = authHeader();\n        if (!header) throw new Error('Token required!');  \n        config.headers = header;\n        return config;\n    },\n    function (error) {\n        console.log(error);\n        return Promise.reject(error);\n    }\n);\n\nhttp.interceptors.response.use(response => {\n    return response;\n}, error => {\n    if (error.response.status === 401) {\n        console.log('Axios Unauthorised');\n        store.dispatch(authActions.logout());\n    }\n    return Promise.reject(error);\n});","import Hashids from \"hashids\";\n\nconst hashids = new Hashids(\"b9iLXiAa\", 5);\n\nconst encode = (param) => {\n    return hashids.encode(param);\n};\n\nconst decode = (param) => {\n    return hashids.decode(param);\n};\n\n\nexport const hasher = {\n    encode,\n    decode\n};","import React from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport {checkAuthenticity} from  '../helpers'\n\nexport const PrivateRoute = ({ component: Component, ...rest }) => {\n    console.log(\"Check Authenticity\", checkAuthenticity());\n    return (\n        <Route {...rest} render={props => (\n            checkAuthenticity()\n                ? <Component {...props} />\n                : <Redirect to={{pathname: '/login', state: {from: props.location}}}/>\n        )}/>\n    )\n}","import React, {Component} from 'react';\nimport {Button, Form, Input, InputNumber, Modal, Switch} from \"antd\";\n\nconst FormItem = Form.Item;\n\n\nclass AssistantSettingsModal extends Component {\n    state = {\n        isPopupDisabled: this.props.assistant.SecondsUntilPopup <= 0\n    };\n\n    togglePopupSwitch = () => {\n        this.setState({isPopupDisabled: !this.state.isPopupDisabled})\n    }\n\n\n    componentDidMount() {\n        this.setState({\n            inputValue: this.props.assistant.SecondsUntilPopup\n        });\n    }\n\n    handleSave = () => {\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                if (this.state.isPopupDisabled) {\n                    values.secondsUntilPopup = 0\n                }\n                this.props.handleSave(values)\n            }\n        });\n    };\n\n    render() {\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        };\n        const {getFieldDecorator} = this.props.form;\n        const {assistant} = this.props;\n\n        const {inputValue} = this.state;\n\n        return (\n            <Modal\n                title=\"Edit Assistant\"\n                visible={this.props.visible}\n                width={800}\n                destroyOnClose={true}\n                onCancel={this.props.handleCancel}\n                footer={[\n                    <Button key=\"delete\" type=\"danger\" onClick={this.props.handleDelete}>\n                        Delete\n                    </Button>,\n                    <Button key=\"cancel\" onClick={this.props.handleCancel}>Cancel</Button>,\n                    <Button key=\"submit\" type=\"primary\" onClick={this.handleSave}>\n                        Save\n                    </Button>,\n                ]}>\n\n                <Form layout='horizontal'>\n                    <FormItem\n                        label=\"Assistant Name\"\n                        extra=\"Enter a name for your assistant to easily identify it in the dashboard\"\n                        {...formItemLayout}>\n                        {\n                            getFieldDecorator('assistantName', {\n                                initialValue: assistant.Name,\n                                rules: [{\n                                    required: true,\n                                    message: 'Please input your assistant name',\n                                }],\n                            })\n                            (<Input placeholder=\"Ex: My first assistant, Sales Assistant\"/>)\n                        }\n                    </FormItem>\n\n                    <FormItem\n                        label=\"Welcome Message\"\n                        extra=\"This will be sent as first message\"\n                        {...formItemLayout}>\n\n                        {\n                            getFieldDecorator('welcomeMessage', {\n                                initialValue: assistant.Message,\n                                rules: [{\n                                    required: true,\n                                    message: 'Please input your welcome message',\n                                }],\n                            })(\n                                <Input placeholder=\"Ex: Hey there, Welcome visitor\"/>\n                            )\n                        }\n                    </FormItem>\n\n                    <FormItem\n                        label=\"Header Title\"\n                        extra=\"This will apear on top of your chatbot\"\n                        {...formItemLayout}>\n                        {\n                            getFieldDecorator('topBarTitle', {\n                                initialValue: assistant.TopBarText,\n                                rules: [{\n                                    required: true,\n                                    message: 'Please input your header title',\n                                }],\n                            })(\n                                <Input placeholder=\"Ex: Recruiter Bot\"/>\n                            )\n                        }\n                    </FormItem>\n\n                    <FormItem\n                        {...formItemLayout}\n                        label=\"Time to Popup\"\n                        extra=\"This will enforce the assistants' (chatbot) to popup automatically\"\n                    >\n                        <Switch checked={!this.state.isPopupDisabled} onChange={this.togglePopupSwitch}\n                                style={{marginRight: '5px'}}/>\n                        {getFieldDecorator('secondsUntilPopup', {initialValue: assistant.SecondsUntilPopup === 0 ? 1 : assistant.SecondsUntilPopup})(\n                            <InputNumber disabled={this.state.isPopupDisabled} min={1}/>\n                        )}\n                        <span className=\"ant-form-text\"> seconds</span>\n                    </FormItem>\n\n                </Form>\n            </Modal>\n        );\n    }\n}\n\nexport default Form.create()(AssistantSettingsModal)\n","import React, {Component} from 'react';\nimport connect from \"react-redux/es/connect/connect\";\nimport {assistantActions} from \"../../../../../store/actions\";\nimport AssistantSettingsModal from \"./AssistantSettingsModal/AssistantSettingsModal\";\nimport {Modal} from \"antd\";\n\nconst confirm = Modal.confirm;\n\n\nclass AssistantSettings extends Component {\n\n    handleSave = (updatedSettings) => {\n        this.props.hideModal();\n        // dispatch redux action\n        this.props.dispatch(assistantActions.updateAssistant({\n            assistantID: this.props.assistant.ID,\n            updatedSettings: updatedSettings\n        }));\n    };\n\n    ////// DELETE GROUP\n    handleDelete = (deletedAssistant) => {\n        confirm({\n            title: `Delete assistant confirmation`,\n            content: `If you click OK, this assistant will be deleted with its associated data forever`,\n            onOk: () => {\n                this.props.dispatch(assistantActions.deleteAssistant(this.props.assistant.ID));\n                this.props.hideModal();\n            }\n        });\n    };\n\n    render() {\n        return (\n            <AssistantSettingsModal assistant={this.props.assistant} visible={this.props.visible}\n                                    handleSave={this.handleSave} handleCancel={this.props.hideModal}\n                                    handleDelete={this.handleDelete}/>\n        )\n    }\n\n}\n\nconst mapStateToProps = (state) => ({\n    isLoading: state.assistant.isLoading,\n});\nexport default connect(mapStateToProps)(AssistantSettings);\n","import React, {Component} from 'react';\nimport {Card, Dropdown, Icon, Menu, Switch} from 'antd';\nimport {Link} from \"react-router-dom\";\nimport AssistantSettings from \"./AssistantSettings/AssistantSettings\";\n\nconst {Meta} = Card;\n\n\nconst menu = (assistant) => (\n    <Menu>\n        <Menu.Item key=\"1\">\n            <Link to={{\n                      pathname: `assistants/${assistant.ID}/solutions`,\n                      state: {assistant: assistant}\n                  }}>\n                <Icon type=\"database\"/> Solutions\n            </Link>\n        </Menu.Item>\n        <Menu.Item key=\"2\">\n            <Link to={{\n                      pathname: `assistants/${assistant.ID}/sessions`,\n                      state: {assistant: assistant}\n                  }}>\n                <Icon type=\"code\"/> User Input\n            </Link>\n        </Menu.Item>\n        <Menu.Item key=\"3\">\n            <Link to={{\n                      pathname: `assistants/${assistant.ID}/analytics`,\n                      state: {assistant: assistant}\n                  }}>\n                <Icon type=\"line-chart\"/> Analytics\n            </Link>\n        </Menu.Item>\n        <Menu.Divider/>\n        <Menu.Item key=\"4\">\n            <Link to={{\n                      pathname: `assistants/${assistant.ID}/integration`,\n                      state: {assistant: assistant}\n                  }}>\n                <Icon type=\"sync\"/> Integration\n            </Link>\n        </Menu.Item>\n    </Menu>\n);\n\nconst covers = [\n    'https://42f2671d685f51e10fc6-b9fcecea3e50b3b59bdc28dead054ebc.ssl.cf5.rackcdn.com/illustrations/active_support_6rwo.svg',\n    'https://42f2671d685f51e10fc6-b9fcecea3e50b3b59bdc28dead054ebc.ssl.cf5.rackcdn.com/illustrations/voice_control_ofo1.svg',\n    'https://42f2671d685f51e10fc6-b9fcecea3e50b3b59bdc28dead054ebc.ssl.cf5.rackcdn.com/illustrations/group_chat_v059.svg',\n    'https://42f2671d685f51e10fc6-b9fcecea3e50b3b59bdc28dead054ebc.ssl.cf5.rackcdn.com/illustrations/status_update_jjgk.svg',\n    'https://42f2671d685f51e10fc6-b9fcecea3e50b3b59bdc28dead054ebc.ssl.cf5.rackcdn.com/illustrations/messages1_9ah2.svg'\n];\n\n\nclass Assistant extends Component {\n\n    state = {visible: false};\n\n    showModal = () => {\n        this.setState({\n            visible: true,\n        });\n    };\n\n    hideModal = () => {\n        this.setState({\n            visible: false,\n        });\n    };\n\n    onActiveChanged = () => {\n\n    }\n\n    render() {\n        const {assistant} = this.props;\n        return (\n            <>\n                <Card loading={this.props.isLoading} style={{width: 300, margin: 15, float: 'left', height: 369}}\n                      cover={\n                          <img alt=\"example\"\n                               height={200}\n                               width=\"100%\"\n                               src={covers[Math.floor(Math.random() * covers.length)]}/>\n                      }\n                      title={assistant.Name}\n                      extra={<Switch defaultChecked={assistant.Active} onChange={this.onActiveChanged}/>}\n                      actions={[\n                          <div onClick={this.showModal}>\n                              <Icon type=\"setting\"/>\n                              <span> Settings</span>\n                          </div>,\n\n                          <div>\n                              <Link\n                                  to={{\n                                      pathname: `assistants/${assistant.ID}/flow`,\n                                      state: {assistant: assistant}\n                                  }}>\n                                  <Icon type=\"build\"/>\n                                  <span> Flow</span>\n                              </Link>\n                          </div>,\n\n                          <Dropdown overlay={menu(assistant)} trigger={['click']}>\n                              <a className=\"ant-dropdown-link\">\n                                  ...\n                              </a>\n                          </Dropdown>]}>\n                    <Meta description={assistant.TopBarText}/>\n                </Card>\n\n                <AssistantSettings assistant={assistant}\n                                   hideModal={this.hideModal}\n                                   visible={this.state.visible}/>\n\n            </>\n        )\n    }\n}\n\nexport default Assistant;\n","import React, {Component} from 'react';\n\nimport {Button, Form, Input, Modal, Select, InputNumber, message, Switch} from 'antd';\nimport {connect} from \"react-redux\";\nimport {assistantActions} from \"../../../../store/actions\";\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\n\nconst loading = () => {\n    message.loading('Adding assistant', 0);\n};\n\nclass NewAssistantModal extends Component {\n\n    state = {\n        isPopupDisabled: true\n    };\n\n    togglePopupSwitch = () => {\n        this.setState({isPopupDisabled: !this.state.isPopupDisabled})\n    };\n\n    handleAdd = () => {\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                if(this.state.isPopupDisabled) {values.secondsUntilPopup = 0}\n                console.log(values);\n                // send to server\n                this.props.dispatch(assistantActions.addAssistant(values));\n                loading();\n            }\n        });\n    };\n\n    componentDidUpdate(prevProps) {\n        if (!this.props.isAdding && this.props.isAdding !== prevProps.isAdding) {\n            this.props.hideModal();\n            message.destroy();\n            message.success(this.props.successMsg)\n        }\n    }\n\n\n    render() {\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        };\n        const {getFieldDecorator} = this.props.form;\n\n        return (\n            <Modal\n                width={800}\n                title=\"Create New Assistant\"\n                visible={this.props.visible}\n                onOk={this.handleOk}\n                onCancel={this.handleCancel}\n                destroyOnClose={true}\n                footer={[\n                    <Button key=\"cancel\" onClick={this.props.hideModal}>Cancel</Button>,\n                    <Button key=\"submit\" type=\"primary\" onClick={this.handleAdd}>\n                        Add\n                    </Button>,\n                ]}>\n                <Form layout='horizontal'>\n                    <FormItem\n                        label=\"Assistant Name\"\n                        extra=\"Enter a name for your assistant to easily identify it in the dashboard\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('assistantName', {\n                            rules: [{\n                                required: true,\n                                message: 'Please input your assistant name',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: My first assistant, Sales Assistant\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem\n                        label=\"Welcome Message\"\n                        extra=\"This will be sent as first message\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('welcomeMessage', {\n                            rules: [{\n                                required: true,\n                                message: 'Please input your welcome message',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Hey there, Welcome visitor\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem\n                        label=\"Header Title\"\n                        extra=\"This will apear on top of your chatbot\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('topBarTitle', {\n                            rules: [{\n                                required: true,\n                                message: 'Please input your header title',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Recruiter Bot\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem\n                    {...formItemLayout}\n                    label=\"Time to Popup\"\n                    extra=\"This will enforce the assistants' (chatbot) to popup automatically\"\n                    >\n                    <Switch defaultChecked={false} onChange={this.togglePopupSwitch} style={{marginRight: '5px'}} />\n                    {getFieldDecorator('secondsUntilPopup', { initialValue: 1 })(\n                        <InputNumber disabled={this.state.isPopupDisabled} min={1} />\n                    )}\n                    <span className=\"ant-form-text\"> seconds</span>\n                    </FormItem>\n\n                    <FormItem {...formItemLayout}\n                              label=\"Assistant Template\">\n\n                        {\n                            getFieldDecorator('template')(\n                                <Select placeholder=\"Please select template\">\n                                    <Option value=\"recruitment\">Recruitment</Option>\n                                    <Option value=\"Shopping\">Shopping</Option>\n                                    <Option value=\"Sales\">Sales</Option>\n                                </Select>\n                            )\n                        }\n                    </FormItem>\n                </Form>\n            </Modal>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        successMsg: state.assistant.successMsg,\n        isAdding: state.assistant.isAdding\n    };\n}\n\nexport default connect(mapStateToProps)(Form.create()(NewAssistantModal))\n","import React, {Component} from 'react';\nimport {Button, message, Skeleton} from 'antd';\nimport {connect} from 'react-redux';\n\nimport styles from \"./Assistants.module.less\"\nimport Assistant from \"./Assistant/Assistant\"\n\nimport {assistantActions} from \"../../../store/actions/assistant.actions\";\nimport NewAssistantModal from \"./Modals/NewAssistantModal\";\n\nclass Assistants extends Component {\n    state = {\n        visible: false,\n    };\n\n\n    componentDidMount() {\n        this.props.dispatch(assistantActions.fetchAssistants());\n    }\n\n\n    showModal = () => this.setState({visible: true});\n    hideModal = () => this.setState({visible: false});\n\n\n    render() {\n        return (\n            <div style={{height: '100%'}}>\n                <div className={styles.Panel}>\n                    <div className={styles.Panel_Header}>\n                        <div>\n                            <h3>Assistants List</h3>\n                            <p>Here you can see all assistants created by you</p>\n                        </div>\n                        <div>\n                            <Button className={styles.Panel_Header_Button} type=\"primary\" icon=\"plus\"\n                                    onClick={this.showModal}>\n                                Add Assistant\n                            </Button>\n                        </div>\n                    </div>\n\n\n                    <div className={styles.Panel_Body}>\n                        <div className={styles.AssistantsList}>\n                            {\n                                this.props.assistantList[0] ?\n                                    (\n                                        this.props.assistantList.map((assistant, i) => <Assistant assistant={assistant}\n                                                                                                  key={i}\n                                                                                                  index={i}\n                                                                                                  isLoading={this.props.isLoading}\n                                        />)\n                                    )\n                                    : <Skeleton active/>\n                            }\n                        </div>\n                    </div>\n\n                </div>\n\n                <NewAssistantModal visible={this.state.visible}\n                                   hideModal={this.hideModal}/>\n\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        assistantList: state.assistant.assistantList,\n        isLoading: state.assistant.isLoading,\n    };\n}\n\nexport default connect(mapStateToProps)(Assistants);\n","import {Button, Icon, Upload, message} from \"antd\";\nimport React, {Component} from 'react';\n\nimport Worker from \"./excel.worker\";\n\nclass UploadDatabaseStep extends Component {\n\n    readExcel = () => { // returns a promise because reader is asynchronous function\n        const {fileList, setStateHandler} = this.props;\n        // This reads the file from the upload component\n        // the file when uploaded as blob is considered as binary\n        return new Promise((resolve, reject) => {\n            if (fileList[0]) {\n                setStateHandler({isFileUploading: true});\n                const reader = new FileReader();\n                reader.readAsBinaryString(fileList[0]);\n                reader.onload = () => {\n                    const worker = new Worker();\n                    worker.postMessage(reader.result);\n                    worker.onmessage = (event) => {\n                        setStateHandler({isFileUploading: false});\n                        if (event.data.headers)\n                            return resolve(event.data);\n                        else {\n                            message.error('The uploaded size is too big');\n                            return reject({\n                                headers: undefined,\n                                data: undefined\n                            });\n                        }\n                    };\n                }\n            } else {\n                message.error('Please upload Excel file or CSV file');\n                return reject({\n                    headers: undefined,\n                    data: undefined\n                });\n            }\n        });\n    };\n\n    render() {\n        const {fileList, setStateHandler} = this.props;\n        const props = {\n            listType: 'picture',\n            multiple: false,\n            defaultFileList: [...fileList],\n            accept:\".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel\",\n            onRemove: file => {\n                setStateHandler((state) => {\n                    const index = state.fileList.indexOf(file);\n                    const newFileList = state.fileList.slice();\n                    newFileList.splice(index, 1);\n                    return {\n                        fileList: newFileList,\n                    };\n                });\n            },\n            beforeUpload: file => {\n                file.thumbUrl = 'https://42f2671d685f51e10fc6-b9fcecea3e50b3b59bdc28dead054ebc.ssl.cf5.rackcdn.com/illustrations/files1_9ool.svg';\n                setStateHandler(() => ({fileList: [file]}));\n                return false;\n            },\n            fileList,\n        };\n\n\n        return (\n            <div>\n                <div style={{textAlign: 'center'}}>\n                    <img\n\n                        src={`${window.location.protocol}//${window.location.hostname}${window.location.port ? ':' + window.location.port : ''}/static/images/upload_data.svg`}\n                        alt=\"Upload Data Iamge\"\n                        style={{width: 300}}/>\n                    <p>Upload your Database to be used in the chat interaction</p>\n                </div>\n                <div style={{textAlign: 'center'}}>\n                    <Upload {...props}>\n                        <Button>\n                            <Icon type=\"upload\"/> Upload\n                        </Button>\n                    </Upload>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default UploadDatabaseStep;","import {Form, Input, Select} from \"antd\";\nimport React, {Component} from 'react'\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\nclass ConfigureDatabaseStep extends Component {\n    render() {\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        };\n        const {getFieldDecorator} = this.props.form;\n        const {databaseOptions} = this.props;\n\n        return (\n            <div>\n                <div style={{textAlign: 'center'}}>\n                    <img\n                        src=\"https://42f2671d685f51e10fc6-b9fcecea3e50b3b59bdc28dead054ebc.ssl.cf5.rackcdn.com/illustrations/setup_wizard_r6mr.svg\"\n                        alt=\"Upload Data Iamge\"\n                        style={{height: 150, marginBottom: 10}}/>\n                </div>\n                <Form layout='horizontal'>\n                    <FormItem label=\"Database Name\"\n                              extra=\"Enter unique name for your database\"\n                              {...formItemLayout}>\n                        {getFieldDecorator('databaseName', {\n                            initialValue: this.props.databaseConfiguration.databaseName,\n                            rules: [{\n                                required: true,\n                                message: 'Please input your assistant name',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: London candidates, Jobs in europ, etc...\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem label=\"Database Type\"\n                              extra=\"Select one of the supported types\"\n                              {...formItemLayout}>\n                        {getFieldDecorator('databaseType', {\n                            initialValue: this.props.databaseConfiguration.databaseType,\n                            rules: [{\n                                required: true,\n                                message: 'Please input your assistant name',\n                            }],\n                        })(\n                            <Select placeholder=\"Please select type\" loading={!(!!databaseOptions)}>\n                                {\n                                    databaseOptions ?\n                                        databaseOptions.types.map((type, key) =>\n                                            <Option key={key} value={type}>{type}</Option>)\n                                        : null\n                                }\n                            </Select>\n                        )}\n                    </FormItem>\n                </Form>\n            </div>\n        )\n    }\n}\n\nexport default Form.create()(ConfigureDatabaseStep);\n\n\n\n\n","import {Form, message, Select, Spin} from \"antd\";\n\nimport React, {Component} from 'react'\nimport \"./UploadDatabaseStep/UploadDatabaseStep.less\"\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\n\n/**\n * Columns which have mapped with excelColumn\n @typedef SelectedColumn\n @type {object}\n @property {string} ourColumn - TSB colums naming.\n @property {string[]} excelColumn - Users' colums naming.\n */\n\n/**\n * Columns which have mapped with excelColumn\n @typedef TSBcolumnOption\n @type {object}\n @property {string} column - the name of the column.\n @property {boolean} nullable - is nullable?.\n @property {string} type - type of column (VARCHAR(any) | FLOAT | DATETIME).\n */\n\n/**\n * The returned object from validate_and_construct function\n @typedef ColumnValidator\n @type {object}\n @property {(string|number|null|Date)} data - the record's data.\n @property {(string|null)} message - if not valid here will be a message.\n @property {boolean} isValid - to check if valid or not.\n @property {string[]} originalColumns - the columns in the uploaded file.\n */\n\n/**\n * The constructed record before check if valid or not\n @typedef NewRecord\n @type {Object.<string, ColumnValidator>}\n */\n\n/**\n * Date type\n @typedef Date\n @type {Object}\n @property {string} year\n @property {string} month\n @property {string} day\n */\n\n\nclass ColumnSelectionStep extends Component {\n    state = {\n        selectedColumns: [],\n    };\n\n    handleChange = selectedColumns => this.setState({selectedColumns: [...this.state.selectedColumns].concat(selectedColumns).unique()});\n    handleRemove = removedColumn => setTimeout(() => this.setState({selectedColumns: this.state.selectedColumns.filter(selectedColumn => selectedColumn !== removedColumn)}), 100);\n\n    /**\n     * Returns the ColumnValidator of the passed userRecord\n     * @param {TSBcolumnOption} TSBcolumnOption - The options needs to be met inorder to be sent to TSB db\n     * @param {String[]} userColumns\n     * @param {Object} userRecord\n     * @returns {ColumnValidator}\n     */\n    validate_and_construct = (TSBcolumnOption, userColumns, userRecord) => {\n        // find and merge userColumns data in userRecord\n        // 1- Merge userColumns data in userRecord as validatedData\n        // 2- validate that validatedData is meeting the TSBcolumnOption\n        // 3- return ColumnValidator Object with its attributes\n\n        /** @type {boolean} */\n        let isValid = true;\n\n        /** @type {(string|null)} */\n        let message = null;\n\n        /** @type {(string|number|null|Date)} */\n        let validatedData;\n\n\n        if (TSBcolumnOption.column === \"Currency\")\n            validatedData = userColumns.join('');\n        else\n            validatedData = userColumns.map(userColumn => userRecord[userColumn]).filter(item => item).join(' ').trim();\n\n\n        if (TSBcolumnOption.type.includes(\"VARCHAR\")) {\n            // get number from varchar then validate string length\n            const string_length = /\\(([^)]+)\\)/.exec(TSBcolumnOption.type)[1];\n\n            if (validatedData) {\n                if (validatedData.length > string_length) {\n                    isValid = false;\n                    message = `${validatedData} is exceeding the string length ${string_length}`\n                }\n            } else if (!validatedData && !TSBcolumnOption.nullable) {\n                isValid = false;\n                message = `${userColumns} can't be null in ${JSON.stringify(userRecord)}`\n            }\n        }\n\n        if (TSBcolumnOption.type === \"FLOAT\") {\n            if (validatedData) {\n                validatedData = Number(validatedData);\n                if (isNaN(validatedData)) {\n                    isValid = false;\n                    message = `${validatedData} Should be Numbers only`\n                } else if (!validatedData && !TSBcolumnOption.nullable) {\n                    isValid = false;\n                    message = `${userColumns} can't be null in ${JSON.stringify(userRecord)}`\n                }\n            }\n        }\n\n        if (TSBcolumnOption.type === \"DATETIME\") {\n            const date = new Date(validatedData);\n\n            validatedData = {\n                year: date.getUTCFullYear(),\n                month: date.getMonth() + 1,\n                day: date.getDate()\n            };\n\n            if (!validatedData.year || !validatedData.month || !validatedData.day) {\n                isValid = false;\n                message = `${JSON.stringify(validatedData)} You should pass dates only`\n            }\n        }\n\n        return {\n            data: validatedData,\n            message: message,\n            isValid: isValid,\n            originalColumns: userColumns\n        }\n    };\n\n    /**\n     * @returns {Promise} Promise object represents the valid and invalid data\n     */\n    parseForm = () => new Promise((resolve, reject) => {\n        const {form: {validateFields}, excelFile, databaseOptions, databaseType} = this.props;\n        validateFields((errors, columns) => {\n            if (errors) {\n                message.error('Select a value for the required fields');\n                return reject('Rejected');\n            }\n\n            // convert object to array of {ourColumn, excelColumn} pairs\n            columns = Object.keys(columns).map(key => {\n                return {ourColumn: key, excelColumn: columns[key]};\n            });\n\n            /** @type {SelectedColumn[]} */\n            const selectedColumns = columns.filter(column => !!column.excelColumn).filter(column => !!column.excelColumn[0]);\n\n            /** @type {NewRecord[]} */\n            let validRecords = [];\n\n            /** @type {NewRecord[]} */\n            let invalidRecords = [];\n\n            for (const user_record of excelFile.data) {\n                /** @type {NewRecord} */\n                let record = {};\n\n                for (const selectedColumn of selectedColumns) {\n                    const {ourColumn, excelColumn} = selectedColumn;\n\n                    /** @type {TSBcolumnOption} */\n                    const TSBcolumnOption = databaseOptions[databaseType].find(databaseOptions => databaseOptions.column === ourColumn);\n\n                    /** @type {ColumnValidator} */\n                    record[ourColumn] = this.validate_and_construct(TSBcolumnOption, [...excelColumn], user_record)\n                }\n\n                if (Object.values(record).flatMap(value => value.isValid).indexOf(false) > -1)\n                    invalidRecords.push(record);\n                else\n                    validRecords.push(record);\n            }\n\n\n            if (selectedColumns[0])\n                return resolve({\n                    validRecords: validRecords,\n                    invalidRecords: invalidRecords\n                });\n            else {\n                message.error('Select at least one column');\n                return reject('Rejected');\n            }\n        });\n    });\n\n\n    render() {\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        };\n\n        const {getFieldDecorator} = this.props.form;\n        const {databaseOptions, databaseType} = this.props;\n        const {selectedColumns} = this.state;\n        const filteredOptions = this.props.excelFile.headers.filter(o => !selectedColumns.includes(o));\n\n        return (\n            <div>\n                {!!databaseOptions ?\n                    <Form layout='horizontal'>\n                        {databaseOptions[databaseType].map((type, index) => {\n                            if (type.column === \"Currency\") return (\n                                <FormItem label={type.column} {...formItemLayout} key={index}>\n                                    {getFieldDecorator(type.column, {\n                                        defaultValue: selectedColumns,\n                                        rules: [{required: !type.nullable, message: 'This is required field',}]\n                                    })\n                                    (\n                                        <Select key={index} placeholder=\"Please select currency\">\n                                            {databaseOptions.currencyCodes.map(\n                                                (currencyCode, index) =>\n                                                    <Option key={index} value={currencyCode}>{currencyCode}</Option>\n                                            )}\n                                        </Select>\n                                    )}\n                                </FormItem>\n                            );\n\n                            // else if (type.type === \"DATETIME\") return (\n                            //     <div key={index}>\n                            //         <FormItem label={type.column} {...formItemLayout} >\n                            //             <div>\n                            //                 {getFieldDecorator(type.column, {\n                            //                     defaultValue: selectedColumns,\n                            //                     rules: [{required: !type.nullable, message: 'This is required field',}]\n                            //                 })\n                            //                 (\n                            //                     <Select mode=\"multiple\"\n                            //                             placeholder=\"Select Column or Columns\"\n                            //                             onDeselect={this.handleRemove}\n                            //                             onChange={this.handleChange}\n                            //                             style={{width: \"60%\", marginRight: 5}}>\n                            //                         {filteredOptions.map(item => (\n                            //                             <Select.Option key={item} value={item}>{item}</Select.Option>\n                            //                         ))}\n                            //                     </Select>\n                            //                 )}\n                            //                 {getFieldDecorator(`${type.column}_DateFormat`)\n                            //                 (\n                            //                     <Select placeholder=\"Select date format\"\n                            //                             style={{width: \"calc(40% - 5px)\"}}>\n                            //                         <Option value={\"MM/DD/YY\"}>{\"MM/DD/YY\"}</Option>\n                            //                         <Option value={\"DD/MM/YY\"}>{\"DD/MM/YY\"}</Option>\n                            //                         <Option value={\"YY/MM/DD\"}>{\"YY/MM/DD\"}</Option>\n                            //                     </Select>\n                            //                 )}\n                            //             </div>\n                            //         </FormItem>\n                            //     </div>\n                            // );\n\n                            else return (\n                                <FormItem label={type.column} {...formItemLayout} key={index}>\n                                    {getFieldDecorator(type.column, {\n                                        defaultValue: selectedColumns,\n                                        rules: [{required: !type.nullable, message: 'This is required field',}]\n                                    })\n                                    (\n                                        <Select mode=\"multiple\" placeholder=\"Select Column or Columns\"\n                                                onDeselect={this.handleRemove}\n                                                onChange={this.handleChange}>\n                                            {filteredOptions.map(item => (\n                                                <Select.Option key={item} value={item}>{item}</Select.Option>\n                                            ))}\n                                        </Select>\n                                    )}\n                                </FormItem>\n                            );\n                        })}\n                    </Form>\n                    : <Spin/>}\n\n            </div>\n        )\n    }\n}\n\nexport default Form.create()(ColumnSelectionStep);\n\nArray.prototype.unique = function () {\n    let a = this.concat();\n    for (let i = 0; i < a.length; ++i) {\n        for (let j = i + 1; j < a.length; ++j) {\n            if (a[i] === a[j])\n                a.splice(j--, 1);\n        }\n    }\n    return a;\n};\n\n","import {Table, Divider} from \"antd\";\nimport React, {Component} from 'react'\nimport {ColumnsOptions} from '../ColumnsOptions'\n\nclass ConfirmStep extends Component {\n\n    getRecordsData = records => {\n        let x = [];\n        let counter = 0;\n        for (const record of records) {\n            let renderedRecord = {};\n            renderedRecord.key = counter++;\n            for (const key of Object.keys(record))\n                renderedRecord[key] = record[key];\n            x.push(renderedRecord);\n        }\n        return x;\n    };\n\n    render() {\n\n        const {validRecords, invalidRecords} = this.props;\n        const columnsOptions = ColumnsOptions(validRecords[0] || invalidRecords[0]);\n        return (\n            <div>\n                <h4>Valid data </h4>\n                <Table columns={columnsOptions}\n                       dataSource={this.getRecordsData(validRecords)}\n                       size=\"small\"\n                       pagination={{pageSize: 5}}/>\n\n                <Divider/>\n\n                <h4>Invalid data (wither fix them or upload without them) </h4>\n                <Table columns={columnsOptions}\n                       dataSource={this.getRecordsData(invalidRecords)}\n                       size=\"small\"\n                       pagination={{pageSize: 5}}/>\n            </div>\n        )\n    }\n}\n\nexport default ConfirmStep;\n\n\n\n\n","import React from 'react'\n\nexport const ColumnsOptions = (columnHeader, type) => {\n    return Object.keys(columnHeader).map((c, index) => {\n        if (type === \"db\") {\n            if (c === \"ID\")\n                return {\n                    title: c,\n                    dataIndex: c,\n                    key: index,\n                    width: 80,\n                    fixed: 'left'\n                };\n            else\n                return {\n                    title: c,\n                    dataIndex: c,\n                    key: index,\n                    width: 150\n                };\n        } else if (type === \"handsontable\")\n            return c;\n        else\n            return {\n                title: c,\n                dataIndex: c,\n                key: index,\n                width: 100,\n                render: item => <span>{\n                    item.isValid ?\n                        (\n                            item.data.day ?\n                                [item.data.year, item.data.month, item.data.day].join('/')\n                                :\n                                item.data\n                        )\n                        :\n                        (\n                            <p style={{backgroundColor: '#ff7875'}}> {item.message}</p>\n                        )\n                }</span>\n\n            }\n    });\n};","import {Button, Divider, Modal, Steps, Spin, message} from 'antd';\n\nimport React, {Component} from 'react';\nimport styles from \"./NewDatabaseModal.module.less\"\n\nimport UploadDatabaseStep from './NewDatabaseSteps/UploadDatabaseStep/UploadDatabaseStep'\nimport ConfigureDatabaseStep from \"./NewDatabaseSteps/ConfigureDatabaseStep\";\nimport ColumnSelectionStep from \"./NewDatabaseSteps/ColumnSelectionStep\";\nimport ConfirmStep from \"./NewDatabaseSteps/ConfirmStep\";\n// import {dummyExcelData, jobsExcelSheet, validData, invalidData} from './testdata'\n\nconst Step = Steps.Step;\n\nclass NewDatabaseModal extends Component {\n\n    constructor(props) {\n        super(props);\n        this.configureDatabaseStep = React.createRef();\n        this.uploadDatabaseStep = React.createRef();\n        this.columnSelectionStep = React.createRef();\n    }\n\n    state = {\n        current: 0,\n        fileList: [],\n\n        databaseConfiguration: {\n            databaseName: undefined,\n            databaseType: undefined\n        },\n\n        isFileUploading: false,\n\n        excelFile: {\n            headers: undefined,\n            data: undefined\n        },\n\n        validRecords: [],\n        invalidRecords: []\n    };\n\n    steps = [\n        {\n            title: 'Configure Database',\n            content: () => this.props.databaseOptions ?\n                <ConfigureDatabaseStep ref={this.configureDatabaseStep}\n                                       databaseOptions={this.props.databaseOptions}\n                                       databaseConfiguration={this.state.databaseConfiguration}/>\n                : <Spin/>\n        },\n        {\n            title: 'Upload Data',\n            content: () => <UploadDatabaseStep ref={this.uploadDatabaseStep}\n                                               uploading={this.state.uploading}\n                                               handleUpload={this.handleUpload}\n                                               setStateHandler={state => this.setState(state)}\n                                               fileList={this.state.fileList}/>\n        },\n        {\n            title: 'Column Selection',\n            content: () => this.props.databaseOptions ?\n                <ColumnSelectionStep wrappedComponentRef={form => this.columnSelectionStep = form}\n                                     databaseOptions={this.props.databaseOptions}\n                                     databaseType={this.state.databaseConfiguration.databaseType}\n                                     excelFile={this.state.excelFile}/>\n                : <Spin/>\n        },\n        {\n            title: 'Confirm ',\n            content: () => this.props.databaseOptions ?\n                <ConfirmStep validRecords={this.state.validRecords}\n                             columns={this.props.databaseOptions[this.state.databaseConfiguration.databaseType]}\n                             invalidRecords={this.state.invalidRecords}/>\n                : <Spin/>\n        }];\n\n    next = () => {\n        switch (this.state.current + 1) {\n            case 1:\n                this.configureDatabaseStep.current.validateFields(\n                    (err, values) => err ? null : this.setState({\n                        databaseConfiguration: {\n                            databaseName: values.databaseName,\n                            databaseType: values.databaseType\n                        },\n                        current: this.state.current + 1\n                    })\n                );\n                break;\n\n            case 2:\n                this.uploadDatabaseStep.current.readExcel().then(\n                    excelFile => {\n                        console.log(JSON.stringify(excelFile));\n                        this.setState({excelFile, current: this.state.current + 1})\n                    },\n                    rejectedExcelFile => this.setState({excelFile: rejectedExcelFile})\n                );\n                break;\n\n            case 3:\n                this.columnSelectionStep.parseForm().then(\n                    records => this.setState({\n                        validRecords: records.validRecords,\n                        invalidRecords: records.invalidRecords,\n                        current: this.state.current + 1\n                    }),\n                    () => {\n                    }\n                );\n                break;\n\n            default:\n                this.setState({current: this.state.current + 1});\n                break;\n        }\n    };\n\n    prev = () => this.setState({current: this.state.current - 1});\n\n    submitDatabase = () => {\n        this.props.hideModal();\n        const {validRecords, databaseConfiguration} = this.state;\n        if (validRecords) {\n            this.props.uploadDatabase({...databaseConfiguration, records: validRecords});\n            // Reset state\n            this.setState({\n                current: 0,\n                fileList: [],\n\n                databaseConfiguration: {\n                    databaseName: undefined,\n                    databaseType: undefined\n                },\n                isFileUploading: false,\n                excelFile: {\n                    headers: undefined,\n                    data: undefined\n                },\n                validRecords: [],\n                invalidRecords: []\n            })\n        }\n        else\n            message.error('No valid records to be sent');\n    };\n\n    render() {\n        const {current} = this.state;\n\n        return (\n            <Modal width={\"80%\"}\n                   title=\"Upload New Database\"\n                   visible={this.props.visible}\n                   onCancel={this.props.hideModal}\n                   destroyOnClose={true}\n                   footer={null}>\n                <Spin spinning={this.state.isFileUploading} tip=\"Reading Excel File\">\n                    <Steps current={current}>\n                        {this.steps.map(item => <Step key={item.title} title={item.title}/>)}\n                    </Steps>\n\n                    <div className={styles.steps_content}>{this.steps[current].content()}</div>\n\n                    <Divider/>\n\n                    <div className={styles.steps_action}>\n                        {\n                            current > 0\n                            && (\n                                <Button style={{marginLeft: 8}} onClick={() => this.prev()}>\n                                    Previous\n                                </Button>\n                            )\n                        }\n                        {\n                            current < this.steps.length - 1\n                            && <Button type=\"primary\" onClick={() => this.next()}>Next</Button>\n                        }\n                        {\n                            current === this.steps.length - 1\n                            && <Button type=\"primary\" onClick={this.submitDatabase}>Done</Button>\n                        }\n                    </div>\n                </Spin>\n            </Modal>\n        );\n    }\n}\n\nexport default NewDatabaseModal;","import React, {Component} from 'react';\n\nimport styles from \"./Header.module.less\";\nimport {Button} from \"antd\";\nimport PropTypes from 'prop-types';\n\n\nclass Header extends Component {\n    static contextTypes = {\n        router: PropTypes.object\n    };\n\n    render() {\n        let showBackButton = true;\n        let button = this.props.button;\n        if (this.props.showBackButton === false)\n            showBackButton = false;\n\n\n        return (\n            <div style={{height: 56, marginBottom: 10}}>\n                <div className={styles.Panel}>\n                    <div className={styles.Panel_Header}>\n\n                        <div style={{display: '-webkit-inline-box'}}>\n                            {\n                                showBackButton ?\n                                    <Button onClick={this.context.router.history.goBack}\n                                            type=\"primary\" icon=\"left\" shape=\"circle\"\n                                            size={\"small\"}/>\n                                    : null\n                            }\n                            <h3>{this.props.assistantName || this.props.display}</h3>\n                        </div>\n                        <div>\n                            {\n                                button ?\n                                    <Button className={styles.Panel_Header_Button}\n                                            type=\"primary\"\n                                            icon={this.props.button.icon}\n                                            onClick={this.props.button.onClick}>\n                                        {this.props.button.text}\n                                    </Button>\n                                    : null\n                            }\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Header;\n","import React, {Component} from 'react';\nimport Handsontable from 'handsontable';\nimport {HotTable} from \"@handsontable/react\";\nimport './DatabaseInfo.less'\nimport {ColumnsOptions} from \"../NewDatabaseModal/ColumnsOptions\";\n\nclass DatabaseInfo extends Component {\n\n    render() {\n\n        let data = this.props.data;\n        const columns = this.props.databaseOption[this.props.databaseInfo.Type].map(x => x.column);\n        const colHeaders = this.props.databaseOption[this.props.databaseInfo.Type].map(x => x.column).map(x => {\n            return {\n                data: x,\n                editor: false\n            }\n        });\n        return (\n            <div style={{height: '100%'}}>\n                <HotTable id=\"hot\" data={data} colHeaders={columns} columns={colHeaders} rowHeaders={true}/>\n            </div>\n        );\n    }\n}\n\n\nexport default DatabaseInfo;","import React, {Component} from 'react';\nimport {connect} from 'react-redux';\nimport {Menu, Table, Spin} from 'antd';\n\nimport styles from \"./Databases.module.less\"\nimport NewDatabaseModal from \"./NewDatabaseModal/NewDatabaseModal\";\nimport Header from \"../../../components/Header/Header\";\nimport {http} from \"../../../helpers\";\nimport {databaseActions} from \"../../../store/actions\";\nimport {ColumnsOptions} from \"./NewDatabaseModal/ColumnsOptions\";\n\nimport DatabaseInfo from \"./DatabaseInfo/DatabaseInfo\"\n\nclass Databases extends Component {\n\n    state = {\n        visible: false,\n    };\n\n    componentWillMount() {\n        http.get(`/databases/options`)\n            .then(res => this.setState({databaseOptions: res.data.data}));\n        this.props.dispatch(databaseActions.getDatabasesList());\n    }\n\n\n    showModal = () => this.setState({visible: true});\n    hideModal = () => this.setState({visible: false});\n\n\n    uploadDatabase = newDatabase => this.props.dispatch(databaseActions.uploadDatabase({newDatabase: newDatabase}));\n    showDatabaseInfo = (databaseID) => this.props.dispatch(databaseActions.fetchDatabase(databaseID));\n\n\n    componentWillUnmount() {\n        this.props.dispatch(databaseActions.resetFetchedDtabase())\n    }\n\n    getRecordsData = records => {\n        let x = [];\n\n        if (records) {\n            for (const record of records) {\n                let renderedRecord = {};\n                for (const key of Object.keys(record))\n                    if (key !== 'DatabaseID')\n                        renderedRecord[key] = record[key];\n\n                x.push(renderedRecord);\n            }\n        }\n        return x;\n    };\n\n\n\n    render() {\n        return (\n            <div style={{height: '100%'}}>\n                <Header display={'Databases'} showBackButton={false}\n                        button={{icon: \"plus\", onClick: this.showModal, text: 'Add Database'}}/>\n\n                <div className={styles.Panel_Body_Only}>\n                    <div style={{margin: '0 5px 0 0', width: '20%'}}>\n                        <div className={styles.Panel}>\n\n                            <div className={styles.Panel_Header} style={{position: \"inherit\"}}>\n                                <h3>Databases List</h3>\n                            </div>\n                            <div className={styles.Panel_Body}>\n                                <Menu mode=\"inline\">\n                                    {\n                                        this.props.databasesList.map((database, index) =>\n                                            <Menu.Item key={index}\n                                                       onClick={() => this.showDatabaseInfo(database.ID)}>{database.Name}</Menu.Item>)\n                                    }\n                                </Menu>\n                            </div>\n                        </div>\n\n                    </div>\n\n                    <div style={{margin: '0 0 0 5px', width: '80%'}}>\n                        <div className={styles.Panel}>\n                            <div className={styles.Panel_Header} style={{position: \"inherit\"}}>\n                                <h3>Databases Information</h3>\n                            </div>\n\n                            <div className={styles.Panel_Body} style={{padding: 0}}>\n\n\n                                {\n                                    !!this.props.fetchedDatabase.databaseContent?.length ?\n                                        <DatabaseInfo\n                                            databaseOption={this.state.databaseOptions}\n                                            databaseInfo={this.props.fetchedDatabase.databaseInfo}\n                                            data={this.getRecordsData(this.props.fetchedDatabase.databaseContent)}/>\n                                        :\n                                        <Spin spinning={this.props.isLoadingDatabase}>\n                                            <div>\n                                                <img\n                                                    src=\"https://42f2671d685f51e10fc6-b9fcecea3e50b3b59bdc28dead054ebc.ssl.cf5.rackcdn.com/illustrations/following_q0cr.svg\"\n                                                    width={\"50%\"}\n                                                    style={{\n                                                        display: \"block\",\n                                                        marginTop:20,\n                                                        marginLeft: \"auto\",\n                                                        marginRight: \"auto\",\n                                                    }}\n                                                />\n                                                <p style={{textAlign: 'center', marginTop: 5}}>\n                                                    Select a database to show its data\n                                                </p>\n                                            </div>\n                                        </Spin>\n                                }\n\n\n                                {/*<pre>{*/}\n                                {/*JSON.stringify(this.props.fetchedDatabase, null, 2)*/}\n                                {/*}</pre>*/}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n\n                <NewDatabaseModal visible={this.state.visible}\n                                  databaseOptions={this.state.databaseOptions}\n                                  uploadDatabase={this.uploadDatabase}\n                                  hideModal={this.hideModal}/>\n\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        databasesList: state.database.databasesList,\n        fetchedDatabase: state.database.fetchedDatabase,\n        isLoadingDatabase: state.database.isLoading\n    };\n}\n\nexport default connect(mapStateToProps)(Databases);\n","import React, {Component} from 'react';\nimport {Button, Modal, Form, Input} from \"antd\";\n\nconst FormItem = Form.Item;\n\nclass NewGroup extends Component {\n\n    state = {};\n\n    handleSave = () => this.props.form.validateFields((err, values) => {\n        if (!err)\n            this.props.handleSave(values)\n    });\n\n    render() {\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        };\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Modal\n                width={800}\n                title=\"Create New Group\"\n                destroyOnClose={true}\n                visible={this.props.visible}\n                onOk={this.props.handleSave}\n                onCancel={this.props.handleCancel}\n                footer={[\n                    <Button key=\"Cancel\" onClick={this.props.handleCancel}>Cancel</Button>,\n                    <Button key=\"submit\" type=\"primary\" onClick={this.handleSave}>\n                        Add\n                    </Button>\n                ]}>\n                <Form layout='horizontal'>\n                    <FormItem\n                        label=\"Group Name\"\n                        extra=\"Enter a name for your group to easily identify it in the group list\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('name', {\n                            rules: [{\n                                required: true,\n                                message: 'Please enter your group name',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Greetings group, Sales group\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem\n                        label=\"Group Description\"\n                        extra=\"Just a description for you\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('description', {\n                            rules: [{\n                                required: true,\n                                message: 'Please add description to your group name',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: this is first group, this group help get info from user\"/>\n                        )}\n                    </FormItem>\n\n\n                </Form>\n            </Modal>\n        );\n    }\n}\n\nexport default Form.create()(NewGroup)","import React, {Component} from 'react';\nimport {Button, Modal, Form, Input} from \"antd\";\n\nconst FormItem = Form.Item;\n\nclass EditGroup extends Component {\n\n    state = {};\n\n    handleUpdate = () => this.props.form.validateFields((err, values) => {\n        if (!err) {\n            this.props.group.name = values.name;\n            this.props.group.description = values.description;\n            this.props.handleUpdate(this.props.group)\n        }\n    });\n\n\n    render() {\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        };\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Modal\n                width={800}\n                title=\"Edit Group\"\n                visible={this.props.visible}\n                onOk={this.props.handleUpdate}\n                onCancel={this.props.handleCancel}\n                footer={[\n                    <Button key=\"delete\" type=\"danger\" onClick={() => this.props.handleDelete(this.props.group)}>\n                        Delete\n                    </Button>,\n                    <Button key=\"Cancel\" onClick={this.props.handleCancel}>Cancel</Button>,\n                    <Button key=\"submit\" type=\"primary\" onClick={this.handleUpdate}>\n                        Update\n                    </Button>\n                ]}>\n                <Form layout='horizontal'>\n                    <FormItem\n                        label=\"Group Name\"\n                        extra=\"Enter a name for your group to easily identify it in the group list\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('name', {\n                            initialValue: this.props.group.name,\n                            rules: [{\n                                required: true,\n                                message: 'Please enter your group name',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Greetings group, Sales group\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem\n                        label=\"Group Description\"\n                        extra=\"Just a description for you\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('description', {\n                            initialValue: this.props.group.description,\n                            rules: [{\n                                required: true,\n                                message: 'Please description to your group name',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: this is first group, this group help get info from user\"/>\n                        )}\n                    </FormItem>\n\n\n                </Form>\n            </Modal>\n        );\n    }\n}\n\nexport default Form.create()(EditGroup)","import React, {Component} from 'react';\nimport styles from \"./Groups.module.less\";\nimport {Avatar, Button, List, Skeleton, Spin, Modal} from \"antd\";\nimport NewGroup from \"./NewGroup/NewGroup\";\nimport EditGroup from \"./EditGroup/EditGroup\";\n\nconst confirm = Modal.confirm;\n\nclass Groups extends Component {\n\n    state = {\n        newGroupModal: false,\n        editGroupModal: false,\n        selectedGroupToEdit: {}\n    };\n\n\n    ////// ADD GROUP\n    handleAddGroup = (newGroup) => {\n        this.props.addGroup(newGroup);\n        this.setState({newGroupModal: false});\n    };\n\n    handleAddGroupCancel = () => this.setState({newGroupModal: false});\n\n    showNewGroupModal = () => this.setState({newGroupModal: true});\n\n\n    ////// EDIT GROUP\n    handleEditGroup = (editedGroup) => {\n        this.props.editGroup(editedGroup);\n        this.setState({editGroupModal: false, selectedGroupToEdit: {}});\n    };\n\n    handleEditGroupCancel = () => this.setState({editGroupModal: false});\n\n    showEditGroupModal = (item) => this.setState({editGroupModal: true, selectedGroupToEdit: item});\n\n    ////// DELETE GROUP\n    handleDeleteGroup = (deletedGroup) => {\n        confirm({\n            title: `Delete group confirmation`,\n            content: `If you click OK, this group will be deleted with its associated blocks forever`,\n            onOk: () => {\n                this.props.deleteGroup(deletedGroup);\n                this.setState({editGroupModal: false, selectedGroupToEdit: {}});\n            }\n        });\n    };\n\n\n    render() {\n        return (\n            <div className={styles.Panel}>\n                <div className={styles.Panel_Header}>\n                    <div>\n                        <h3>Flow Groups</h3>\n                    </div>\n                    <div>\n                        <Button className={styles.Panel_Header_Button} type=\"primary\" icon=\"plus\"\n                                onClick={this.showNewGroupModal}>\n                            Add Group\n                        </Button>\n\n                        <NewGroup visible={this.state.newGroupModal}\n                                  handleCancel={this.handleAddGroupCancel}\n                                  handleSave={this.handleAddGroup}/>\n                    </div>\n                </div>\n\n\n                <div className={styles.Panel_Body}>\n                    {\n                        this.props.isLoading ?\n                            <Spin><Skeleton active={true}/></Spin>\n                            :\n                            <List\n                                itemLayout=\"horizontal\"\n                                dataSource={this.props.groupsList}\n                                renderItem={item => (\n                                    <List.Item actions={[<Button icon={'edit'}\n                                                                 onClick={() => this.showEditGroupModal(item)}/>]}>\n                                        <List.Item.Meta\n                                            onClick={() => this.props.selectGroup(item)}\n                                            className={styles.groupsList}\n                                            avatar={<Avatar icon=\"ordered-list\" style={{backgroundColor: '#9254de'}}/>}\n                                            title={item.name}\n                                            description={item.description}\n                                        />\n                                    </List.Item>\n                                )}\n                            />\n                    }\n                </div>\n\n                <EditGroup group={this.state.selectedGroupToEdit}\n                           visible={this.state.editGroupModal}\n                           handleCancel={this.handleEditGroupCancel}\n                           handleUpdate={this.handleEditGroup}\n                           handleDelete={this.handleDeleteGroup}/>\n            </div>\n        );\n    }\n}\n\nexport default Groups;\n","import React, {Component} from 'react';\nimport {Button, Card, Checkbox, Col, Collapse, Divider, Row, Tag} from \"antd\";\n\nconst Panel = Collapse.Panel;\nconst {Meta} = Card;\n\nclass Block extends Component {\n\n    editBlock = (block) => this.props.editBlock(block);\n    deleteBlock = (block) => this.props.deleteBlock(block);\n\n    render() {\n        const {block, databasesList} = this.props;\n\n        return (\n            <Collapse bordered={true}>\n                <Panel header={(\n                    <>\n                        {block.Type} <Divider type=\"vertical\"/>\n                        {block.Content.text} <Divider type=\"vertical\"/>\n\n                        <Button icon={'edit'} size={\"small\"} onClick={() => this.editBlock(block)}/>\n                        <Divider type=\"vertical\"/>\n                        <Button icon={'delete'} size={\"small\"} type={\"danger\"}\n                                onClick={() => this.deleteBlock(block)}/>\n                    </>\n                )}\n                       key={this.props.key}>\n\n                    {block.Content.text ?\n                        <Row>\n                            <Col span={6}>Question:</Col>\n                            <Col span={12}>{block.Content.text}</Col>\n                            <Divider/>\n                        </Row>\n                        : null\n                    }\n\n                    {block.Content.blockToGoID ?\n                        <Row>\n                            <Col span={6}>block To Go ID:</Col>\n                            <Col span={12}>{block.Content.blockToGoID}</Col>\n                            <Divider/>\n                        </Row>\n                        : null\n                    }\n\n                    {block.Content.validation ?\n                        <Row>\n                            <Col span={6}>validation</Col>\n                            <Col span={12}>{block.Content.validation}</Col>\n                            <Divider/>\n                        </Row>\n                        : null\n                    }\n\n                    {block.Content.action ?\n                        <Row>\n                            <Col span={6}>action</Col>\n                            <Col span={12}>{block.Content.action}</Col>\n                            <Divider/>\n                        </Row>\n                        : null\n                    }\n\n                    {block.Content.afterMessage ?\n                        <Row>\n                            <Col span={6}>after Message</Col>\n                            <Col span={12}>{block.Content.afterMessage}</Col>\n                            <Divider/>\n                        </Row>\n                        : null\n                    }\n\n                    {block.Content.showTop ?\n                        <Row>\n                            <Col span={6}>show Top</Col>\n                            <Col span={12}>{block.Content.showTop}</Col>\n                            <Divider/>\n                        </Row>\n                        : null\n                    }\n\n                    {block.Content.databaseID ?\n                        <Row>\n                            <Col span={6}>Database</Col>\n                            <Col span={12}>{databasesList?.find(database => database.ID === block.Content.databaseID).Name}</Col>\n                            <Divider/>\n                        </Row>\n                        : null\n                    }\n\n                    {block.Content.storeInDB ?\n                        <Row>\n                            <Col span={6}>Stroe in DB:</Col>\n                            <Col span={6}><Checkbox checked={block.Content.storeInDB}></Checkbox></Col>\n\n                            <Col span={6}>Skippable:</Col>\n                            <Col span={6}><Checkbox checked={block.content.isSkippable}></Checkbox></Col>\n                            <Divider/>\n                        </Row>\n                        : null\n                    }\n\n                    {block.Content.answers ?\n                        <div>\n                            Answers:\n                            {\n                                block.Content.answers.map((answer, i) =>\n                                    <Card key={i} style={{margin: 5, width: 300}}>\n                                        <Meta\n                                            title={answer.text}\n                                            description={\n                                                (<>Keywords: {answer.keywords.map((keyword, i) =>\n                                                    <Tag key={i}>{keyword}</Tag>)}</>)\n                                            }\n                                        />\n                                        <Row>\n                                            <Divider/>\n                                            <Col span={6}>Action:</Col>\n                                            <Col span={12}>{answer.action}</Col>\n                                        </Row>\n\n                                        <Row>\n                                            <Divider/>\n                                            <Col span={6}>After Message</Col>\n                                            <Col span={12}>{answer.afterMessage}</Col>\n                                        </Row>\n\n                                    </Card>\n                                )\n                            }\n                        </div>\n                        : null\n                    }\n\n                </Panel>\n            </Collapse>\n        );\n    }\n\n}\n\nexport default Block;\n\n","export const onDelete = (id, type, handler) => handler({\n    id: id,\n    type: type\n});\n\nexport const onCancel = (handleNewBlock, handleEditBlock) => handleNewBlock ? handleNewBlock(false) : handleEditBlock(false);\n\n\nexport const initActionType = (block, allGroups) => {\n    if (block.Content.action === \"Go To Specific Block\")\n        return {showGoToBlock: true, showGoToGroup: false};\n    else if (block.Content.action === \"Go To Group\") {\n        // because here we dont' have column in each block contains all the group\n        // this is a workaround to have the group name from the block id\n        const {blockToGoID} = block.Content;\n        allGroups.map((group) => {\n            if (group.blocks[0].ID === blockToGoID)\n                return {showGoToBlock: false, showGoToGroup: true, groupName: group.name}\n        })\n    } else\n        return {showGoToBlock: false, showGoToGroup: false};\n};\n\nexport const onSelectAction = (action) => {\n    if (action === \"Go To Specific Block\")\n        return {showGoToBlock: true, showGoToGroup: false};\n    else if (action === \"Go To Group\")\n        return {showGoToBlock: false, showGoToGroup: true};\n    else\n        return {showGoToBlock: false, showGoToGroup: false};\n};\n\nexport const onFileTypeChange = (checkedValues) => {\n    return {fileTypes: checkedValues}\n};\n\nexport const getInitialVariables = (options, type) => {\n    const {flowOptions, allGroups, allBlocks} = options;\n    let block = options.block ? options.block : {Content: {}};\n    let blockOptions = {};\n    // extract the correct blockType from blockTypes[]\n    for (const blockType of flowOptions.blockTypes)\n        if (blockType.name === (block.Type || type)) {\n            blockOptions = blockType;\n            break;\n        }\n    return {flowOptions, allGroups, allBlocks, blockOptions, block}\n};","import {Button, Checkbox, Input, Select, Spin} from \"antd\";\nimport React from 'react';\nimport {onCancel, onDelete, onFileTypeChange, onSelectAction} from \"./CardTypesHelpers\";\n\nconst Option = Select.Option;\nconst CheckboxGroup = Checkbox.Group;\n\n// Common Components\n////////////////////////////////////////////\nexport const QuestionFormItem = ({FormItem, layout, getFieldDecorator, block, placeholder}) => {\n    return (\n    <FormItem label=\"Question\"\n              extra=\"The above text will be shown in a bubble inside the chat\"\n              {...layout}>\n        {getFieldDecorator('text', {\n            initialValue: block.Content.text,\n            rules: [{\n                required: true,\n                message: \"Please input a question\",\n            }],\n        })(\n            <Input placeholder={placeholder}/>\n        )}\n    </FormItem>\n    )\n};\n\nexport const DataTypeFormItem = ({FormItem, layout, getFieldDecorator, flowOptions, block}) => (\n    <FormItem label=\"Data Type\" {...layout}\n              extra=\"Selecting a Data Type will result in a smarter AI processing and accurate data collection\">\n        {\n            getFieldDecorator('dataType', {\n                initialValue: block.DataType ? block.DataType.name : undefined,\n                rules: [{\n                    required: true,\n                    message: \"Please specify the data type\",\n                }]\n            })(\n                <Select placeholder=\"Will validate the input and categorise user inputs\">\n                    {\n                        flowOptions.dataTypes.map((type, i) =>\n                            <Option key={i} value={type.name}>{type.name}</Option>)\n                    }\n                </Select>\n            )\n        }\n    </FormItem>\n);\n\nexport const SkippableFormItem = ({FormItem, layout, getFieldDecorator, block}) => (\n    <FormItem label=\"Skippable?\" {...layout}>\n        {getFieldDecorator('isSkippable', {\n            valuePropName: 'checked',\n            defaultValue: false,\n            initialValue: block.IsSkippable ? block.IsSkippable : undefined,\n        })(\n            <Checkbox>Users can skip answering this question</Checkbox>\n        )}\n    </FormItem>\n);\n\n//TODO: Needs to be checked\nexport const StoreInDBFormItem = ({FormItem, layout, getFieldDecorator, block, blockOptions}) => (\n    <FormItem label=\"Store responses?\" {...layout}>\n        {getFieldDecorator('storeInDB', {\n            valuePropName: 'checked',\n            initialValue: block.alwaysStoreInDB ? block.alwaysStoreInDB : blockOptions.alwaysStoreInDB,\n        })(\n            <Checkbox disabled={blockOptions.alwaysStoreInDB}>\n                Users' responses should be recorded</Checkbox>\n        )}\n    </FormItem>\n);\n\nexport const AfterMessageFormItem = ({FormItem, layout, getFieldDecorator, block}) => (\n    <FormItem label=\"After message\"\n              extra=\"This message will display straight after the user's response\"\n              {...layout}>\n        {getFieldDecorator('afterMessage', {\n            initialValue: block.Content.afterMessage ? block.Content.afterMessage : undefined,\n            rules: [{\n                required: false,\n                message: \"Please input question field\",\n            }],\n        })(\n            <Input placeholder=\"Ex: Your input is recorded\"/>\n        )}\n    </FormItem>\n);\n\nexport const ActionFormItem = ({FormItem, layout, getFieldDecorator, setStateHandler, blockOptions, block}) => (\n    <FormItem label=\"Action\" {...layout}>\n        {\n            blockOptions.actions ?\n                getFieldDecorator('action', {\n                    initialValue: block.Content.action ? block.Content.action : undefined,\n                    rules: [{\n                        required: true,\n                        message: \"Please select an action\",\n                    }],\n                })(\n                    <Select onSelect={(action) => setStateHandler(onSelectAction(action))}\n                            placeholder=\"The next step after this block\">{\n                        blockOptions.actions.map((action, i) =>\n                            <Option key={i}\n                                    value={action}>{action}</Option>)\n                    }</Select>\n                )\n                : <Spin><Select placeholder=\"The next step after this block\"></Select></Spin>\n        }\n    </FormItem>\n);\n\nexport const ShowGoToBlockFormItem = ({FormItem, layout, getFieldDecorator, allBlocks, showGoToBlock, block}) => {\n    return (\n        showGoToBlock ?\n            (\n                <FormItem label=\"Go To Specific Block\" {...layout}>\n                    {console.log(block.Content.blockToGoID)}\n                    {\n                        getFieldDecorator('blockToGoID',\n                            {\n                                initialValue: block.Content.blockToGoID ? block.Content.blockToGoID : undefined,\n                                rules: [{required: true, message: \"Please select your next block\"}]\n                            }\n                        )(\n                            <Select placeholder=\"The next block to go to\">{\n                                allBlocks.map((block, i) =>\n                                    <Option key={i} value={block.ID}>\n                                        {`${block.ID}- (${block.Type}) ${block.Content.text ? block.Content.text : ''}`}\n                                    </Option>\n                                )\n                            }</Select>\n                        )\n                    }\n                </FormItem>\n            ) : null\n    );\n};\n\nexport const ShowGoToGroupFormItem = ({FormItem, layout, getFieldDecorator, allGroups, showGoToGroup, groupName}) => {\n    return (\n        showGoToGroup ?\n            (\n                <FormItem label=\"Go To Specific Group\"\n                          extra=\"The selected group will start from its first block\"\n                          {...layout}>\n                    {\n                        getFieldDecorator('blockToGoIDGroup',\n                            {\n                                initialValue: groupName ? groupName : undefined,\n                                rules: [{required: true, message: \"Please select your next group\"}]\n                            }\n                        )(\n                            <Select placeholder=\"The first next block of a group\">{\n                                allGroups.map((group, i) => {\n                                        if (group.blocks[0])\n                                            return <Option key={i} value={group.blocks[0].id}>\n                                                {`${group.name}`}\n                                            </Option>;\n                                        else\n                                            return <Option disabled key={i} value={group.name}>\n                                                {`${group.name}`}\n                                            </Option>\n                                    }\n                                )\n                            }</Select>\n                        )\n                    }\n                </FormItem>\n            ) : null\n    );\n};\n\n// Others\n//////////////////////////////////////////////////\nexport const ButtonsForm = (handleNewBlock, handleEditBlock, handleDeleteBlock, onSubmit, block) => (\n    handleNewBlock ? [\n        <Button key=\"cancel\" onClick={() => onCancel(handleNewBlock, handleEditBlock)}>Cancel</Button>,\n        <Button key=\"submit\" type=\"primary\" onClick={onSubmit}>Add</Button>\n    ] : [\n        <Button key=\"delete\" type=\"danger\"\n                onClick={() => onDelete(block.ID, block.Type, handleDeleteBlock)}>\n            Delete\n        </Button>,\n        <Button key=\"cancel\" onClick={() => onCancel(handleNewBlock, handleEditBlock)}>Cancel</Button>,\n        <Button key=\"submit\" type=\"primary\" onClick={onSubmit}>Update</Button>\n    ]\n);\n\nexport const FileTypesFormItem = ({FormItem, block, layout, getFieldDecorator, typesAllowed, setStateHandler}) => (\n    <FormItem label=\"File Types\" {...layout}>\n        {\n            typesAllowed ?\n                getFieldDecorator('fileTypes', {\n                    initialValue: block.Content.fileTypes,\n                    rules: [{\n                        required: true,\n                        message: \"Please select the accepted file type\",\n                    }]\n                })(\n                    <CheckboxGroup options={typesAllowed}\n                                   onChange={(checkedValues) => setStateHandler(onFileTypeChange(checkedValues))}/>\n                )\n                : <Spin/>\n        }\n    </FormItem>\n);\n\nexport const ScannedDatabaseFormItem = ({FormItem, block, getFieldDecorator, layout, databasesList}) => (\n    <FormItem label=\"Database\" {...layout}\n              extra=\"The database to be scanned for solutions (Jobs, Candidate...)\">\n        {\n                getFieldDecorator('databaseID', {\n                    initialValue: block.Content.databaseID ?\n                        databasesList.find(database => database.ID === block.Content.databaseID).Name\n                        : undefined,\n                    rules: [{\n                        required: true,\n                        message: \"Please select a database. \" +\n                            \"If you don't have one please go to Database section form the left menu and upload one, \" +\n                            \"otherwise you won't be able to creat a Solution block and search for solutions in the chatbot\",\n                    }],\n                })(\n                    <Select placeholder=\"EX: Jobs database\">{\n                        databasesList.map((database, i) =>\n                            <Option key={i}\n                                    value={database.ID}>{database.Name}</Option>)\n                    }</Select>\n                )\n        }\n    </FormItem>\n);","import React, {Component} from 'react';\nimport {Card, Form} from \"antd\";\nimport {getInitialVariables, initActionType} from './CardTypesHelpers'\nimport {\n    ActionFormItem,\n    AfterMessageFormItem,\n    ButtonsForm,\n    DataTypeFormItem,\n    QuestionFormItem,\n    ShowGoToBlockFormItem,\n    ShowGoToGroupFormItem,\n    SkippableFormItem,\n    StoreInDBFormItem\n} from './CardTypesFormItems'\n\nconst FormItem = Form.Item;\n\nclass UserInput extends Component {\n\n    state = {\n        showGoToBlock: false,\n        showGoToGroup: false,\n        groupName: ''\n    };\n\n    componentWillMount() {\n        this.handleNewBlock = this.props.handleNewBlock;\n        this.handleEditBlock = this.props.handleEditBlock;\n        this.handleDeleteBlock = this.props.handleDeleteBlock;\n\n        const {allGroups, block} = getInitialVariables(this.props.options, \"User Input\");\n        this.setState(initActionType(block, allGroups));\n    }\n\n    onSubmit = () => this.props.form.validateFields((err, values) => {\n        if (!err) {\n            const {flowOptions} = getInitialVariables(this.props.options);\n            let options = {\n                block: {\n                    Type: 'User Input',\n                    GroupID: this.props.options.currentGroup.id,\n                    StoreInDB: values.storeInDB,\n                    Skippable: values.isSkippable || false,\n                    DataType: flowOptions.dataTypes.find((dataType) => dataType.name === values.dataType),\n                    Content: {\n                        text: values.text,\n                        blockToGoID: values.blockToGoID || values.blockToGoIDGroup || null,\n                        action: values.action,\n                        afterMessage: values.afterMessage || \"\"\n                    }\n                }\n            };\n\n            if (this.handleNewBlock)\n                this.handleNewBlock(options);\n            else {\n                // Edit Block\n                options.block.ID = this.props.options.block.ID;\n                options.block.Order = this.props.options.block.Order;\n                this.handleEditBlock(options);\n            }\n\n        }\n    });\n\n\n    render() {\n        const {flowOptions, allGroups, allBlocks, blockOptions, block} = getInitialVariables(this.props.options, 'User Input');\n        const {getFieldDecorator} = this.props.form;\n\n        const buttons = ButtonsForm(this.handleNewBlock, this.handleEditBlock, this.handleDeleteBlock, this.onSubmit, block);\n\n        return (\n            <Card style={{width: '100%'}} actions={buttons}>\n                <Form layout='horizontal'>\n                    <QuestionFormItem FormItem={FormItem} block={block}\n                                      getFieldDecorator={getFieldDecorator}\n                                      layout={this.props.options.layout}\n                                      placeholder=\"Ex: What is your email?\"/>\n\n                    <DataTypeFormItem FormItem={FormItem} block={block}\n                                      getFieldDecorator={getFieldDecorator} flowOptions={flowOptions}\n                                      layout={this.props.options.layout}/>\n\n                    <ActionFormItem FormItem={FormItem} blockOptions={blockOptions} block={block}\n                                    setStateHandler={(state) => this.setState(state)}\n                                    getFieldDecorator={getFieldDecorator}\n                                    layout={this.props.options.layout}/>\n\n                    <ShowGoToBlockFormItem FormItem={FormItem} allBlocks={allBlocks} block={block}\n                                           showGoToBlock={this.state.showGoToBlock}\n                                           getFieldDecorator={getFieldDecorator}\n                                           layout={this.props.options.layout}/>\n\n                    <ShowGoToGroupFormItem FormItem={FormItem} allGroups={allGroups} groupName={this.state.groupName}\n                                           showGoToGroup={this.state.showGoToGroup}\n                                           getFieldDecorator={getFieldDecorator}\n                                           layout={this.props.options.layout}/>\n\n                    <AfterMessageFormItem FormItem={FormItem} block={block}\n                                          getFieldDecorator={getFieldDecorator}\n                                          layout={this.props.options.layout}/>\n\n                    <SkippableFormItem FormItem={FormItem} block={block}\n                                       getFieldDecorator={getFieldDecorator}\n                                       layout={this.props.options.layout}/>\n\n                    <StoreInDBFormItem FormItem={FormItem} block={block} blockOptions={blockOptions}\n                                       getFieldDecorator={getFieldDecorator}\n                                       layout={this.props.options.layout}/>\n\n                </Form>\n            </Card>\n        );\n    }\n}\n\nexport default Form.create()(UserInput);","import React, {Component} from 'react';\nimport {Button, Card, Form, Icon, Input, Modal, Popconfirm, Tag, Tooltip} from \"antd\";\n\nimport {getInitialVariables, initActionType} from './CardTypesHelpers'\nimport {\n    ActionFormItem,\n    AfterMessageFormItem,\n    ButtonsForm,\n    DataTypeFormItem,\n    QuestionFormItem,\n    ShowGoToBlockFormItem,\n    ShowGoToGroupFormItem,\n    SkippableFormItem,\n    StoreInDBFormItem\n} from './CardTypesFormItems'\n\nconst FormItem = Form.Item;\n\nclass Question extends Component {\n\n    state = {\n        showGoToBlock: false,\n        showGoToGroup: false,\n        modalVisible: false,\n\n        tags: [],\n        inputVisible: false,\n        inputValue: '',\n        answers: [],\n\n        groupName: ''\n    };\n\n    //Submit whole block\n    onSubmit = () => this.props.form.validateFields(['text', 'isSkippable', 'storeInDB', 'dataType'],\n        (err, values) => {\n            if (!err) {\n                const {flowOptions} = getInitialVariables(this.props.options);\n                let options = {\n                    block: {\n                        Type: 'Question',\n                        GroupID: this.props.options.currentGroup.id,\n                        StoreInDB: values.storeInDB,\n                        Skippable: values.isSkippable || false,\n                        DataType: flowOptions.dataTypes.find((dataType) => dataType.name === values.dataType),\n                        Content: {\n                            text: values.text,\n                            answers: this.state.answers\n                        }\n                    }\n                };\n\n                if (this.handleNewBlock)\n                    this.handleNewBlock(options);\n                else {\n                    // Edit Block\n                    options.block.ID = this.props.options.block.ID;\n                    options.block.Order = this.props.options.block.Order;\n                    this.handleEditBlock(options);\n                }\n            }\n    });\n\n    //Add single answer\n    addAnswer = () => this.props.form.validateFields(['answer', 'action', 'blockToGoID', 'blockToGoIDGroup', 'afterMessage'],\n        (err, values) => {\n            if (!err) {\n                const answer = {\n                    text: values.answer,\n                    keywords: this.state.tags,\n                    blockToGoID: values.blockToGoID || values.blockToGoIDGroup || null,\n                    action: values.action === \"Go To Group\" ? \"Go To Specific Block\" : values.action,\n                    afterMessage: values.afterMessage || \"\"\n                };\n                let answers = [answer].concat(this.state.answers);\n                this.setState({answers, tags: []});\n                this.hideAddAnswer();\n            }\n        });\n    showAddAnswer = () => this.setState({modalVisible: true});\n    hideAddAnswer = () => this.setState({modalVisible: false});\n    removeAnswer = deletedAnswer => this.setState({\n        answers: [...this.state.answers].filter(answer => (answer.afterMessage !== deletedAnswer.afterMessage) && (answer.text !== deletedAnswer.text))\n    });\n\n    //Tags component's functions\n    removeTag = (removedTag) => this.setState({tags: this.state.tags.filter(tag => tag !== removedTag)});\n    showInput = () => this.setState({inputVisible: true}, () => this.input.focus());\n    handleInputChange = e => this.setState({inputValue: e.target.value});\n    saveInputRef = input => this.input = input;\n    handleInputConfirm = () => {\n        const inputValue = this.state.inputValue;\n        let tags = this.state.tags;\n        if (inputValue && tags.indexOf(inputValue) === -1)\n            tags = [...tags, inputValue];\n        this.setState({tags, inputVisible: false, inputValue: '',});\n    };\n\n\n    componentWillMount() {\n        this.handleNewBlock = this.props.handleNewBlock;\n        this.handleEditBlock = this.props.handleEditBlock;\n        this.handleDeleteBlock = this.props.handleDeleteBlock;\n\n        const {allGroups, block} = getInitialVariables(this.props.options);\n        this.setState(initActionType(block, allGroups));\n        this.setState({answers: block.Content.answers || []})\n    }\n\n\n    render() {\n        const {flowOptions, allGroups, allBlocks, blockOptions, block} = getInitialVariables(this.props.options, 'Question');\n        const {getFieldDecorator} = this.props.form;\n\n        const {tags, inputVisible, inputValue} = this.state;\n\n        const buttons = ButtonsForm(this.handleNewBlock, this.handleEditBlock, this.handleDeleteBlock, this.onSubmit, block);\n\n        return (\n            <Card style={{width: '100%'}} actions={buttons}>\n                <Form layout='horizontal'>\n                    <QuestionFormItem FormItem={FormItem} block={block}\n                                      getFieldDecorator={getFieldDecorator}\n                                      layout={this.props.options.layout}\n                                      placeholder=\"Ex: What best describes you?\"/>\n\n                    <DataTypeFormItem FormItem={FormItem} block={block}\n                                      getFieldDecorator={getFieldDecorator} flowOptions={flowOptions}\n                                      layout={this.props.options.layout}/>\n\n                    <FormItem label=\"Answers\"\n                              {...this.props.options.layout}>\n                        <Button onClick={this.showAddAnswer}\n                                type=\"primary\" icon=\"plus\" shape=\"circle\" size={\"small\"}></Button>\n                        {\n                            this.state.answers.map((answer, i) => (\n\n                                <Card title={answer.text} key={i}\n                                      extra={\n                                          <Popconfirm placement=\"topRight\" title=\"Are you sure delete this answer?\"\n                                                      onConfirm={() => this.removeAnswer(answer)}\n                                                      okText=\"Yes\" cancelText=\"No\">\n                                              <Button type=\"danger\" icon=\"delete\" shape=\"circle\"\n                                                      size={\"small\"}></Button>\n                                          </Popconfirm>\n                                      }\n                                      style={{width: 200, margin: 10}}>\n                                    <p>Action: {answer.action}</p>\n                                    Tags: <br/>\n                                    {answer.keywords.map((keyword, i) => <Tag key={i}>{keyword}</Tag>)}\n                                </Card>\n                            ))\n                        }\n                    </FormItem>\n\n\n                    <SkippableFormItem FormItem={FormItem} block={block}\n                                       getFieldDecorator={getFieldDecorator}\n                                       layout={this.props.options.layout}/>\n\n                    <StoreInDBFormItem FormItem={FormItem} block={block} blockOptions={blockOptions}\n                                       getFieldDecorator={getFieldDecorator}\n                                       layout={this.props.options.layout}/>\n\n                </Form>\n\n\n                {/*ADDING ANSWER*/}\n                <Modal title=\"Add Answer\" width={700} destroyOnClose={true} visible={this.state.modalVisible}\n                       onOk={this.addAnswer} onCancel={this.hideAddAnswer}>\n                    <Form>\n                        <FormItem label=\"Answer\"\n                                  extra=\"This will be shown as answer in chatbot\"\n                                  {...this.props.options.layout}>\n                            {getFieldDecorator('answer', {\n                                rules: [{\n                                    required: true,\n                                    message: \"Please input answer field\",\n                                }],\n                            })(\n                                <Input placeholder=\"Ex: Yes I need it :)\"/>\n                            )}\n                        </FormItem>\n\n                        <FormItem label=\"Keywords\" {...this.props.options.layout}\n                                  extra=\"Adding related keywords to the answer is necessary\n                                  for retrieving accurate solutions to the user\">\n                            <div>\n                                {tags.map((tag) => {\n                                    const isLongTag = tag.length > 20;\n                                    const tagElem = (\n                                        <Tag key={tag} closable={true} afterClose={() => this.removeTag(tag)}>\n                                            {isLongTag ? `${tag.slice(0, 20)}...` : tag}\n                                        </Tag>\n                                    );\n                                    return isLongTag ? <Tooltip title={tag} key={tag}>{tagElem}</Tooltip> : tagElem;\n                                })}\n                                {inputVisible && (\n                                    <Input\n                                        ref={this.saveInputRef}\n                                        type=\"text\"\n                                        size=\"small\"\n                                        style={{width: 78}}\n                                        value={inputValue}\n                                        onChange={this.handleInputChange}\n                                        onBlur={this.handleInputConfirm}\n                                        onPressEnter={this.handleInputConfirm}\n                                    />\n                                )}\n                                {!inputVisible && (\n                                    <Tag\n                                        onClick={this.showInput}\n                                        style={{background: '#fff', borderStyle: 'dashed'}}>\n                                        <Icon type=\"plus\"/> New Keyword\n                                    </Tag>\n                                )}\n                            </div>\n                        </FormItem>\n\n                        <ActionFormItem FormItem={FormItem} blockOptions={blockOptions} block={block}\n                                        setStateHandler={(state) => this.setState(state)}\n                                        getFieldDecorator={getFieldDecorator}\n                                        layout={this.props.options.layout}/>\n\n                        <ShowGoToBlockFormItem FormItem={FormItem} allBlocks={allBlocks} block={block}\n                                               showGoToBlock={this.state.showGoToBlock}\n                                               getFieldDecorator={getFieldDecorator}\n                                               layout={this.props.options.layout}/>\n\n                        <ShowGoToGroupFormItem FormItem={FormItem} allGroups={allGroups}\n                                               showGoToGroup={this.state.showGoToGroup}\n                                               getFieldDecorator={getFieldDecorator}\n                                               layout={this.props.options.layout}/>\n\n                        <AfterMessageFormItem FormItem={FormItem} block={block}\n                                              getFieldDecorator={getFieldDecorator}\n                                              layout={this.props.options.layout}/>\n                    </Form>\n\n                </Modal>\n            </Card>\n        );\n    }\n\n}\n\n\nexport default Form.create()(Question);\n\n","import React, {Component} from 'react';\nimport {Card, Form} from \"antd\";\n\nimport {getInitialVariables, initActionType} from './CardTypesHelpers'\nimport {\n    ActionFormItem,\n    AfterMessageFormItem,\n    ButtonsForm,\n    DataTypeFormItem,\n    FileTypesFormItem,\n    QuestionFormItem,\n    ShowGoToBlockFormItem,\n    ShowGoToGroupFormItem,\n    SkippableFormItem\n} from './CardTypesFormItems'\n\nconst FormItem = Form.Item;\n\nclass FileUpload extends Component {\n\n    state = {\n        showGoToBlock: false,\n        showGoToGroup: false,\n        fileTypes: [],\n        groupName: ''\n    };\n\n    onSubmit = () => this.props.form.validateFields((err, values) => {\n        if (!err) {\n            const {flowOptions} = getInitialVariables(this.props.options);\n            let options = {\n                block: {\n                    Type: 'File Upload',\n                    GroupID: this.props.options.currentGroup.id,\n                    StoreInDB: true,\n                    Skippable: values.isSkippable || false,\n                    DataType: flowOptions.dataTypes.find((dataType) => dataType.name === \"No Type\"),\n                    Content: {\n                        text: values.text,\n                        action: values.action,\n                        fileTypes: this.state.fileTypes,\n                        blockToGoID: values.blockToGoID || values.blockToGoIDGroup || null,\n                        afterMessage: values.afterMessage || \"\"\n                    }\n                }\n            };\n\n            if (this.handleNewBlock)\n                this.handleNewBlock(options);\n            else {\n                // Edit Block\n                options.block.ID = this.props.options.block.ID;\n                options.block.Order = this.props.options.block.Order;\n                this.handleEditBlock(options);\n            }\n        }\n    });\n\n    componentWillMount() {\n        this.handleNewBlock = this.props.handleNewBlock;\n        this.handleEditBlock = this.props.handleEditBlock;\n        this.handleDeleteBlock = this.props.handleDeleteBlock;\n\n        const {allGroups, block} = getInitialVariables(this.props.options);\n        this.setState(initActionType(block, allGroups));\n    }\n\n\n    render() {\n        const {flowOptions, allGroups, allBlocks, blockOptions, block} = getInitialVariables(this.props.options, 'File Upload');\n        const {getFieldDecorator} = this.props.form;\n        const {typesAllowed} = blockOptions;\n\n        const buttons = ButtonsForm(this.handleNewBlock, this.handleEditBlock, this.handleDeleteBlock, this.onSubmit, block);\n\n        return (\n            <Card style={{width: '100%'}} actions={buttons}>\n                <Form layout='horizontal'>\n                    <QuestionFormItem FormItem={FormItem} block={block}\n                                      getFieldDecorator={getFieldDecorator}\n                                      layout={this.props.options.layout}\n                                      placeholder=\"Ex: Please upload your CV\"/>\n\n                    <DataTypeFormItem FormItem={FormItem} block={block}\n                                      getFieldDecorator={getFieldDecorator} flowOptions={flowOptions}\n                                      layout={this.props.options.layout}/>\n\n                    <FileTypesFormItem FormItem={FormItem} typesAllowed={typesAllowed} block={block}\n                                       setStateHandler={(state) => this.setState(state)}\n                                       getFieldDecorator={getFieldDecorator}\n                                       layout={this.props.options.layout}/>\n\n                    <ActionFormItem FormItem={FormItem} blockOptions={blockOptions} block={block}\n                                    setStateHandler={(state) => this.setState(state)}\n                                    getFieldDecorator={getFieldDecorator}\n                                    layout={this.props.options.layout}/>\n\n                    <ShowGoToBlockFormItem FormItem={FormItem} allBlocks={allBlocks} block={block}\n                                           showGoToBlock={this.state.showGoToBlock}\n                                           getFieldDecorator={getFieldDecorator}\n                                           layout={this.props.options.layout}/>\n\n                    <ShowGoToGroupFormItem FormItem={FormItem} allGroups={allGroups} groupName={this.state.groupName}\n                                           showGoToGroup={this.state.showGoToGroup}\n                                           getFieldDecorator={getFieldDecorator}\n                                           layout={this.props.options.layout}/>\n\n                    <AfterMessageFormItem FormItem={FormItem} block={block}\n                                          getFieldDecorator={getFieldDecorator}\n                                          layout={this.props.options.layout}/>\n\n                    <SkippableFormItem FormItem={FormItem} block={block}\n                                       getFieldDecorator={getFieldDecorator}\n                                       layout={this.props.options.layout}/>\n                </Form>\n            </Card>\n        );\n    }\n}\n\nexport default Form.create()(FileUpload);\n\n","import React, {Component} from 'react';\nimport {Card, Form, Input} from \"antd\";\nimport {getInitialVariables, initActionType} from './CardTypesHelpers'\nimport {\n    ActionFormItem,\n    AfterMessageFormItem,\n    ButtonsForm,\n    ShowGoToBlockFormItem,\n    ShowGoToGroupFormItem,\n    ScannedDatabaseFormItem\n} from './CardTypesFormItems'\n\nconst FormItem = Form.Item;\n\nclass Solutions extends Component {\n\n    state = {\n        showGoToBlock: false,\n        showGoToGroup: false,\n        groupName: ''\n    };\n\n    componentWillMount() {\n        this.handleNewBlock = this.props.handleNewBlock;\n        this.handleEditBlock = this.props.handleEditBlock;\n        this.handleDeleteBlock = this.props.handleDeleteBlock;\n\n        const {allGroups, block} = getInitialVariables(this.props.options);\n        this.setState(initActionType(block, allGroups));\n    }\n\n    onSubmit = () => this.props.form.validateFields((err, values) => {\n        if (!err) {\n            const {flowOptions} = getInitialVariables(this.props.options);\n            let options = {\n                block: {\n                    Type: 'Solutions',\n                    GroupID: this.props.options.currentGroup.id,\n                    StoreInDB: false,\n                    Skippable: false,\n                    DataType: flowOptions.dataTypes.find((dataType) => dataType.name === \"No Type\"),\n                    Content: {\n                        showTop: Number(values.showTop),\n                        action: values.action,\n                        blockToGoID: values.blockToGoID || values.blockToGoIDGroup || null,\n                        afterMessage: values.afterMessage || \"\" ,\n                        databaseID: values.databaseID,\n                    }\n                }\n            };\n\n            if (this.handleNewBlock)\n                this.handleNewBlock(options);\n            else {\n                // Edit Block\n                options.block.ID = this.props.options.block.ID;\n                options.block.Order = this.props.options.block.Order;\n                this.handleEditBlock(options);\n            }\n        }\n    });\n\n\n    render() {\n        const {flowOptions, allGroups, allBlocks, blockOptions, block} = getInitialVariables(this.props.options, 'Solutions');\n        const {getFieldDecorator} = this.props.form;\n\n        const buttons = ButtonsForm(this.handleNewBlock, this.handleEditBlock, this.handleDeleteBlock, this.onSubmit, block);\n\n        return (\n            <Card style={{width: '100%'}} actions={buttons}>\n                <Form layout='horizontal'>\n\n                    <FormItem label=\"Show Top Results\"\n                              extra=\"Number of results you want to return (Best matches e.g. Clients, Candidates, etc.)\"\n                              {...this.props.options.layout}>\n                        {getFieldDecorator('showTop', {\n                            initialValue: block.Content.showTop,\n                            rules: [{\n                                required: true,\n                                message: \"Please set how many solutions to return\",\n                            }],\n                        })(\n                            <Input min=\"1\" type=\"number\" placeholder=\"Ex: 5\"/>\n                        )}\n                    </FormItem>\n\n                    <ScannedDatabaseFormItem FormItem={FormItem} block={block}\n                                          getFieldDecorator={getFieldDecorator}\n                                          layout={this.props.options.layout}\n                                          databasesList={this.props.databasesList}/>\n\n                    <ActionFormItem FormItem={FormItem} blockOptions={blockOptions} block={block}\n                                    setStateHandler={(state) => this.setState(state)}\n                                    getFieldDecorator={getFieldDecorator}\n                                    layout={this.props.options.layout}/>\n\n                    <ShowGoToBlockFormItem FormItem={FormItem} allBlocks={allBlocks} block={block}\n                                           showGoToBlock={this.state.showGoToBlock}\n                                           getFieldDecorator={getFieldDecorator}\n                                           layout={this.props.options.layout}/>\n\n                    <ShowGoToGroupFormItem FormItem={FormItem} allGroups={allGroups} groupName={this.state.groupName}\n                                           showGoToGroup={this.state.showGoToGroup}\n                                           getFieldDecorator={getFieldDecorator}\n                                           layout={this.props.options.layout}/>\n\n                    <AfterMessageFormItem FormItem={FormItem} block={block}\n                                          getFieldDecorator={getFieldDecorator}\n                                          layout={this.props.options.layout}/>\n\n                </Form>\n            </Card>\n        );\n    }\n}\n\nexport default Form.create()(Solutions);\n\n","import React, {Component} from 'react';\n\nimport {Form, Input, Modal, Button} from 'antd';\nimport store from '../../../store/store';\n\nconst FormItem = Form.Item;\nconst layout = {\n    labelCol: {span: 6},\n    wrapperCol: {span: 14}\n};\n\nclass NewDataCategoryModal extends Component {\n\n    state = {\n\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n\n            }\n        });\n    };\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <Modal width={500}\n                   style={{ top: 70 }}\n                   title=\"Add New Data Category\"\n                   visible={this.props.visible}\n                   onCancel={this.props.closeModal}\n                   destroyOnClose={true}\n                   footer={null}\n            >\n                <Form layout='horizontal'\n                      onSubmit={this.handleSubmit}>\n                    <FormItem label=\"Name\"\n                              {...layout}>\n                        {getFieldDecorator('name', {\n                            rules: [{\n                                required: true,\n                                message: \"Please choose a name\",\n                            }],\n                        })(\n                            <Input type=\"text\" placeholder=\"Ex: Job Titles\"/>\n                        )}\n                    </FormItem>\n                    <FormItem {...layout}>\n                        <Button type=\"primary\" htmlType=\"submit\">Create</Button>\n                    </FormItem>\n                </Form>\n\n            </Modal>\n        );\n    }\n}\n\n\nexport default Form.create()(NewDataCategoryModal);\n","import React, {Component} from 'react';\n\nimport {http} from \"../../../../../../../helpers\";\n\nimport {Icon, Modal, Tabs} from 'antd';\n\nimport UserInput from \"../CardTypes/UserInput\";\nimport Question from \"../CardTypes/Question\";\nimport FileUpload from \"../CardTypes/FileUpload\";\nimport Solutions from \"../CardTypes/Solutions\";\nimport NewDataCategoryModal from \"../../../../../../../components/Modals/NewDataCategoryModal/NewDataCategoryModal\";\n\nconst TabPane = Tabs.TabPane;\n\nclass NewBlockModal extends Component {\n\n    state = {\n        layout: {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14}\n        },\n        flowOptions: {},\n        allBlocks: [],\n        allGroups: [],\n        currentGroup: null,\n    };\n\n    componentDidMount() {\n        http.get(`/assistant/flow/options`)\n            .then(res => this.setState({flowOptions: res.data.data}))\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            allBlocks: nextProps.allBlocks,\n            allGroups: nextProps.allGroups,\n            currentGroup: nextProps.currentGroup,\n        })\n    }\n\n    handleNewBlock = (newBlock) => {\n        if (newBlock)\n            this.props.handleAddBlock(newBlock);\n        this.props.closeModal();\n    };\n\n    onChangeTab = (currentTab) => this.setState({currentTab});\n\n    render() {\n        return (\n            <div>\n                <Modal width={800}\n                       title=\"Add New Block\"\n                       visible={this.props.visible}\n                       onCancel={this.props.closeModal}\n                       destroyOnClose={true}\n                       footer={null}>\n\n                    <Tabs type=\"card\" onChange={this.onChangeTab}>\n                        <TabPane tab={<span><Icon type=\"form\"/>User Input</span>}\n                                 key=\"UserInput\">\n                            <UserInput options={this.state}\n                                       addNewDataCategory={this.showNewDataCategoryModal}\n                                       handleNewBlock={this.handleNewBlock}/>\n                        </TabPane>\n\n                        <TabPane tab={<span><Icon type=\"question-circle\"/>Question</span>}\n                                 key=\"Question\">\n                            <Question options={this.state}\n                                      handleNewBlock={this.handleNewBlock}/>\n                        </TabPane>\n\n                        <TabPane tab={<span><Icon type=\"file-add\"/>File Upload</span>}\n                                 key=\"FileUpload\">\n                            <FileUpload options={this.state}\n                                        handleNewBlock={this.handleNewBlock}/>\n                        </TabPane>\n\n                        <TabPane tab={<span><Icon type=\"tag\"/>Solutions</span>}\n                                 key=\"Solutions\">\n                            <Solutions options={this.state}\n                                       handleNewBlock={this.handleNewBlock}\n                                       databasesList={this.props.databasesList}/>\n                        </TabPane>\n\n                    </Tabs>\n                </Modal>\n\n\n            </div>\n\n\n\n        );\n    }\n}\n\n\nexport default NewBlockModal\n","import React, {Component} from 'react';\n\nimport {http} from \"../../../../../../../helpers\";\n\nimport {Modal} from 'antd';\nimport UserInput from \"../CardTypes/UserInput\";\nimport Question from \"../CardTypes/Question\";\nimport FileUpload from \"../CardTypes/FileUpload\";\nimport Solutions from \"../CardTypes/Solutions\";\n\nclass EditBlockModal extends Component {\n\n    state = {\n        layout: {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14}\n        },\n        flowOptions: [],\n        allBlocks: [],\n        allGroups: [],\n        currentGroup: null\n    };\n\n    componentDidMount() {\n        http.get(`/assistant/flow/options`)\n            .then(res => this.setState({flowOptions: res.data.data}))\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({\n            block: nextProps.block,\n\n            allBlocks: nextProps.allBlocks,\n            allGroups: nextProps.allGroups,\n            currentGroup: nextProps.currentGroup\n        })\n    }\n\n    handleEditBlock = (edittedBlock) => {\n        if (edittedBlock)\n            this.props.handleEditBlock(edittedBlock);\n        this.props.closeModal();\n    };\n\n    render() {\n        return (\n            <Modal width={800}\n                   title=\"Edit Block\"\n                   visible={this.props.visible}\n                   onCancel={this.props.closeModal}\n                   destroyOnClose={true}\n                   footer={null}>\n\n                {this.props.block.Type === \"User Input\" ?\n                    <UserInput options={this.state} handleEditBlock={this.handleEditBlock}\n                               handleDeleteBlock={this.props.handleDeleteBlock}/> : null}\n                {this.props.block.Type === \"Question\" ?\n                    <Question options={this.state} handleEditBlock={this.handleEditBlock}\n                              handleDeleteBlock={this.props.handleDeleteBlock}/> : null}\n                {this.props.block.Type === \"File Upload\" ?\n                    <FileUpload options={this.state} handleEditBlock={this.handleEditBlock}\n                                handleDeleteBlock={this.props.handleDeleteBlock}/> : null}\n                {this.props.block.Type === \"Solutions\" ?\n                    <Solutions options={this.state} handleEditBlock={this.handleEditBlock}\n                               handleDeleteBlock={this.props.handleDeleteBlock}\n                               databasesList={this.props.databasesList}/> : null}\n\n            </Modal>\n        );\n    }\n}\n\n\nexport default EditBlockModal\n","import React, {Component} from 'react';\n\nimport styles from \"./Blocks.module.less\";\nimport {Button, Form, Modal} from \"antd\";\n\nimport Block from \"./Block/Block\";\nimport {DragDropContext, Draggable, Droppable} from 'react-beautiful-dnd';\nimport NewBlockModal from \"./Modals/NewBlockModal\";\nimport EditBlockModal from \"./Modals/EditBlockModal1\";\n\n// a little function to help us with reordering the result\nconst reorder = (list, startIndex, endIndex) => {\n    const result = Array.from(list);\n    const [removed] = result.splice(startIndex, 1);\n    result.splice(endIndex, 0, removed);\n\n    return result;\n};\n\nconst getItemStyle = draggableStyle => ({margin: `0 0 8px 0`, ...draggableStyle});\nconst confirm = Modal.confirm;\n\nclass Blocks extends Component {\n\n    state = {\n        addBlockVisible: false,\n        editBlockVisible: false,\n        deleteBlockVisible: false,\n        blocks: [],\n        edittedBlock: {},\n        deletedBlock: {content: {}}\n    };\n\n    constructor(props) {\n        super(props);\n        this.onDragEnd = this.onDragEnd.bind(this);\n    }\n\n    onDragEnd(result) {\n        // dropped outside the list\n        if (!result.destination) return;\n\n        let blocks = reorder(this.state.blocks, result.source.index, result.destination.index);\n        for (const i in blocks) {\n            blocks[i].Order = Number(i) + 1;\n        }\n        this.setState({blocks});\n        // send a request to the server\n        this.props.reorderBlocks(blocks, this.props.currentGroup.id)\n    }\n\n    componentWillReceiveProps(nextProps) {\n        // This handles when updating the selected group to show its blocks\n        if (nextProps.currentGroup !== this.state.currentGroup && nextProps.currentGroup.blocks){\n            this.setState({blocks: nextProps.currentGroup.blocks})\n        }\n    }\n\n\n    ///////////////////////////////////////////////////\n\n    // ADD BLOCK MODAL CONFIGS\n    showAddBlockModal = () => this.setState({addBlockVisible: true});\n    closeAddBlockModal = () => this.setState({addBlockVisible: false});\n    handleAddBlock = (newBlock) => this.props.addBlock(newBlock, this.props.currentGroup.id);\n\n\n    // EDIT BLOCK MODAL CONFIGS\n    // this called from block.js when you click on edit block button\n    editBlock = (edittedBlock) => this.setState({edittedBlock, editBlockVisible: true});\n    closeEditBlockModal = () => this.setState({edittedBlock: {}, editBlockVisible: false});\n    handleEditBlock = (edittedBlock) => this.props.editBlock(edittedBlock, this.props.currentGroup.id);\n\n    // DELETE BLOCK MODAL CONFIGS\n    // this called from block.js when you click on delete block button\n    deleteBlock = (deletedBlock) => confirm({\n        title: `Delete block with type: ${deletedBlock.Type}`,\n        content: `If you click OK, this block will be deleted forever`,\n        onOk: () => this.handleDeleteBlock(deletedBlock)\n    });\n\n    handleDeleteBlock = (deletedBlock) => {\n        this.props.deleteBlock(deletedBlock, this.props.currentGroup.id);\n\n        // Remove the deletedBlock\n        let blocks = this.state.blocks.filter((block) => block.ID !== deletedBlock.ID);\n        // Update order\n        for (const i in blocks) blocks[i].Order = Number(i) + 1;\n        this.setState({blocks});\n        // send a request to the server\n        this.props.reorderBlocks(blocks, this.props.currentGroup.id);\n        this.closeEditBlockModal()\n    };\n\n\n\n    render() {\n        return (\n            <div className={styles.Panel}>\n                <div className={styles.Panel_Header}>\n                    <div>\n                        <h3>{this.props.currentGroup.name} Blocks</h3>\n                    </div>\n                    <div>\n                        <Button className={styles.Panel_Header_Button} type=\"primary\" icon=\"plus\"\n                                onClick={this.showAddBlockModal} disabled={!this.props.currentGroup.id}>\n                            Add Block\n                        </Button>\n                    </div>\n                </div>\n\n                <div className={styles.Panel_Body}>\n                    <div style={{height: \"100%\", width: '100%', overflowY: 'auto'}}>\n\n                        <DragDropContext onDragEnd={this.onDragEnd}>\n                            <Droppable droppableId=\"droppable\">\n                                {(provided) => (\n                                    <div ref={provided.innerRef}>\n                                        {this.state.blocks.map((block, index) => (\n                                            <Draggable key={block.ID} draggableId={block.Order} index={index}>\n                                                {(provided) => (\n                                                    <div ref={provided.innerRef} {...provided.draggableProps}\n                                                         {...provided.dragHandleProps}\n                                                         style={getItemStyle(provided.draggableProps.style)}>\n                                                        <Block block={block}\n                                                               editBlock={this.editBlock}\n                                                               deleteBlock={this.deleteBlock}\n                                                               databasesList={this.props.databasesList}\n                                                        />\n                                                    </div>\n                                                )}\n                                            </Draggable>\n                                        ))}\n                                        {provided.placeholder}\n                                    </div>\n                                )}\n                            </Droppable>\n                        </DragDropContext>\n                    </div>\n                </div>\n\n                <NewBlockModal visible={this.state.addBlockVisible}\n                               handleAddBlock={this.handleAddBlock}\n                               closeModal={this.closeAddBlockModal}\n\n                               currentGroup={this.props.currentGroup}\n                               allBlocks={this.state.blocks}\n                               allGroups={this.props.allGroups}\n                               databasesList={this.props.databasesList}/>\n\n                <EditBlockModal visible={this.state.editBlockVisible}\n                                handleEditBlock={this.handleEditBlock}\n                                handleDeleteBlock={this.deleteBlock}\n                                closeModal={this.closeEditBlockModal}\n\n                                block={this.state.edittedBlock}\n                                currentGroup={this.props.currentGroup}\n                                allBlocks={this.state.blocks}\n                                allGroups={this.props.allGroups}\n                                databasesList={this.props.databasesList}/>\n            </div>\n        );\n    }\n}\n\nexport default Form.create()(Blocks);\n","import React, {Component} from 'react';\n\nimport Groups from \"./Groups/Groups\";\nimport Blocks from \"./Blocks/Blocks\";\nimport Header from \"../../../../../components/Header/Header\";\nimport {flowActions, databaseActions} from \"../../../../../store/actions\";\nimport connect from \"react-redux/es/connect/connect\";\nimport styles from \"./Flow.module.less\"\nclass Flow extends Component {\n\n    state = {\n        currentGroup: {blocks: []}\n    };\n\n    componentDidMount() {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(flowActions.fetchFlowRequest(assistant.ID));\n        this.props.dispatch(databaseActions.getDatabasesList())\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.blockGroups !== this.props.blockGroups)\n            nextProps.blockGroups.map((group) => {\n                if (group.id === this.state.currentGroup.id)\n                    this.setState({currentGroup: group})\n            })\n    }\n\n    selectGroup = (currentGroup) => this.setState({currentGroup});\n\n\n    // GROUPS\n    addGroup = (newGroup) => {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(flowActions.addGroupRequest({assistantID: assistant.ID, newGroup: newGroup}));\n    };\n\n    editGroup = (editedGroup) => {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(flowActions.editGroupRequest({assistantID: assistant.ID, editedGroup: editedGroup}));\n    };\n\n    deleteGroup = (deletedGroup) => {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(flowActions.deleteGroupRequest({assistantID: assistant.ID, deletedGroup: deletedGroup}));\n        this.setState({currentGroup: {blocks: []}});\n    };\n\n\n    // BLOCKS\n    addBlock = (newBlock, groupID) => {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(flowActions.addBlockRequest({newBlock, groupID, assistantID: assistant.ID}));\n    };\n\n    editBlock = (edittedBlock, groupID) => {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(flowActions.editBlockRequest({\n            edittedBlock,\n            groupID,\n            assistantID: assistant.ID,\n            currentBlocks: [...this.state.currentGroup.blocks]\n        }));\n    };\n\n    deleteBlock = (deletedBlock, groupID) => {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(flowActions.deleteBlockRequest({deletedBlock, groupID, assistantID: assistant.ID}));\n    };\n\n    reorderBlocks = (newBlocksOrder, groupID) => {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(flowActions.updateBlocksOrderRequest({newBlocksOrder, groupID, assistantID: assistant.ID}));\n    };\n\n    render() {\n        const {assistant} = this.props.location.state;\n\n        return (\n            <div style={{height: '100%'}}>\n                <Header display={assistant.Name}/>\n\n                <div className={styles.Panel_Body_Only}>\n                    <div style={{margin: '0 5px 0 0', width: '30%'}}>\n                        <Groups selectGroup={this.selectGroup}\n                                isLoading={this.props.isLoading}\n                                groupsList={this.props.blockGroups}\n                                addGroup={this.addGroup}\n                                editGroup={this.editGroup}\n                                deleteGroup={this.deleteGroup}/>\n                    </div>\n                    <div style={{margin: '0 0 0 5px', width: '70%'}}>\n                        <Blocks addBlock={this.addBlock}\n                                editBlock={this.editBlock}\n                                deleteBlock={this.deleteBlock}\n                                reorderBlocks={this.reorderBlocks}\n                                currentGroup={this.state.currentGroup}\n                                allGroups={this.props.blockGroups}\n                                databasesList={this.props.databasesList}/>\n                    </div>\n                </div>\n            </div>\n\n        );\n    }\n\n}\n\nfunction mapStateToProps(state) {\n    return {\n        blockGroups: state.flow.blockGroups,\n        isLoading: state.flow.isLoading,\n\n        addSuccessMsg: state.flow.addSuccessMsg,\n        editSuccessMsg: state.flow.editSuccessMsg,\n        deleteSuccessMsg: state.flow.deleteSuccessMsg,\n\n        isAddingGroup: state.flow.isAddingGroup,\n        isEditingGroup: state.flow.isEditingGroup,\n        isDeletingGroup: state.flow.isDeletingGroup,\n\n        isAddingBlock: state.flow.isAddingBlock,\n\n        databasesList: state.database.databasesList,\n\n    };\n}\n\n\nexport default connect(mapStateToProps)(Flow);\n","import React from \"react\";\nimport {Button, Form, Input} from \"antd\";\nimport {isEmpty} from \"lodash\";\n\nconst FormItem = Form.Item;\n\nclass ProfileDetails extends React.Component {\n\n    state= {\n        name: \"\",\n        email: \"\",\n        companyName: \"\"\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                this.props.saveProfileDetails(values);\n            }\n        });\n    };\n\n    componentWillReceiveProps(nextProps){\n        const data = nextProps.profileData;\n        if(!isEmpty(data)){\n            if(data.user && data.user.email !== this.state.email){\n                this.setState({\n                    name: data.user.Firstname + \" \" + data.user.Surname,\n                    email: data.user.Email,\n                    companyName: data.company.Name\n                });\n            }\n        }\n    }\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14}\n        };\n\n        return (\n            <Form onSubmit={this.handleSubmit}>\n                <FormItem\n                    label={\"Name:\"}\n                    extra={\"Enter your name here\"}\n                    {...formItemLayout}>\n                    {getFieldDecorator(\"name\", {\n                        initialValue: this.state.name,\n                        rules: [{\n                            required: true,\n                            message: \"Please enter your first and last name here\"\n                        }],\n                    })(\n                        <Input/>\n                    )}\n                </FormItem>\n\n                <FormItem\n                    label={\"Email:\"}\n                    extra={\"Enter your email here (For your security we have temporarily disabled this box)\"}\n                    {...formItemLayout}>\n                    {getFieldDecorator(\"email\", {\n                        initialValue: this.state.email,\n                        rules: [{\n                            required: true,\n                            message: \"Please enter a valid email\"\n                        }],\n                    })(\n                        <Input readOnly={true}/>\n                    )}\n                </FormItem>\n\n                <FormItem\n                    label={\"Company Name:\"}\n                    extra={\"Enter your company name here\"}\n                    {...formItemLayout}>\n                    {getFieldDecorator(\"companyName\", {\n                        initialValue: this.state.companyName,\n                        rules: [{\n                            required: true,\n                            message: \"Please enter your company name\"\n                        }],\n                    })(\n                        <Input/>\n                    )}\n                </FormItem>\n\n                <br/>\n\n                <div style={{textAlign: \"center\"}}><Button htmlType={\"submit\"}\n                                                           className={\"ant-btn-primary\"}>Update</Button>\n                </div>\n            </Form>\n        )\n    }\n}\n\nexport default Form.create()(ProfileDetails)","import React from \"react\";\nimport {Button, Form, Input} from \"antd\";\nimport {isEmpty} from \"lodash\";\n\nconst FormItem = Form.Item;\n\nclass DataSettings extends React.Component {\n    state = {\n        newsletters: false,\n        statNotifications: false,\n        trackData: false,\n        techSupport: false,\n        accountSpecialist: false,\n        initialRender: false\n    };\n\n    static getDerivedStateFromProps(newProps, prevState){\n        if(prevState.initialRender){\n            return newProps\n        }\n\n        const data = newProps.profileData;\n        if(!isEmpty(data)){\n            if(data.userSettings){\n                return ({\n                    newsletters: data.newsletters,\n                    statNotifications: data.userSettings.UserInputNotifications,\n                    trackData: data.userSettings.TrackingData,\n                    techSupport: data.userSettings.TechnicalSupport,\n                    accountSpecialist: data.userSettings.AccountSpecialist,\n                    initialRender: true\n                })\n            } else {\n                return ({\n                    newsletters: data.newsletters,\n                    statNotifications: false,\n                    trackData: false,\n                    techSupport: false,\n                    accountSpecialist: false,\n                    initialRender: true\n                })\n            }\n        }\n        return ({\n            newsletters: false,\n            statNotifications: false,\n            trackData: false,\n            techSupport: false,\n            accountSpecialist: false,\n            initialRender: false\n        })\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n        console.log(\"VALUES: \", values)\n            if (!err) {\n                this.props.saveDataSettings(values);\n            }\n        });\n    };\n\n    handleChange = (e) => {\n        let name = e.target.name;\n        let checked = e.target.checked;\n        this.setState({[name]: checked});\n    };\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14}\n        };\n\n        return(\n            <Form onSubmit={this.handleSubmit}>\n                <h2>Data Sharing Settings</h2>\n                <p>Any data that you collect, process and store on TheSearchBase platform is kept\n                    secure\n                    and confidential at all times. The data that you collect is data that enables\n                    our\n                    software to work at its optimum level.</p>\n                <h4>This part of the website enables you to control what settings you may share with\n                    us.</h4>\n\n                <br/>\n\n                <FormItem\n                    label={\"Newsletters:\"}\n                    extra={\"We would like to keep you updated with the latest software updates and features available to\\n\" +\n                            \"you, If you decide to not subscribe you may miss on important features and announcements.\"}\n                    {...formItemLayout}>\n                    {getFieldDecorator(\"newsletters\", {\n                        initialValue: this.state.newsletters,\n                    })(\n                        <Input type={\"checkbox\"} name={\"newsletters\"} onChange={this.handleChange} checked={this.state.newsletters}/>\n                    )}\n                </FormItem>\n\n                <br/>\n\n                <FormItem\n                    label={\"New Users Counter:\"}\n                    extra={\"If allowed we will send you the number of new user records your assistants \" +\n                              \"have stored every 12 hours through email.\"}\n                    {...formItemLayout}>\n                    {getFieldDecorator(\"statNotifications\", {\n                        initialValue: this.state.statNotifications,\n                    })(\n                        <Input type={\"checkbox\"} name={\"statNotifications\"} onChange={this.handleChange} checked={this.state.statNotifications}/>\n                    )}\n                </FormItem>\n\n                <br/>\n\n                <strong>Erasing data</strong>\n                <p>If you decide to stop using our platform, we will simply delete\n                    your information after a year of inactivity.</p>\n\n                <br/>\n\n                <FormItem\n                    label={\"Tracking Data:\"}\n                    extra={\"We do not in any way track your information for marketing purposes. However we would recommend \" +\n                    \"allowing us to contact you if we see that there are ways we could enhance your bot or use of our software.\"}\n                    {...formItemLayout}>\n                    {getFieldDecorator(\"trackData\", {\n                        initialValue: this.state.trackData,\n                    })(\n                        <Input type={\"checkbox\"} name={\"trackData\"} onChange={this.handleChange} checked={this.state.trackData}/>\n                    )}\n                </FormItem>\n\n                <br/>\n\n                <FormItem\n                    label={\"Technical Support:\"}\n                    extra={\"Let our team view your errors and problems in order for us to solve your issues.\"}\n                    {...formItemLayout}>\n                    {getFieldDecorator(\"techSupport\", {\n                        initialValue: this.state.techSupport,\n                    })(\n                        <Input type={\"checkbox\"} name={\"techSupport\"} onChange={this.handleChange} checked={this.state.techSupport}/>\n                    )}\n                </FormItem>\n\n                <br/>\n\n                <FormItem\n                    label={\"Account Specialist:\"}\n                    extra={\"Let our team contact you to help make recommendations as to how you can make your bots more \" +\n                    \"successful and ways to collect more valuable data. If you don't have a sales specialist, we recommend \" +\n                    \"you enable this so we can help you make the most of our software.\"}\n                    {...formItemLayout}>\n                    {getFieldDecorator(\"accountSpecialist\", {\n                        initialValue: this.state.accountSpecialist,\n                    })(\n                        <Input type={\"checkbox\"} name={\"accountSpecialist\"} onChange={this.handleChange} checked={this.state.accountSpecialist}/>\n                    )}\n                </FormItem>\n\n                <br/>\n\n                <div style={{textAlign: \"center\"}}><Button htmlType={\"submit\"}\n                                                           className={\"ant-btn-primary\"}>Update</Button>\n                </div>\n            </Form>\n        )\n    }\n}\n\nexport default Form.create()(DataSettings)","import React from 'react';\nimport {Form, Button, message, Tabs} from \"antd\";\nimport {connect} from 'react-redux';\nimport {isEmpty} from \"lodash\";\n\nimport styles from \"./Profile.module.less\"\nimport ProfileDetails from \"./profileComponents/ProfileDetails/ProfileDetails\";\nimport DataSettings from \"./profileComponents/DataSettings/DataSettings\";\n\nimport {profileActions} from \"../../../../store/actions/profile.actions\";\nconst TabPane = Tabs.TabPane;\n\nclass Profile extends React.Component {\n    // state = {\n    //     password: {\n    //         old: \"\",\n    //         new: \"\",\n    //         repeat: \"\"\n    //     }\n    // };\n\n    saveProfileDetails = (values) => {\n        this.props.dispatch(profileActions.saveProfileDetails(values));\n    };\n\n    saveDataSettings = (values) => {\n        this.props.dispatch(profileActions.saveDataSettings(values));\n    };\n\n    componentDidMount() {\n        this.props.dispatch(profileActions.getProfile());\n    }\n\n    render() {\n\n        return (\n            <div style={{height: '100%'}}>\n                <div className={styles.Panel}>\n                    <div className={styles.Panel_Header}>\n                        <div>\n                            <h3>User Profile</h3>\n                            <p>Here you can edit your details and how we handle your data.</p>\n                        </div>\n                    </div>\n\n                    <div className={styles.Panel_Body} style={{overflowY: \"auto\"}}>\n                        <Tabs defaultActiveKey={\"1\"}>\n                            <TabPane tab={\"Conversation Details\"} key={\"1\"}>\n                                <ProfileDetails profileData={this.props.profileData} saveProfileDetails={this.saveProfileDetails}/>\n                            </TabPane>\n\n                            <TabPane tab={\"Data Settings\"} key={\"2\"}>\n                                <DataSettings profileData={this.props.profileData} saveDataSettings={this.saveDataSettings}/>\n                            </TabPane>\n\n                            {/*<TabPane tab={\"Change Password\"} key={\"3\"}>*/}\n\n                                {/*<Form onSubmit={this.handleSubmit}>*/}\n                                    {/*<ProfileInput title={\"Old Password\"} name=\"password.old\"*/}\n                                                  {/*rules={{*/}\n                                                      {/*required: true,*/}\n                                                      {/*message: \"Please enter your old password\"*/}\n                                                  {/*}}*/}\n                                                  {/*getFieldDecorator={getFieldDecorator} formItemLayout={formItemLayout}*/}\n                                                  {/*handleChange={this.handleChange}*/}\n                                                  {/*form={this.props.form}*/}\n                                                  {/*description={\"Enter your old password here\"}*/}\n                                    {/*/>*/}\n\n                                    {/*<ProfileInput title={\"New Password\"} name=\"password.new\"*/}\n                                                  {/*rules={{*/}\n                                                      {/*required: true,*/}\n                                                      {/*message: \"Please enter your new password\"*/}\n                                                  {/*}}*/}\n                                                  {/*getFieldDecorator={getFieldDecorator} formItemLayout={formItemLayout}*/}\n                                                  {/*handleChange={this.handleChange}*/}\n                                                  {/*form={this.props.form}*/}\n                                                  {/*description={\"Enter your new password here\"}*/}\n                                    {/*/>*/}\n\n                                    {/*<ProfileInput title={\"Repeat Password\"} name=\"password.repeat\"*/}\n                                                  {/*rules={{*/}\n                                                      {/*required: true,*/}\n                                                      {/*message: \"Passwords must match\"*/}\n                                                  {/*}}*/}\n                                                  {/*getFieldDecorator={getFieldDecorator} formItemLayout={formItemLayout}*/}\n                                                  {/*handleChange={this.handleChange}*/}\n                                                  {/*form={this.props.form}*/}\n                                                  {/*description={\"Enter your new password again here\"}*/}\n                                    {/*/>*/}\n\n                                    {/*<br/>*/}\n\n                                    {/*<div style={{textAlign: \"center\"}}><Button htmlType={\"submit\"}*/}\n                                                                               {/*className={\"ant-btn-primary\"}>Update</Button>*/}\n                                    {/*</div>*/}\n                                {/*</Form>*/}\n                            {/*</TabPane>*/}\n                        </Tabs>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        profileData: state.profile.profile\n    };\n}\n\nexport default connect(mapStateToProps)(Form.create()(Profile));\n","import React from 'react';\nimport {Button, Modal, Form, Input, Select, Tabs, Icon, Upload} from \"antd\";\nimport {isEmpty} from \"lodash\";\n\nconst FormItem = Form.Item;\nconst TabPane = Tabs.TabPane;\nconst OptGroup = Select.OptGroup;\nconst Option = Select.Option;\n\nclass UserModal extends React.Component {\n\n    state = {\n        roles: [\"Admin\", \"User\"]\n    };\n\n    handleSave = () => this.props.form.validateFields((err, values) => {\n        const formData = new FormData();\n        for (let key in values) {\n            // skip loop if the property is from prototype\n            if (!values.hasOwnProperty(key)) continue;\n\n            formData.append(key, values[key]);\n        }\n        this.props.handleSave(formData);\n    });\n\n    closeModal = () => {\n        this.props.handleCancel();\n    };\n\n    render() {\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        };\n        const {getFieldDecorator} = this.props.form;\n\n        return (\n            <Modal\n                width={800}\n                title=\"Add New User\"\n                destroyOnClose={true}\n                visible={this.props.visible}\n                onOk={this.props.handleSave}\n                onCancel={this.props.handleCancel}\n                footer={[\n                    <Button key=\"Cancel\" onClick={this.closeModal}>Cancel</Button>,\n                    <Button key=\"submit\" type=\"primary\" onClick={this.handleSave}>{\"Add\"}</Button>\n                ]}>\n                <Form layout='horizontal'>\n                    <FormItem\n                        label=\"User Name\"\n                        extra=\"Enter the name of the user\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('name', {\n                            rules: [{\n                                required: true,\n                                message: 'Please enter your the new user\\'s name',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: John Smith, Wesley Snipes\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem\n                        label=\"User Email\"\n                        extra=\"The email of the User. When added they will receive a random generated password which they can change later\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('email', {\n                            rules: [{\n                                required: true,\n                                message: 'Please enter the User\\'s email',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: john_smith@mycompany.com\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem\n                        label=\"User Type\"\n                        extra=\"The type defines what permissions the User will have\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('type', {\n                            initialValue: \"User\",\n                            rules: [{\n                                required: true,\n                                message: 'Please select what User you are adding',\n                            }],\n                        })(\n                            <Select onChange={this.changeTypeHandler}>\n                                {\n                                    this.state.roles.map(role => (\n                                            <Option key={role} value={role}>{role}</Option>\n                                        )\n                                    )\n                                }\n                            </Select>\n                        )}\n                    </FormItem>\n                </Form>\n            </Modal>\n        );\n    }\n}\n\nexport default Form.create()(UserModal)","import React from \"react\";\n\nimport {Button, Form, Input, InputNumber, Popconfirm, Table,} from 'antd';\nimport {isEmpty} from \"lodash\";\nimport UserModal from \"./UserModal/UserModal\";\nimport styles from \"./UsersDisplay.less\"\n\n\nconst data = [];\nconst FormItem = Form.Item;\nconst EditableContext = React.createContext();\n\nconst EditableRow = ({form, index, ...props}) => (\n    <EditableContext.Provider value={form}>\n        <tr {...props} />\n    </EditableContext.Provider>\n);\n\nconst EditableFormRow = Form.create()(EditableRow);\n\nclass EditableCell extends React.Component {\n    getInput = () => {\n        if (this.props.inputType === 'number') {\n            return <InputNumber/>;\n        }\n        return <Input/>;\n    };\n\n    render() {\n        const {\n            editing,\n            dataIndex,\n            title,\n            inputType,\n            record,\n            index,\n            ...restProps\n        } = this.props;\n        return (\n            <EditableContext.Consumer>\n                {(form) => {\n                    const {getFieldDecorator} = form;\n                    return (\n                        <td {...restProps}>\n                            {editing ? (\n                                <FormItem style={{margin: 0}}>\n                                    {getFieldDecorator(dataIndex, {\n                                        rules: [{\n                                            required: true,\n                                            message: `Please Input ${title}!`,\n                                        }],\n                                        initialValue: record[dataIndex],\n                                    })(this.getInput())}\n                                </FormItem>\n                            ) : restProps.children}\n                        </td>\n                    );\n                }}\n            </EditableContext.Consumer>\n        );\n    }\n}\n\nclass UsersDisplay extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {data, editingKey: '', UserModal: false};\n        this.columns = [\n            {\n                title: 'Name',\n                dataIndex: 'Fullname',\n                width: '31%',\n                editable: true,\n            },\n            {\n                title: 'Email',\n                dataIndex: 'Email',\n                width: '35%',\n                editable: true,\n            },\n            {\n                title: 'Role',\n                dataIndex: 'RoleName',\n                width: '18%',\n                editable: true,\n            },\n            {\n                title: 'Action',\n                dataIndex: 'operation',\n                render: (text, record) => {\n                    const editable = this.isEditing(record);\n                    return (\n                        <div>\n                            {editable ? (\n                                <span>\n                  <EditableContext.Consumer>\n                    {form => (\n                        <a\n                            href=\"javascript:;\"\n                            onClick={() => this.handleEdit(form, record.key)}\n                            style={{marginRight: 8}}\n                        >\n                            Save\n                        </a>\n                    )}\n                  </EditableContext.Consumer>\n                  <Popconfirm\n                      title=\"Sure to cancel?\"\n                      onConfirm={() => this.cancel(record.key)}\n                  >\n                    <a>Cancel</a>\n                  </Popconfirm>\n                </span>\n                            ) : (\n                                <>\n                                    <a style={{marginRight:\"7px\"}} onClick={() => this.edit(record.key)}>Edit</a>\n                                    <a onClick={() => this.delete(record.key)}>Delete</a>\n                                </>\n                            )}\n                        </div>\n                    );\n                },\n            },\n        ];\n    }\n\n    componentWillReceiveProps(nextProps) {\n        let data = nextProps.users;\n        if (!isEmpty(data)) {\n            if (data !== this.state.data) {\n                //add records needed by the columns\n                // needs key\n                data = data.map((record, index) => {\n                    data[index][\"key\"] = data[index][\"ID\"];\n                    return record\n                });\n\n                // cant put 2 in 1\n                data = data.map((record, index) => {\n                    data[index][\"Fullname\"] = data[index][\"Firstname\"] + \" \" + data[index][\"Surname\"];\n                    return record\n                });\n\n                // cant go down a . when editing\n                data = data.map((record, index) => {\n                    data[index][\"RoleName\"] = data[index][\"Role\"][\"Name\"];\n                    return record\n                });\n\n                this.setState({\n                    data: data\n                });\n            }\n        }\n    }\n\n    isEditing = record => record.key === this.state.editingKey;\n\n    cancel = () => {\n        this.setState({editingKey: ''});\n    };\n\n    handleAdd = (form) => {\n        this.props.addUser(form);\n        this.setState({UserModal: false})\n    };\n\n    handleEdit(form, key) {\n        form.validateFields((error, row) => {\n            if (error) {\n                return;\n            }\n            console.log(\"row\", row);\n            const newData = [...this.state.data];\n            const index = newData.findIndex(item => key === item.key);\n            if (index > -1) {\n                const item = newData[index];\n                const newRecord = {...item, ...row};\n\n                console.log(\"item\", item)\n                console.log(\"newRecord\", newRecord)\n                this.props.editUser(newRecord);\n\n                newData.splice(index, 1, newRecord);\n                this.setState({data: newData, editingKey: ''});\n            } else {\n                newData.push(row);\n                this.setState({data: newData, editingKey: ''});\n            }\n        });\n    }\n\n    edit(key) {\n        this.setState({editingKey: key});\n    }\n\n    delete = (key) => {\n        this.props.deleteUser(this.state.data.filter(record => record[\"key\"] === key)[0]);\n    };\n\n    showUserModal = () => this.setState({UserModal: true});\n\n    handleUserCancel = () => this.setState({UserModal: false});\n\n    render() {\n        const components = {\n            body: {\n                row: EditableFormRow,\n                cell: EditableCell,\n            },\n        };\n\n        const columns = this.columns.map((col) => {\n            if (!col.editable) {\n                return col;\n            }\n            return {\n                ...col,\n                onCell: record => ({\n                    record,\n                    inputType: col.dataIndex === 'age' ? 'number' : 'text',\n                    dataIndex: col.dataIndex,\n                    title: col.title,\n                    editing: this.isEditing(record),\n                }),\n            };\n        });\n\n        return (\n            <>\n                <UserModal\n                    visible={this.state.UserModal}\n                    handleCancel={this.handleUserCancel}\n                    handleSave={this.handleAdd}\n                />\n                <div style={{textAlign: \"right\"}}>\n                    <Button className={styles.Panel_Header_Button} style={{marginBottom: \"10px\"}} type=\"primary\"\n                            icon=\"plus\"\n                            onClick={this.showUserModal}>\n                        Add User\n                    </Button>\n                </div>\n                <Table\n                    components={components}\n                    bordered\n                    dataSource={this.state.data}\n                    columns={columns}\n                    rowClassName=\"editable-row\"\n                />\n            </>\n        );\n    }\n}\n\nexport default UsersDisplay;","import React from \"react\";\nimport styles from \"./UsersManagement.module.less\";\nimport {Tabs, Modal} from \"antd\";\nimport connect from \"react-redux/es/connect/connect\";\nimport {usersManagementActions} from \"../../../../store/actions\";\nimport UsersDisplay from \"./UsersDisplay/UsersDisplay\";\n\nconst TabPane = Tabs.TabPane;\nconst confirm = Modal.confirm;\n\n\nclass UsersManagement extends React.Component {\n\n    componentDidMount() {\n        this.props.dispatch(usersManagementActions.getUsers());\n    }\n\n    addUser = (user) => {\n        this.props.dispatch(usersManagementActions.addUser({user:user}));\n    };\n\n    editUser = (user) => {\n        this.props.dispatch(usersManagementActions.editUser({user:user}));\n    };\n\n    deleteUser = (user) => {\n        confirm({\n            title: `Delete user confirmation`,\n            content: `If you click OK, this user will be deleted and its associated details forever`,\n            onOk: () => {\n                this.props.dispatch(usersManagementActions.deleteUser({user:user}));\n            }\n        });\n    };\n\n    render () {\n        return (\n            <div style={{height: '100%'}}>\n                <div className={styles.Panel}>\n                    <div className={styles.Panel_Header}>\n                        <div>\n                            <h3>Users Management</h3>\n                            <p>Here you can edit other users under your company and what permissions they have.</p>\n                        </div>\n                    </div>\n\n                    <div className={styles.Panel_Body} style={{overflowY: \"auto\"}}>\n                        <Tabs defaultActiveKey={\"1\"}>\n                            <TabPane tab={\"Users\"} key={\"1\"}>\n                                <UsersDisplay\n                                    users={this.props.usersData.users}\n                                    addUser={this.addUser}\n                                    editUser={this.editUser}\n                                    deleteUser={this.deleteUser}\n                                />\n                            </TabPane>\n\n                            <TabPane tab={\"Permissions\"} key={\"2\"}>\n                                Coming soon...\n                            </TabPane>\n                        </Tabs>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        usersData: state.usersManagement.usersList\n    };\n}\n\nexport default connect(mapStateToProps)(UsersManagement)","import React from 'react';\nimport {Button, Modal, Form, Input, Select, Tabs, Icon, Upload} from \"antd\";\nimport {isEmpty} from \"lodash\";\n\nconst FormItem = Form.Item;\nconst TabPane = Tabs.TabPane;\nconst OptGroup = Select.OptGroup;\nconst Option = Select.Option;\n\nclass SolutionModal extends React.Component {\n\n    state = {\n        connectionType: \"none\",\n        uploadFile: undefined\n    };\n\n    handleSave = () => this.props.form.validateFields((err, values) => {\n        if (err || (this.state.uploadFile === undefined && !this.props.edit)){\n            return false;\n        }\n        values[\"uploadFile\"] = this.state.uploadFile;\n        const formData = new FormData();\n        for (let key in values) {\n            // skip loop if the property is from prototype\n            if (!values.hasOwnProperty(key)) continue;\n\n            formData.append(key, values[key]);\n        }\n        this.props.handleSave(formData, this.props.edit);\n    });\n\n    changeTypeHandler = (e) => {\n        if (e === \"RDB XML File Export\") {\n            this.setState({connectionType: \"fileUpload\"});\n        }\n        else if (e === \"Bullhorn\" || e === \"RDB\") {\n            this.setState({connectionType: \"CRMConnection\"});\n        } else {\n            this.setState({connectionType: \"none\"});\n        }\n    };\n\n    onFileChange = (e) => {\n      const file = e.target.files[0];\n      this.setState({uploadFile: file})\n    };\n\n    componentWillReceiveProps(){\n        if(!this.props.visible){\n            this.setState({uploadFile: undefined, connectionType: \"none\"});\n            this.changeTypeHandler(\"none\");\n        }\n    }\n\n    closeModal = () => {\n        this.props.handleCancel();\n    };\n\n    render() {\n        const formItemLayout = {\n            labelCol: {span: 6},\n            wrapperCol: {span: 14},\n        };\n        const {getFieldDecorator} = this.props.form;\n\n        const solutionExists = this.props.edit;\n        if(solutionExists && this.state.connectionType === \"none\"){\n            this.changeTypeHandler(this.props.solutionToEdit.Solution.Type);\n        }\n        return (\n            <Modal\n                width={800}\n                title=\"Create New Solution\"\n                destroyOnClose={true}\n                visible={this.props.visible}\n                onOk={this.props.handleSave}\n                onCancel={this.props.handleCancel}\n                footer={[\n                    <Button key=\"Cancel\" onClick={this.closeModal}>Cancel</Button>,\n                    <Button key=\"submit\" type=\"primary\" onClick={this.handleSave}>\n                        {solutionExists ? \"Update\" : \"Add\"}\n                    </Button>\n                ]}>\n                <Form layout='horizontal'>\n                    <FormItem\n                        label=\"Solution Name\"\n                        extra=\"Enter a name for your solution to easily identify it in the solution list\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('name', {\n                            initialValue: solutionExists ? this.props.solutionToEdit.Solution.Name : \"\",\n                            rules: [{\n                                required: true,\n                                message: 'Please enter your solution name',\n                            }],\n                        })(\n                            <Input placeholder=\"Ex: Jobs file, Bullhorn connection\"/>\n                        )}\n                    </FormItem>\n\n                    <FormItem\n                        label=\"Solution Type\"\n                        extra=\"The type of File or CRM you want to connect\"\n                        {...formItemLayout}>\n                        {getFieldDecorator('type', {\n                            initialValue: solutionExists ? this.props.solutionToEdit.Solution.Type : \"\",\n                            rules: [{\n                                required: true,\n                                message: 'Please select what type of connection you are making',\n                            }],\n                        })(\n                            <Select onChange={this.changeTypeHandler}>\n                                <OptGroup label={\"File Upload\"}>\n                                    {\n                                        this.props.databaseFileTypes ?\n                                        this.props.databaseFileTypes.map(fileType => (\n                                                <Option key={fileType} value={fileType}>{fileType}</Option>\n                                            )\n                                        ) : null\n                                    }\n                                </OptGroup>\n                                {/*<OptGroup label={\"CRM Connection\"}>*/}\n                                    {/*{*/}\n                                        {/*this.props.databaseCRMTypes.map(CRMType => (*/}\n                                                {/*<Option key={CRMType} value={CRMType}>{CRMType}</Option>*/}\n                                            {/*)*/}\n                                        {/*)*/}\n                                    {/*}*/}\n                                {/*</OptGroup>*/}\n                            </Select>\n                        )}\n                    </FormItem>\n\n                    <Tabs activeKey={this.state.connectionType} tabBarStyle={{display:\"none\"}}>\n                        <TabPane tab={\"none\"} key={\"none\"}>\n                            <div style={{height: \"86px\", width:\"752px\"}}/>\n                        </TabPane>\n                        <TabPane tab={\"fileUpload\"} key={\"fileUpload\"}>\n                            {/*<Button htmlFor={\"fileUpload\"}><Icon type={\"upload\"}/>Click to Upload</Button>*/}\n                            <FormItem\n                                label= {solutionExists ? \"Upload File\" : \"Upload File\"}\n                                extra=\"Select the file you wish to upload\"\n                                {...formItemLayout}>\n\n                                <Input type={\"file\"} id={\"fileUpload\"} hidden={true} onChange={this.onFileChange}/>\n                                <Button onClick={() => {document.getElementById(\"fileUpload\").click()}}>\n                                    <Icon type={\"upload\"}/>Select File\n                                </Button> <label>{this.state.uploadFile ? this.state.uploadFile.name : \"No File Chosen\"}</label>\n\n                            </FormItem>\n                        </TabPane>\n                        <TabPane tab={\"CRMConnection\"} key={\"CRMConnection\"}>\n                            <FormItem\n                                label=\"CRM Connection Link\"\n                                extra=\"Please paste your connection link\"\n                                {...formItemLayout}>\n                                {getFieldDecorator('CRMLink', {\n                                    rules: [{\n                                        required: this.state.connectionType === \"CRMConnection\",\n                                        message: 'Please paste the connection link for your CRM provided to you by us or your CRM manager',\n                                    }],\n                                })(\n                                    <Input placeholder=\"\"/>\n                                )}\n                            </FormItem>\n                        </TabPane>\n                    </Tabs>\n                </Form>\n            </Modal>\n        );\n    }\n}\n\nexport default Form.create()(SolutionModal)","import React from 'react';\nimport styles from \"../Solutions.module.less\";\nimport {Avatar, Button, List, Skeleton, Spin} from \"antd\";\nimport SolutionModal from \"./SolutionModal/SolutionModal\";\n\nclass SolutionsDisplay extends React.Component{\n    state = {\n        SolutionModal: false,\n        editMode: false,\n        selectedSolutionToEdit: {}\n    };\n\n    handleSolution = (Solution, edit) => {\n        if(!edit){\n            this.props.addSolution(Solution);\n            this.setState({SolutionModal: false, editMode:false});\n        } else {\n            this.props.editSolution(Solution);\n            this.setState({SolutionModal: false, editMode:false});\n        }\n    };\n\n    handleSolutionCancel = () => this.setState({SolutionModal: false, editMode:false});\n\n    showSolutionModal = () => this.setState({SolutionModal: true});\n\n    selectSolution = (item) => {\n        this.setState({selectedSolutionToEdit: item, editMode:true, SolutionModal:true});\n    };\n\n    // ////// DELETE GROUP\n    // handleDeleteSolution = (deletedSolution) => {\n    //     this.props.deleteSolution(deletedSolution);\n    //     this.setState({editSolutionModal: false, selectedSolutionToEdit: {}});\n    // };\n\n    render (){\n        return(\n            <div className={styles.Panel}>\n                <div className={styles.Panel_Header}>\n                    <div>\n                        <h3>Solutions List</h3>\n                    </div>\n                    <div>\n                        <Button className={styles.Panel_Header_Button} type=\"primary\" icon=\"plus\"\n                                onClick={this.showSolutionModal}>\n                            Add Solution\n                        </Button>\n                    </div>\n                </div>\n\n\n                <div className={styles.Panel_Body}>\n                    {\n                        this.props.isLoading ?\n                            <Spin><Skeleton active={true}/></Spin>\n                            :\n                            <List\n                                itemLayout=\"horizontal\"\n                                dataSource={this.props.solutionsData}\n                                renderItem={item => (\n                                    <List.Item\n                                        actions={[<Button icon={'edit'}\n                                                          onClick={() => this.selectSolution(item)}/>]}>\n                                        <List.Item.Meta\n                                            onClick={() => this.props.selectSolution(item)}\n                                            className={styles.groupsList}\n                                            avatar={<Avatar icon=\"database\"\n                                                            style={{backgroundColor: '#9254de'}}/>}\n                                            title={item.Solution.Name}\n                                            description={item.description}\n                                        />\n                                    </List.Item>\n                                )}\n                            />\n                    }\n                </div>\n\n                <SolutionModal visible={this.state.SolutionModal}\n                                     handleCancel={this.handleSolutionCancel}\n                                     handleSave={this.handleSolution}\n                                     databaseFileTypes={this.props.databaseFileTypes}\n                                     databaseCRMTypes={this.props.databaseCRMTypes}\n                                     edit={this.state.editMode}\n                                     solutionToEdit={this.state.editMode ? this.state.selectedSolutionToEdit : {}}\n                        />\n            </div>\n        )\n    }\n}\n\nexport default SolutionsDisplay","import React from \"react\";\nimport {Button, Form, Select} from \"antd\";\nimport styles from \"../SolutionsSettings.module.less\";\nimport QueueAnim from \"rc-queue-anim\";\nimport {isEmpty} from \"lodash\";\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\nclass ITDForm extends React.Component {\n\n    state = {\n        solutionID: undefined,\n        chosenDisplays: []\n    };\n\n    addNewDisplaySelect = () => {\n        let chosenDisplays = [...this.state.chosenDisplays];\n        chosenDisplays.push(undefined);\n        this.setState({chosenDisplays: chosenDisplays});\n    };\n\n    static getDerivedStateFromProps(newProps, prevState){\n        if(newProps.currentSolution.Solution.ID === prevState.solutionID){ return null; }\n        if(newProps.currentSolution.Solution === undefined){ return null; }\n        if(newProps.currentSolution.Solution.DisplayTitles === null){ return null; }\n\n        const chosenDisplays = [...newProps.currentSolution.Solution.DisplayTitles.titleValues];\n        return ({chosenDisplays: chosenDisplays, solutionID: newProps.currentSolution.Solution.ID});\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if(!err){\n                this.props.updateInformationToDisplay(values);\n            }\n        });\n    };\n\n    render(){\n        const {getFieldDecorator} = this.props.form;\n\n        return (\n            <Form style={{textAlign:\"center\"}} onSubmit={this.handleSubmit}>\n                <p>From here you can choose which part of your information you want to be displayed inside the solution box.\n                    If you are unsure what data is inside those titles simply have a look at the Raw Data section.</p>\n                <Button className={styles.Button} type=\"primary\" onClick={this.addNewDisplaySelect}>Add More Information</Button>\n                <QueueAnim>\n                {\n                    this.state.chosenDisplays.map((record, index) => {\n                        return (\n                            <FormItem style={{marginBottom: \"5px\"}} key={index}>\n                                {getFieldDecorator(\"displaySelect\" + String(index), {\n                                    initialValue: record,\n                                    rules: [{\n                                        required: true,\n                                        message: 'Please select a header',\n                                    }],\n                                })(\n                                    <Select className={styles.Select}>\n                                        {\n                                            this.props.currentSolution.DisplayTitles.map((record, index) => {\n                                                return <Option key={index} value={record}>{record}</Option>\n                                            })\n                                        }\n                                    </Select>\n                                )}\n                            </FormItem>\n                        )\n                    })\n                }\n                </QueueAnim>\n                <Button htmlType={\"submit\"} className={\"ant-btn-primary\"} style={{marginTop:\"10px\"}}>Update</Button>\n            </Form>\n        )\n    }\n};\n\nexport default Form.create()(ITDForm)","import React from \"react\";\nimport {Button, Form, Input, Select} from \"antd\";\nimport styles from \"../SolutionsSettings.module.less\";\nimport {isEmpty} from \"lodash\";\n\nconst FormItem = Form.Item;\nconst Option = Select.Option;\n\nclass ButtonLink extends React.Component {\n\n    state = {\n        webLink: \"\",\n        IDHeader: \"\",\n    };\n\n    static getDerivedStateFromProps(newProps){\n        if(this !== undefined) {\n            if (!isEmpty(this.props.currentSolution)) {\n                if (this.props.currentSolution.Solution.ID === newProps.currentSolution.Solution.ID) {\n                    return ({webLink: \"\", IDHeader: \"\"});\n                }\n            }\n        }\n\n        if(newProps.currentSolution.Solution === undefined){ return ({webLink: \"\", IDHeader: \"\"}); }\n\n        return ({webLink: newProps.currentSolution.Solution.WebLink, IDHeader: newProps.currentSolution.Solution.IDReference});\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if(!err){\n                this.props.updateButtonLink(values);\n            }\n        });\n    };\n\n    render(){\n        const {getFieldDecorator} = this.props.form;\n\n\n        return (\n            <Form style={{textAlign:\"center\"}} onSubmit={this.handleSubmit}>\n                <p>In order to be able to direct users to your solutions at your home website we will need some input from you.\n                    We would need the page part that holds all the solutions and then the solution reference. For example that\n                    can be http://mycoolwebsite.com/jobs/JobID* . To create the bridge between us we would need that information\n                    in the bellow text inputs. <br />\n                    <strong>To do that just contact us and we will find them for you.</strong><br />\n                    Alternatively you can try finding them on your own. To do that please provide us with the link (ex. \"http://mycoolwebsite.com/jobs/\")\n                    and then the reference to the JobID which you can find in your upload file(add @ in front of it) or Raw Data bellow.<br />\n                    For example: \"@JobID\" : C2143. <br />You can also take your solution ID and use Ctrl + F on this page to find the\n                    corresponding title in the Raw Data.</p>\n\n                <FormItem style={{margin: \"15px 0 5px 0\"}}>\n                    {getFieldDecorator(\"webLink\", {\n                        initialValue: this.state.webLink,\n                        rules: [{\n                            required: true,\n                            message: 'Please paste the link without the solution ID here',\n                        }],\n                    })(\n                        <Input className={styles.Input} placeholder={\"https://jobwebsite.com/jobs/\"}/>\n                    )}\n                </FormItem>\n\n                <FormItem style={{marginBottom: \"5px\"}}>\n                    {getFieldDecorator(\"IDHeader\", {\n                        initialValue: this.state.IDHeader,\n                        rules: [{\n                            required: true,\n                            message: 'Please select the header that holds the job ID',\n                        }],\n                    })(\n                        <Select className={styles.Select} placeholder={\"@JobID\"}>\n                            {\n                                this.props.currentSolution.DisplayTitles.map((record, index) => {\n                                    return <Option key={index} value={record}>{record}</Option>\n                                })\n                            }\n                        </Select>\n                    )}\n                </FormItem>\n                <Button htmlType={\"submit\"} className={\"ant-btn-primary\"} style={{marginTop:\"10px\"}}>Update</Button>\n            </Form>\n        )\n    }\n}\n\nexport default Form.create()(ButtonLink)","import React from \"react\";\nimport {Button, Switch} from \"antd\";\nimport styles from \"../SolutionsSettings.module.less\";\n\nclass EmailAutomatch extends React.Component {\n\n\n    render() {\n        return (\n            <div style={{textAlign:\"center\"}}>\n\n                <p>You can send emails to your clients when a new Solution suited for them has been added to your records.\n                    This can be done manually by clicking the button bellow or by ticking the box which will check\n                    and send them every time you update your data.</p>\n\n                <Button onClick={this.props.sendSolutionAlerts} className={styles.Button} type={\"primary\"}>Send Matches</Button><br />\n\n                <label>Automatic Matching on Record Update:</label><br />\n                <Switch loading={false} checkedChildren={\"On\"} unCheckedChildren={\"Off\"}\n                        defaultChecked={this.props.currentSolution.Solution.automaticSolutionAlerts} onChange={this.props.submitAutomaticAlerts}/>\n\n\n            </div>\n        )\n    }\n}\n\nexport default EmailAutomatch","import React from \"react\";\nimport styles from \"./SolutionsSettings.module.less\";\nimport {Tabs, Form, Select, Button, Input, Switch} from \"antd\";\nimport QueueAnim from \"rc-queue-anim\";\nimport Animate from \"rc-animate\";\nimport {isEmpty} from \"lodash\";\nimport {profileActions} from \"../../../../../../store/actions\";\nimport ITDForm from \"./InformationToDisplay/InformationToDisplay\";\nimport BTForm from \"./ButtonLink/ButtonLink\";\nimport EAmForm from \"./EmailAutomatch/EmailAutomatch\";\n\nconst TabPane = Tabs.TabPane;\n\nclass SolutionsSettings extends React.Component{\n\n    render (){\n\n        return(\n            <div className={styles.Panel}>\n                <div className={styles.Panel_Header}>\n                    <div>\n                        <h3 style={{height:\"32px\"}}>Solution Settings</h3>\n                    </div>\n                </div>\n\n\n                <div className={styles.Panel_Body}>\n                    <Animate transitionName=\"fade\" transitionAppear>\n                    {isEmpty(this.props.currentSolution) ? null :\n                        <Tabs defaultActiveKey={\"1\"}>\n\n                            <TabPane tab={\"Information to Display\"} key={\"1\"}>\n\n                                <ITDForm\n                                    currentSolution={this.props.currentSolution}\n                                    updateInformationToDisplay={this.props.updateInformationToDisplay}\n                                />\n\n                            </TabPane>\n\n                            <TabPane tab={\"Button Link\"} key={\"2\"}>\n\n                                <BTForm\n                                    currentSolution={this.props.currentSolution}\n                                    updateButtonLink={this.props.updateButtonLink}\n                                />\n\n                            </TabPane>\n\n                            {/*<TabPane tab={\"Results' Filters\"} key={\"3\"}>*/}\n                                {/*Coming soon...*/}\n                            {/*</TabPane>*/}\n\n                            <TabPane tab={\"Email Auto-match\"} key={\"4\"}>\n\n                                <EAmForm\n                                    currentSolution={this.props.currentSolution}\n                                    sendSolutionAlerts={this.props.sendSolutionAlerts}\n                                    submitAutomaticAlerts={(e) => {this.props.updateAutomaticAlerts(e)}}\n                                />\n\n                            </TabPane>\n\n                        </Tabs>\n                    }\n                    </Animate>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Form.create()(SolutionsSettings)","import React from \"react\";\nimport Header from \"../../../components/Header/Header\";\nimport SolutionsDisplay from \"../Assistants/Assistant/Solutions/SolutionsDisplay/SolutionsDisplay\";\nimport SolutionsSettings from \"../Assistants/Assistant/Solutions/SolutionsSettings/SolutionsSettings\";\nimport {Menu, Icon, Tabs, Button} from 'antd';\nimport styles from \"../Assistants/Assistant/Solutions/Solutions.module.less\";\n\nconst SubMenu = Menu.SubMenu;\nconst TabPane = Tabs.TabPane;\n\nclass Documentation extends React.Component{\n\n    state = {\n        currentKey: \"1\"\n    };\n\n    handleMenuChange = (item) => {\n        this.setState({currentKey: item.key});\n    };\n\n    render () {\n\n\n        return (\n            <div style={{height: '100%'}}>\n                <div style={{height: 'calc(100% - 66px)', width: '100%', display: 'flex'}}>\n                    <div style={{margin: 5, width: '27%'}}>\n                        <div className={styles.Panel}>\n                            <div className={styles.Panel_Header}>\n                                <div>\n                                    <h3>Navigation</h3>\n                                </div>\n                            </div>\n                            <div className={styles.Panel_Body}>\n                                <Menu\n                                    mode=\"inline\"\n                                    style={{ width: '100%' }}\n                                    onClick={this.handleMenuChange}\n                                    defaultSelectedKeys={['1']}\n                                    defaultOpenKeys={['sub1']}\n                                  >\n                                    <SubMenu key=\"sub1\" title={<span><Icon type=\"mail\" /><span>General Information</span></span>}>\n                                      <Menu.Item key=\"1\">Website Structure</Menu.Item>\n                                      <Menu.Item key=\"2\">Date & Time</Menu.Item>\n                                      <Menu.Item key=\"3\">Candidate</Menu.Item>\n                                      <Menu.Item key=\"4\">Client</Menu.Item>\n                                      <Menu.Item key=\"5\">Jobs</Menu.Item>\n                                    </SubMenu>\n\n                                    <SubMenu key=\"sub2\" title={<span><Icon type=\"mail\" /><span>Chatbots</span></span>}>\n                                      <Menu.Item key=\"6\">Creating your Chatbot</Menu.Item>\n                                      <Menu.Item key=\"7\">Data</Menu.Item>\n                                      <Menu.Item key=\"8\">Candidates from Chatbot</Menu.Item>\n                                      <Menu.Item key=\"9\">Clients from Chatbot</Menu.Item>\n                                      <Menu.Item key=\"10\">Templates</Menu.Item>\n                                    </SubMenu>\n\n                                  </Menu>\n                            </div>\n                        </div>\n                    </div>\n\n                    <div style={{margin: 5, width: '73%'}}>\n                        <div className={styles.Panel}>\n                            <div className={styles.Panel_Header}>\n                                <div>\n                                    <h3>Information</h3>\n                                </div>\n                            </div>\n                            <div className={styles.Panel_Body}>\n\n                                <Tabs defaultActiveKey=\"1\" activeKey={this.state.currentKey} tabBarStyle={{display:\"none\"}}>\n                                    <TabPane key=\"1\">\n                                        <p>\n                                            As a platform, we have divided Admin Panel into three multiple sections which allow for the ease of accessibility.\n                                            <ul>\n                                                <li>Dashboard</li>\n                                                <li>Assistants</li>\n                                                <li>Account</li>\n                                            </ul>\n                                            Dashboard: The Dashboard is mainly there to help give you an easily accessible toolbox which provides you with all the platform's features.<br /><br />\n                                            Assistants: The Assistant's page is where you will be able to control all their Chatbots and control their operations.<br /><br />\n                                            Account: The Account's page can be used to make changes to your account and control your details.\n                                        </p>\n                                    </TabPane>\n\n                                    <TabPane key=\"2\">\n                                        <p>\n                                            TheSearchBase uses Greenwich Mean Time (GMT) to track the time. All your automatic notifications will be based on this time and the time in which data has been collected will also be measured using this format.\n                                        </p>\n                                    </TabPane>\n\n                                    <TabPane key=\"3\">\n                                        <p>\n                                            Your account will be provided with a default database for the candidates which you process and collect data from. All of the data which you collect will be can be easily accessed by clicking on the Chatbot's dropdown menu and selecting 'Candidates'. This page will present you with all the candidates which have interacted with the chatbot and entered their data.\n                                        </p>\n                                    </TabPane>\n\n                                    <TabPane key=\"4\">\n                                        <p>\n                                            Your account will be provided with a default database for the clients which you start interacting with. This database will store all the key information which you can share with candidates.\n                                        </p>\n                                    </TabPane>\n\n                                    <TabPane key=\"5\">\n                                        <p>\n                                            The Jobs database is the primary location for storing all your job information. This database can be linked to your CRM and automatically import all your jobs.\n                                        </p>\n                                    </TabPane>\n\n                                    <TabPane key=\"6\">\n                                        <p>\n                                            To create a chatbot, you can choose to use the templates provide or create your own customised conversation flow. To create a Chatbot, you should first click on 'Assistants'. Once the page has loaded, at the top right click on 'Add Assistant'.<br />\n                                            <br />\n                                            You should then:<br />\n                                            <ul>\n                                                <li>Give your Assistant a name</li>\n                                                <li>A welcome message</li>\n                                                <li>A title (this will appear at the top of the chatbot)</li>\n                                                <li>How long before it automatically opens a conversation (switch off if you wish to keep it silent)</li>\n                                                <li>A template (if you wish to create it from a template)</li>\n                                            </ul>\n                                            After you have entered the necessary information, click the 'Add' button on the bottom right to save your assistant.<br />\n                                            To help speed things up, a set of default values and databases will be created for your assistant. You can change the settings at any point by clicking the 'Crank' icon on your Assistant card. You can start to customise your conversation and make it more personal by clicking on the 'Flow' icon located next to the Settings icon.<br />\n                                        </p>\n                                    </TabPane>\n\n                                    <TabPane key=\"7\">\n                                        If you wish to use your Assistant for specific task, such as showing candidates job opportunities, or showing clients candidate profiles then you can very easily connect your live data to the chatbot.<br /><br />\n                                        To connect your available jobs to the Assistant, proceed to opening the drop-down menu of the Assistant and heading to 'Jobs'. In the middle-top of the page, click on 'Add Jobs'. You can give this group of jobs a name such as 'Jobs-Feb-2019' and select how you will provide the job data.<br />\n                                        You can directly connect your CRM to our platform if you CRM provider is listed below:<br />\n                                        <ul>\n                                            <li>Bullhorn</li>\n                                            <li>Vincere</li>\n                                        </ul>\n                                        Or you can upload a file from CRM providers such as:<br />\n                                        <ul>\n                                            <li>RDB Pro Net (Access Group)</li>\n                                            <li>Mercury Xrm</li>\n                                            <li>Bullhorn</li>\n                                            <li>Vincere</li>\n                                        </ul>\n                                        Processing your jobs will take up to five seconds, and once we have processed the file, you will be able to use the data in automated conversations with candidates.<br />\n                                    </TabPane>\n\n                                    <TabPane key=\"8\">\n                                        <p>\n                                            For every Assistant you create, you will have the option to connect this to a specific database. If direct CRM integration is enabled, you will then have the option to transit this data back into your CRM.<br />\n                                            <br />\n                                            <h4>Candidate Conversations</h4>\n                                            All the conversations held with candidates and the data collected from the conversations will be held in the candidate database. Every new entry into the database will be classified as a 'new candidate', therefore from the questions asked, a profile will be made for the candidate.<br />\n                                            <h4>Jobs</h4>\n                                            In some cases, you may wish to start conversations with candidates, showcasing with jobs they may be interested in. In this instance, you will have the option to connect your 'Jobs' database to the chatbot.<br />\n                                        </p>\n                                    </TabPane>\n\n                                    <TabPane key=\"9\">\n                                        <p>\n                                            Our assistants also enable clients to directly communicate with your company and share their details, but also view undisclosed candidate profiles.<br />\n                                            <br />\n                                            <h4>Client Conversations</h4>\n                                            Every conversation held with clients will be recorded and safely stored in a database. To give make it easier to identify a client, we build a profile for every conversation held with the assistant. By viewing a client's profile, you will able to view all their details.<br />\n                                        </p>\n                                    </TabPane>\n\n                                    <TabPane key=\"10\">\n                                        <p>\n                                            We have multiple starting points for recruiters to start their conversations from. When creating a chatbot, you can simply choose if you wish to start with a template.<br />\n                                            <br />\n                                            <h4>Template Formats</h4>\n                                            We have several template formats that are best suited for certain environments.\n                                            <ul>\n                                                <li>General Front-website</li>\n                                                <li>Specific Front-Website</li>\n                                                <li>Joining Us</li>\n                                                <li>Re-recruiting old clients</li>\n                                                <li>Candidate experience</li>\n                                                <li>Pre-screening confirmation</li>\n                                                <li>Candidates with clients</li>\n                                            </ul>\n                                            <br />\n                                            <h4>Template Conversations</h4>\n                                            All the templates have been pre-made to give recruiters to save time in making them. You can at any point, change the format of the conversation and make it as personal and unique as you like.<br />\n                                            <br />\n                                            <h4>Collecting Feedback</h4>\n                                            As a recruiter, you will have the option to collect feedback after you have placed a candidate with a client. We've tried to make this as easy for you as possible.<br />\n                                            Using our pre-made templates, you can simply assign a chatbot link directly to a candidate and see what they think of their new role. You can also use similar chatbot's to ask your clients what they think of the candidate which you have recruited.<br />\n                                        </p>\n                                    </TabPane>\n\n                                </Tabs>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Documentation","import React from 'react';\n\nimport {Button, Col, Input, Row} from \"antd\";\nimport Header from \"../../../../../components/Header/Header\"\n\nimport styles from \"./Integration.module.less\"\nimport ReactDOMServer from 'react-dom/server'\nimport {hasher} from \"../../../../../helpers\"\nimport {SwatchesPicker} from 'react-color';\n\n\nconst {TextArea} = Input;\n\n\nclass Integration extends React.Component {\n\n    state = {\n        source: \"\",\n        dataName: \"tsb-widget\",\n        assistantID: \"assistantid\",\n        // dataIcon: \"#ffffff\",\n        dataCircle: \"#9254de\",\n        async: true,\n        defer: true\n    };\n\n    componentDidMount() {\n        this.setState({\n            assistantID: hasher.encode(this.props.match.params.id),\n            source: this.getWidgetSrc()\n        });\n    }\n\n    componentWillUnmount(){\n        this.removeChatbot();\n    }\n\n    handleChange = (color) => this.setState({dataCircle: color.hex || color.target.value});\n\n    removeChatbot = () => {\n        let oldBot = document.getElementById(\"TheSearchBase_Chatbot\");\n        if (oldBot) oldBot.remove();\n        let oldBotScript = document.getElementById(\"oldBotScript\");\n        if (oldBotScript) oldBotScript.remove();\n    };\n\n    copyScriptPaste = () => {\n        const pasteArea = document.getElementById(\"pasteArea\");\n        pasteArea.select();\n        document.execCommand(\"copy\");\n    };\n\n    testIntegration = () => {\n        this.removeChatbot();\n        const script = document.createElement(\"script\");\n\n        script.src = this.state.source;\n        script.async = this.state.async;\n        script.defer = this.state.defer;\n        script.setAttribute(\"data-name\", this.state.dataName);\n        script.setAttribute(\"data-id\", this.state.assistantID);\n        // script.setAttribute(\"data-icon\", this.state.dataIcon);\n        script.setAttribute(\"data-circle\", this.state.dataCircle);\n        script.setAttribute(\"id\", \"oldBotScript\");\n\n        document.body.appendChild(script);\n    };\n\n\n    getWidgetSrc = () => {\n        // include the colon if there is port number, which means localhost and not real server\n        let colon = \"\";\n        if (window.location.port !== \"\") {colon = \":\";}\n        const {protocol, port, hostname} = window.location;\n        return protocol + '//' + hostname + colon + port + \"/api/widgets/chatbotOLD.js\";\n    };\n\n    generateDirectLink = () => {\n        const {protocol, port, hostname} = window.location;\n        let colon = \"\";\n        if (window.location.port !== \"\") colon = \":\";\n        if (port === \"3000\")\n            window.open(`${protocol}//${hostname}${colon}5000/api/assistant/${this.state.assistantID}/chatbot_direct_link`);\n        else\n            window.open(`${protocol}//${hostname}${colon}${port}/api/assistant/${this.state.assistantID}/chatbot_direct_link`);\n\n    };\n\n    getChatbotScript = () => {\n        return <script src={this.getWidgetSrc()}\n                       data-name={this.state.dataName}\n                       data-id={this.state.assistantID}\n                       // data-icon={this.state.dataIcon}\n                       data-circle={this.state.dataCircle}\n                       async={this.state.async}\n                       defer={this.state.defer}/>\n    };\n\n    render() {\n        return (\n            <div style={{height: '100%'}}>\n                <Header display={`Integration`}/>\n\n                <div className={styles.Panel_Body_Only}>\n                    <div style={{marginRight: 5, width: '45%'}} className={styles.Panel}>\n\n                        <div className={styles.Panel_Header} style={{position: \"inherit\"}}>\n                            <h3>Choosing your Assistant's looks</h3>\n                        </div>\n\n                        <div className={styles.Panel_Body}>\n                            <Row type=\"flex\" justify=\"center\">\n                                <Col>\n                                    <p> Currently you can edit the colour setting of your assistant's button.\n                                        Simply pick your preferred one bellow.</p>\n                                </Col>\n                            </Row>\n\n                            <br/>\n\n                            <Row type=\"flex\" justify=\"center\" style={{marginBottom: 50}}>\n                                <Col>\n                                    <SwatchesPicker color={this.state.dataCircle} onChange={this.handleChange}/>\n                                </Col>\n                            </Row>\n\n                            <Row type=\"flex\" justify=\"center\">\n                                <Col>\n                                    <p style={{lineHeight: '27px', marginRight: 5}}>Selected Color:</p>\n                                </Col>\n                                <Col>\n                                    <Input style={{padding: \"3px\", width: \"60px\"}} type=\"color\" name=\"dataCircle\"\n                                           value={this.state.dataCircle} onChange={this.handleChange}/>\n                                </Col>\n\n                            </Row>\n                        </div>\n                    </div>\n\n\n                    <div style={{marginLeft: 5, width: '55%'}} className={styles.Panel}>\n\n                        <div className={styles.Panel_Header} style={{position: \"inherit\"}}>\n                            <h3>Connecting your assistant</h3>\n                        </div>\n\n                        <div className={styles.Panel_Body} style={{textAlign: 'center'}}>\n                            <p style={{textAlign: 'left'}}>\n                                To integrate your assistant, you must paste the pre-made code into any part of your\n                                HTML\n                                source code.\n                            </p>\n\n                            <TextArea value={ReactDOMServer.renderToString(this.getChatbotScript())}\n                                      id={\"pasteArea\"}\n                                      style={{width: \"100%\", height: \"110px\", fontWeight: \"600\", margin: \"1.5% 0\"}}\n                                      readOnly/>\n                            <Button onClick={this.copyScriptPaste} className={\"ant-btn-primary\"}>Copy</Button>\n                            <Button style={{marginLeft: \"5px\"}} onClick={this.testIntegration}\n                                    className={\"ant-btn-primary\"}>Test</Button>\n                            <Button style={{marginLeft: \"5px\"}} onClick={this.generateDirectLink}\n                                    className={\"ant-btn-primary\"}>Generate Direct Link</Button>\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default (Integration);","import React, {Component} from 'react';\nimport {Button, Table} from \"antd\";\n\n\n\nclass Profile extends Component {\n\n    counter = -1;\n    state = {\n        fileNames: []\n    };\n\n    columns = [{\n        title: 'Data Type',\n        key: 'dataType',\n        render: (text, dataType, index) => {\n            return(<p>{dataType.name}</p>)\n        },\n    }, {\n        title: 'Value',\n        key: 'input',\n        render: (text, dataType, index) => {\n\n            // Find the session with that current dataType in the row from the list of collectedData\n            let sessions = this.props.session.Data.collectedData\n                .filter((data)=> data.dataType === dataType.name);\n            if (sessions.length < 1) return null;\n\n            // If there are more than one inputs of the same dataType then concat them\n            let input = \"\";\n            let downloadFilesBtns = [];\n            let isFiles = false;\n\n            // If there are multiple records of the same data type\n            if (sessions.length > 1){\n                sessions.forEach(session => {\n                    console.log(session);\n                    // Only when file upload do the following\n                    if(session.input === '&FILE_UPLOAD&'){\n                        this.counter += 1;\n                        downloadFilesBtns.push(this.createDownloadFileBtn(this.counter));\n                        console.log(downloadFilesBtns);\n                        isFiles = true;\n                    } else {\n                        input += session.input + \" | \";\n                    }\n                });\n\n            // If there is one record of the same data type\n            } else {\n                if(sessions[0].input === '&FILE_UPLOAD&'){\n                    this.counter += 1;\n                    input = this.createDownloadFileBtn(this.counter);\n                } else {\n                    input = sessions[0].input;\n                }\n            }\n\n            // If there are files to be download\n            if (isFiles){\n                return (\n                    <React.Fragment>\n                        {downloadFilesBtns.map((fileBtn) => fileBtn)}\n                        | {input}\n                    </React.Fragment>\n                )\n            }\n\n            // If only normal text and no files\n            return (<p>{input}</p>);\n\n        }\n    }];\n\n    createDownloadFileBtn = (index) => {\n        return (<Button key={index} hreftype=\"primary\" file-path-index={index} icon=\"download\"\n                        size=\"small\" style={{margin: '0 5px 0 5px'}}\n                        onClick={(e) => {this.props.downloadFile(e.target.getAttribute('file-path-index'))}}>\n                    Download File\n                </Button>);\n    };\n \n    render() {\n        const {session, dataTypes} = this.props;\n        console.log(this.state);\n        return (\n            <Table columns={this.columns}\n                   dataSource={dataTypes.filter((type) => type.userTypes.includes(session.UserType))}\n                   size='middle'\n                   pagination={false}\n            />\n        );\n    }\n}\n\nexport default Profile;","import React, {Component} from 'react';\nimport {Button, Table, Tag} from \"antd\";\n\n\nclass Conversation extends Component {\n\n    counter = -1; // this is important for specifying what is the file name's index\n    state = {\n        fileNames: []\n    };\n\n    columns = [{\n        title: 'Question',\n        key: 'questionText',\n        render: (text, record, index) => (<p>{record.questionText}</p>),\n    }, {\n        title: 'Input',\n        key: 'input',\n        render: (text, record, index) => {\n\n            if (record.input === '&FILE_UPLOAD&') {\n                this.counter+=1;\n                return (<Button hreftype=\"primary\" file-path-index={this.counter} icon=\"download\" size=\"small\"\n                                onClick={(e) => {this.props.downloadFile(e.target.getAttribute('file-path-index'))}}>\n                    Download File\n                </Button>);\n            }\n\n            else {\n               return (<p>\n                   {record.input}\n               </p>);\n            }\n        },\n    },{\n        title: 'Data Type',\n        key: 'DataType',\n        render: (text, record, index) => (<Tag key={record.UserType}>{record.dataType}</Tag>),\n    }];\n\n\n    render() {\n        const {session} = this.props;\n        return (\n            <Table columns={this.columns}\n                   dataSource={session.Data.collectedData}\n                   size='middle'\n                   pagination={false}\n            />\n        );\n    }\n}\n\nexport default Conversation;","import React, {Component} from 'react';\nimport {Button, Modal, Table, Tabs} from \"antd\";\nimport {http, alertError} from '../../../../../../helpers';\nimport saveAs from 'file-saver';\nimport Profile from '../Profile/Profile'\nimport Conversation from '../Conversation/Conversation'\n\nconst TabPane = Tabs.TabPane;\n\n\nclass ViewsModal extends Component {\n\n    counter = -1;\n    state = {\n        fileNames: []\n    };\n\n    columns = [{\n        title: 'Question',\n        key: 'questionText',\n        render: (text, record, index) => (<p>{record.questionText}</p>),\n    }, {\n        title: 'Input',\n        key: 'input',\n        render: (text, record, index) => {\n\n            if (record.input === '&FILE_UPLOAD&') {\n                this.counter+=1;\n                return (<Button hreftype=\"primary\" data-index={this.counter} icon=\"download\" size=\"small\"\n                                onClick={(e) => {this.downloadFile(e)}}>\n                    Download File\n                </Button>);\n            }\n\n            else {\n               return (<p>\n                   {record.input}\n               </p>);\n            }\n        },\n    }];\n\n    componentWillReceiveProps(nextProps, nextContext) {\n        if(nextProps.session && nextProps.session.FilePath){\n            this.setState({fileNames: nextProps.session.FilePath.split(',')})\n        }\n    }\n\n    downloadFileHandler = (filenameIndex) => {\n        console.log(filenameIndex);\n        // Get file name by index. indexes stored in each button corresponds to filenames stored in the state\n        const fileName = this.state.fileNames[filenameIndex];\n        if (!fileName){\n            alertError(\"File Error\", \"Sorry, but file doesn't exist!\");\n            return;\n        }\n\n        http({\n            url: `/assistant/${this.props.assistant.ID}/chatbotSessions/${fileName}`,\n            method: 'GET',\n            responseType: 'blob', // important\n        }).then((response) => {\n            saveAs(new Blob([response.data]), fileName);\n        }).catch(error => {\n            alertError(\"File Error\", \"Sorry, cannot download this file!\")\n        });\n    };\n\n\n    render() {\n        const {session, dataTypes} = this.props;\n        const userType = session ? session.UserType : 'Unknown';\n\n        return (\n            <Modal\n                width={800}\n                title=\"Session Details\"\n                destroyOnClose={true}\n                visible={this.props.visible}\n                onCancel={this.props.closeViewModal}\n                onOk={this.props.closeViewModal}\n                footer={[\n                    <Button key=\"Cancel\" onClick={this.props.closeViewModal}>OK</Button>\n                ]}>\n                <Tabs defaultActiveKey={\"1\"}>\n\n                    <TabPane tab={\"Conversation\"} key={\"1\"}>\n                        <Conversation session={session}\n                                      downloadFile={this.downloadFileHandler} />\n                    </TabPane>\n\n                    <TabPane tab={`Profile (${userType})`} key={\"2\"}>\n                        <Profile session={session} downloadFile={this.downloadFileHandler}\n                                 dataTypes={dataTypes} />\n                    </TabPane>\n\n                </Tabs>\n            </Modal>\n        );\n    }\n}\n\nexport default ViewsModal;","import React from 'react';\nimport styles from \"./Sessions.module.less\"\nimport ViewsModal from \"./ViewModal/ViewsModal\";\nimport {Button, Modal, Table, Tag} from 'antd';\nimport moment from 'moment';\nimport {chatbotSessionsActions} from \"../../../../../store/actions\";\nimport connect from \"react-redux/es/connect/connect\";\nimport Header from \"../../../../../components/Header/Header\";\n\nconst confirm = Modal.confirm;\n\n\nclass Sessions extends React.Component {\n\n    filesCounter=-1; // important for file uploads\n    state = {\n        filteredInfo: null,\n        sortedInfo: null,\n        selectedSession: null,\n        viewModal: false\n    };\n\n\n    componentDidMount() {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(chatbotSessionsActions.fetchChatbotSessions(assistant.ID))\n    }\n\n    refreshSessions = () => {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(chatbotSessionsActions.fetchChatbotSessions(assistant.ID))\n    };\n\n    clearAllChatbotSessions = () => {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(chatbotSessionsActions.clearAllChatbotSessions(assistant.ID))\n    };\n\n\n    handleFilter = (pagination, filters, sorter) => {\n        console.log('Various parameters', pagination, filters, sorter);\n        this.setState({\n            filteredInfo: filters,\n            sortedInfo: sorter,\n        });\n    };\n\n\n    closeViewModal = () => {\n        this.setState({viewModal: false, selectedSession: null})\n    };\n\n\n    showConfirmForClearing = () => {\n        const clear = this.clearAllChatbotSessions;\n        confirm({\n            title: 'Do you want to delete all records?',\n            content: 'By clicking OK, there will be no way to get these records back!',\n            okType: 'danger',\n            onOk() {clear()},\n            onCancel() {},\n        });\n    };\n\n\n\n    // Nested table that has all the answered questions per session (Not being used)\n    expandedRowRender = (record, index, indent, expanded) => {\n        const columns = [\n            {\n                title: 'Question',\n                key: 'questionText',\n                render: (text, record, index) => (<p>{record.questionText}</p>),\n            },\n            {\n                title: 'Input',\n                key: 'input',\n                render: (text, record, index) => {\n\n                    if (record.input === '&FILE_UPLOAD&') {\n                        this.filesCounter+=1;\n                        return (<Button hreftype=\"primary\" data-index={this.filesCounter} icon=\"download\" size=\"small\"\n                                        onClick={(e) => {this.downloadFile(e)}}>\n                            Download File\n                        </Button>);\n                    }\n\n                    else {\n                        return (<p>\n                            {record.input}\n                        </p>);\n                    }\n                },\n            }\n        ];\n\n\n        return (\n            <Table\n                columns={columns}\n                dataSource={record.Data.collectedData}\n                pagination={false}\n                scroll={{ y: 500 }}\n            />\n        );\n    };\n\n\n    render() {\n        const {assistant} = this.props.location.state;\n        const {sessions} = this.props;\n        let { sortedInfo, filteredInfo } = this.state;\n        sortedInfo = sortedInfo || {};\n        filteredInfo = filteredInfo || {};\n\n        const columns = [{\n            title: '#',\n            dataIndex: '#',\n            key: '#',\n            render: (text, record, index) => (<p>{index+1}</p>),\n\n        },{\n            title: 'ID',\n            dataIndex: 'ID',\n            key: 'ID',\n            sorter: (a, b) => a.ID - b.ID,\n            render: (text, record) => (<p>{record.ID}</p>),\n\n        },{\n            title: 'User Type',\n            dataIndex: 'UserType',\n            key: 'UserType',\n            filters: [\n                { text: 'Candidate', value: 'Candidate' },\n                { text: 'Client', value: 'Client' },\n            ],\n            onFilter: (value, record) => {\n                console.log(value);\n                record.UserType.includes(value)},\n            render: (text, record) => (<Tag key={record.UserType}>{record.UserType}</Tag>),\n\n        },{\n            title: 'Questions Answered',\n            dataIndex: 'QuestionsAnswered',\n            key: 'QuestionsAnswered',\n            sorter: (a, b) => a.QuestionsAnswered - b.QuestionsAnswered,\n            render: (text, record) => (\n                <p style={{textAlign:''}}>{text}</p>),\n\n        }, {\n            title: 'Solutions Returned',\n            dataIndex: 'SolutionsReturned',\n            sorter: (a, b) => a.SolutionsReturned - b.SolutionsReturned,\n            render: (text, record) => (\n                <p style={{textAlign:''}}>{text}</p>),\n\n        }, {\n            title: 'Time Spent',\n            dataIndex: 'TimeSpent',\n            key: 'TimeSpent',\n            sorter: (a, b) => a.TimeSpent - b.TimeSpent,\n            render: (text, record) => (<p style={{textAlign:'center'}}>{\n                moment.duration(parseInt(record.TimeSpent), 'seconds').asMinutes().toFixed(2) + \" minute(s)\"\n            }\n            </p>),\n\n        },{\n            title: 'Date & Time',\n            dataIndex: 'DateTime',\n            key: 'DateTime',\n            sorter: (a, b) => new Date(a.DateTime).valueOf() - new Date(b.DateTime).valueOf(),\n            render: (text, record) => (<p>{record.DateTime}</p>),\n\n        }, {\n            title: 'Action',\n            key: 'action',\n            render: (text, record, index) => (\n                <span>\n              <a onClick={()=> {\n                  this.setState({viewModal: true, selectedSession: record})\n              }\n              }> View</a>\n                    {/*<Divider type=\"vertical\" />*/}\n                    {/*<a>Delete</a>*/}\n            </span>\n            ),\n        }];\n\n\n\n        return (\n            <div style={{height: '100%'}}>\n                <Header display={assistant.Name}/>\n                <div className={styles.Panel}>\n                    <div className={styles.Panel_Header}>\n                        <div>\n                            <h3>{assistant.Name}: User Inputs</h3>\n                            <p>Here you can find all the responses to your chatbot</p>\n                        </div>\n\n                        <div>\n                            <Button className={styles.Panel_Header_Button} type=\"primary\" icon=\"sync\"\n                                    onClick={this.refreshSessions} loading={this.props.isLoading}>\n                                Refresh\n                            </Button>\n\n\n                            <Button className={styles.Panel_Header_Button} type=\"primary\" icon=\"delete\"\n                                    onClick={this.showConfirmForClearing} loading={this.props.isClearingAll}>\n                                Clear All\n                            </Button>\n                        </div>\n                    </div>\n\n                    <div className={styles.Panel_Body}>\n\n                        <Table columns={columns}\n                               dataSource={sessions.sessionsList ? sessions.sessionsList : null}\n                               onChange={this.handleFilter}\n                               loading={this.props.isLoading}\n                            // expandedRowRender={this.expandedRowRender}\n                               size='middle'\n                        />\n\n                        <ViewsModal visible={this.state.viewModal}\n                                    closeViewModal={this.closeViewModal}\n                                    filesPath={sessions.filesPath}\n                                    dataTypes={sessions.dataTypes}\n                                    session={this.state.selectedSession}\n                                    assistant={assistant}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state =>  {\n    const {chatbotSessions} = state;\n    return {\n        sessions: chatbotSessions.chatbotSessions,\n        isLoading: chatbotSessions.isLoading,\n        errorMsg: chatbotSessions.errorMsg,\n\n        isClearingAll: chatbotSessions.isClearingAll\n    };\n};\nexport default connect(mapStateToProps)(Sessions);","import React from 'react'\nimport connect from \"react-redux/es/connect/connect\";\nimport Header from \"../../../../../components/Header/Header\"\nimport SolutionsDisplay from \"./SolutionsDisplay/SolutionsDisplay\";\nimport SolutionsSettings from \"./SolutionsSettings/SolutionsSettings\";\nimport {solutionsActions} from \"../../../../../store/actions\";\nimport {isEmpty} from \"lodash\";\n\nclass Solutions extends React.Component{\n    state = {\n        currentSolution: {},\n        databaseFileTypes: [\"RDB XML File Export\"],\n        databaseCRMTypes: [\"Bullhorn\", \"RDB\"]\n    };\n\n    componentDidMount() {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(solutionsActions.getSolutions(assistant.ID))\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (nextProps.solutions !== this.props.solutions) {\n            nextProps.solutionsData.map((solution) => {\n                if (solution.id === this.state.currentSolution.id)\n                    this.setState({currentSolution: solution})\n            })\n        }\n    }\n\n    selectSolution = (currentSolution) => this.setState({currentSolution});\n\n    addSolution = (newSolution) => {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(solutionsActions.addSolution({ID: assistant.ID, newSolution: newSolution}));\n    };\n\n    editSolution = (editedSolution) => {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(solutionsActions.editSolution({ID: assistant.ID, editedSolution: editedSolution}));\n    };\n\n    deleteSolution = (deletedSolution) => {\n        // const {assistant} = this.props.location.state;\n        // this.props.dispatch(flowActions.deleteSolutionRequest({ID: assistant.ID, deletedSolution: deletedSolution}));\n    };\n\n    updateInformationToDisplay = (information) => {\n        this.props.dispatch(solutionsActions.updateSolutionInformationToDisplay({\n            solutionID: this.state.currentSolution.Solution.ID,\n            information: information\n        }));\n    };\n\n    updateButtonLink = (information) => {\n        this.props.dispatch(solutionsActions.updateButtonLink({\n            solutionID: this.state.currentSolution.Solution.ID,\n            information: information\n        }));\n    };\n\n    sendSolutionAlerts = () => {\n        const {assistant} = this.props.location.state;\n        this.props.dispatch(solutionsActions.sendSolutionAlert({\n            assistantID: assistant,\n            solutionID: this.state.currentSolution.Solution.ID\n        }));\n    };\n\n    updateAutomaticAlerts = (switchState) => {\n        this.props.dispatch(solutionsActions.updateAutomaticSolutions({\n                solutionID: this.state.currentSolution.Solution.ID,\n                information: {\"setTo\": switchState}\n            }));\n    };\n\n    render(){\n        return (\n             <div style={{height: '100%'}}>\n                <div style={{padding: '0 5px'}}>\n                    <div style={{width: '100%', height: 56, marginBottom: 10}}>\n                        <Header display={\"Solutions\"}/>\n                    </div>\n                </div>\n\n                <div style={{height: 'calc(100% - 66px)', width: '100%', display: 'flex'}}>\n                    <div style={{margin: 5, width: '30%'}}>\n\n                        <SolutionsDisplay\n                            selectSolution={this.selectSolution}\n                            isLoading={this.props.isLoading}\n                            solutionsData={this.props.solutionsData}\n                            addSolution={this.addSolution}\n                            editSolution={this.editSolution}\n                            deleteSolution={this.deleteSolution}\n                            databaseFileTypes={this.state.databaseFileTypes}\n                            databaseCRMTypes={this.state.databaseCRMTypes}\n                        />\n\n                    </div>\n\n                    <div style={{margin: 5, width: '70%'}}>\n\n                        <SolutionsSettings\n                            currentSolution={this.state.currentSolution}\n                            updateInformationToDisplay={this.updateInformationToDisplay}\n                            updateButtonLink={this.updateButtonLink}\n                            updateAutomaticAlerts={this.updateAutomaticAlerts}\n                            sendSolutionAlerts={this.sendSolutionAlerts}\n                        />\n\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        solutionsData: state.solutions.solutionsData,\n        isLoading: state.solutions.isLoading,\n        errorMsg: state.solutions.errorMsg,\n    };\n}\n\nexport default connect(mapStateToProps)(Solutions)","import React from 'react';\nimport styles from \"./Analytics.module.less\";\n\nimport Header from \"../../../../../components/Header/Header\";\nimport {Bar} from \"ant-design-pro/lib/Charts\";\nimport NumberInfo from 'ant-design-pro/lib/NumberInfo';\nimport {Icon} from 'antd';\n\nimport moment from 'moment';\n\nconst visitData = [];\nconst beginDay = new Date().getTime();\nfor (let i = 0; i < 10; i += 1) {\n    visitData.push({\n        x: moment(new Date(beginDay + (1000 * 60 * 60 * 24 * i))).format('MMM-DD'),\n        y: Math.floor(Math.random() * 100) + 10,\n        z: '123'\n    });\n}\n\nclass Analytics extends React.Component {\n    state = {\n        height: 100\n    };\n    chartDiv;\n\n    componentDidMount() {\n        const height = this.chartDiv.clientHeight;\n        this.setState({height});\n    }\n\n    render() {\n        return (\n            <div style={{height: '100%'}}>\n                <div style={{padding: '0 5px'}}>\n                    <div style={{width: '100%', height: 56, marginBottom: 10}}>\n                        <Header display={\"Analytics Page\"}/>\n                    </div>\n                </div>\n\n                <div style={{height: 'calc(100% - 66px)', width: '100%', display: 'flex'}}>\n                    <div style={{margin: 5, width: '70%'}}>\n                        <div className={styles.Panel}>\n                            <div className={styles.Panel_Header}>\n                                <h3>\n                                    <Icon type=\"fund\" theme=\"twoTone\" twoToneColor={\"#9254de\"}/> Monthly Records\n                                </h3>\n                            </div>\n\n                            <div className={styles.Panel_Body}\n                                 ref={chartDiv => this.chartDiv = chartDiv}>\n                                <Bar\n                                    color={\"#9254de\"}\n                                    height={this.state.height - 30}\n                                    title=\"Users Over Date\"\n                                    data={visitData}\n                                />\n                            </div>\n                        </div>\n                    </div>\n\n                    <div style={{height: '100%', width: '30%', margin: 5}}>\n                        <div style={{height: 'calc(50% - 5px)', marginBottom: 5}}>\n                            <div className={styles.Panel}>\n                                <div className={styles.Panel_Header}>\n                                    <h3>\n                                        <Icon type=\"team\" style={{color: \"#9254de\"}}/> Total Users\n                                    </h3>\n                                </div>\n\n                                <div className={styles.Panel_Body}>\n                                    <NumberInfo\n                                        subTitle={<span>All Users</span>}\n                                        total={123.0}\n                                        subtitle={<span>The total users number used this assistant</span>}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n\n                        <div style={{height: 'calc(50% - 10px)'}}>\n                            <div className={styles.Panel}>\n                                <div className={styles.Panel_Header}>\n                                    <h3>\n                                        <Icon type=\"eye\" theme=\"twoTone\" twoToneColor=\"#9254de\"/> Total Visits\n                                    </h3>\n                                </div>\n\n                                <div className={styles.Panel_Body}>\n                                    <NumberInfo\n                                        subTitle={<span>Visits this week</span>}\n                                        total={12321.0}\n                                        status=\"up\"\n                                        subTotal={17.1}\n                                    />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default Analytics;","import React from 'react';\nimport styles from \"./Home.module.less\"\n\nclass Home extends React.Component {\n\n    state = {\n\n    };\n\n    render() {\n        return (\n\n            <div style={{height: '100%'}}>\n                <div className={styles.Panel}>\n                    <div className={styles.Panel_Header}>\n                        <h1>Welcome to the Dashboard</h1>\n                    </div>\n\n                    <div className={styles.Panel_Body}>\n                        <h1>Welcome!</h1>\n                        <img\n                            src=\"https://42f2671d685f51e10fc6-b9fcecea3e50b3b59bdc28dead054ebc.ssl.cf5.rackcdn.com/illustrations/hello_aeia.svg\"\n                            alt=\"welcome image\"\n                            width={300}/>\n                        <h2>Here you can manage all your bots & see their usage analytics</h2>\n                        <h4>Use your side navigation to navigate the application.</h4>\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React, {Component} from 'react';\n\nimport {Avatar, Dropdown, Icon, Layout, Menu, notification} from 'antd';\nimport \"./Dashboard.less\"\nimport styles from \"./Dashboard.module.less\"\nimport Assistants from './Assistants/Assistants';\nimport Databases from './Databases/Databases';\nimport {getUser, history} from '../../helpers';\nimport {Route, Switch, withRouter} from 'react-router-dom';\nimport Flow from \"./Assistants/Assistant/Flow/Flow\";\nimport Profile from \"./AccountDetails/Profile/Profile\";\nimport UsersManagement from \"./AccountDetails/UsersManagement/UsersManagement\";\nimport Documentation from \"./Documentation/Documentation\";\nimport Integration from \"./Assistants/Assistant/Integration/Integration\";\nimport Sessions from \"./Assistants/Assistant/Sessions/Sessions\";\nimport Solutions from \"./Assistants/Assistant/Solutions/Solutions\";\nimport Home from \"./Home/Home\";\nimport Analytics from \"./Assistants/Assistant/Analytics/Analytics\";\nimport {authActions} from \"../../store/actions\";\nimport store from '../../store/store';\nimport {connect} from 'react-redux';\n\n\nconst {SubMenu} = Menu;\nconst {Divider} = Menu;\nconst {Header, Content, Footer, Sider} = Layout;\n\n\nclass Dashboard extends Component {\n    state = {\n        collapsed: false,\n        marginLeft: 200,\n    };\n\n\n    toggle = () => {\n        this.setState({\n            collapsed: !this.state.collapsed,\n        }, () => this.setState({marginLeft: this.state.collapsed ? 81 : 200}));\n    };\n\n    handleMenuClick = (e) => {\n        if (e.key === 'logout'){this.logout()}\n        e.key === 'dashboard' ? history.push(`/dashboard`) : history.push(`/dashboard/${e.key}`)\n    };\n\n    logout = () => {\n        store.dispatch(authActions.logout());\n    };\n\n    getInitials = (username) => {\n        const initials = username.match(/\\b\\w/g) || [];\n        return ((initials.shift() || '') + (initials.pop() || '')).toUpperCase();\n    };\n\n    render() {\n\n        const {match, location} = this.props;\n        const user = getUser();\n        let userInfo = null;\n        console.log(location)\n\n        // User Information at the top\n        if (!user) {\n            this.logout();\n        } else {\n\n            let avatar = (\n                <Avatar size=\"large\" style={{ backgroundColor: '#9254de', verticalAlign: 'middle' }}>\n                    {this.getInitials(user.username || '')}\n                </Avatar>\n            );\n            let userInfoMenu = (\n                <Menu onClick={this.handleMenuClick}>\n                    <Menu.Item key=\"profile\">\n                        <div style={{display:'flex', marginTop:'10px'}}>\n                            {avatar}\n                            <div style={{marginLeft:'10px'}}>\n                                <h3>{user.username}</h3>\n                                <p>{user.email}</p>\n                            </div>\n                        </div>\n                    </Menu.Item>\n                    <Menu.Divider />\n                    <Menu.Item key=\"logout\" >\n                        <Icon type=\"logout\"/>\n                        <span>Logout</span>\n                    </Menu.Item>\n                </Menu>\n            );\n\n            userInfo = (\n                <Dropdown overlay={userInfoMenu} overlayStyle={{width:'255px'}}>\n                    {avatar}\n                </Dropdown>\n            );\n        }\n        // End of User Information\n\n\n        return (\n            <Layout style={{height: '100%'}}>\n                <Sider\n                    trigger={null}\n                    collapsible\n                    collapsed={this.state.collapsed}\n                    className={styles.Sider}>\n\n                    <div className={styles.Logo}>\n                        <div style={{display: 'flex'}}>\n                            <Icon type=\"cloud\" theme=\"twoTone\" twoToneColor=\"#9254de\" style={{fontSize: 44}}/>\n                            <div style={{lineHeight: '43px', marginLeft: 25}}>TheSearchBase</div>\n                        </div>\n                    </div>\n\n                    <Menu theme=\"light\" defaultSelectedKeys={this.state.selectedMenuKey}\n                          selectedKeys={location.pathname.split('/')[2] ? [location.pathname.split('/')[2]] : [location.pathname.split('/')[1]]}\n                          mode=\"inline\" onClick={this.handleMenuClick}>\n                        <Menu.Item key=\"dashboard\">\n                            <Icon type=\"home\"/>\n                            <span>Home</span>\n                        </Menu.Item>\n\n                        <Menu.Item key=\"assistants\">\n                            <Icon type=\"robot\"/>\n                            <span>Assistants</span>\n                        </Menu.Item>\n\n                        <Menu.Item key=\"databases\">\n                            <Icon type=\"database\"/>\n                            <span>Databases</span>\n                        </Menu.Item>\n\n                        <Divider/>\n\n                        <SubMenu key=\"sub2\"\n                                 title={<span><Icon type=\"user\"/><span>Account Details</span></span>}>\n                            <Menu.Item key=\"profile\">\n                                <Icon type=\"profile\"/>\n                                Profile\n                            </Menu.Item>\n                            <Menu.Item key=\"users-management\" style={{fontSize: '9pt'}}>\n                                <Icon type=\"usergroup-add\"/>Users Management\n                            </Menu.Item>\n                        </SubMenu>\n\n                        {/*<Menu.Item key=\"billing\">*/}\n                            {/*<Icon type=\"dollar\"/>*/}\n                            {/*<span>Billing</span>*/}\n                        {/*</Menu.Item>*/}\n                        <Menu.Item key=\"documentation\">\n                            <Icon type=\"question-circle\"/>\n                            <span>Documentation</span>\n                        </Menu.Item>\n                    </Menu>\n                </Sider>\n\n                <Layout style={{marginLeft: this.state.marginLeft, height: '100%'}}>\n\n                    <Header className={styles.Header}>\n                        <Icon\n                            className={styles.Trigger}\n                            type={this.state.collapsed ? 'menu-unfold' : 'menu-fold'}\n                            onClick={this.toggle}\n                        />\n                        <div className={styles.UserInfo}>\n                            {userInfo}\n                        </div>\n                    </Header>\n\n                    {/*HERE GOES ALL THE ROUTES*/}\n                    <Content style={{margin: 16, marginTop: 10, marginBottom: 0, height: '100%'}}>\n                        <Switch>\n                            <Route path={`${match.path}/assistants/:id/flow`} component={Flow}/>\n                            <Route path={`${match.path}/assistants/:id/integration`} component={Integration}/>\n                            <Route path={`${match.path}/assistants/:id/sessions`} component={Sessions}/>\n                            <Route path={`${match.path}/assistants/:id/solutions`} component={Solutions}/>\n                            <Route path={`${match.path}/assistants/:id/analytics`} component={Analytics}/>\n                            <Route path={`${match.path}/assistants`} component={Assistants} exact/>\n                            <Route path={`${match.path}/databases`} component={Databases} exact/>\n                            <Route path={`${match.path}/profile`} component={Profile} exact/>\n                            <Route path={`${match.path}/users-management`} component={UsersManagement} exact/>\n                            <Route path={`${match.path}/documentation`} component={Documentation} exact/>\n                            <Route path=\"/dashboard\" component={Home}/>\n                        </Switch>\n                    </Content>\n\n                    <Footer style={{textAlign: 'center', padding: 10}}>\n                        Copyright TheSearchBase Limited 2019. All rights reserved.\n                    </Footer>\n                </Layout>\n            </Layout>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        profile: state.profile.profile\n    };\n}\n\nexport default withRouter(connect(mapStateToProps)(Dashboard));","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport {authActions} from '../../store/actions/index';\nimport styles from './Login.module.less';\n\nimport {Button, Col, Form, Icon, Input, Row, Spin} from 'antd';\n\n\nconst FormItem = Form.Item;\nclass Login extends React.Component {\n\n    state = {\n        isLoggin: false\n    };\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                //this.setState({isLoggin: true});\n                console.log('Received values of form: ', values);\n                this.props.dispatch(authActions.login(values.email, values.password));\n            }\n        });\n    };\n\n    handleLogout = () => {\n        this.props.dispatch(authActions.logout());\n    };\n\n    render() {\n        const {getFieldDecorator} = this.props.form;\n        return (\n            <div className={styles.LoginBackground}>\n                <div className={[styles.LoginPanel, styles.fadeIn].join(' ')}>\n                    <Spin spinning={this.state.isLoggin}>\n                        <Row type=\"flex\" justify=\"center\">\n                            <Col>\n                                <h1>Login Page</h1>\n                            </Col>\n                        </Row>\n\n                        {/*<Row type=\"flex\" justify=\"center\">*/}\n                            {/*<Col>*/}\n                                {/*<img width={200}*/}\n                                     {/*src=\"https://42f2671d685f51e10fc6-b9fcecea3e50b3b59bdc28dead054ebc.ssl.cf5.rackcdn.com/illustrations/authentication_fsn5.svg\"*/}\n                                     {/*alt=\"\"/>*/}\n                            {/*</Col>*/}\n                        {/*</Row>*/}\n\n                        <br/>\n\n                        <Row type=\"flex\" justify=\"center\">\n                            <Col>\n                                <Form onSubmit={this.handleSubmit} layout={'horizontal'}>\n                                    <FormItem className={styles.LoginFormItem}>\n                                        {getFieldDecorator('email', {\n                                            rules: [{required: true, message: 'Please input your email!'}],\n                                        })(\n                                            <Input prefix={<Icon type=\"user\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                                                   placeholder=\"Email\"/>\n                                        )}\n                                    </FormItem>\n                                    <FormItem className={styles.LoginFormItem}>\n                                        {getFieldDecorator('password', {\n                                            rules: [{required: true, message: 'Please input your Password!'}],\n                                        })(\n                                            <Input prefix={<Icon type=\"lock\" style={{color: 'rgba(0,0,0,.25)'}}/>}\n                                                   type=\"password\"\n                                                   placeholder=\"Password\"/>\n                                        )}\n                                    </FormItem>\n                                </Form>\n                            </Col>\n                        </Row>\n\n                        <Row type=\"flex\" justify=\"center\" className={styles.LoginButton}>\n                            <Col span={12}>\n                                <Button type=\"primary\" htmlType=\"submit\"\n                                        style={{width: '100%'}}\n                                        onClick={this.handleSubmit}>\n                                    Log in\n                                </Button>\n                            </Col>\n                        </Row>\n                        <br/>\n\n                        <Row type=\"flex\" justify=\"center\">\n                            <Col>\n                                <a className=\"login-form-forgot\" href=\"account/resetpassword\">Forgot password?</a>\n                            </Col>\n                        </Row>\n\n\n                        <br/>\n                    </Spin>\n                </div>\n            </div>\n        );\n\n\n    }\n}\n\nfunction mapStateToProps(state) {\n    return {\n        isLoggingIn: state.auth.isLoggingIn\n    };\n}\n\nconst loginForm = Form.create()(Login);\nexport default connect(mapStateToProps)(loginForm);\n","import React, {Component} from 'react';\nimport {Redirect, Route, Switch, withRouter} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {history} from './helpers';\nimport {notification} from 'antd';\n\nimport {PrivateRoute} from './hoc';\nimport Dashboard from \"./application/Dashboard/Dashboard\";\nimport Login from './application/Login/Login'\n\nclass App extends Component {\n    constructor(props) {\n        super(props);\n        history.listen((location, action) => {\n            // Clear recent notifications boxes when route changes\n            notification.destroy();\n        });\n    }\n\n    render() {\n        return (\n            <Switch>\n                {/* <Route exact path=\"/\" component={Home} /> */}\n                <Route path=\"/login\" component={Login}/>\n                <PrivateRoute path=\"/dashboard\" component={Dashboard}/>\n                <Redirect to={{pathname: '/dashboard'}}/>\n            </Switch>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => {\n    const {alert} = state;\n    return {\n        alert,\n    };\n};\nexport default withRouter(connect(mapStateToProps)(App));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.less';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport {history} from './helpers'\nimport store from './store/store'\n\n\nconst app = (\n    <Provider store={store}>\n        <Router history={history} >\n            <App />\n        </Router>\n    </Provider>\n);\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Solutions_Logo__vxUai\",\"Trigger\":\"Solutions_Trigger__2LSyi\",\"Header\":\"Solutions_Header__cCswa\",\"Sider\":\"Solutions_Sider__cATdF\",\"Panel\":\"Solutions_Panel__3Em0T\",\"Panel_With_Header\":\"Solutions_Panel_With_Header__1ld8z\",\"Panel_Header\":\"Solutions_Panel_Header__3ncZT\",\"Panel_Body\":\"Solutions_Panel_Body__19X4S\",\"Panel_Body_Only\":\"Solutions_Panel_Body_Only__1ScF6\",\"Panel_Header_Button\":\"Solutions_Panel_Header_Button__11O6l\",\"groupsList\":\"Solutions_groupsList__12ORy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"SolutionsSettings_Logo__-M3TE\",\"Trigger\":\"SolutionsSettings_Trigger__2uKYf\",\"Header\":\"SolutionsSettings_Header__2u5U6\",\"Sider\":\"SolutionsSettings_Sider__8yC7m\",\"Panel\":\"SolutionsSettings_Panel__3JrMw\",\"Panel_With_Header\":\"SolutionsSettings_Panel_With_Header__3vCaR\",\"Panel_Header\":\"SolutionsSettings_Panel_Header__5GrWU\",\"Panel_Body\":\"SolutionsSettings_Panel_Body__rSfYL\",\"Panel_Body_Only\":\"SolutionsSettings_Panel_Body_Only__goB2o\",\"Panel_Header_Button\":\"SolutionsSettings_Panel_Header_Button__2xRGw\",\"Select\":\"SolutionsSettings_Select__1r6J2\",\"Input\":\"SolutionsSettings_Input__N3-xY\",\"Button\":\"SolutionsSettings_Button__MOWTM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Logo\":\"Analytics_Logo__1DvxC\",\"Trigger\":\"Analytics_Trigger__3VPvU\",\"Header\":\"Analytics_Header__Vn0lv\",\"Sider\":\"Analytics_Sider__3z_Dq\",\"Panel\":\"Analytics_Panel__24NY4\",\"Panel_With_Header\":\"Analytics_Panel_With_Header__1wLj9\",\"Panel_Header\":\"Analytics_Panel_Header__3vYeP\",\"Panel_Body\":\"Analytics_Panel_Body__3bpj7\",\"Panel_Body_Only\":\"Analytics_Panel_Body_Only__Fn9k-\",\"Panel_Header_Button\":\"Analytics_Panel_Header_Button__2g-DE\"};"],"sourceRoot":""}